
UV_LED_DRIVER_SW_STM32L051.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004efc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005298  08005298  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005298  08005298  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005298  08005298  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080052a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000007c  0800531c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  0800531c  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a35  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029d1  00000000  00000000  00031ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da0  00000000  00000000  000344b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  00035250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010f0c  00000000  00000000  00035e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dfe7  00000000  00000000  00046d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00057b44  00000000  00000000  00054d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac8bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031ac  00000000  00000000  000ac93c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004fa4 	.word	0x08004fa4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08004fa4 	.word	0x08004fa4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <EM_getSystemState>:
 *	@retval UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
										UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef 	EM_getSystemState()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	return eTheSystemState;
 8000224:	4b02      	ldr	r3, [pc, #8]	; (8000230 <EM_getSystemState+0x10>)
 8000226:	781b      	ldrb	r3, [r3, #0]
}
 8000228:	0018      	movs	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	20000000 	.word	0x20000000

08000234 <EM_ProcessEvent>:
											UVBOX_evLidClosed,
 *	@retval None
 *
 */
void EM_ProcessEvent(UVBOX_SystemEventsTypedef newEvent)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	701a      	strb	r2, [r3, #0]
	switch(eTheSystemState)
 8000240:	4b29      	ldr	r3, [pc, #164]	; (80002e8 <EM_ProcessEvent+0xb4>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b01      	cmp	r3, #1
 8000246:	d004      	beq.n	8000252 <EM_ProcessEvent+0x1e>
 8000248:	2b02      	cmp	r3, #2
 800024a:	d01c      	beq.n	8000286 <EM_ProcessEvent+0x52>
 800024c:	2b00      	cmp	r3, #0
 800024e:	d02d      	beq.n	80002ac <EM_ProcessEvent+0x78>

			break;
*/

	}
}
 8000250:	e045      	b.n	80002de <EM_ProcessEvent+0xaa>
			switch(newEvent)
 8000252:	1dfb      	adds	r3, r7, #7
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d002      	beq.n	8000260 <EM_ProcessEvent+0x2c>
 800025a:	2b02      	cmp	r3, #2
 800025c:	d007      	beq.n	800026e <EM_ProcessEvent+0x3a>
					break;
 800025e:	e011      	b.n	8000284 <EM_ProcessEvent+0x50>
					eTheSystemState = LM_DisableUVMode();	//UVBOX_TimerExpired
 8000260:	f000 f86e 	bl	8000340 <LM_DisableUVMode>
 8000264:	0003      	movs	r3, r0
 8000266:	001a      	movs	r2, r3
 8000268:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <EM_ProcessEvent+0xb4>)
 800026a:	701a      	strb	r2, [r3, #0]
					break;
 800026c:	e00a      	b.n	8000284 <EM_ProcessEvent+0x50>
					eTheSystemState = LM_DisableUVMode(0);	//UVBOX_TimerExpired
 800026e:	2000      	movs	r0, #0
 8000270:	f000 f866 	bl	8000340 <LM_DisableUVMode>
 8000274:	0003      	movs	r3, r0
 8000276:	001a      	movs	r2, r3
 8000278:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <EM_ProcessEvent+0xb4>)
 800027a:	701a      	strb	r2, [r3, #0]
					eTheSystemState = UVBOX_TimerReset;	//UVBOX_TimerReset
 800027c:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <EM_ProcessEvent+0xb4>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]
					break;
 8000282:	46c0      	nop			; (mov r8, r8)
		break;
 8000284:	e02b      	b.n	80002de <EM_ProcessEvent+0xaa>
		switch(newEvent)
 8000286:	1dfb      	adds	r3, r7, #7
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d002      	beq.n	8000294 <EM_ProcessEvent+0x60>
 800028e:	2b02      	cmp	r3, #2
 8000290:	d007      	beq.n	80002a2 <EM_ProcessEvent+0x6e>
				break;
 8000292:	e00a      	b.n	80002aa <EM_ProcessEvent+0x76>
				eTheSystemState = LM_DisableUVMode();	//UVBOX_TimerExpired
 8000294:	f000 f854 	bl	8000340 <LM_DisableUVMode>
 8000298:	0003      	movs	r3, r0
 800029a:	001a      	movs	r2, r3
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <EM_ProcessEvent+0xb4>)
 800029e:	701a      	strb	r2, [r3, #0]
				break;
 80002a0:	e003      	b.n	80002aa <EM_ProcessEvent+0x76>
				eTheSystemState = UVBOX_TimerReset;	//UVBOX_TimerReset
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <EM_ProcessEvent+0xb4>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]
				break;
 80002a8:	46c0      	nop			; (mov r8, r8)
		break;
 80002aa:	e018      	b.n	80002de <EM_ProcessEvent+0xaa>
		switch(newEvent)
 80002ac:	1dfb      	adds	r3, r7, #7
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d004      	beq.n	80002be <EM_ProcessEvent+0x8a>
 80002b4:	2b02      	cmp	r3, #2
 80002b6:	d010      	beq.n	80002da <EM_ProcessEvent+0xa6>
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d007      	beq.n	80002cc <EM_ProcessEvent+0x98>
		break;
 80002bc:	e00e      	b.n	80002dc <EM_ProcessEvent+0xa8>
				eTheSystemState = LM_DisableUVMode();	//UVBOX_TimerExpired
 80002be:	f000 f83f 	bl	8000340 <LM_DisableUVMode>
 80002c2:	0003      	movs	r3, r0
 80002c4:	001a      	movs	r2, r3
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <EM_ProcessEvent+0xb4>)
 80002c8:	701a      	strb	r2, [r3, #0]
				break;
 80002ca:	e007      	b.n	80002dc <EM_ProcessEvent+0xa8>
				eTheSystemState = LM_EnableUVMode();	//UVBOX_TimerRunning
 80002cc:	f000 f80e 	bl	80002ec <LM_EnableUVMode>
 80002d0:	0003      	movs	r3, r0
 80002d2:	001a      	movs	r2, r3
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <EM_ProcessEvent+0xb4>)
 80002d6:	701a      	strb	r2, [r3, #0]
				break;
 80002d8:	e000      	b.n	80002dc <EM_ProcessEvent+0xa8>
				break;
 80002da:	46c0      	nop			; (mov r8, r8)
		break;
 80002dc:	46c0      	nop			; (mov r8, r8)
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b002      	add	sp, #8
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	20000000 	.word	0x20000000

080002ec <LM_EnableUVMode>:
 *	@retval 	UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
											UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef LM_EnableUVMode()
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	LM_SetStatusLed(UVBOX_StatusLedGreen);
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 f951 	bl	8000598 <LM_SetStatusLed>

	UV_PWM_TIMER.Instance->CCR1 = MAX_UVLED_PWM_PERIOD;
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <LM_EnableUVMode+0x48>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	22a0      	movs	r2, #160	; 0xa0
 80002fc:	635a      	str	r2, [r3, #52]	; 0x34
	UV_PWM_TIMER.Instance->CCR2 = MAX_UVLED_PWM_PERIOD;
 80002fe:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <LM_EnableUVMode+0x48>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	22a0      	movs	r2, #160	; 0xa0
 8000304:	639a      	str	r2, [r3, #56]	; 0x38
	UV_PWM_TIMER.Instance->CCR3 = MAX_UVLED_PWM_PERIOD;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <LM_EnableUVMode+0x48>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	22a0      	movs	r2, #160	; 0xa0
 800030c:	63da      	str	r2, [r3, #60]	; 0x3c
	UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
 800030e:	4b09      	ldr	r3, [pc, #36]	; (8000334 <LM_EnableUVMode+0x48>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	22a0      	movs	r2, #160	; 0xa0
 8000314:	641a      	str	r2, [r3, #64]	; 0x40

	// save the user LED brightness setting
	previous_encoder_value = LED_PWM_TIMER.Instance->CCR1;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <LM_EnableUVMode+0x4c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <LM_EnableUVMode+0x50>)
 800031e:	601a      	str	r2, [r3, #0]
	LED_PWM_TIMER.Instance->CCR1 = 0;
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <LM_EnableUVMode+0x4c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2200      	movs	r2, #0
 8000326:	635a      	str	r2, [r3, #52]	; 0x34


	TM_StartTimer();
 8000328:	f000 f9ca 	bl	80006c0 <TM_StartTimer>

	return UVBOX_TimerRunning;
 800032c:	2301      	movs	r3, #1
}
 800032e:	0018      	movs	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	200001d4 	.word	0x200001d4
 8000338:	20000254 	.word	0x20000254
 800033c:	20000098 	.word	0x20000098

08000340 <LM_DisableUVMode>:
 *	@retval 	UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
											UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef LM_DisableUVMode()
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	//LM_SetStatusLed(UVBOX_StatusLedRed);  // not implemented in HW

	UV_PWM_TIMER.Instance->CCR1 = 0;
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <LM_DisableUVMode+0x48>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2200      	movs	r2, #0
 800034a:	635a      	str	r2, [r3, #52]	; 0x34
	UV_PWM_TIMER.Instance->CCR2 = 0;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <LM_DisableUVMode+0x48>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2200      	movs	r2, #0
 8000352:	639a      	str	r2, [r3, #56]	; 0x38
	UV_PWM_TIMER.Instance->CCR3 = 0;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <LM_DisableUVMode+0x48>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2200      	movs	r2, #0
 800035a:	63da      	str	r2, [r3, #60]	; 0x3c
	UV_PWM_TIMER.Instance->CCR4 = 0;
 800035c:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <LM_DisableUVMode+0x48>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2200      	movs	r2, #0
 8000362:	641a      	str	r2, [r3, #64]	; 0x40

	// restore the user LED brightness setting
	if(previous_encoder_value != 0)
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <LM_DisableUVMode+0x4c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d004      	beq.n	8000376 <LM_DisableUVMode+0x36>
		LED_PWM_TIMER.Instance->CCR1 = previous_encoder_value;
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <LM_DisableUVMode+0x50>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a06      	ldr	r2, [pc, #24]	; (800038c <LM_DisableUVMode+0x4c>)
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	635a      	str	r2, [r3, #52]	; 0x34

	TM_StopTimer();
 8000376:	f000 f9b9 	bl	80006ec <TM_StopTimer>
	TM_ResetTimer();
 800037a:	f000 f943 	bl	8000604 <TM_ResetTimer>

		return UVBOX_TimerExpired;
 800037e:	2302      	movs	r3, #2
}
 8000380:	0018      	movs	r0, r3
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	200001d4 	.word	0x200001d4
 800038c:	20000098 	.word	0x20000098
 8000390:	20000254 	.word	0x20000254

08000394 <_UpdateUvPwm>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void _UpdateUvPwm(UVBOX_EncoderDirTypeDef new_encoder_dir)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	0002      	movs	r2, r0
 800039c:	1dfb      	adds	r3, r7, #7
 800039e:	701a      	strb	r2, [r3, #0]
  	// encoder direction has changed from increasing to decreasing
	if( (RE_getPrevEncoderDir()) && (!new_encoder_dir) )
 80003a0:	f000 f916 	bl	80005d0 <RE_getPrevEncoderDir>
 80003a4:	1e03      	subs	r3, r0, #0
 80003a6:	d04e      	beq.n	8000446 <_UpdateUvPwm+0xb2>
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d14a      	bne.n	8000446 <_UpdateUvPwm+0xb2>
	{
		UV_PWM_TIMER.Instance->CCR1 -= ENCODER_STEP;
 80003b0:	4b50      	ldr	r3, [pc, #320]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003b6:	4b4f      	ldr	r3, [pc, #316]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	3a80      	subs	r2, #128	; 0x80
 80003bc:	635a      	str	r2, [r3, #52]	; 0x34
		UV_PWM_TIMER.Instance->CCR2 -= ENCODER_STEP;
 80003be:	4b4d      	ldr	r3, [pc, #308]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80003c4:	4b4b      	ldr	r3, [pc, #300]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	3a80      	subs	r2, #128	; 0x80
 80003ca:	639a      	str	r2, [r3, #56]	; 0x38
		UV_PWM_TIMER.Instance->CCR3 -= ENCODER_STEP;
 80003cc:	4b49      	ldr	r3, [pc, #292]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003d2:	4b48      	ldr	r3, [pc, #288]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	3a80      	subs	r2, #128	; 0x80
 80003d8:	63da      	str	r2, [r3, #60]	; 0x3c
		UV_PWM_TIMER.Instance->CCR4 -= ENCODER_STEP;
 80003da:	4b46      	ldr	r3, [pc, #280]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003e0:	4b44      	ldr	r3, [pc, #272]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3a80      	subs	r2, #128	; 0x80
 80003e6:	641a      	str	r2, [r3, #64]	; 0x40

		// clamp lower range integer overflow to
		// MAX_UVLED_PWM_PERIOD+1
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD+1) ||
 80003e8:	4b42      	ldr	r3, [pc, #264]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ee:	2ba1      	cmp	r3, #161	; 0xa1
 80003f0:	d80e      	bhi.n	8000410 <_UpdateUvPwm+0x7c>
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD+1)	||
 80003f2:	4b40      	ldr	r3, [pc, #256]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD+1) ||
 80003f8:	2ba1      	cmp	r3, #161	; 0xa1
 80003fa:	d809      	bhi.n	8000410 <_UpdateUvPwm+0x7c>
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD+1) ||
 80003fc:	4b3d      	ldr	r3, [pc, #244]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD+1)	||
 8000402:	2ba1      	cmp	r3, #161	; 0xa1
 8000404:	d804      	bhi.n	8000410 <_UpdateUvPwm+0x7c>
			(UV_PWM_TIMER.Instance->CCR4 > MAX_UVLED_PWM_PERIOD+1)
 8000406:	4b3b      	ldr	r3, [pc, #236]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD+1) ||
 800040c:	2ba1      	cmp	r3, #161	; 0xa1
 800040e:	d90f      	bls.n	8000430 <_UpdateUvPwm+0x9c>
			)
		{
			UV_PWM_TIMER.Instance->CCR1 = 0;
 8000410:	4b38      	ldr	r3, [pc, #224]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2200      	movs	r2, #0
 8000416:	635a      	str	r2, [r3, #52]	; 0x34
			UV_PWM_TIMER.Instance->CCR2 = 0;
 8000418:	4b36      	ldr	r3, [pc, #216]	; (80004f4 <_UpdateUvPwm+0x160>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2200      	movs	r2, #0
 800041e:	639a      	str	r2, [r3, #56]	; 0x38
			UV_PWM_TIMER.Instance->CCR3 = 0;
 8000420:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2200      	movs	r2, #0
 8000426:	63da      	str	r2, [r3, #60]	; 0x3c
			UV_PWM_TIMER.Instance->CCR4 = 0;
 8000428:	4b32      	ldr	r3, [pc, #200]	; (80004f4 <_UpdateUvPwm+0x160>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2200      	movs	r2, #0
 800042e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
 8000430:	4b31      	ldr	r3, [pc, #196]	; (80004f8 <_UpdateUvPwm+0x164>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2210      	movs	r2, #16
 800043a:	4013      	ands	r3, r2
 800043c:	b2db      	uxtb	r3, r3
 800043e:	0018      	movs	r0, r3
 8000440:	f000 f8d0 	bl	80005e4 <RE_setPrevEncoderDir>
			UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
		}

		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
	}
}
 8000444:	e051      	b.n	80004ea <_UpdateUvPwm+0x156>
	else if( (!RE_getPrevEncoderDir()) && (new_encoder_dir) )
 8000446:	f000 f8c3 	bl	80005d0 <RE_getPrevEncoderDir>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d14d      	bne.n	80004ea <_UpdateUvPwm+0x156>
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d049      	beq.n	80004ea <_UpdateUvPwm+0x156>
		UV_PWM_TIMER.Instance->CCR1 += ENCODER_STEP;
 8000456:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800045c:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <_UpdateUvPwm+0x160>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	3280      	adds	r2, #128	; 0x80
 8000462:	635a      	str	r2, [r3, #52]	; 0x34
		UV_PWM_TIMER.Instance->CCR2 += ENCODER_STEP;
 8000464:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800046a:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <_UpdateUvPwm+0x160>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	3280      	adds	r2, #128	; 0x80
 8000470:	639a      	str	r2, [r3, #56]	; 0x38
		UV_PWM_TIMER.Instance->CCR3 += ENCODER_STEP;
 8000472:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <_UpdateUvPwm+0x160>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	3280      	adds	r2, #128	; 0x80
 800047e:	63da      	str	r2, [r3, #60]	; 0x3c
		UV_PWM_TIMER.Instance->CCR4 += ENCODER_STEP;
 8000480:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000486:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	3280      	adds	r2, #128	; 0x80
 800048c:	641a      	str	r2, [r3, #64]	; 0x40
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD) ||
 800048e:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000494:	2ba0      	cmp	r3, #160	; 0xa0
 8000496:	d80e      	bhi.n	80004b6 <_UpdateUvPwm+0x122>
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD)	||
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <_UpdateUvPwm+0x160>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD) ||
 800049e:	2ba0      	cmp	r3, #160	; 0xa0
 80004a0:	d809      	bhi.n	80004b6 <_UpdateUvPwm+0x122>
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD) ||
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <_UpdateUvPwm+0x160>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD)	||
 80004a8:	2ba0      	cmp	r3, #160	; 0xa0
 80004aa:	d804      	bhi.n	80004b6 <_UpdateUvPwm+0x122>
			(UV_PWM_TIMER.Instance->CCR4 > MAX_UVLED_PWM_PERIOD)
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <_UpdateUvPwm+0x160>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD) ||
 80004b2:	2ba0      	cmp	r3, #160	; 0xa0
 80004b4:	d90f      	bls.n	80004d6 <_UpdateUvPwm+0x142>
			UV_PWM_TIMER.Instance->CCR1 = MAX_UVLED_PWM_PERIOD;
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <_UpdateUvPwm+0x160>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	22a0      	movs	r2, #160	; 0xa0
 80004bc:	635a      	str	r2, [r3, #52]	; 0x34
			UV_PWM_TIMER.Instance->CCR2 = MAX_UVLED_PWM_PERIOD;
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <_UpdateUvPwm+0x160>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	22a0      	movs	r2, #160	; 0xa0
 80004c4:	639a      	str	r2, [r3, #56]	; 0x38
			UV_PWM_TIMER.Instance->CCR3 = MAX_UVLED_PWM_PERIOD;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <_UpdateUvPwm+0x160>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	22a0      	movs	r2, #160	; 0xa0
 80004cc:	63da      	str	r2, [r3, #60]	; 0x3c
			UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <_UpdateUvPwm+0x160>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	22a0      	movs	r2, #160	; 0xa0
 80004d4:	641a      	str	r2, [r3, #64]	; 0x40
		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <_UpdateUvPwm+0x164>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	2210      	movs	r2, #16
 80004e0:	4013      	ands	r3, r2
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 f87d 	bl	80005e4 <RE_setPrevEncoderDir>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	200001d4 	.word	0x200001d4
 80004f8:	20000214 	.word	0x20000214

080004fc <_UpdateLedPwm>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void _UpdateLedPwm(UVBOX_EncoderDirTypeDef new_encoder_dir)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	0002      	movs	r2, r0
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	701a      	strb	r2, [r3, #0]

	uint8_t encoder_dir = ((ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR);
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <_UpdateLedPwm+0x54>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2210      	movs	r2, #16
 8000510:	4013      	ands	r3, r2
 8000512:	3b10      	subs	r3, #16
 8000514:	425a      	negs	r2, r3
 8000516:	4153      	adcs	r3, r2
 8000518:	b2da      	uxtb	r2, r3
 800051a:	210f      	movs	r1, #15
 800051c:	187b      	adds	r3, r7, r1
 800051e:	701a      	strb	r2, [r3, #0]
	if(encoder_dir)
 8000520:	187b      	adds	r3, r7, r1
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d007      	beq.n	8000538 <_UpdateLedPwm+0x3c>
	{
		LED_PWM_TIMER.Instance->CCR1 -= ENCODER_STEP;
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <_UpdateLedPwm+0x58>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <_UpdateLedPwm+0x58>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3a80      	subs	r2, #128	; 0x80
 8000534:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		LED_PWM_TIMER.Instance->CCR1 += ENCODER_STEP;
	}
}
 8000536:	e006      	b.n	8000546 <_UpdateLedPwm+0x4a>
		LED_PWM_TIMER.Instance->CCR1 += ENCODER_STEP;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <_UpdateLedPwm+0x58>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <_UpdateLedPwm+0x58>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3280      	adds	r2, #128	; 0x80
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b004      	add	sp, #16
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	20000214 	.word	0x20000214
 8000554:	20000254 	.word	0x20000254

08000558 <LM_UpdatePwm>:
 *	@param 		None
 *	@retval 	None
 *
 */
void LM_UpdatePwm()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	if(EM_getSystemState())
 800055c:	f7ff fe60 	bl	8000220 <EM_getSystemState>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d00a      	beq.n	800057a <LM_UpdatePwm+0x22>
	{
	  	_UpdateUvPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <LM_UpdatePwm+0x3c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2210      	movs	r2, #16
 800056e:	4013      	ands	r3, r2
 8000570:	b2db      	uxtb	r3, r3
 8000572:	0018      	movs	r0, r3
 8000574:	f7ff ff0e 	bl	8000394 <_UpdateUvPwm>
	}
	else
	{
		_UpdateLedPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
	}
}
 8000578:	e009      	b.n	800058e <LM_UpdatePwm+0x36>
		_UpdateLedPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <LM_UpdatePwm+0x3c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2210      	movs	r2, #16
 8000584:	4013      	ands	r3, r2
 8000586:	b2db      	uxtb	r3, r3
 8000588:	0018      	movs	r0, r3
 800058a:	f7ff ffb7 	bl	80004fc <_UpdateLedPwm>
}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000214 	.word	0x20000214

08000598 <LM_SetStatusLed>:
											UVBOX_StatusLedBlue
 *	@retval 	None
 *
 */
void LM_SetStatusLed(UVBOX_StatusLedTypeDef new_status)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	0002      	movs	r2, r0
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, STATUS_RED_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, STATUS_BLUE_Pin, GPIO_PIN_RESET);
		break;
	}
*/
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b002      	add	sp, #8
 80005aa:	bd80      	pop	{r7, pc}

080005ac <RE_Setup>:
 *	@param 	None
 *	@retval None
 *
 */
void RE_Setup()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&ROTARY_ENCODER, TIM_CHANNEL_ALL);
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <RE_Setup+0x1c>)
 80005b2:	213c      	movs	r1, #60	; 0x3c
 80005b4:	0018      	movs	r0, r3
 80005b6:	f002 fa69 	bl	8002a8c <HAL_TIM_Encoder_Start_IT>
	ROTARY_ENCODER.Instance->CNT = 32767;
 80005ba:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <RE_Setup+0x1c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a03      	ldr	r2, [pc, #12]	; (80005cc <RE_Setup+0x20>)
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000214 	.word	0x20000214
 80005cc:	00007fff 	.word	0x00007fff

080005d0 <RE_getPrevEncoderDir>:
 *	@retval 	UVBOX_EncoderDirTypeDef - 	UVBOX_ENCODER_DOWN = 0x0,
											UVBOX_ENCODER_UP
 *
 */
UVBOX_EncoderDirTypeDef RE_getPrevEncoderDir()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	return previous_encoder_dir;
 80005d4:	4b02      	ldr	r3, [pc, #8]	; (80005e0 <RE_getPrevEncoderDir+0x10>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
}
 80005d8:	0018      	movs	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	200000ac 	.word	0x200000ac

080005e4 <RE_setPrevEncoderDir>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void RE_setPrevEncoderDir(UVBOX_EncoderDirTypeDef direction)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	0002      	movs	r2, r0
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	701a      	strb	r2, [r3, #0]
	previous_encoder_dir = direction;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <RE_setPrevEncoderDir+0x1c>)
 80005f2:	1dfa      	adds	r2, r7, #7
 80005f4:	7812      	ldrb	r2, [r2, #0]
 80005f6:	701a      	strb	r2, [r3, #0]
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000ac 	.word	0x200000ac

08000604 <TM_ResetTimer>:
#define DEFAULT_TIMEOUT 10
uint16_t user_defined_timeout = DEFAULT_TIMEOUT;		// seconds
uint16_t timer_count = DEFAULT_TIMEOUT;

void TM_ResetTimer()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	timer_count = DEFAULT_TIMEOUT;
 8000608:	4b02      	ldr	r3, [pc, #8]	; (8000614 <TM_ResetTimer+0x10>)
 800060a:	220a      	movs	r2, #10
 800060c:	801a      	strh	r2, [r3, #0]
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000004 	.word	0x20000004

08000618 <TM_UserIncrementTimer>:

void TM_UserIncrementTimer()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	user_defined_timeout += 10;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <TM_UserIncrementTimer+0x24>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	330a      	adds	r3, #10
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <TM_UserIncrementTimer+0x24>)
 8000626:	801a      	strh	r2, [r3, #0]
	timer_count += 10;
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <TM_UserIncrementTimer+0x28>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	330a      	adds	r3, #10
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <TM_UserIncrementTimer+0x28>)
 8000632:	801a      	strh	r2, [r3, #0]
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	20000002 	.word	0x20000002
 8000640:	20000004 	.word	0x20000004

08000644 <TM_UserDecrementTimer>:

void TM_UserDecrementTimer()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	user_defined_timeout -= 10;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <TM_UserDecrementTimer+0x24>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	3b0a      	subs	r3, #10
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <TM_UserDecrementTimer+0x24>)
 8000652:	801a      	strh	r2, [r3, #0]
	timer_count -= 10;
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <TM_UserDecrementTimer+0x28>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	3b0a      	subs	r3, #10
 800065a:	b29a      	uxth	r2, r3
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <TM_UserDecrementTimer+0x28>)
 800065e:	801a      	strh	r2, [r3, #0]
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	20000002 	.word	0x20000002
 800066c:	20000004 	.word	0x20000004

08000670 <TM_DecrementTimer>:


void TM_DecrementTimer()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	timer_count--;
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <TM_DecrementTimer+0x1c>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	3b01      	subs	r3, #1
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <TM_DecrementTimer+0x1c>)
 800067e:	801a      	strh	r2, [r3, #0]

	TM_CheckTimer();
 8000680:	f000 f810 	bl	80006a4 <TM_CheckTimer>
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	20000004 	.word	0x20000004

08000690 <TM_GetTimerCount>:

uint16_t TM_GetTimerCount()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	return timer_count;
 8000694:	4b02      	ldr	r3, [pc, #8]	; (80006a0 <TM_GetTimerCount+0x10>)
 8000696:	881b      	ldrh	r3, [r3, #0]
}
 8000698:	0018      	movs	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	20000004 	.word	0x20000004

080006a4 <TM_CheckTimer>:

void TM_CheckTimer()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	if(timer_count == 0)
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <TM_CheckTimer+0x18>)
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d102      	bne.n	80006b6 <TM_CheckTimer+0x12>
	{
		EM_ProcessEvent(UVBOX_evStopTimer);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff fdbf 	bl	8000234 <EM_ProcessEvent>





}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000004 	.word	0x20000004

080006c0 <TM_StartTimer>:

void TM_StartTimer()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	EXPOSE_TIMER.Instance->SR &= ~(TIM_SR_UIF);	// reset
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <TM_StartTimer+0x28>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	691a      	ldr	r2, [r3, #16]
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <TM_StartTimer+0x28>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2101      	movs	r1, #1
 80006d0:	438a      	bics	r2, r1
 80006d2:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&EXPOSE_TIMER);
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <TM_StartTimer+0x28>)
 80006d6:	0018      	movs	r0, r3
 80006d8:	f002 f880 	bl	80027dc <HAL_TIM_Base_Start_IT>
	UM_DisplayRunningMsg();
 80006dc:	f000 f814 	bl	8000708 <UM_DisplayRunningMsg>
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	20000194 	.word	0x20000194

080006ec <TM_StopTimer>:

void TM_StopTimer()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&EXPOSE_TIMER);
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <TM_StopTimer+0x18>)
 80006f2:	0018      	movs	r0, r3
 80006f4:	f002 f894 	bl	8002820 <HAL_TIM_Base_Stop_IT>
	UM_DisplayExpiredMsg();
 80006f8:	f000 f81e 	bl	8000738 <UM_DisplayExpiredMsg>
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000194 	.word	0x20000194

08000708 <UM_DisplayRunningMsg>:
//UVBOX_LidStatusTypedef eLidStatus = UVBOX_LIDOPEN;
uint16_t debounce_last_interrupt_time = 0;


void UM_DisplayRunningMsg()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 800070e:	2000      	movs	r0, #0
 8000710:	f003 faf8 	bl	8003d04 <ILI9341_Fill_Screen>
	ILI9341_Draw_Text("RUNNING", 10, 120, RUNTEXT, 7, BGCOLOUR);
 8000714:	4a06      	ldr	r2, [pc, #24]	; (8000730 <UM_DisplayRunningMsg+0x28>)
 8000716:	4807      	ldr	r0, [pc, #28]	; (8000734 <UM_DisplayRunningMsg+0x2c>)
 8000718:	2300      	movs	r3, #0
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	2307      	movs	r3, #7
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	0013      	movs	r3, r2
 8000722:	2278      	movs	r2, #120	; 0x78
 8000724:	210a      	movs	r1, #10
 8000726:	f003 f873 	bl	8003810 <ILI9341_Draw_Text>
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	000014a2 	.word	0x000014a2
 8000734:	08004fbc 	.word	0x08004fbc

08000738 <UM_DisplayExpiredMsg>:

void UM_DisplayExpiredMsg()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 800073e:	2000      	movs	r0, #0
 8000740:	f003 fae0 	bl	8003d04 <ILI9341_Fill_Screen>
	ILI9341_Draw_Text("STOPPED", 10, 120, STOPTEXT, 7, BGCOLOUR);
 8000744:	4a11      	ldr	r2, [pc, #68]	; (800078c <UM_DisplayExpiredMsg+0x54>)
 8000746:	4812      	ldr	r0, [pc, #72]	; (8000790 <UM_DisplayExpiredMsg+0x58>)
 8000748:	2300      	movs	r3, #0
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	2307      	movs	r3, #7
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	0013      	movs	r3, r2
 8000752:	2278      	movs	r2, #120	; 0x78
 8000754:	210a      	movs	r1, #10
 8000756:	f003 f85b 	bl	8003810 <ILI9341_Draw_Text>
	BUZZER_PWM.Instance->CCR1 = 127;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <UM_DisplayExpiredMsg+0x5c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	227f      	movs	r2, #127	; 0x7f
 8000760:	635a      	str	r2, [r3, #52]	; 0x34
	BUZZER_PWM.Instance->PSC = 32768;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <UM_DisplayExpiredMsg+0x5c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	0212      	lsls	r2, r2, #8
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(3000);
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <UM_DisplayExpiredMsg+0x60>)
 800076e:	0018      	movs	r0, r3
 8000770:	f001 f82e 	bl	80017d0 <HAL_Delay>
	BUZZER_PWM.Instance->CCR1 = 0;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <UM_DisplayExpiredMsg+0x5c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2200      	movs	r2, #0
 800077a:	635a      	str	r2, [r3, #52]	; 0x34
	BUZZER_PWM.Instance->PSC = 0;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <UM_DisplayExpiredMsg+0x5c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2200      	movs	r2, #0
 8000782:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	0000d8c3 	.word	0x0000d8c3
 8000790:	08004fc4 	.word	0x08004fc4
 8000794:	20000154 	.word	0x20000154
 8000798:	00000bb8 	.word	0x00000bb8

0800079c <UM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void UM_UpdateDisplay()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af02      	add	r7, sp, #8
	UM_DisplayAsMinutesAndSeconds(TM_GetTimerCount());
 80007a2:	f7ff ff75 	bl	8000690 <TM_GetTimerCount>
 80007a6:	0003      	movs	r3, r0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 f81d 	bl	80007e8 <UM_DisplayAsMinutesAndSeconds>

	char enc_cnt[20];
	snprintf(enc_cnt, sizeof(enc_cnt), "%lu", LED_PWM_TIMER.Instance->CCR1);
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <UM_UpdateDisplay+0x40>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007b4:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <UM_UpdateDisplay+0x44>)
 80007b6:	1d38      	adds	r0, r7, #4
 80007b8:	2114      	movs	r1, #20
 80007ba:	f003 ffd9 	bl	8004770 <sniprintf>
	ILI9341_Draw_Text(enc_cnt, 10, 200, WHITE, 2, BLACK);
 80007be:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <UM_UpdateDisplay+0x48>)
 80007c0:	1d38      	adds	r0, r7, #4
 80007c2:	2300      	movs	r3, #0
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	2302      	movs	r3, #2
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	0013      	movs	r3, r2
 80007cc:	22c8      	movs	r2, #200	; 0xc8
 80007ce:	210a      	movs	r1, #10
 80007d0:	f003 f81e 	bl	8003810 <ILI9341_Draw_Text>


}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b006      	add	sp, #24
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000254 	.word	0x20000254
 80007e0:	08004fcc 	.word	0x08004fcc
 80007e4:	0000ffff 	.word	0x0000ffff

080007e8 <UM_DisplayAsMinutesAndSeconds>:
 *	@param pSeconds
 *	@retval None
 *
 */
void UM_DisplayAsMinutesAndSeconds(uint16_t pSeconds)
{
 80007e8:	b5b0      	push	{r4, r5, r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af02      	add	r7, sp, #8
 80007ee:	0002      	movs	r2, r0
 80007f0:	1dbb      	adds	r3, r7, #6
 80007f2:	801a      	strh	r2, [r3, #0]
	uint8_t minutes = 0;
 80007f4:	2427      	movs	r4, #39	; 0x27
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
	uint8_t seconds = 0;
 80007fc:	2526      	movs	r5, #38	; 0x26
 80007fe:	197b      	adds	r3, r7, r5
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]

	minutes = pSeconds / 60;
 8000804:	1dbb      	adds	r3, r7, #6
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	213c      	movs	r1, #60	; 0x3c
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff fc7c 	bl	8000108 <__udivsi3>
 8000810:	0003      	movs	r3, r0
 8000812:	b29a      	uxth	r2, r3
 8000814:	193b      	adds	r3, r7, r4
 8000816:	701a      	strb	r2, [r3, #0]
	seconds = pSeconds % 60;
 8000818:	1dbb      	adds	r3, r7, #6
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	213c      	movs	r1, #60	; 0x3c
 800081e:	0018      	movs	r0, r3
 8000820:	f7ff fcf8 	bl	8000214 <__aeabi_uidivmod>
 8000824:	000b      	movs	r3, r1
 8000826:	b29a      	uxth	r2, r3
 8000828:	197b      	adds	r3, r7, r5
 800082a:	701a      	strb	r2, [r3, #0]

	char timer_count[30];
	snprintf(timer_count, sizeof(timer_count), "%02d:%02d", minutes, seconds);
 800082c:	193b      	adds	r3, r7, r4
 800082e:	7819      	ldrb	r1, [r3, #0]
 8000830:	197b      	adds	r3, r7, r5
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <UM_DisplayAsMinutesAndSeconds+0x7c>)
 8000836:	2408      	movs	r4, #8
 8000838:	1938      	adds	r0, r7, r4
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	000b      	movs	r3, r1
 800083e:	211e      	movs	r1, #30
 8000840:	f003 ff96 	bl	8004770 <sniprintf>
	ILI9341_Draw_Text(timer_count, 30, 50, TIMETEXT, 9, BGCOLOUR);
 8000844:	4a08      	ldr	r2, [pc, #32]	; (8000868 <UM_DisplayAsMinutesAndSeconds+0x80>)
 8000846:	1938      	adds	r0, r7, r4
 8000848:	2300      	movs	r3, #0
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	2309      	movs	r3, #9
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	0013      	movs	r3, r2
 8000852:	2232      	movs	r2, #50	; 0x32
 8000854:	211e      	movs	r1, #30
 8000856:	f002 ffdb 	bl	8003810 <ILI9341_Draw_Text>
}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b00a      	add	sp, #40	; 0x28
 8000860:	bdb0      	pop	{r4, r5, r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	08004fd0 	.word	0x08004fd0
 8000868:	000002fd 	.word	0x000002fd

0800086c <UM_Setup>:
 *	@param None
 *	@retval None
 *
 */
void UM_Setup()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af02      	add	r7, sp, #8
	  // enable TFT ILI9341 driver
	  ILI9341_Init();
 8000872:	f003 f83e 	bl	80038f2 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000876:	2001      	movs	r0, #1
 8000878:	f003 fce0 	bl	800423c <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(BLACK);
 800087c:	2000      	movs	r0, #0
 800087e:	f003 fa41 	bl	8003d04 <ILI9341_Fill_Screen>
	  ILI9341_Draw_Text("INITIALISING...", 10, 10, SYSTEXT, 1, BGCOLOUR);
 8000882:	4a35      	ldr	r2, [pc, #212]	; (8000958 <UM_Setup+0xec>)
 8000884:	4835      	ldr	r0, [pc, #212]	; (800095c <UM_Setup+0xf0>)
 8000886:	2300      	movs	r3, #0
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	2301      	movs	r3, #1
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	0013      	movs	r3, r2
 8000890:	220a      	movs	r2, #10
 8000892:	210a      	movs	r1, #10
 8000894:	f002 ffbc 	bl	8003810 <ILI9341_Draw_Text>

	  // PWM OUTPUTS

	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_1 );
 8000898:	4b31      	ldr	r3, [pc, #196]	; (8000960 <UM_Setup+0xf4>)
 800089a:	2100      	movs	r1, #0
 800089c:	0018      	movs	r0, r3
 800089e:	f002 f815 	bl	80028cc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_2 );
 80008a2:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <UM_Setup+0xf4>)
 80008a4:	2104      	movs	r1, #4
 80008a6:	0018      	movs	r0, r3
 80008a8:	f002 f810 	bl	80028cc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_3 );
 80008ac:	4b2c      	ldr	r3, [pc, #176]	; (8000960 <UM_Setup+0xf4>)
 80008ae:	2108      	movs	r1, #8
 80008b0:	0018      	movs	r0, r3
 80008b2:	f002 f80b 	bl	80028cc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_4 );
 80008b6:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <UM_Setup+0xf4>)
 80008b8:	210c      	movs	r1, #12
 80008ba:	0018      	movs	r0, r3
 80008bc:	f002 f806 	bl	80028cc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &LED_PWM_TIMER, TIM_CHANNEL_1 );
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <UM_Setup+0xf8>)
 80008c2:	2100      	movs	r1, #0
 80008c4:	0018      	movs	r0, r3
 80008c6:	f002 f801 	bl	80028cc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &BUZZER_PWM, TIM_CHANNEL_1);
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <UM_Setup+0xfc>)
 80008cc:	2100      	movs	r1, #0
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 fffc 	bl	80028cc <HAL_TIM_PWM_Start>

	  UV_PWM_TIMER.Instance->ARR	= 0xFF;		// 	255
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <UM_Setup+0xf4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	22ff      	movs	r2, #255	; 0xff
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
	  UV_PWM_TIMER.Instance->CCR1 	= 0x00;
 80008dc:	4b20      	ldr	r3, [pc, #128]	; (8000960 <UM_Setup+0xf4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2200      	movs	r2, #0
 80008e2:	635a      	str	r2, [r3, #52]	; 0x34
	  UV_PWM_TIMER.Instance->CCR2 	= 0x00;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <UM_Setup+0xf4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2200      	movs	r2, #0
 80008ea:	639a      	str	r2, [r3, #56]	; 0x38
	  UV_PWM_TIMER.Instance->CCR3 	= 0x00;
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <UM_Setup+0xf4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	63da      	str	r2, [r3, #60]	; 0x3c
	  UV_PWM_TIMER.Instance->CCR4 	= 0x00;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <UM_Setup+0xf4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2200      	movs	r2, #0
 80008fa:	641a      	str	r2, [r3, #64]	; 0x40

	  LED_PWM_TIMER.Instance->ARR  	= 0xFFFF;	// Set to full scale resolution
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <UM_Setup+0xf8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a15      	ldr	r2, [pc, #84]	; (8000958 <UM_Setup+0xec>)
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
	  LED_PWM_TIMER.Instance->CCR1 	= 0x80FF;	// Set PWM to ~50%
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <UM_Setup+0xf8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a18      	ldr	r2, [pc, #96]	; (800096c <UM_Setup+0x100>)
 800090a:	635a      	str	r2, [r3, #52]	; 0x34

	  BUZZER_PWM.Instance->ARR = 0xFF;
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <UM_Setup+0xfc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	22ff      	movs	r2, #255	; 0xff
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
	  BUZZER_PWM.Instance->CCR1 = 0;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <UM_Setup+0xfc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2200      	movs	r2, #0
 800091a:	635a      	str	r2, [r3, #52]	; 0x34
	  BUZZER_PWM.Instance->PSC = 0;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <UM_Setup+0xfc>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	; 0x28

	  // debounce timer
	  HAL_TIM_Base_Start( &DEBOUNCE_TIMER );
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <UM_Setup+0x104>)
 8000926:	0018      	movs	r0, r3
 8000928:	f001 ff36 	bl	8002798 <HAL_TIM_Base_Start>

	  // status output LED
	  LM_SetStatusLed(UVBOX_StatusLedBlue);
 800092c:	2002      	movs	r0, #2
 800092e:	f7ff fe33 	bl	8000598 <LM_SetStatusLed>

	  // rotary encoder
	  RE_Setup();
 8000932:	f7ff fe3b 	bl	80005ac <RE_Setup>


	  HAL_Delay(100);
 8000936:	2064      	movs	r0, #100	; 0x64
 8000938:	f000 ff4a 	bl	80017d0 <HAL_Delay>
	  ILI9341_Draw_Text("READY!", 100, 10, SYSTEXT, 1, BGCOLOUR);
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <UM_Setup+0xec>)
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <UM_Setup+0x108>)
 8000940:	2300      	movs	r3, #0
 8000942:	9301      	str	r3, [sp, #4]
 8000944:	2301      	movs	r3, #1
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	0013      	movs	r3, r2
 800094a:	220a      	movs	r2, #10
 800094c:	2164      	movs	r1, #100	; 0x64
 800094e:	f002 ff5f 	bl	8003810 <ILI9341_Draw_Text>



}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	0000ffff 	.word	0x0000ffff
 800095c:	08004fdc 	.word	0x08004fdc
 8000960:	200001d4 	.word	0x200001d4
 8000964:	20000254 	.word	0x20000254
 8000968:	20000154 	.word	0x20000154
 800096c:	000080ff 	.word	0x000080ff
 8000970:	20000114 	.word	0x20000114
 8000974:	08004fec 	.word	0x08004fec

08000978 <UM_EXTI0_1_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void UM_EXTI0_1_IRQHandler()
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
	uint16_t debounce_interrupt_time = DEBOUNCE_TIMER.Instance->CNT;
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <UM_EXTI0_1_IRQHandler+0x5c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000984:	1dbb      	adds	r3, r7, #6
 8000986:	801a      	strh	r2, [r3, #0]
	if ((debounce_interrupt_time - UM_getLastDebounceTime()) > MAX_DEBOUNCE_DELAY)
 8000988:	1dbb      	adds	r3, r7, #6
 800098a:	881c      	ldrh	r4, [r3, #0]
 800098c:	f000 f836 	bl	80009fc <UM_getLastDebounceTime>
 8000990:	0003      	movs	r3, r0
 8000992:	1ae3      	subs	r3, r4, r3
 8000994:	2baf      	cmp	r3, #175	; 0xaf
 8000996:	dd14      	ble.n	80009c2 <UM_EXTI0_1_IRQHandler+0x4a>
	{
		if(EM_getSystemState())	// LID CLOSED
 8000998:	f7ff fc42 	bl	8000220 <EM_getSystemState>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d110      	bne.n	80009c2 <UM_EXTI0_1_IRQHandler+0x4a>
			//EM_ProcessEvent(UVBOX_evLidOpened);
		}
		else
		{

			if( (EXTI->PR & EXTI_PR_PR0) == EXTI_PR_PR0)
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <UM_EXTI0_1_IRQHandler+0x60>)
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	2201      	movs	r2, #1
 80009a6:	4013      	ands	r3, r2
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d102      	bne.n	80009b2 <UM_EXTI0_1_IRQHandler+0x3a>
			{
				TM_UserDecrementTimer();
 80009ac:	f7ff fe4a 	bl	8000644 <TM_UserDecrementTimer>
 80009b0:	e007      	b.n	80009c2 <UM_EXTI0_1_IRQHandler+0x4a>
			}
			else if( (EXTI->PR & EXTI_PR_PR1) == EXTI_PR_PR1)
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <UM_EXTI0_1_IRQHandler+0x60>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	2202      	movs	r2, #2
 80009b8:	4013      	ands	r3, r2
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d101      	bne.n	80009c2 <UM_EXTI0_1_IRQHandler+0x4a>
			{
				TM_UserIncrementTimer();
 80009be:	f7ff fe2b 	bl	8000618 <TM_UserIncrementTimer>
			}

		}
	}
	UM_SetLastDebounceTime(debounce_interrupt_time);
 80009c2:	1dbb      	adds	r3, r7, #6
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 f808 	bl	80009dc <UM_SetLastDebounceTime>


}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b003      	add	sp, #12
 80009d2:	bd90      	pop	{r4, r7, pc}
 80009d4:	20000114 	.word	0x20000114
 80009d8:	40010400 	.word	0x40010400

080009dc <UM_SetLastDebounceTime>:
 *	@param pDebounceTime
 *	@retval None
 *
 */
void UM_SetLastDebounceTime(uint16_t pDebounceTime)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	0002      	movs	r2, r0
 80009e4:	1dbb      	adds	r3, r7, #6
 80009e6:	801a      	strh	r2, [r3, #0]
	debounce_last_interrupt_time = pDebounceTime;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <UM_SetLastDebounceTime+0x1c>)
 80009ea:	1dba      	adds	r2, r7, #6
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	801a      	strh	r2, [r3, #0]
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000009c 	.word	0x2000009c

080009fc <UM_getLastDebounceTime>:
 *	@param None
 *	@retval debounce_last_interrupt_time
 *
 */
uint16_t UM_getLastDebounceTime()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	return debounce_last_interrupt_time;
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <UM_getLastDebounceTime+0x10>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	2000009c 	.word	0x2000009c

08000a10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b089      	sub	sp, #36	; 0x24
 8000a14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	240c      	movs	r4, #12
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2314      	movs	r3, #20
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	f003 fe9d 	bl	8004760 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a26:	4b4c      	ldr	r3, [pc, #304]	; (8000b58 <MX_GPIO_Init+0x148>)
 8000a28:	695a      	ldr	r2, [r3, #20]
 8000a2a:	4b4b      	ldr	r3, [pc, #300]	; (8000b58 <MX_GPIO_Init+0x148>)
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	03c9      	lsls	r1, r1, #15
 8000a30:	430a      	orrs	r2, r1
 8000a32:	615a      	str	r2, [r3, #20]
 8000a34:	4b48      	ldr	r3, [pc, #288]	; (8000b58 <MX_GPIO_Init+0x148>)
 8000a36:	695a      	ldr	r2, [r3, #20]
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	03db      	lsls	r3, r3, #15
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b45      	ldr	r3, [pc, #276]	; (8000b58 <MX_GPIO_Init+0x148>)
 8000a44:	695a      	ldr	r2, [r3, #20]
 8000a46:	4b44      	ldr	r3, [pc, #272]	; (8000b58 <MX_GPIO_Init+0x148>)
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	0289      	lsls	r1, r1, #10
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	4b41      	ldr	r3, [pc, #260]	; (8000b58 <MX_GPIO_Init+0x148>)
 8000a52:	695a      	ldr	r2, [r3, #20]
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	029b      	lsls	r3, r3, #10
 8000a58:	4013      	ands	r3, r2
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <MX_GPIO_Init+0x148>)
 8000a60:	695a      	ldr	r2, [r3, #20]
 8000a62:	4b3d      	ldr	r3, [pc, #244]	; (8000b58 <MX_GPIO_Init+0x148>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	02c9      	lsls	r1, r1, #11
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	615a      	str	r2, [r3, #20]
 8000a6c:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <MX_GPIO_Init+0x148>)
 8000a6e:	695a      	ldr	r2, [r3, #20]
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	02db      	lsls	r3, r3, #11
 8000a74:	4013      	ands	r3, r2
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|DC_Pin, GPIO_PIN_RESET);
 8000a7a:	2390      	movs	r3, #144	; 0x90
 8000a7c:	05db      	lsls	r3, r3, #23
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2118      	movs	r1, #24
 8000a82:	0018      	movs	r0, r3
 8000a84:	f001 f931 	bl	8001cea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000a88:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <MX_GPIO_Init+0x14c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 f92b 	bl	8001cea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2201      	movs	r2, #1
 8000a98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	4a30      	ldr	r2, [pc, #192]	; (8000b60 <MX_GPIO_Init+0x150>)
 8000a9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	4a2e      	ldr	r2, [pc, #184]	; (8000b64 <MX_GPIO_Init+0x154>)
 8000aaa:	0019      	movs	r1, r3
 8000aac:	0010      	movs	r0, r2
 8000aae:	f000 ff8f 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	4a29      	ldr	r2, [pc, #164]	; (8000b60 <MX_GPIO_Init+0x150>)
 8000abc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	193a      	adds	r2, r7, r4
 8000ac6:	2390      	movs	r3, #144	; 0x90
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f000 ff7f 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LID_CLOSED_Pin;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LID_CLOSED_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	193a      	adds	r2, r7, r4
 8000ae6:	2390      	movs	r3, #144	; 0x90
 8000ae8:	05db      	lsls	r3, r3, #23
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 ff6f 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2218      	movs	r2, #24
 8000af6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2201      	movs	r2, #1
 8000afc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	193a      	adds	r2, r7, r4
 8000b0c:	2390      	movs	r3, #144	; 0x90
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	0011      	movs	r1, r2
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 ff5c 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000b18:	0021      	movs	r1, r4
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2201      	movs	r2, #1
 8000b24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <MX_GPIO_Init+0x14c>)
 8000b36:	0019      	movs	r1, r3
 8000b38:	0010      	movs	r0, r2
 8000b3a:	f000 ff49 	bl	80019d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2101      	movs	r1, #1
 8000b42:	2005      	movs	r0, #5
 8000b44:	f000 ff12 	bl	800196c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000b48:	2005      	movs	r0, #5
 8000b4a:	f000 ff24 	bl	8001996 <HAL_NVIC_EnableIRQ>

}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b009      	add	sp, #36	; 0x24
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	10110000 	.word	0x10110000
 8000b64:	48001400 	.word	0x48001400

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6c:	f000 fdcc 	bl	8001708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b70:	f000 f82c 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b74:	f7ff ff4c 	bl	8000a10 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b78:	f000 f99a 	bl	8000eb0 <MX_TIM1_Init>
  MX_TIM17_Init();
 8000b7c:	f000 fbc2 	bl	8001304 <MX_TIM17_Init>
  MX_TIM14_Init();
 8000b80:	f000 fb4c 	bl	800121c <MX_TIM14_Init>
  MX_SPI1_Init();
 8000b84:	f000 f872 	bl	8000c6c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000b88:	f000 fa48 	bl	800101c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b8c:	f000 faaa 	bl	80010e4 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000b90:	f000 fb92 	bl	80012b8 <MX_TIM16_Init>
  MX_TIM6_Init();
 8000b94:	f000 fb06 	bl	80011a4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  UM_Setup();
 8000b98:	f7ff fe68 	bl	800086c <UM_Setup>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 // LM_UpdatePwm();
	  UM_UpdateDisplay();
 8000b9c:	f7ff fdfe 	bl	800079c <UM_UpdateDisplay>
		// monitor the lid gpio - PA2 - if lid is held closed
		if(HAL_GPIO_ReadPin(LID_CLOSED_GPIO_Port, LID_CLOSED_Pin) == GPIO_PIN_SET)
 8000ba0:	2390      	movs	r3, #144	; 0x90
 8000ba2:	05db      	lsls	r3, r3, #23
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f001 f882 	bl	8001cb0 <HAL_GPIO_ReadPin>
 8000bac:	0003      	movs	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d108      	bne.n	8000bc4 <main+0x5c>
		{
			// if timer_expired_state == false
			if(EM_getSystemState() != UVBOX_TimerExpired)
 8000bb2:	f7ff fb35 	bl	8000220 <EM_getSystemState>
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d0ef      	beq.n	8000b9c <main+0x34>
				EM_ProcessEvent(UVBOX_evStartTimer);
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff fb39 	bl	8000234 <EM_ProcessEvent>
 8000bc2:	e7eb      	b.n	8000b9c <main+0x34>
		}
		else
		{
			// Timer is only reset if you lift the lid
			EM_ProcessEvent(UVBOX_evResetTimer);
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f7ff fb35 	bl	8000234 <EM_ProcessEvent>
	  UM_UpdateDisplay();
 8000bca:	e7e7      	b.n	8000b9c <main+0x34>

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b091      	sub	sp, #68	; 0x44
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	2410      	movs	r4, #16
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	2330      	movs	r3, #48	; 0x30
 8000bda:	001a      	movs	r2, r3
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f003 fdbf 	bl	8004760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be2:	003b      	movs	r3, r7
 8000be4:	0018      	movs	r0, r3
 8000be6:	2310      	movs	r3, #16
 8000be8:	001a      	movs	r2, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	f003 fdb8 	bl	8004760 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf0:	0021      	movs	r1, r4
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2210      	movs	r2, #16
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2202      	movs	r2, #2
 8000c08:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	22a0      	movs	r2, #160	; 0xa0
 8000c14:	0392      	lsls	r2, r2, #14
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 f8a5 	bl	8001d70 <HAL_RCC_OscConfig>
 8000c26:	1e03      	subs	r3, r0, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c2a:	f000 f819 	bl	8000c60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	003b      	movs	r3, r7
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c34:	003b      	movs	r3, r7
 8000c36:	2202      	movs	r2, #2
 8000c38:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3a:	003b      	movs	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c40:	003b      	movs	r3, r7
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c46:	003b      	movs	r3, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f001 fbac 	bl	80023a8 <HAL_RCC_ClockConfig>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c54:	f000 f804 	bl	8000c60 <Error_Handler>
  }
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b011      	add	sp, #68	; 0x44
 8000c5e:	bd90      	pop	{r4, r7, pc}

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000c72:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <MX_SPI1_Init+0x78>)
 8000c74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000c78:	2282      	movs	r2, #130	; 0x82
 8000c7a:	0052      	lsls	r2, r2, #1
 8000c7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000c86:	22e0      	movs	r2, #224	; 0xe0
 8000c88:	00d2      	lsls	r2, r2, #3
 8000c8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000cba:	2207      	movs	r2, #7
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <MX_SPI1_Init+0x74>)
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f001 fc9d 	bl	800260c <HAL_SPI_Init>
 8000cd2:	1e03      	subs	r3, r0, #0
 8000cd4:	d001      	beq.n	8000cda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cd6:	f7ff ffc3 	bl	8000c60 <Error_Handler>
  }

}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200000b0 	.word	0x200000b0
 8000ce4:	40013000 	.word	0x40013000

08000ce8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	2314      	movs	r3, #20
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	2314      	movs	r3, #20
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	f003 fd30 	bl	8004760 <memset>
  if(spiHandle->Instance==SPI1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <HAL_SPI_MspInit+0x90>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d132      	bne.n	8000d70 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_SPI_MspInit+0x94>)
 8000d0c:	699a      	ldr	r2, [r3, #24]
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <HAL_SPI_MspInit+0x94>)
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	0149      	lsls	r1, r1, #5
 8000d14:	430a      	orrs	r2, r1
 8000d16:	619a      	str	r2, [r3, #24]
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_SPI_MspInit+0x94>)
 8000d1a:	699a      	ldr	r2, [r3, #24]
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	015b      	lsls	r3, r3, #5
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_SPI_MspInit+0x94>)
 8000d28:	695a      	ldr	r2, [r3, #20]
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <HAL_SPI_MspInit+0x94>)
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	0289      	lsls	r1, r1, #10
 8000d30:	430a      	orrs	r2, r1
 8000d32:	615a      	str	r2, [r3, #20]
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_SPI_MspInit+0x94>)
 8000d36:	695a      	ldr	r2, [r3, #20]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	029b      	lsls	r3, r3, #10
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d42:	2114      	movs	r1, #20
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	22e0      	movs	r2, #224	; 0xe0
 8000d48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	187a      	adds	r2, r7, r1
 8000d64:	2390      	movs	r3, #144	; 0x90
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	0011      	movs	r1, r2
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f000 fe30 	bl	80019d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b00a      	add	sp, #40	; 0x28
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40013000 	.word	0x40013000
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d88:	699a      	ldr	r2, [r3, #24]
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	619a      	str	r2, [r3, #24]
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	2201      	movs	r2, #1
 8000d98:	4013      	ands	r3, r2
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da0:	69da      	ldr	r2, [r3, #28]
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	0549      	lsls	r1, r1, #21
 8000da8:	430a      	orrs	r2, r1
 8000daa:	61da      	str	r2, [r3, #28]
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_MspInit+0x44>)
 8000dae:	69da      	ldr	r2, [r3, #28]
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	055b      	lsls	r3, r3, #21
 8000db4:	4013      	ands	r3, r2
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df0:	f000 fcd2 	bl	8001798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	UM_EXTI0_1_IRQHandler();
 8000dfe:	f7ff fdbb 	bl	8000978 <UM_EXTI0_1_IRQHandler>
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f000 ff8e 	bl	8001d24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f000 ff8b 	bl	8001d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	LM_UpdatePwm();
 8000e18:	f7ff fb9e 	bl	8000558 <LM_UpdatePwm>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <TIM2_IRQHandler+0x18>)
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f001 fe8b 	bl	8002b3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	20000214 	.word	0x20000214

08000e30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	TM_DecrementTimer();
 8000e34:	f7ff fc1c 	bl	8000670 <TM_DecrementTimer>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <TIM6_DAC_IRQHandler+0x18>)
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f001 fe7d 	bl	8002b3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	20000194 	.word	0x20000194

08000e4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <_sbrk+0x50>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x16>
		heap_end = &end;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <_sbrk+0x50>)
 8000e5e:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <_sbrk+0x54>)
 8000e60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <_sbrk+0x50>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <_sbrk+0x50>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	18d3      	adds	r3, r2, r3
 8000e70:	466a      	mov	r2, sp
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d907      	bls.n	8000e86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e76:	f003 fc49 	bl	800470c <__errno>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	220c      	movs	r2, #12
 8000e7e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	425b      	negs	r3, r3
 8000e84:	e006      	b.n	8000e94 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <_sbrk+0x50>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	18d2      	adds	r2, r2, r3
 8000e8e:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <_sbrk+0x50>)
 8000e90:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b004      	add	sp, #16
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200000a0 	.word	0x200000a0
 8000ea0:	200002e0 	.word	0x200002e0

08000ea4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b092      	sub	sp, #72	; 0x48
 8000eb4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb6:	2340      	movs	r3, #64	; 0x40
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	0018      	movs	r0, r3
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	f003 fc4d 	bl	8004760 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec6:	2324      	movs	r3, #36	; 0x24
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	0018      	movs	r0, r3
 8000ecc:	231c      	movs	r3, #28
 8000ece:	001a      	movs	r2, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	f003 fc45 	bl	8004760 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	0018      	movs	r0, r3
 8000eda:	2320      	movs	r3, #32
 8000edc:	001a      	movs	r2, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f003 fc3e 	bl	8004760 <memset>

  htim1.Instance = TIM1;
 8000ee4:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <MX_TIM1_Init+0x164>)
 8000ee6:	4a4c      	ldr	r2, [pc, #304]	; (8001018 <MX_TIM1_Init+0x168>)
 8000ee8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000eea:	4b4a      	ldr	r3, [pc, #296]	; (8001014 <MX_TIM1_Init+0x164>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b48      	ldr	r3, [pc, #288]	; (8001014 <MX_TIM1_Init+0x164>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64;
 8000ef6:	4b47      	ldr	r3, [pc, #284]	; (8001014 <MX_TIM1_Init+0x164>)
 8000ef8:	2240      	movs	r2, #64	; 0x40
 8000efa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efc:	4b45      	ldr	r3, [pc, #276]	; (8001014 <MX_TIM1_Init+0x164>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f02:	4b44      	ldr	r3, [pc, #272]	; (8001014 <MX_TIM1_Init+0x164>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f08:	4b42      	ldr	r3, [pc, #264]	; (8001014 <MX_TIM1_Init+0x164>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f0e:	4b41      	ldr	r3, [pc, #260]	; (8001014 <MX_TIM1_Init+0x164>)
 8000f10:	0018      	movs	r0, r3
 8000f12:	f001 fcaf 	bl	8002874 <HAL_TIM_PWM_Init>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f1a:	f7ff fea1 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1e:	2140      	movs	r1, #64	; 0x40
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2200      	movs	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f2c:	187a      	adds	r2, r7, r1
 8000f2e:	4b39      	ldr	r3, [pc, #228]	; (8001014 <MX_TIM1_Init+0x164>)
 8000f30:	0011      	movs	r1, r2
 8000f32:	0018      	movs	r0, r3
 8000f34:	f002 fa98 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 8000f38:	1e03      	subs	r3, r0, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f3c:	f7ff fe90 	bl	8000c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f40:	2124      	movs	r1, #36	; 0x24
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2260      	movs	r2, #96	; 0x60
 8000f46:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	2200      	movs	r2, #0
 8000f64:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6c:	1879      	adds	r1, r7, r1
 8000f6e:	4b29      	ldr	r3, [pc, #164]	; (8001014 <MX_TIM1_Init+0x164>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 fef8 	bl	8002d68 <HAL_TIM_PWM_ConfigChannel>
 8000f78:	1e03      	subs	r3, r0, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000f7c:	f7ff fe70 	bl	8000c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f80:	2324      	movs	r3, #36	; 0x24
 8000f82:	18f9      	adds	r1, r7, r3
 8000f84:	4b23      	ldr	r3, [pc, #140]	; (8001014 <MX_TIM1_Init+0x164>)
 8000f86:	2204      	movs	r2, #4
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f001 feed 	bl	8002d68 <HAL_TIM_PWM_ConfigChannel>
 8000f8e:	1e03      	subs	r3, r0, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8000f92:	f7ff fe65 	bl	8000c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f96:	2324      	movs	r3, #36	; 0x24
 8000f98:	18f9      	adds	r1, r7, r3
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <MX_TIM1_Init+0x164>)
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f001 fee2 	bl	8002d68 <HAL_TIM_PWM_ConfigChannel>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000fa8:	f7ff fe5a 	bl	8000c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fac:	2324      	movs	r3, #36	; 0x24
 8000fae:	18f9      	adds	r1, r7, r3
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_TIM1_Init+0x164>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f001 fed7 	bl	8002d68 <HAL_TIM_PWM_ConfigChannel>
 8000fba:	1e03      	subs	r3, r0, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000fbe:	f7ff fe4f 	bl	8000c60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	0192      	lsls	r2, r2, #6
 8000fe6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fee:	1d3a      	adds	r2, r7, #4
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_TIM1_Init+0x164>)
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f002 fa95 	bl	8003524 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ffa:	1e03      	subs	r3, r0, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000ffe:	f7ff fe2f 	bl	8000c60 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <MX_TIM1_Init+0x164>)
 8001004:	0018      	movs	r0, r3
 8001006:	f000 fabb 	bl	8001580 <HAL_TIM_MspPostInit>

}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b012      	add	sp, #72	; 0x48
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	200001d4 	.word	0x200001d4
 8001018:	40012c00 	.word	0x40012c00

0800101c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b08d      	sub	sp, #52	; 0x34
 8001020:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001022:	240c      	movs	r4, #12
 8001024:	193b      	adds	r3, r7, r4
 8001026:	0018      	movs	r0, r3
 8001028:	2324      	movs	r3, #36	; 0x24
 800102a:	001a      	movs	r2, r3
 800102c:	2100      	movs	r1, #0
 800102e:	f003 fb97 	bl	8004760 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	0018      	movs	r0, r3
 8001036:	2308      	movs	r3, #8
 8001038:	001a      	movs	r2, r3
 800103a:	2100      	movs	r1, #0
 800103c:	f003 fb90 	bl	8004760 <memset>

  htim2.Instance = TIM2;
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <MX_TIM2_Init+0xc0>)
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	05d2      	lsls	r2, r2, #23
 8001046:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <MX_TIM2_Init+0xc0>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <MX_TIM2_Init+0xc0>)
 8001050:	2240      	movs	r2, #64	; 0x40
 8001052:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <MX_TIM2_Init+0xc0>)
 8001056:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <MX_TIM2_Init+0xc4>)
 8001058:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <MX_TIM2_Init+0xc0>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_TIM2_Init+0xc0>)
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001066:	0021      	movs	r1, r4
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2203      	movs	r2, #3
 800106c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2201      	movs	r2, #1
 8001078:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 4;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2204      	movs	r2, #4
 8001084:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2201      	movs	r2, #1
 8001090:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 4;
 8001098:	187b      	adds	r3, r7, r1
 800109a:	2204      	movs	r2, #4
 800109c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800109e:	187a      	adds	r2, r7, r1
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_TIM2_Init+0xc0>)
 80010a2:	0011      	movs	r1, r2
 80010a4:	0018      	movs	r0, r3
 80010a6:	f001 fc5d 	bl	8002964 <HAL_TIM_Encoder_Init>
 80010aa:	1e03      	subs	r3, r0, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010ae:	f7ff fdd7 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2220      	movs	r2, #32
 80010b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010be:	1d3a      	adds	r2, r7, #4
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_TIM2_Init+0xc0>)
 80010c2:	0011      	movs	r1, r2
 80010c4:	0018      	movs	r0, r3
 80010c6:	f002 f9cf 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 80010ca:	1e03      	subs	r3, r0, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80010ce:	f7ff fdc7 	bl	8000c60 <Error_Handler>
  }

}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b00d      	add	sp, #52	; 0x34
 80010d8:	bd90      	pop	{r4, r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	20000214 	.word	0x20000214
 80010e0:	0000ffff 	.word	0x0000ffff

080010e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ea:	2320      	movs	r3, #32
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	0018      	movs	r0, r3
 80010f0:	2308      	movs	r3, #8
 80010f2:	001a      	movs	r2, r3
 80010f4:	2100      	movs	r1, #0
 80010f6:	f003 fb33 	bl	8004760 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	0018      	movs	r0, r3
 80010fe:	231c      	movs	r3, #28
 8001100:	001a      	movs	r2, r3
 8001102:	2100      	movs	r1, #0
 8001104:	f003 fb2c 	bl	8004760 <memset>

  htim3.Instance = TIM3;
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <MX_TIM3_Init+0xb8>)
 800110a:	4a25      	ldr	r2, [pc, #148]	; (80011a0 <MX_TIM3_Init+0xbc>)
 800110c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <MX_TIM3_Init+0xb8>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_TIM3_Init+0xb8>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <MX_TIM3_Init+0xb8>)
 800111c:	2201      	movs	r2, #1
 800111e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_TIM3_Init+0xb8>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_TIM3_Init+0xb8>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_TIM3_Init+0xb8>)
 800112e:	0018      	movs	r0, r3
 8001130:	f001 fba0 	bl	8002874 <HAL_TIM_PWM_Init>
 8001134:	1e03      	subs	r3, r0, #0
 8001136:	d001      	beq.n	800113c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001138:	f7ff fd92 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113c:	2120      	movs	r1, #32
 800113e:	187b      	adds	r3, r7, r1
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	187b      	adds	r3, r7, r1
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800114a:	187a      	adds	r2, r7, r1
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_TIM3_Init+0xb8>)
 800114e:	0011      	movs	r1, r2
 8001150:	0018      	movs	r0, r3
 8001152:	f002 f989 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	1e03      	subs	r3, r0, #0
 8001158:	d001      	beq.n	800115e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800115a:	f7ff fd81 	bl	8000c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2260      	movs	r2, #96	; 0x60
 8001162:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001176:	1d39      	adds	r1, r7, #4
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_TIM3_Init+0xb8>)
 800117a:	2200      	movs	r2, #0
 800117c:	0018      	movs	r0, r3
 800117e:	f001 fdf3 	bl	8002d68 <HAL_TIM_PWM_ConfigChannel>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d001      	beq.n	800118a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8001186:	f7ff fd6b 	bl	8000c60 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <MX_TIM3_Init+0xb8>)
 800118c:	0018      	movs	r0, r3
 800118e:	f000 f9f7 	bl	8001580 <HAL_TIM_MspPostInit>

}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	b00a      	add	sp, #40	; 0x28
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	20000154 	.word	0x20000154
 80011a0:	40000400 	.word	0x40000400

080011a4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011aa:	003b      	movs	r3, r7
 80011ac:	0018      	movs	r0, r3
 80011ae:	2308      	movs	r3, #8
 80011b0:	001a      	movs	r2, r3
 80011b2:	2100      	movs	r1, #0
 80011b4:	f003 fad4 	bl	8004760 <memset>

  htim6.Instance = TIM6;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_TIM6_Init+0x6c>)
 80011ba:	4a16      	ldr	r2, [pc, #88]	; (8001214 <MX_TIM6_Init+0x70>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 366;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_TIM6_Init+0x6c>)
 80011c0:	22b7      	movs	r2, #183	; 0xb7
 80011c2:	0052      	lsls	r2, r2, #1
 80011c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_TIM6_Init+0x6c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_TIM6_Init+0x6c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_TIM6_Init+0x74>)
 80011d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_TIM6_Init+0x6c>)
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <MX_TIM6_Init+0x6c>)
 80011da:	0018      	movs	r0, r3
 80011dc:	f001 fab0 	bl	8002740 <HAL_TIM_Base_Init>
 80011e0:	1e03      	subs	r3, r0, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 80011e4:	f7ff fd3c 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	003b      	movs	r3, r7
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	003b      	movs	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011f4:	003a      	movs	r2, r7
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_TIM6_Init+0x6c>)
 80011f8:	0011      	movs	r1, r2
 80011fa:	0018      	movs	r0, r3
 80011fc:	f002 f934 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	1e03      	subs	r3, r0, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8001204:	f7ff fd2c 	bl	8000c60 <Error_Handler>
  }

}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000194 	.word	0x20000194
 8001214:	40001000 	.word	0x40001000
 8001218:	0000ffff 	.word	0x0000ffff

0800121c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	0018      	movs	r0, r3
 8001226:	231c      	movs	r3, #28
 8001228:	001a      	movs	r2, r3
 800122a:	2100      	movs	r1, #0
 800122c:	f003 fa98 	bl	8004760 <memset>

  htim14.Instance = TIM14;
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <MX_TIM14_Init+0x94>)
 8001232:	4a20      	ldr	r2, [pc, #128]	; (80012b4 <MX_TIM14_Init+0x98>)
 8001234:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001236:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <MX_TIM14_Init+0x94>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <MX_TIM14_Init+0x94>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 64;
 8001242:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_TIM14_Init+0x94>)
 8001244:	2240      	movs	r2, #64	; 0x40
 8001246:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <MX_TIM14_Init+0x94>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_TIM14_Init+0x94>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MX_TIM14_Init+0x94>)
 8001256:	0018      	movs	r0, r3
 8001258:	f001 fa72 	bl	8002740 <HAL_TIM_Base_Init>
 800125c:	1e03      	subs	r3, r0, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001260:	f7ff fcfe 	bl	8000c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_TIM14_Init+0x94>)
 8001266:	0018      	movs	r0, r3
 8001268:	f001 fb04 	bl	8002874 <HAL_TIM_PWM_Init>
 800126c:	1e03      	subs	r3, r0, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001270:	f7ff fcf6 	bl	8000c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2260      	movs	r2, #96	; 0x60
 8001278:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128c:	1d39      	adds	r1, r7, #4
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <MX_TIM14_Init+0x94>)
 8001290:	2200      	movs	r2, #0
 8001292:	0018      	movs	r0, r3
 8001294:	f001 fd68 	bl	8002d68 <HAL_TIM_PWM_ConfigChannel>
 8001298:	1e03      	subs	r3, r0, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800129c:	f7ff fce0 	bl	8000c60 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <MX_TIM14_Init+0x94>)
 80012a2:	0018      	movs	r0, r3
 80012a4:	f000 f96c 	bl	8001580 <HAL_TIM_MspPostInit>

}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b008      	add	sp, #32
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000254 	.word	0x20000254
 80012b4:	40002000 	.word	0x40002000

080012b8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_TIM16_Init+0x44>)
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <MX_TIM16_Init+0x48>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_TIM16_Init+0x44>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_TIM16_Init+0x44>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_TIM16_Init+0x44>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_TIM16_Init+0x44>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_TIM16_Init+0x44>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_TIM16_Init+0x44>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <MX_TIM16_Init+0x44>)
 80012e8:	0018      	movs	r0, r3
 80012ea:	f001 fa29 	bl	8002740 <HAL_TIM_Base_Init>
 80012ee:	1e03      	subs	r3, r0, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80012f2:	f7ff fcb5 	bl	8000c60 <Error_Handler>
  }

}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000294 	.word	0x20000294
 8001300:	40014400 	.word	0x40014400

08001304 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_TIM17_Init+0x44>)
 800130a:	4a10      	ldr	r2, [pc, #64]	; (800134c <MX_TIM17_Init+0x48>)
 800130c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 65535;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_TIM17_Init+0x44>)
 8001310:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <MX_TIM17_Init+0x4c>)
 8001312:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_TIM17_Init+0x44>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_TIM17_Init+0x44>)
 800131c:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <MX_TIM17_Init+0x4c>)
 800131e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_TIM17_Init+0x44>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_TIM17_Init+0x44>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_TIM17_Init+0x44>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <MX_TIM17_Init+0x44>)
 8001334:	0018      	movs	r0, r3
 8001336:	f001 fa03 	bl	8002740 <HAL_TIM_Base_Init>
 800133a:	1e03      	subs	r3, r0, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800133e:	f7ff fc8f 	bl	8000c60 <Error_Handler>
  }

}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000114 	.word	0x20000114
 800134c:	40014800 	.word	0x40014800
 8001350:	0000ffff 	.word	0x0000ffff

08001354 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d10e      	bne.n	8001384 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_TIM_PWM_MspInit+0x60>)
 8001368:	699a      	ldr	r2, [r3, #24]
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_TIM_PWM_MspInit+0x60>)
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	0109      	lsls	r1, r1, #4
 8001370:	430a      	orrs	r2, r1
 8001372:	619a      	str	r2, [r3, #24]
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_TIM_PWM_MspInit+0x60>)
 8001376:	699a      	ldr	r2, [r3, #24]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	4013      	ands	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001382:	e010      	b.n	80013a6 <HAL_TIM_PWM_MspInit+0x52>
  else if(tim_pwmHandle->Instance==TIM3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <HAL_TIM_PWM_MspInit+0x64>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10b      	bne.n	80013a6 <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_TIM_PWM_MspInit+0x60>)
 8001390:	69da      	ldr	r2, [r3, #28]
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_TIM_PWM_MspInit+0x60>)
 8001394:	2102      	movs	r1, #2
 8001396:	430a      	orrs	r2, r1
 8001398:	61da      	str	r2, [r3, #28]
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_TIM_PWM_MspInit+0x60>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	2202      	movs	r2, #2
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b004      	add	sp, #16
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	40012c00 	.word	0x40012c00
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40000400 	.word	0x40000400

080013bc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b08b      	sub	sp, #44	; 0x2c
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	2314      	movs	r3, #20
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	0018      	movs	r0, r3
 80013ca:	2314      	movs	r3, #20
 80013cc:	001a      	movs	r2, r3
 80013ce:	2100      	movs	r1, #0
 80013d0:	f003 f9c6 	bl	8004760 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	05db      	lsls	r3, r3, #23
 80013dc:	429a      	cmp	r2, r3
 80013de:	d15e      	bne.n	800149e <HAL_TIM_Encoder_MspInit+0xe2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013e0:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80013e2:	69da      	ldr	r2, [r3, #28]
 80013e4:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	430a      	orrs	r2, r1
 80013ea:	61da      	str	r2, [r3, #28]
 80013ec:	4b2e      	ldr	r3, [pc, #184]	; (80014a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80013fa:	695a      	ldr	r2, [r3, #20]
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	0289      	lsls	r1, r1, #10
 8001402:	430a      	orrs	r2, r1
 8001404:	615a      	str	r2, [r3, #20]
 8001406:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	029b      	lsls	r3, r3, #10
 800140e:	4013      	ands	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001416:	695a      	ldr	r2, [r3, #20]
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	02c9      	lsls	r1, r1, #11
 800141e:	430a      	orrs	r2, r1
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	02db      	lsls	r3, r3, #11
 800142a:	4013      	ands	r3, r2
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001430:	2114      	movs	r1, #20
 8001432:	187b      	adds	r3, r7, r1
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	0212      	lsls	r2, r2, #8
 8001438:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	000c      	movs	r4, r1
 800143c:	193b      	adds	r3, r7, r4
 800143e:	2202      	movs	r2, #2
 8001440:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	193b      	adds	r3, r7, r4
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	193b      	adds	r3, r7, r4
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800144e:	193b      	adds	r3, r7, r4
 8001450:	2202      	movs	r2, #2
 8001452:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	193a      	adds	r2, r7, r4
 8001456:	2390      	movs	r3, #144	; 0x90
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	0011      	movs	r1, r2
 800145c:	0018      	movs	r0, r3
 800145e:	f000 fab7 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001462:	0021      	movs	r1, r4
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2208      	movs	r2, #8
 8001468:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2202      	movs	r2, #2
 800146e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800147c:	187b      	adds	r3, r7, r1
 800147e:	2202      	movs	r2, #2
 8001480:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	187b      	adds	r3, r7, r1
 8001484:	4a09      	ldr	r2, [pc, #36]	; (80014ac <HAL_TIM_Encoder_MspInit+0xf0>)
 8001486:	0019      	movs	r1, r3
 8001488:	0010      	movs	r0, r2
 800148a:	f000 faa1 	bl	80019d0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2101      	movs	r1, #1
 8001492:	200f      	movs	r0, #15
 8001494:	f000 fa6a 	bl	800196c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001498:	200f      	movs	r0, #15
 800149a:	f000 fa7c 	bl	8001996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b00b      	add	sp, #44	; 0x2c
 80014a4:	bd90      	pop	{r4, r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	40021000 	.word	0x40021000
 80014ac:	48000400 	.word	0x48000400

080014b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a2b      	ldr	r2, [pc, #172]	; (800156c <HAL_TIM_Base_MspInit+0xbc>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d114      	bne.n	80014ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_TIM_Base_MspInit+0xc0>)
 80014c4:	69da      	ldr	r2, [r3, #28]
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <HAL_TIM_Base_MspInit+0xc0>)
 80014c8:	2110      	movs	r1, #16
 80014ca:	430a      	orrs	r2, r1
 80014cc:	61da      	str	r2, [r3, #28]
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_TIM_Base_MspInit+0xc0>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	2210      	movs	r2, #16
 80014d4:	4013      	ands	r3, r2
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2101      	movs	r1, #1
 80014de:	2011      	movs	r0, #17
 80014e0:	f000 fa44 	bl	800196c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014e4:	2011      	movs	r0, #17
 80014e6:	f000 fa56 	bl	8001996 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80014ea:	e03a      	b.n	8001562 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM14)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a20      	ldr	r2, [pc, #128]	; (8001574 <HAL_TIM_Base_MspInit+0xc4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d10e      	bne.n	8001514 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_TIM_Base_MspInit+0xc0>)
 80014f8:	69da      	ldr	r2, [r3, #28]
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <HAL_TIM_Base_MspInit+0xc0>)
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	0049      	lsls	r1, r1, #1
 8001500:	430a      	orrs	r2, r1
 8001502:	61da      	str	r2, [r3, #28]
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_TIM_Base_MspInit+0xc0>)
 8001506:	69da      	ldr	r2, [r3, #28]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
}
 8001512:	e026      	b.n	8001562 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM16)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_TIM_Base_MspInit+0xc8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10e      	bne.n	800153c <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_TIM_Base_MspInit+0xc0>)
 8001520:	699a      	ldr	r2, [r3, #24]
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_TIM_Base_MspInit+0xc0>)
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	0289      	lsls	r1, r1, #10
 8001528:	430a      	orrs	r2, r1
 800152a:	619a      	str	r2, [r3, #24]
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_TIM_Base_MspInit+0xc0>)
 800152e:	699a      	ldr	r2, [r3, #24]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	029b      	lsls	r3, r3, #10
 8001534:	4013      	ands	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
}
 800153a:	e012      	b.n	8001562 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM17)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0e      	ldr	r2, [pc, #56]	; (800157c <HAL_TIM_Base_MspInit+0xcc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d10d      	bne.n	8001562 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_TIM_Base_MspInit+0xc0>)
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_TIM_Base_MspInit+0xc0>)
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	02c9      	lsls	r1, r1, #11
 8001550:	430a      	orrs	r2, r1
 8001552:	619a      	str	r2, [r3, #24]
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_TIM_Base_MspInit+0xc0>)
 8001556:	699a      	ldr	r2, [r3, #24]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	02db      	lsls	r3, r3, #11
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b006      	add	sp, #24
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	40001000 	.word	0x40001000
 8001570:	40021000 	.word	0x40021000
 8001574:	40002000 	.word	0x40002000
 8001578:	40014400 	.word	0x40014400
 800157c:	40014800 	.word	0x40014800

08001580 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	2314      	movs	r3, #20
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	0018      	movs	r0, r3
 800158e:	2314      	movs	r3, #20
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f003 f8e4 	bl	8004760 <memset>
  if(timHandle->Instance==TIM1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a40      	ldr	r2, [pc, #256]	; (80016a0 <HAL_TIM_MspPostInit+0x120>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d126      	bne.n	80015f0 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b40      	ldr	r3, [pc, #256]	; (80016a4 <HAL_TIM_MspPostInit+0x124>)
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <HAL_TIM_MspPostInit+0x124>)
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	0289      	lsls	r1, r1, #10
 80015ac:	430a      	orrs	r2, r1
 80015ae:	615a      	str	r2, [r3, #20]
 80015b0:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <HAL_TIM_MspPostInit+0x124>)
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	029b      	lsls	r3, r3, #10
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80015be:	2114      	movs	r1, #20
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	22f0      	movs	r2, #240	; 0xf0
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	2202      	movs	r2, #2
 80015cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	2202      	movs	r2, #2
 80015de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	187a      	adds	r2, r7, r1
 80015e2:	2390      	movs	r3, #144	; 0x90
 80015e4:	05db      	lsls	r3, r3, #23
 80015e6:	0011      	movs	r1, r2
 80015e8:	0018      	movs	r0, r3
 80015ea:	f000 f9f1 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80015ee:	e052      	b.n	8001696 <HAL_TIM_MspPostInit+0x116>
  else if(timHandle->Instance==TIM3)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a2c      	ldr	r2, [pc, #176]	; (80016a8 <HAL_TIM_MspPostInit+0x128>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d124      	bne.n	8001644 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <HAL_TIM_MspPostInit+0x124>)
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <HAL_TIM_MspPostInit+0x124>)
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	02c9      	lsls	r1, r1, #11
 8001604:	430a      	orrs	r2, r1
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <HAL_TIM_MspPostInit+0x124>)
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	02db      	lsls	r3, r3, #11
 8001610:	4013      	ands	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001616:	2114      	movs	r1, #20
 8001618:	187b      	adds	r3, r7, r1
 800161a:	2210      	movs	r2, #16
 800161c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	187b      	adds	r3, r7, r1
 8001620:	2202      	movs	r2, #2
 8001622:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001624:	187b      	adds	r3, r7, r1
 8001626:	2202      	movs	r2, #2
 8001628:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	187b      	adds	r3, r7, r1
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001630:	187b      	adds	r3, r7, r1
 8001632:	2201      	movs	r2, #1
 8001634:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	187b      	adds	r3, r7, r1
 8001638:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <HAL_TIM_MspPostInit+0x12c>)
 800163a:	0019      	movs	r1, r3
 800163c:	0010      	movs	r0, r2
 800163e:	f000 f9c7 	bl	80019d0 <HAL_GPIO_Init>
}
 8001642:	e028      	b.n	8001696 <HAL_TIM_MspPostInit+0x116>
  else if(timHandle->Instance==TIM14)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_TIM_MspPostInit+0x130>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d123      	bne.n	8001696 <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_TIM_MspPostInit+0x124>)
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_TIM_MspPostInit+0x124>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	02c9      	lsls	r1, r1, #11
 8001658:	430a      	orrs	r2, r1
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_TIM_MspPostInit+0x124>)
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	02db      	lsls	r3, r3, #11
 8001664:	4013      	ands	r3, r2
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800166a:	2114      	movs	r1, #20
 800166c:	187b      	adds	r3, r7, r1
 800166e:	2202      	movs	r2, #2
 8001670:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	187b      	adds	r3, r7, r1
 8001674:	2202      	movs	r2, #2
 8001676:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	187b      	adds	r3, r7, r1
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8001684:	187b      	adds	r3, r7, r1
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	187b      	adds	r3, r7, r1
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_TIM_MspPostInit+0x12c>)
 800168e:	0019      	movs	r1, r3
 8001690:	0010      	movs	r0, r2
 8001692:	f000 f99d 	bl	80019d0 <HAL_GPIO_Init>
}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b00a      	add	sp, #40	; 0x28
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	40012c00 	.word	0x40012c00
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40000400 	.word	0x40000400
 80016ac:	48000400 	.word	0x48000400
 80016b0:	40002000 	.word	0x40002000

080016b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ba:	490e      	ldr	r1, [pc, #56]	; (80016f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016bc:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <LoopForever+0xe>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d0:	4c0b      	ldr	r4, [pc, #44]	; (8001700 <LoopForever+0x16>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016de:	f7ff fbe1 	bl	8000ea4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80016e2:	f003 f819 	bl	8004718 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016e6:	f7ff fa3f 	bl	8000b68 <main>

080016ea <LoopForever>:

LoopForever:
    b LoopForever
 80016ea:	e7fe      	b.n	80016ea <LoopForever>
  ldr   r0, =_estack
 80016ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80016f8:	080052a0 	.word	0x080052a0
  ldr r2, =_sbss
 80016fc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001700:	200002dc 	.word	0x200002dc

08001704 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC1_COMP_IRQHandler>
	...

08001708 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <HAL_Init+0x24>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_Init+0x24>)
 8001712:	2110      	movs	r1, #16
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001718:	2000      	movs	r0, #0
 800171a:	f000 f809 	bl	8001730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800171e:	f7ff fb2f 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	40022000 	.word	0x40022000

08001730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_InitTick+0x5c>)
 800173a:	681c      	ldr	r4, [r3, #0]
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <HAL_InitTick+0x60>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	0019      	movs	r1, r3
 8001742:	23fa      	movs	r3, #250	; 0xfa
 8001744:	0098      	lsls	r0, r3, #2
 8001746:	f7fe fcdf 	bl	8000108 <__udivsi3>
 800174a:	0003      	movs	r3, r0
 800174c:	0019      	movs	r1, r3
 800174e:	0020      	movs	r0, r4
 8001750:	f7fe fcda 	bl	8000108 <__udivsi3>
 8001754:	0003      	movs	r3, r0
 8001756:	0018      	movs	r0, r3
 8001758:	f000 f92d 	bl	80019b6 <HAL_SYSTICK_Config>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d001      	beq.n	8001764 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e00f      	b.n	8001784 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b03      	cmp	r3, #3
 8001768:	d80b      	bhi.n	8001782 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	2301      	movs	r3, #1
 800176e:	425b      	negs	r3, r3
 8001770:	2200      	movs	r2, #0
 8001772:	0018      	movs	r0, r3
 8001774:	f000 f8fa 	bl	800196c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_InitTick+0x64>)
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e000      	b.n	8001784 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b003      	add	sp, #12
 800178a:	bd90      	pop	{r4, r7, pc}
 800178c:	20000008 	.word	0x20000008
 8001790:	20000010 	.word	0x20000010
 8001794:	2000000c 	.word	0x2000000c

08001798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_IncTick+0x1c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	001a      	movs	r2, r3
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_IncTick+0x20>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	18d2      	adds	r2, r2, r3
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_IncTick+0x20>)
 80017aa:	601a      	str	r2, [r3, #0]
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	20000010 	.word	0x20000010
 80017b8:	200002d4 	.word	0x200002d4

080017bc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b02      	ldr	r3, [pc, #8]	; (80017cc <HAL_GetTick+0x10>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	200002d4 	.word	0x200002d4

080017d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d8:	f7ff fff0 	bl	80017bc <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3301      	adds	r3, #1
 80017e8:	d005      	beq.n	80017f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_Delay+0x40>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	001a      	movs	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	189b      	adds	r3, r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	f7ff ffe0 	bl	80017bc <HAL_GetTick>
 80017fc:	0002      	movs	r2, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	429a      	cmp	r2, r3
 8001806:	d8f7      	bhi.n	80017f8 <HAL_Delay+0x28>
  {
  }
}
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b004      	add	sp, #16
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000010 	.word	0x20000010

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	0002      	movs	r2, r0
 800181c:	1dfb      	adds	r3, r7, #7
 800181e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001820:	1dfb      	adds	r3, r7, #7
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b7f      	cmp	r3, #127	; 0x7f
 8001826:	d809      	bhi.n	800183c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001828:	1dfb      	adds	r3, r7, #7
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	001a      	movs	r2, r3
 800182e:	231f      	movs	r3, #31
 8001830:	401a      	ands	r2, r3
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <__NVIC_EnableIRQ+0x30>)
 8001834:	2101      	movs	r1, #1
 8001836:	4091      	lsls	r1, r2
 8001838:	000a      	movs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
  }
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	0002      	movs	r2, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b7f      	cmp	r3, #127	; 0x7f
 800185c:	d828      	bhi.n	80018b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800185e:	4a2f      	ldr	r2, [pc, #188]	; (800191c <__NVIC_SetPriority+0xd4>)
 8001860:	1dfb      	adds	r3, r7, #7
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b25b      	sxtb	r3, r3
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	33c0      	adds	r3, #192	; 0xc0
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	589b      	ldr	r3, [r3, r2]
 800186e:	1dfa      	adds	r2, r7, #7
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	0011      	movs	r1, r2
 8001874:	2203      	movs	r2, #3
 8001876:	400a      	ands	r2, r1
 8001878:	00d2      	lsls	r2, r2, #3
 800187a:	21ff      	movs	r1, #255	; 0xff
 800187c:	4091      	lsls	r1, r2
 800187e:	000a      	movs	r2, r1
 8001880:	43d2      	mvns	r2, r2
 8001882:	401a      	ands	r2, r3
 8001884:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	019b      	lsls	r3, r3, #6
 800188a:	22ff      	movs	r2, #255	; 0xff
 800188c:	401a      	ands	r2, r3
 800188e:	1dfb      	adds	r3, r7, #7
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	0018      	movs	r0, r3
 8001894:	2303      	movs	r3, #3
 8001896:	4003      	ands	r3, r0
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800189c:	481f      	ldr	r0, [pc, #124]	; (800191c <__NVIC_SetPriority+0xd4>)
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b25b      	sxtb	r3, r3
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	430a      	orrs	r2, r1
 80018a8:	33c0      	adds	r3, #192	; 0xc0
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018ae:	e031      	b.n	8001914 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b0:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <__NVIC_SetPriority+0xd8>)
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	0019      	movs	r1, r3
 80018b8:	230f      	movs	r3, #15
 80018ba:	400b      	ands	r3, r1
 80018bc:	3b08      	subs	r3, #8
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3306      	adds	r3, #6
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	18d3      	adds	r3, r2, r3
 80018c6:	3304      	adds	r3, #4
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	1dfa      	adds	r2, r7, #7
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	0011      	movs	r1, r2
 80018d0:	2203      	movs	r2, #3
 80018d2:	400a      	ands	r2, r1
 80018d4:	00d2      	lsls	r2, r2, #3
 80018d6:	21ff      	movs	r1, #255	; 0xff
 80018d8:	4091      	lsls	r1, r2
 80018da:	000a      	movs	r2, r1
 80018dc:	43d2      	mvns	r2, r2
 80018de:	401a      	ands	r2, r3
 80018e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	019b      	lsls	r3, r3, #6
 80018e6:	22ff      	movs	r2, #255	; 0xff
 80018e8:	401a      	ands	r2, r3
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	0018      	movs	r0, r3
 80018f0:	2303      	movs	r3, #3
 80018f2:	4003      	ands	r3, r0
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f8:	4809      	ldr	r0, [pc, #36]	; (8001920 <__NVIC_SetPriority+0xd8>)
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	001c      	movs	r4, r3
 8001900:	230f      	movs	r3, #15
 8001902:	4023      	ands	r3, r4
 8001904:	3b08      	subs	r3, #8
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	430a      	orrs	r2, r1
 800190a:	3306      	adds	r3, #6
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	18c3      	adds	r3, r0, r3
 8001910:	3304      	adds	r3, #4
 8001912:	601a      	str	r2, [r3, #0]
}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b003      	add	sp, #12
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	4a0c      	ldr	r2, [pc, #48]	; (8001964 <SysTick_Config+0x40>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001936:	2301      	movs	r3, #1
 8001938:	e010      	b.n	800195c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <SysTick_Config+0x44>)
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	3a01      	subs	r2, #1
 8001940:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001942:	2301      	movs	r3, #1
 8001944:	425b      	negs	r3, r3
 8001946:	2103      	movs	r1, #3
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff ff7d 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <SysTick_Config+0x44>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SysTick_Config+0x44>)
 8001956:	2207      	movs	r2, #7
 8001958:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195a:	2300      	movs	r3, #0
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}
 8001964:	00ffffff 	.word	0x00ffffff
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	210f      	movs	r1, #15
 8001978:	187b      	adds	r3, r7, r1
 800197a:	1c02      	adds	r2, r0, #0
 800197c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	187b      	adds	r3, r7, r1
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b25b      	sxtb	r3, r3
 8001986:	0011      	movs	r1, r2
 8001988:	0018      	movs	r0, r3
 800198a:	f7ff ff5d 	bl	8001848 <__NVIC_SetPriority>
}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b004      	add	sp, #16
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	0002      	movs	r2, r0
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b25b      	sxtb	r3, r3
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7ff ff33 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b002      	add	sp, #8
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7ff ffaf 	bl	8001924 <SysTick_Config>
 80019c6:	0003      	movs	r3, r0
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b002      	add	sp, #8
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	e14f      	b.n	8001c80 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4091      	lsls	r1, r2
 80019ea:	000a      	movs	r2, r1
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d100      	bne.n	80019f8 <HAL_GPIO_Init+0x28>
 80019f6:	e140      	b.n	8001c7a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x38>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b12      	cmp	r3, #18
 8001a06:	d123      	bne.n	8001a50 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	58d3      	ldr	r3, [r2, r3]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2207      	movs	r2, #7
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	409a      	lsls	r2, r3
 8001a22:	0013      	movs	r3, r2
 8001a24:	43da      	mvns	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2107      	movs	r1, #7
 8001a34:	400b      	ands	r3, r1
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	6939      	ldr	r1, [r7, #16]
 8001a4e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	0013      	movs	r3, r2
 8001a60:	43da      	mvns	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	409a      	lsls	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d00b      	beq.n	8001aa4 <HAL_GPIO_Init+0xd4>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d007      	beq.n	8001aa4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a98:	2b11      	cmp	r3, #17
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b12      	cmp	r3, #18
 8001aa2:	d130      	bne.n	8001b06 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	0013      	movs	r3, r2
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	0013      	movs	r3, r2
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ada:	2201      	movs	r2, #1
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	2201      	movs	r2, #1
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
 8001af8:	0013      	movs	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	409a      	lsls	r2, r3
 8001b14:	0013      	movs	r3, r2
 8001b16:	43da      	mvns	r2, r3
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	409a      	lsls	r2, r3
 8001b28:	0013      	movs	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	055b      	lsls	r3, r3, #21
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d100      	bne.n	8001b44 <HAL_GPIO_Init+0x174>
 8001b42:	e09a      	b.n	8001c7a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b44:	4b54      	ldr	r3, [pc, #336]	; (8001c98 <HAL_GPIO_Init+0x2c8>)
 8001b46:	699a      	ldr	r2, [r3, #24]
 8001b48:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <HAL_GPIO_Init+0x2c8>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	619a      	str	r2, [r3, #24]
 8001b50:	4b51      	ldr	r3, [pc, #324]	; (8001c98 <HAL_GPIO_Init+0x2c8>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2201      	movs	r2, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b5c:	4a4f      	ldr	r2, [pc, #316]	; (8001c9c <HAL_GPIO_Init+0x2cc>)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	589b      	ldr	r3, [r3, r2]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	4013      	ands	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	220f      	movs	r2, #15
 8001b74:	409a      	lsls	r2, r3
 8001b76:	0013      	movs	r3, r2
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	2390      	movs	r3, #144	; 0x90
 8001b84:	05db      	lsls	r3, r3, #23
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0x1e2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a44      	ldr	r2, [pc, #272]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00d      	beq.n	8001bae <HAL_GPIO_Init+0x1de>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a43      	ldr	r2, [pc, #268]	; (8001ca4 <HAL_GPIO_Init+0x2d4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <HAL_GPIO_Init+0x1da>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a42      	ldr	r2, [pc, #264]	; (8001ca8 <HAL_GPIO_Init+0x2d8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_GPIO_Init+0x1d6>
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x1e4>
 8001ba6:	2305      	movs	r3, #5
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x1e4>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x1e4>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x1e4>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	2103      	movs	r1, #3
 8001bb8:	400a      	ands	r2, r1
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bc4:	4935      	ldr	r1, [pc, #212]	; (8001c9c <HAL_GPIO_Init+0x2cc>)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd2:	4b36      	ldr	r3, [pc, #216]	; (8001cac <HAL_GPIO_Init+0x2dc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	025b      	lsls	r3, r3, #9
 8001bea:	4013      	ands	r3, r2
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_GPIO_Init+0x2dc>)
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_GPIO_Init+0x2dc>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	43da      	mvns	r2, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	029b      	lsls	r3, r3, #10
 8001c14:	4013      	ands	r3, r2
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c20:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_GPIO_Init+0x2dc>)
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_GPIO_Init+0x2dc>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	035b      	lsls	r3, r3, #13
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_GPIO_Init+0x2dc>)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_GPIO_Init+0x2dc>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	43da      	mvns	r2, r3
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	039b      	lsls	r3, r3, #14
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_GPIO_Init+0x2dc>)
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	40da      	lsrs	r2, r3
 8001c88:	1e13      	subs	r3, r2, #0
 8001c8a:	d000      	beq.n	8001c8e <HAL_GPIO_Init+0x2be>
 8001c8c:	e6a8      	b.n	80019e0 <HAL_GPIO_Init+0x10>
  } 
}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b006      	add	sp, #24
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	48000400 	.word	0x48000400
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	48000c00 	.word	0x48000c00
 8001cac:	40010400 	.word	0x40010400

08001cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	000a      	movs	r2, r1
 8001cba:	1cbb      	adds	r3, r7, #2
 8001cbc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	1cba      	adds	r2, r7, #2
 8001cc4:	8812      	ldrh	r2, [r2, #0]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001cca:	230f      	movs	r3, #15
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e003      	b.n	8001cdc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001cdc:	230f      	movs	r3, #15
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	781b      	ldrb	r3, [r3, #0]
  }
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b004      	add	sp, #16
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	0008      	movs	r0, r1
 8001cf4:	0011      	movs	r1, r2
 8001cf6:	1cbb      	adds	r3, r7, #2
 8001cf8:	1c02      	adds	r2, r0, #0
 8001cfa:	801a      	strh	r2, [r3, #0]
 8001cfc:	1c7b      	adds	r3, r7, #1
 8001cfe:	1c0a      	adds	r2, r1, #0
 8001d00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d02:	1c7b      	adds	r3, r7, #1
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d0a:	1cbb      	adds	r3, r7, #2
 8001d0c:	881a      	ldrh	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d12:	e003      	b.n	8001d1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d14:	1cbb      	adds	r3, r7, #2
 8001d16:	881a      	ldrh	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b002      	add	sp, #8
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	1dbb      	adds	r3, r7, #6
 8001d2e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	1dba      	adds	r2, r7, #6
 8001d36:	8812      	ldrh	r2, [r2, #0]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d008      	beq.n	8001d4e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d3e:	1dba      	adds	r2, r7, #6
 8001d40:	8812      	ldrh	r2, [r2, #0]
 8001d42:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d44:	1dbb      	adds	r3, r7, #6
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 f807 	bl	8001d5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b002      	add	sp, #8
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	40010400 	.word	0x40010400

08001d5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	0002      	movs	r2, r0
 8001d64:	1dbb      	adds	r3, r7, #6
 8001d66:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001d68:	46c0      	nop			; (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b002      	add	sp, #8
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e303      	b.n	800238a <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d100      	bne.n	8001d8e <HAL_RCC_OscConfig+0x1e>
 8001d8c:	e08d      	b.n	8001eaa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d8e:	4bc4      	ldr	r3, [pc, #784]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	220c      	movs	r2, #12
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d00e      	beq.n	8001db8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d9a:	4bc1      	ldr	r3, [pc, #772]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	220c      	movs	r2, #12
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d116      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x64>
 8001da6:	4bbe      	ldr	r3, [pc, #760]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	025b      	lsls	r3, r3, #9
 8001dae:	401a      	ands	r2, r3
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	025b      	lsls	r3, r3, #9
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d10d      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	4bb9      	ldr	r3, [pc, #740]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	029b      	lsls	r3, r3, #10
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d100      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x56>
 8001dc4:	e070      	b.n	8001ea8 <HAL_RCC_OscConfig+0x138>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d000      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x60>
 8001dce:	e06b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e2da      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_OscConfig+0x7c>
 8001ddc:	4bb0      	ldr	r3, [pc, #704]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4baf      	ldr	r3, [pc, #700]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	0249      	lsls	r1, r1, #9
 8001de6:	430a      	orrs	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e02f      	b.n	8001e4c <HAL_RCC_OscConfig+0xdc>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10c      	bne.n	8001e0e <HAL_RCC_OscConfig+0x9e>
 8001df4:	4baa      	ldr	r3, [pc, #680]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4ba9      	ldr	r3, [pc, #676]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001dfa:	49aa      	ldr	r1, [pc, #680]	; (80020a4 <HAL_RCC_OscConfig+0x334>)
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	4ba7      	ldr	r3, [pc, #668]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4ba6      	ldr	r3, [pc, #664]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e06:	49a8      	ldr	r1, [pc, #672]	; (80020a8 <HAL_RCC_OscConfig+0x338>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e01e      	b.n	8001e4c <HAL_RCC_OscConfig+0xdc>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d10e      	bne.n	8001e34 <HAL_RCC_OscConfig+0xc4>
 8001e16:	4ba2      	ldr	r3, [pc, #648]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4ba1      	ldr	r3, [pc, #644]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e1c:	2180      	movs	r1, #128	; 0x80
 8001e1e:	02c9      	lsls	r1, r1, #11
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	4b9e      	ldr	r3, [pc, #632]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b9d      	ldr	r3, [pc, #628]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e2a:	2180      	movs	r1, #128	; 0x80
 8001e2c:	0249      	lsls	r1, r1, #9
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0xdc>
 8001e34:	4b9a      	ldr	r3, [pc, #616]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b99      	ldr	r3, [pc, #612]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e3a:	499a      	ldr	r1, [pc, #616]	; (80020a4 <HAL_RCC_OscConfig+0x334>)
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	4b97      	ldr	r3, [pc, #604]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b96      	ldr	r3, [pc, #600]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e46:	4998      	ldr	r1, [pc, #608]	; (80020a8 <HAL_RCC_OscConfig+0x338>)
 8001e48:	400a      	ands	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d014      	beq.n	8001e7e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fcb2 	bl	80017bc <HAL_GetTick>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e5e:	f7ff fcad 	bl	80017bc <HAL_GetTick>
 8001e62:	0002      	movs	r2, r0
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b64      	cmp	r3, #100	; 0x64
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e28c      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e70:	4b8b      	ldr	r3, [pc, #556]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	029b      	lsls	r3, r3, #10
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0xee>
 8001e7c:	e015      	b.n	8001eaa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fc9d 	bl	80017bc <HAL_GetTick>
 8001e82:	0003      	movs	r3, r0
 8001e84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fc98 	bl	80017bc <HAL_GetTick>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e277      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	4b81      	ldr	r3, [pc, #516]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	029b      	lsls	r3, r3, #10
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x118>
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x146>
 8001eb4:	e069      	b.n	8001f8a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001eb6:	4b7a      	ldr	r3, [pc, #488]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	220c      	movs	r2, #12
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d00b      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ec0:	4b77      	ldr	r3, [pc, #476]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	220c      	movs	r2, #12
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d11c      	bne.n	8001f06 <HAL_RCC_OscConfig+0x196>
 8001ecc:	4b74      	ldr	r3, [pc, #464]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	025b      	lsls	r3, r3, #9
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d116      	bne.n	8001f06 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed8:	4b71      	ldr	r3, [pc, #452]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2202      	movs	r2, #2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d005      	beq.n	8001eee <HAL_RCC_OscConfig+0x17e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e24d      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b6c      	ldr	r3, [pc, #432]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	22f8      	movs	r2, #248	; 0xf8
 8001ef4:	4393      	bics	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	00da      	lsls	r2, r3, #3
 8001efe:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f04:	e041      	b.n	8001f8a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d024      	beq.n	8001f58 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0e:	4b64      	ldr	r3, [pc, #400]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b63      	ldr	r3, [pc, #396]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fc4f 	bl	80017bc <HAL_GetTick>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f24:	f7ff fc4a 	bl	80017bc <HAL_GetTick>
 8001f28:	0002      	movs	r2, r0
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e229      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	4b5a      	ldr	r3, [pc, #360]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d0f1      	beq.n	8001f24 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f40:	4b57      	ldr	r3, [pc, #348]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	22f8      	movs	r2, #248	; 0xf8
 8001f46:	4393      	bics	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00da      	lsls	r2, r3, #3
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e018      	b.n	8001f8a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f58:	4b51      	ldr	r3, [pc, #324]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	438a      	bics	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fc2a 	bl	80017bc <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7ff fc25 	bl	80017bc <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e204      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f80:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2202      	movs	r2, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	d1f1      	bne.n	8001f6e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2208      	movs	r2, #8
 8001f90:	4013      	ands	r3, r2
 8001f92:	d036      	beq.n	8002002 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d019      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9c:	4b40      	ldr	r3, [pc, #256]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa0:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fc08 	bl	80017bc <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7ff fc03 	bl	80017bc <HAL_GetTick>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e1e2      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc4:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	2202      	movs	r2, #2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d0f1      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x242>
 8001fce:	e018      	b.n	8002002 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd0:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd4:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	438a      	bics	r2, r1
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fbee 	bl	80017bc <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe6:	f7ff fbe9 	bl	80017bc <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1c8      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d1f1      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2204      	movs	r2, #4
 8002008:	4013      	ands	r3, r2
 800200a:	d100      	bne.n	800200e <HAL_RCC_OscConfig+0x29e>
 800200c:	e0b6      	b.n	800217c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200e:	231f      	movs	r3, #31
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002016:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8002018:	69da      	ldr	r2, [r3, #28]
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	055b      	lsls	r3, r3, #21
 800201e:	4013      	ands	r3, r2
 8002020:	d111      	bne.n	8002046 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	0549      	lsls	r1, r1, #21
 800202c:	430a      	orrs	r2, r1
 800202e:	61da      	str	r2, [r3, #28]
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	055b      	lsls	r3, r3, #21
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800203e:	231f      	movs	r3, #31
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_RCC_OscConfig+0x33c>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4013      	ands	r3, r2
 8002050:	d11a      	bne.n	8002088 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <HAL_RCC_OscConfig+0x33c>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_RCC_OscConfig+0x33c>)
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0049      	lsls	r1, r1, #1
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002060:	f7ff fbac 	bl	80017bc <HAL_GetTick>
 8002064:	0003      	movs	r3, r0
 8002066:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206a:	f7ff fba7 	bl	80017bc <HAL_GetTick>
 800206e:	0002      	movs	r2, r0
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b64      	cmp	r3, #100	; 0x64
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e186      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_RCC_OscConfig+0x33c>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4013      	ands	r3, r2
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d10f      	bne.n	80020b0 <HAL_RCC_OscConfig+0x340>
 8002090:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8002092:	6a1a      	ldr	r2, [r3, #32]
 8002094:	4b02      	ldr	r3, [pc, #8]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8002096:	2101      	movs	r1, #1
 8002098:	430a      	orrs	r2, r1
 800209a:	621a      	str	r2, [r3, #32]
 800209c:	e036      	b.n	800210c <HAL_RCC_OscConfig+0x39c>
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	40021000 	.word	0x40021000
 80020a4:	fffeffff 	.word	0xfffeffff
 80020a8:	fffbffff 	.word	0xfffbffff
 80020ac:	40007000 	.word	0x40007000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCC_OscConfig+0x362>
 80020b8:	4bb6      	ldr	r3, [pc, #728]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80020ba:	6a1a      	ldr	r2, [r3, #32]
 80020bc:	4bb5      	ldr	r3, [pc, #724]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80020be:	2101      	movs	r1, #1
 80020c0:	438a      	bics	r2, r1
 80020c2:	621a      	str	r2, [r3, #32]
 80020c4:	4bb3      	ldr	r3, [pc, #716]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	4bb2      	ldr	r3, [pc, #712]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80020ca:	2104      	movs	r1, #4
 80020cc:	438a      	bics	r2, r1
 80020ce:	621a      	str	r2, [r3, #32]
 80020d0:	e01c      	b.n	800210c <HAL_RCC_OscConfig+0x39c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b05      	cmp	r3, #5
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x384>
 80020da:	4bae      	ldr	r3, [pc, #696]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80020dc:	6a1a      	ldr	r2, [r3, #32]
 80020de:	4bad      	ldr	r3, [pc, #692]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80020e0:	2104      	movs	r1, #4
 80020e2:	430a      	orrs	r2, r1
 80020e4:	621a      	str	r2, [r3, #32]
 80020e6:	4bab      	ldr	r3, [pc, #684]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80020e8:	6a1a      	ldr	r2, [r3, #32]
 80020ea:	4baa      	ldr	r3, [pc, #680]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	430a      	orrs	r2, r1
 80020f0:	621a      	str	r2, [r3, #32]
 80020f2:	e00b      	b.n	800210c <HAL_RCC_OscConfig+0x39c>
 80020f4:	4ba7      	ldr	r3, [pc, #668]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80020f6:	6a1a      	ldr	r2, [r3, #32]
 80020f8:	4ba6      	ldr	r3, [pc, #664]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	438a      	bics	r2, r1
 80020fe:	621a      	str	r2, [r3, #32]
 8002100:	4ba4      	ldr	r3, [pc, #656]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002102:	6a1a      	ldr	r2, [r3, #32]
 8002104:	4ba3      	ldr	r3, [pc, #652]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002106:	2104      	movs	r1, #4
 8002108:	438a      	bics	r2, r1
 800210a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d014      	beq.n	800213e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002114:	f7ff fb52 	bl	80017bc <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	e009      	b.n	8002132 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7ff fb4d 	bl	80017bc <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	4a9b      	ldr	r2, [pc, #620]	; (8002398 <HAL_RCC_OscConfig+0x628>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e12b      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002132:	4b98      	ldr	r3, [pc, #608]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	2202      	movs	r2, #2
 8002138:	4013      	ands	r3, r2
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x3ae>
 800213c:	e013      	b.n	8002166 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7ff fb3d 	bl	80017bc <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002146:	e009      	b.n	800215c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7ff fb38 	bl	80017bc <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	4a91      	ldr	r2, [pc, #580]	; (8002398 <HAL_RCC_OscConfig+0x628>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e116      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	4b8d      	ldr	r3, [pc, #564]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	2202      	movs	r2, #2
 8002162:	4013      	ands	r3, r2
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002166:	231f      	movs	r3, #31
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002170:	4b88      	ldr	r3, [pc, #544]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002172:	69da      	ldr	r2, [r3, #28]
 8002174:	4b87      	ldr	r3, [pc, #540]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002176:	4989      	ldr	r1, [pc, #548]	; (800239c <HAL_RCC_OscConfig+0x62c>)
 8002178:	400a      	ands	r2, r1
 800217a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2210      	movs	r2, #16
 8002182:	4013      	ands	r3, r2
 8002184:	d063      	beq.n	800224e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d12a      	bne.n	80021e4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800218e:	4b81      	ldr	r3, [pc, #516]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002192:	4b80      	ldr	r3, [pc, #512]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002194:	2104      	movs	r1, #4
 8002196:	430a      	orrs	r2, r1
 8002198:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800219a:	4b7e      	ldr	r3, [pc, #504]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 800219c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219e:	4b7d      	ldr	r3, [pc, #500]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	430a      	orrs	r2, r1
 80021a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a6:	f7ff fb09 	bl	80017bc <HAL_GetTick>
 80021aa:	0003      	movs	r3, r0
 80021ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021b0:	f7ff fb04 	bl	80017bc <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0e3      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021c2:	4b74      	ldr	r3, [pc, #464]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	2202      	movs	r2, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	d0f1      	beq.n	80021b0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021cc:	4b71      	ldr	r3, [pc, #452]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80021ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d0:	22f8      	movs	r2, #248	; 0xf8
 80021d2:	4393      	bics	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	00da      	lsls	r2, r3, #3
 80021dc:	4b6d      	ldr	r3, [pc, #436]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	635a      	str	r2, [r3, #52]	; 0x34
 80021e2:	e034      	b.n	800224e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	3305      	adds	r3, #5
 80021ea:	d111      	bne.n	8002210 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021ec:	4b69      	ldr	r3, [pc, #420]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80021ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f0:	4b68      	ldr	r3, [pc, #416]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80021f2:	2104      	movs	r1, #4
 80021f4:	438a      	bics	r2, r1
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021f8:	4b66      	ldr	r3, [pc, #408]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80021fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fc:	22f8      	movs	r2, #248	; 0xf8
 80021fe:	4393      	bics	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	00da      	lsls	r2, r3, #3
 8002208:	4b62      	ldr	r3, [pc, #392]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 800220a:	430a      	orrs	r2, r1
 800220c:	635a      	str	r2, [r3, #52]	; 0x34
 800220e:	e01e      	b.n	800224e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002210:	4b60      	ldr	r3, [pc, #384]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002214:	4b5f      	ldr	r3, [pc, #380]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002216:	2104      	movs	r1, #4
 8002218:	430a      	orrs	r2, r1
 800221a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800221c:	4b5d      	ldr	r3, [pc, #372]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 800221e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002220:	4b5c      	ldr	r3, [pc, #368]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002222:	2101      	movs	r1, #1
 8002224:	438a      	bics	r2, r1
 8002226:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002228:	f7ff fac8 	bl	80017bc <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002232:	f7ff fac3 	bl	80017bc <HAL_GetTick>
 8002236:	0002      	movs	r2, r0
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e0a2      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002244:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002248:	2202      	movs	r2, #2
 800224a:	4013      	ands	r3, r2
 800224c:	d1f1      	bne.n	8002232 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d100      	bne.n	8002258 <HAL_RCC_OscConfig+0x4e8>
 8002256:	e097      	b.n	8002388 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002258:	4b4e      	ldr	r3, [pc, #312]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	220c      	movs	r2, #12
 800225e:	4013      	ands	r3, r2
 8002260:	2b08      	cmp	r3, #8
 8002262:	d100      	bne.n	8002266 <HAL_RCC_OscConfig+0x4f6>
 8002264:	e06b      	b.n	800233e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d14c      	bne.n	8002308 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226e:	4b49      	ldr	r3, [pc, #292]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b48      	ldr	r3, [pc, #288]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002274:	494a      	ldr	r1, [pc, #296]	; (80023a0 <HAL_RCC_OscConfig+0x630>)
 8002276:	400a      	ands	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff fa9f 	bl	80017bc <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7ff fa9a 	bl	80017bc <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e079      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002296:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	049b      	lsls	r3, r3, #18
 800229e:	4013      	ands	r3, r2
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a2:	4b3c      	ldr	r3, [pc, #240]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	220f      	movs	r2, #15
 80022a8:	4393      	bics	r3, r2
 80022aa:	0019      	movs	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b0:	4b38      	ldr	r3, [pc, #224]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80022b2:	430a      	orrs	r2, r1
 80022b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4a3a      	ldr	r2, [pc, #232]	; (80023a4 <HAL_RCC_OscConfig+0x634>)
 80022bc:	4013      	ands	r3, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	431a      	orrs	r2, r3
 80022ca:	4b32      	ldr	r3, [pc, #200]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80022cc:	430a      	orrs	r2, r1
 80022ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d0:	4b30      	ldr	r3, [pc, #192]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80022d6:	2180      	movs	r1, #128	; 0x80
 80022d8:	0449      	lsls	r1, r1, #17
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7ff fa6d 	bl	80017bc <HAL_GetTick>
 80022e2:	0003      	movs	r3, r0
 80022e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e8:	f7ff fa68 	bl	80017bc <HAL_GetTick>
 80022ec:	0002      	movs	r2, r0
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e047      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	049b      	lsls	r3, r3, #18
 8002302:	4013      	ands	r3, r2
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x578>
 8002306:	e03f      	b.n	8002388 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002308:	4b22      	ldr	r3, [pc, #136]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b21      	ldr	r3, [pc, #132]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 800230e:	4924      	ldr	r1, [pc, #144]	; (80023a0 <HAL_RCC_OscConfig+0x630>)
 8002310:	400a      	ands	r2, r1
 8002312:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff fa52 	bl	80017bc <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231e:	f7ff fa4d 	bl	80017bc <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e02c      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	049b      	lsls	r3, r3, #18
 8002338:	4013      	ands	r3, r2
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x5ae>
 800233c:	e024      	b.n	8002388 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e01f      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	025b      	lsls	r3, r3, #9
 800235c:	401a      	ands	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	429a      	cmp	r2, r3
 8002364:	d10e      	bne.n	8002384 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	220f      	movs	r2, #15
 800236a:	401a      	ands	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	23f0      	movs	r3, #240	; 0xf0
 8002378:	039b      	lsls	r3, r3, #14
 800237a:	401a      	ands	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b008      	add	sp, #32
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	40021000 	.word	0x40021000
 8002398:	00001388 	.word	0x00001388
 800239c:	efffffff 	.word	0xefffffff
 80023a0:	feffffff 	.word	0xfeffffff
 80023a4:	ffc2ffff 	.word	0xffc2ffff

080023a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0b3      	b.n	8002524 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b5b      	ldr	r3, [pc, #364]	; (800252c <HAL_RCC_ClockConfig+0x184>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2201      	movs	r2, #1
 80023c2:	4013      	ands	r3, r2
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d911      	bls.n	80023ee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b58      	ldr	r3, [pc, #352]	; (800252c <HAL_RCC_ClockConfig+0x184>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	4393      	bics	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	4b55      	ldr	r3, [pc, #340]	; (800252c <HAL_RCC_ClockConfig+0x184>)
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_ClockConfig+0x184>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e09a      	b.n	8002524 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2202      	movs	r2, #2
 80023f4:	4013      	ands	r3, r2
 80023f6:	d015      	beq.n	8002424 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2204      	movs	r2, #4
 80023fe:	4013      	ands	r3, r2
 8002400:	d006      	beq.n	8002410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002402:	4b4b      	ldr	r3, [pc, #300]	; (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002408:	21e0      	movs	r1, #224	; 0xe0
 800240a:	00c9      	lsls	r1, r1, #3
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	22f0      	movs	r2, #240	; 0xf0
 8002416:	4393      	bics	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	4b44      	ldr	r3, [pc, #272]	; (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2201      	movs	r2, #1
 800242a:	4013      	ands	r3, r2
 800242c:	d040      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b3e      	ldr	r3, [pc, #248]	; (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	029b      	lsls	r3, r3, #10
 800243e:	4013      	ands	r3, r2
 8002440:	d114      	bne.n	800246c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e06e      	b.n	8002524 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b38      	ldr	r3, [pc, #224]	; (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	049b      	lsls	r3, r3, #18
 8002456:	4013      	ands	r3, r2
 8002458:	d108      	bne.n	800246c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e062      	b.n	8002524 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b34      	ldr	r3, [pc, #208]	; (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2202      	movs	r2, #2
 8002464:	4013      	ands	r3, r2
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e05b      	b.n	8002524 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246c:	4b30      	ldr	r3, [pc, #192]	; (8002530 <HAL_RCC_ClockConfig+0x188>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2203      	movs	r2, #3
 8002472:	4393      	bics	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <HAL_RCC_ClockConfig+0x188>)
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002480:	f7ff f99c 	bl	80017bc <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002488:	e009      	b.n	800249e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248a:	f7ff f997 	bl	80017bc <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	4a27      	ldr	r2, [pc, #156]	; (8002534 <HAL_RCC_ClockConfig+0x18c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e042      	b.n	8002524 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_RCC_ClockConfig+0x188>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	220c      	movs	r2, #12
 80024a4:	401a      	ands	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1ec      	bne.n	800248a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b1e      	ldr	r3, [pc, #120]	; (800252c <HAL_RCC_ClockConfig+0x184>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d211      	bcs.n	80024e2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_RCC_ClockConfig+0x184>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2201      	movs	r2, #1
 80024c4:	4393      	bics	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_RCC_ClockConfig+0x184>)
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d0:	4b16      	ldr	r3, [pc, #88]	; (800252c <HAL_RCC_ClockConfig+0x184>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2201      	movs	r2, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e020      	b.n	8002524 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2204      	movs	r2, #4
 80024e8:	4013      	ands	r3, r2
 80024ea:	d009      	beq.n	8002500 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_RCC_ClockConfig+0x188>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a11      	ldr	r2, [pc, #68]	; (8002538 <HAL_RCC_ClockConfig+0x190>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <HAL_RCC_ClockConfig+0x188>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002500:	f000 f820 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8002504:	0001      	movs	r1, r0
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	220f      	movs	r2, #15
 800250e:	4013      	ands	r3, r2
 8002510:	4a0a      	ldr	r2, [pc, #40]	; (800253c <HAL_RCC_ClockConfig+0x194>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	000a      	movs	r2, r1
 8002516:	40da      	lsrs	r2, r3
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_RCC_ClockConfig+0x198>)
 800251a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800251c:	2000      	movs	r0, #0
 800251e:	f7ff f907 	bl	8001730 <HAL_InitTick>
  
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b004      	add	sp, #16
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40022000 	.word	0x40022000
 8002530:	40021000 	.word	0x40021000
 8002534:	00001388 	.word	0x00001388
 8002538:	fffff8ff 	.word	0xfffff8ff
 800253c:	08005014 	.word	0x08005014
 8002540:	20000008 	.word	0x20000008

08002544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b08f      	sub	sp, #60	; 0x3c
 8002548:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800254a:	2314      	movs	r3, #20
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	4a2b      	ldr	r2, [pc, #172]	; (80025fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002550:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002552:	c313      	stmia	r3!, {r0, r1, r4}
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	4a29      	ldr	r2, [pc, #164]	; (8002600 <HAL_RCC_GetSysClockFreq+0xbc>)
 800255c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800255e:	c313      	stmia	r3!, {r0, r1, r4}
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002568:	2300      	movs	r3, #0
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
 800256c:	2300      	movs	r3, #0
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002578:	4b22      	ldr	r3, [pc, #136]	; (8002604 <HAL_RCC_GetSysClockFreq+0xc0>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	220c      	movs	r2, #12
 8002582:	4013      	ands	r3, r2
 8002584:	2b04      	cmp	r3, #4
 8002586:	d002      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0x4a>
 8002588:	2b08      	cmp	r3, #8
 800258a:	d003      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x50>
 800258c:	e02d      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002592:	e02d      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	0c9b      	lsrs	r3, r3, #18
 8002598:	220f      	movs	r2, #15
 800259a:	4013      	ands	r3, r2
 800259c:	2214      	movs	r2, #20
 800259e:	18ba      	adds	r2, r7, r2
 80025a0:	5cd3      	ldrb	r3, [r2, r3]
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	220f      	movs	r2, #15
 80025aa:	4013      	ands	r3, r2
 80025ac:	1d3a      	adds	r2, r7, #4
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	025b      	lsls	r3, r3, #9
 80025b8:	4013      	ands	r3, r2
 80025ba:	d009      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025be:	4812      	ldr	r0, [pc, #72]	; (8002608 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025c0:	f7fd fda2 	bl	8000108 <__udivsi3>
 80025c4:	0003      	movs	r3, r0
 80025c6:	001a      	movs	r2, r3
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	4353      	muls	r3, r2
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
 80025ce:	e009      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80025d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d2:	000a      	movs	r2, r1
 80025d4:	0152      	lsls	r2, r2, #5
 80025d6:	1a52      	subs	r2, r2, r1
 80025d8:	0193      	lsls	r3, r2, #6
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	185b      	adds	r3, r3, r1
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80025e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025e8:	e002      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025f2:	0018      	movs	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b00f      	add	sp, #60	; 0x3c
 80025f8:	bd90      	pop	{r4, r7, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	08004ff4 	.word	0x08004ff4
 8002600:	08005004 	.word	0x08005004
 8002604:	40021000 	.word	0x40021000
 8002608:	007a1200 	.word	0x007a1200

0800260c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e08a      	b.n	8002734 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	225d      	movs	r2, #93	; 0x5d
 8002628:	5c9b      	ldrb	r3, [r3, r2]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d107      	bne.n	8002640 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	225c      	movs	r2, #92	; 0x5c
 8002634:	2100      	movs	r1, #0
 8002636:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	0018      	movs	r0, r3
 800263c:	f7fe fb54 	bl	8000ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	225d      	movs	r2, #93	; 0x5d
 8002644:	2102      	movs	r1, #2
 8002646:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2140      	movs	r1, #64	; 0x40
 8002654:	438a      	bics	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	23e0      	movs	r3, #224	; 0xe0
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	429a      	cmp	r2, r3
 8002662:	d902      	bls.n	800266a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e002      	b.n	8002670 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	015b      	lsls	r3, r3, #5
 800266e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	23f0      	movs	r3, #240	; 0xf0
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	429a      	cmp	r2, r3
 800267a:	d008      	beq.n	800268e <HAL_SPI_Init+0x82>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	23e0      	movs	r3, #224	; 0xe0
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	429a      	cmp	r2, r3
 8002686:	d002      	beq.n	800268e <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10c      	bne.n	80026b0 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	23e0      	movs	r3, #224	; 0xe0
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	429a      	cmp	r2, r3
 80026a0:	d903      	bls.n	80026aa <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
 80026a8:	e002      	b.n	80026b0 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6999      	ldr	r1, [r3, #24]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	400b      	ands	r3, r1
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	431a      	orrs	r2, r3
 80026de:	0011      	movs	r1, r2
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	2204      	movs	r2, #4
 80026f4:	401a      	ands	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	431a      	orrs	r2, r3
 8002708:	0011      	movs	r1, r2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	430a      	orrs	r2, r1
 8002712:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4907      	ldr	r1, [pc, #28]	; (800273c <HAL_SPI_Init+0x130>)
 8002720:	400a      	ands	r2, r1
 8002722:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	225d      	movs	r2, #93	; 0x5d
 800272e:	2101      	movs	r1, #1
 8002730:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b004      	add	sp, #16
 800273a:	bd80      	pop	{r7, pc}
 800273c:	fffff7ff 	.word	0xfffff7ff

08002740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e01e      	b.n	8002790 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	223d      	movs	r2, #61	; 0x3d
 8002756:	5c9b      	ldrb	r3, [r3, r2]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	223c      	movs	r2, #60	; 0x3c
 8002762:	2100      	movs	r1, #0
 8002764:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0018      	movs	r0, r3
 800276a:	f7fe fea1 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	223d      	movs	r2, #61	; 0x3d
 8002772:	2102      	movs	r1, #2
 8002774:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3304      	adds	r3, #4
 800277e:	0019      	movs	r1, r3
 8002780:	0010      	movs	r0, r2
 8002782:	f000 fbd1 	bl	8002f28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	223d      	movs	r2, #61	; 0x3d
 800278a:	2101      	movs	r1, #1
 800278c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	b002      	add	sp, #8
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	223d      	movs	r2, #61	; 0x3d
 80027a4:	2102      	movs	r1, #2
 80027a6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2207      	movs	r2, #7
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d007      	beq.n	80027ca <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2101      	movs	r1, #1
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	223d      	movs	r2, #61	; 0x3d
 80027ce:	2101      	movs	r1, #1
 80027d0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	0018      	movs	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b004      	add	sp, #16
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2101      	movs	r1, #1
 80027f0:	430a      	orrs	r2, r1
 80027f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2207      	movs	r2, #7
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b06      	cmp	r3, #6
 8002804:	d007      	beq.n	8002816 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2101      	movs	r1, #1
 8002812:	430a      	orrs	r2, r1
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b004      	add	sp, #16
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2101      	movs	r1, #1
 8002834:	438a      	bics	r2, r1
 8002836:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	4a0b      	ldr	r2, [pc, #44]	; (800286c <HAL_TIM_Base_Stop_IT+0x4c>)
 8002840:	4013      	ands	r3, r2
 8002842:	d10d      	bne.n	8002860 <HAL_TIM_Base_Stop_IT+0x40>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HAL_TIM_Base_Stop_IT+0x50>)
 800284c:	4013      	ands	r3, r2
 800284e:	d107      	bne.n	8002860 <HAL_TIM_Base_Stop_IT+0x40>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2101      	movs	r1, #1
 800285c:	438a      	bics	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b002      	add	sp, #8
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	00001111 	.word	0x00001111
 8002870:	00000444 	.word	0x00000444

08002874 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e01e      	b.n	80028c4 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	223d      	movs	r2, #61	; 0x3d
 800288a:	5c9b      	ldrb	r3, [r3, r2]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d107      	bne.n	80028a2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	223c      	movs	r2, #60	; 0x3c
 8002896:	2100      	movs	r1, #0
 8002898:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	0018      	movs	r0, r3
 800289e:	f7fe fd59 	bl	8001354 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	223d      	movs	r2, #61	; 0x3d
 80028a6:	2102      	movs	r1, #2
 80028a8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3304      	adds	r3, #4
 80028b2:	0019      	movs	r1, r3
 80028b4:	0010      	movs	r0, r2
 80028b6:	f000 fb37 	bl	8002f28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	223d      	movs	r2, #61	; 0x3d
 80028be:	2101      	movs	r1, #1
 80028c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b002      	add	sp, #8
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6839      	ldr	r1, [r7, #0]
 80028dc:	2201      	movs	r2, #1
 80028de:	0018      	movs	r0, r3
 80028e0:	f000 fd9e 	bl	8003420 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1a      	ldr	r2, [pc, #104]	; (8002954 <HAL_TIM_PWM_Start+0x88>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00e      	beq.n	800290c <HAL_TIM_PWM_Start+0x40>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a19      	ldr	r2, [pc, #100]	; (8002958 <HAL_TIM_PWM_Start+0x8c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_TIM_PWM_Start+0x40>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a17      	ldr	r2, [pc, #92]	; (800295c <HAL_TIM_PWM_Start+0x90>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d004      	beq.n	800290c <HAL_TIM_PWM_Start+0x40>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a16      	ldr	r2, [pc, #88]	; (8002960 <HAL_TIM_PWM_Start+0x94>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d101      	bne.n	8002910 <HAL_TIM_PWM_Start+0x44>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_TIM_PWM_Start+0x46>
 8002910:	2300      	movs	r3, #0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2180      	movs	r1, #128	; 0x80
 8002922:	0209      	lsls	r1, r1, #8
 8002924:	430a      	orrs	r2, r1
 8002926:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2207      	movs	r2, #7
 8002930:	4013      	ands	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b06      	cmp	r3, #6
 8002938:	d007      	beq.n	800294a <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2101      	movs	r1, #1
 8002946:	430a      	orrs	r2, r1
 8002948:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b004      	add	sp, #16
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40014000 	.word	0x40014000
 800295c:	40014400 	.word	0x40014400
 8002960:	40014800 	.word	0x40014800

08002964 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e07c      	b.n	8002a72 <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	223d      	movs	r2, #61	; 0x3d
 800297c:	5c9b      	ldrb	r3, [r3, r2]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	223c      	movs	r2, #60	; 0x3c
 8002988:	2100      	movs	r1, #0
 800298a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0018      	movs	r0, r3
 8002990:	f7fe fd14 	bl	80013bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	223d      	movs	r2, #61	; 0x3d
 8002998:	2102      	movs	r1, #2
 800299a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4935      	ldr	r1, [pc, #212]	; (8002a7c <HAL_TIM_Encoder_Init+0x118>)
 80029a8:	400a      	ands	r2, r1
 80029aa:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3304      	adds	r3, #4
 80029b4:	0019      	movs	r1, r3
 80029b6:	0010      	movs	r0, r2
 80029b8:	f000 fab6 	bl	8002f28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_TIM_Encoder_Init+0x11c>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	4313      	orrs	r3, r2
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4a22      	ldr	r2, [pc, #136]	; (8002a84 <HAL_TIM_Encoder_Init+0x120>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <HAL_TIM_Encoder_Init+0x124>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	4313      	orrs	r3, r2
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	011a      	lsls	r2, r3, #4
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	031b      	lsls	r3, r3, #12
 8002a26:	4313      	orrs	r3, r2
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2222      	movs	r2, #34	; 0x22
 8002a32:	4393      	bics	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2288      	movs	r2, #136	; 0x88
 8002a3a:	4393      	bics	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	223d      	movs	r2, #61	; 0x3d
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b006      	add	sp, #24
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	ffffbff8 	.word	0xffffbff8
 8002a80:	fffffcfc 	.word	0xfffffcfc
 8002a84:	fffff3f3 	.word	0xfffff3f3
 8002a88:	ffff0f0f 	.word	0xffff0f0f

08002a8c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_TIM_Encoder_Start_IT+0x16>
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d010      	beq.n	8002ac2 <HAL_TIM_Encoder_Start_IT+0x36>
 8002aa0:	e01f      	b.n	8002ae2 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 fcb8 	bl	8003420 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2102      	movs	r1, #2
 8002abc:	430a      	orrs	r2, r1
 8002abe:	60da      	str	r2, [r3, #12]
      break;
 8002ac0:	e02e      	b.n	8002b20 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2104      	movs	r1, #4
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 fca8 	bl	8003420 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2104      	movs	r1, #4
 8002adc:	430a      	orrs	r2, r1
 8002ade:	60da      	str	r2, [r3, #12]
      break;
 8002ae0:	e01e      	b.n	8002b20 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2100      	movs	r1, #0
 8002aea:	0018      	movs	r0, r3
 8002aec:	f000 fc98 	bl	8003420 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2201      	movs	r2, #1
 8002af6:	2104      	movs	r1, #4
 8002af8:	0018      	movs	r0, r3
 8002afa:	f000 fc91 	bl	8003420 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2102      	movs	r1, #2
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2104      	movs	r1, #4
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	60da      	str	r2, [r3, #12]
      break;
 8002b1e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	0018      	movs	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b002      	add	sp, #8
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d124      	bne.n	8002b9a <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2202      	movs	r2, #2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d11d      	bne.n	8002b9a <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2203      	movs	r2, #3
 8002b64:	4252      	negs	r2, r2
 8002b66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2203      	movs	r2, #3
 8002b76:	4013      	ands	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f000 f9bb 	bl	8002ef8 <HAL_TIM_IC_CaptureCallback>
 8002b82:	e007      	b.n	8002b94 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	0018      	movs	r0, r3
 8002b88:	f000 f9ae 	bl	8002ee8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f000 f9ba 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d125      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2204      	movs	r2, #4
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d11e      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2205      	movs	r2, #5
 8002bbc:	4252      	negs	r2, r2
 8002bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	23c0      	movs	r3, #192	; 0xc0
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f000 f98e 	bl	8002ef8 <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e007      	b.n	8002bee <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	0018      	movs	r0, r3
 8002be2:	f000 f981 	bl	8002ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 f98d 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d124      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2208      	movs	r2, #8
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d11d      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2209      	movs	r2, #9
 8002c16:	4252      	negs	r2, r2
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	2203      	movs	r2, #3
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f000 f962 	bl	8002ef8 <HAL_TIM_IC_CaptureCallback>
 8002c34:	e007      	b.n	8002c46 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 f955 	bl	8002ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f000 f961 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2210      	movs	r2, #16
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d125      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2210      	movs	r2, #16
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d11e      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2211      	movs	r2, #17
 8002c6e:	4252      	negs	r2, r2
 8002c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2208      	movs	r2, #8
 8002c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69da      	ldr	r2, [r3, #28]
 8002c7e:	23c0      	movs	r3, #192	; 0xc0
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d004      	beq.n	8002c90 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f000 f935 	bl	8002ef8 <HAL_TIM_IC_CaptureCallback>
 8002c8e:	e007      	b.n	8002ca0 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	0018      	movs	r0, r3
 8002c94:	f000 f928 	bl	8002ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 f934 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2201      	movs	r2, #1
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10f      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d108      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4252      	negs	r2, r2
 8002cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f000 f902 	bl	8002ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b80      	cmp	r3, #128	; 0x80
 8002ce0:	d10f      	bne.n	8002d02 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2280      	movs	r2, #128	; 0x80
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b80      	cmp	r3, #128	; 0x80
 8002cee:	d108      	bne.n	8002d02 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2281      	movs	r2, #129	; 0x81
 8002cf6:	4252      	negs	r2, r2
 8002cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 fc77 	bl	80035f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	2240      	movs	r2, #64	; 0x40
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d10f      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	2240      	movs	r2, #64	; 0x40
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d108      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2241      	movs	r2, #65	; 0x41
 8002d24:	4252      	negs	r2, r2
 8002d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 f8f4 	bl	8002f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2220      	movs	r2, #32
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d10f      	bne.n	8002d5e <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2220      	movs	r2, #32
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d108      	bne.n	8002d5e <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2221      	movs	r2, #33	; 0x21
 8002d52:	4252      	negs	r2, r2
 8002d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f000 fc41 	bl	80035e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	223c      	movs	r2, #60	; 0x3c
 8002d78:	5c9b      	ldrb	r3, [r3, r2]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e0a4      	b.n	8002ecc <HAL_TIM_PWM_ConfigChannel+0x164>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	223c      	movs	r2, #60	; 0x3c
 8002d86:	2101      	movs	r1, #1
 8002d88:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	223d      	movs	r2, #61	; 0x3d
 8002d8e:	2102      	movs	r1, #2
 8002d90:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d029      	beq.n	8002dec <HAL_TIM_PWM_ConfigChannel+0x84>
 8002d98:	d802      	bhi.n	8002da0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002d9e:	e08c      	b.n	8002eba <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d046      	beq.n	8002e32 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	d065      	beq.n	8002e74 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002da8:	e087      	b.n	8002eba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	0011      	movs	r1, r2
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 f938 	bl	8003028 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2108      	movs	r1, #8
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2104      	movs	r1, #4
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6999      	ldr	r1, [r3, #24]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	619a      	str	r2, [r3, #24]
      break;
 8002dea:	e066      	b.n	8002eba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	0011      	movs	r1, r2
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 f99f 	bl	8003138 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2180      	movs	r1, #128	; 0x80
 8002e06:	0109      	lsls	r1, r1, #4
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	492f      	ldr	r1, [pc, #188]	; (8002ed4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002e18:	400a      	ands	r2, r1
 8002e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6999      	ldr	r1, [r3, #24]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	021a      	lsls	r2, r3, #8
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	619a      	str	r2, [r3, #24]
      break;
 8002e30:	e043      	b.n	8002eba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	0011      	movs	r1, r2
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f000 fa00 	bl	8003240 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2108      	movs	r1, #8
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2104      	movs	r1, #4
 8002e5c:	438a      	bics	r2, r1
 8002e5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69d9      	ldr	r1, [r3, #28]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	61da      	str	r2, [r3, #28]
      break;
 8002e72:	e022      	b.n	8002eba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	0011      	movs	r1, r2
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f000 fa65 	bl	800334c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69da      	ldr	r2, [r3, #28]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	0109      	lsls	r1, r1, #4
 8002e90:	430a      	orrs	r2, r1
 8002e92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	490d      	ldr	r1, [pc, #52]	; (8002ed4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69d9      	ldr	r1, [r3, #28]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	021a      	lsls	r2, r3, #8
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	61da      	str	r2, [r3, #28]
      break;
 8002eb8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	223d      	movs	r2, #61	; 0x3d
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	223c      	movs	r2, #60	; 0x3c
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b004      	add	sp, #16
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	fffffbff 	.word	0xfffffbff

08002ed8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a34      	ldr	r2, [pc, #208]	; (800300c <TIM_Base_SetConfig+0xe4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d008      	beq.n	8002f52 <TIM_Base_SetConfig+0x2a>
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	05db      	lsls	r3, r3, #23
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d003      	beq.n	8002f52 <TIM_Base_SetConfig+0x2a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a30      	ldr	r2, [pc, #192]	; (8003010 <TIM_Base_SetConfig+0xe8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d108      	bne.n	8002f64 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2270      	movs	r2, #112	; 0x70
 8002f56:	4393      	bics	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a29      	ldr	r2, [pc, #164]	; (800300c <TIM_Base_SetConfig+0xe4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d018      	beq.n	8002f9e <TIM_Base_SetConfig+0x76>
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	05db      	lsls	r3, r3, #23
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d013      	beq.n	8002f9e <TIM_Base_SetConfig+0x76>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a25      	ldr	r2, [pc, #148]	; (8003010 <TIM_Base_SetConfig+0xe8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00f      	beq.n	8002f9e <TIM_Base_SetConfig+0x76>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a24      	ldr	r2, [pc, #144]	; (8003014 <TIM_Base_SetConfig+0xec>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00b      	beq.n	8002f9e <TIM_Base_SetConfig+0x76>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a23      	ldr	r2, [pc, #140]	; (8003018 <TIM_Base_SetConfig+0xf0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d007      	beq.n	8002f9e <TIM_Base_SetConfig+0x76>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a22      	ldr	r2, [pc, #136]	; (800301c <TIM_Base_SetConfig+0xf4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d003      	beq.n	8002f9e <TIM_Base_SetConfig+0x76>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a21      	ldr	r2, [pc, #132]	; (8003020 <TIM_Base_SetConfig+0xf8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d108      	bne.n	8002fb0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4a20      	ldr	r2, [pc, #128]	; (8003024 <TIM_Base_SetConfig+0xfc>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2280      	movs	r2, #128	; 0x80
 8002fb4:	4393      	bics	r3, r2
 8002fb6:	001a      	movs	r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a0c      	ldr	r2, [pc, #48]	; (800300c <TIM_Base_SetConfig+0xe4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00b      	beq.n	8002ff6 <TIM_Base_SetConfig+0xce>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a0d      	ldr	r2, [pc, #52]	; (8003018 <TIM_Base_SetConfig+0xf0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <TIM_Base_SetConfig+0xce>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a0c      	ldr	r2, [pc, #48]	; (800301c <TIM_Base_SetConfig+0xf4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d003      	beq.n	8002ff6 <TIM_Base_SetConfig+0xce>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a0b      	ldr	r2, [pc, #44]	; (8003020 <TIM_Base_SetConfig+0xf8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d103      	bne.n	8002ffe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	615a      	str	r2, [r3, #20]
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b004      	add	sp, #16
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40000400 	.word	0x40000400
 8003014:	40002000 	.word	0x40002000
 8003018:	40014000 	.word	0x40014000
 800301c:	40014400 	.word	0x40014400
 8003020:	40014800 	.word	0x40014800
 8003024:	fffffcff 	.word	0xfffffcff

08003028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	2201      	movs	r2, #1
 8003038:	4393      	bics	r3, r2
 800303a:	001a      	movs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2270      	movs	r2, #112	; 0x70
 8003056:	4393      	bics	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2203      	movs	r2, #3
 800305e:	4393      	bics	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2202      	movs	r2, #2
 8003070:	4393      	bics	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a27      	ldr	r2, [pc, #156]	; (8003120 <TIM_OC1_SetConfig+0xf8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d00b      	beq.n	800309e <TIM_OC1_SetConfig+0x76>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a26      	ldr	r2, [pc, #152]	; (8003124 <TIM_OC1_SetConfig+0xfc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d007      	beq.n	800309e <TIM_OC1_SetConfig+0x76>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a25      	ldr	r2, [pc, #148]	; (8003128 <TIM_OC1_SetConfig+0x100>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d003      	beq.n	800309e <TIM_OC1_SetConfig+0x76>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a24      	ldr	r2, [pc, #144]	; (800312c <TIM_OC1_SetConfig+0x104>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d10c      	bne.n	80030b8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2208      	movs	r2, #8
 80030a2:	4393      	bics	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2204      	movs	r2, #4
 80030b4:	4393      	bics	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a19      	ldr	r2, [pc, #100]	; (8003120 <TIM_OC1_SetConfig+0xf8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00b      	beq.n	80030d8 <TIM_OC1_SetConfig+0xb0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a18      	ldr	r2, [pc, #96]	; (8003124 <TIM_OC1_SetConfig+0xfc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d007      	beq.n	80030d8 <TIM_OC1_SetConfig+0xb0>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a17      	ldr	r2, [pc, #92]	; (8003128 <TIM_OC1_SetConfig+0x100>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d003      	beq.n	80030d8 <TIM_OC1_SetConfig+0xb0>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a16      	ldr	r2, [pc, #88]	; (800312c <TIM_OC1_SetConfig+0x104>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d111      	bne.n	80030fc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4a15      	ldr	r2, [pc, #84]	; (8003130 <TIM_OC1_SetConfig+0x108>)
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4a14      	ldr	r2, [pc, #80]	; (8003134 <TIM_OC1_SetConfig+0x10c>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	621a      	str	r2, [r3, #32]
}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	b006      	add	sp, #24
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	40012c00 	.word	0x40012c00
 8003124:	40014000 	.word	0x40014000
 8003128:	40014400 	.word	0x40014400
 800312c:	40014800 	.word	0x40014800
 8003130:	fffffeff 	.word	0xfffffeff
 8003134:	fffffdff 	.word	0xfffffdff

08003138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	2210      	movs	r2, #16
 8003148:	4393      	bics	r3, r2
 800314a:	001a      	movs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4a2e      	ldr	r2, [pc, #184]	; (8003220 <TIM_OC2_SetConfig+0xe8>)
 8003166:	4013      	ands	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a2d      	ldr	r2, [pc, #180]	; (8003224 <TIM_OC2_SetConfig+0xec>)
 800316e:	4013      	ands	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2220      	movs	r2, #32
 8003182:	4393      	bics	r3, r2
 8003184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	4313      	orrs	r3, r2
 8003190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a24      	ldr	r2, [pc, #144]	; (8003228 <TIM_OC2_SetConfig+0xf0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d10d      	bne.n	80031b6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2280      	movs	r2, #128	; 0x80
 800319e:	4393      	bics	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2240      	movs	r2, #64	; 0x40
 80031b2:	4393      	bics	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a1b      	ldr	r2, [pc, #108]	; (8003228 <TIM_OC2_SetConfig+0xf0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00b      	beq.n	80031d6 <TIM_OC2_SetConfig+0x9e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a1a      	ldr	r2, [pc, #104]	; (800322c <TIM_OC2_SetConfig+0xf4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d007      	beq.n	80031d6 <TIM_OC2_SetConfig+0x9e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a19      	ldr	r2, [pc, #100]	; (8003230 <TIM_OC2_SetConfig+0xf8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d003      	beq.n	80031d6 <TIM_OC2_SetConfig+0x9e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a18      	ldr	r2, [pc, #96]	; (8003234 <TIM_OC2_SetConfig+0xfc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d113      	bne.n	80031fe <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4a17      	ldr	r2, [pc, #92]	; (8003238 <TIM_OC2_SetConfig+0x100>)
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4a16      	ldr	r2, [pc, #88]	; (800323c <TIM_OC2_SetConfig+0x104>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	621a      	str	r2, [r3, #32]
}
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	46bd      	mov	sp, r7
 800321c:	b006      	add	sp, #24
 800321e:	bd80      	pop	{r7, pc}
 8003220:	ffff8fff 	.word	0xffff8fff
 8003224:	fffffcff 	.word	0xfffffcff
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40014000 	.word	0x40014000
 8003230:	40014400 	.word	0x40014400
 8003234:	40014800 	.word	0x40014800
 8003238:	fffffbff 	.word	0xfffffbff
 800323c:	fffff7ff 	.word	0xfffff7ff

08003240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4a35      	ldr	r2, [pc, #212]	; (8003324 <TIM_OC3_SetConfig+0xe4>)
 8003250:	401a      	ands	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2270      	movs	r2, #112	; 0x70
 800326c:	4393      	bics	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2203      	movs	r2, #3
 8003274:	4393      	bics	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	4a28      	ldr	r2, [pc, #160]	; (8003328 <TIM_OC3_SetConfig+0xe8>)
 8003286:	4013      	ands	r3, r2
 8003288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a24      	ldr	r2, [pc, #144]	; (800332c <TIM_OC3_SetConfig+0xec>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d10d      	bne.n	80032ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	4a23      	ldr	r2, [pc, #140]	; (8003330 <TIM_OC3_SetConfig+0xf0>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	4a1f      	ldr	r2, [pc, #124]	; (8003334 <TIM_OC3_SetConfig+0xf4>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <TIM_OC3_SetConfig+0xec>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00b      	beq.n	80032da <TIM_OC3_SetConfig+0x9a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <TIM_OC3_SetConfig+0xf8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <TIM_OC3_SetConfig+0x9a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1b      	ldr	r2, [pc, #108]	; (800333c <TIM_OC3_SetConfig+0xfc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_OC3_SetConfig+0x9a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1a      	ldr	r2, [pc, #104]	; (8003340 <TIM_OC3_SetConfig+0x100>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d113      	bne.n	8003302 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4a19      	ldr	r2, [pc, #100]	; (8003344 <TIM_OC3_SetConfig+0x104>)
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4a18      	ldr	r2, [pc, #96]	; (8003348 <TIM_OC3_SetConfig+0x108>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	621a      	str	r2, [r3, #32]
}
 800331c:	46c0      	nop			; (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b006      	add	sp, #24
 8003322:	bd80      	pop	{r7, pc}
 8003324:	fffffeff 	.word	0xfffffeff
 8003328:	fffffdff 	.word	0xfffffdff
 800332c:	40012c00 	.word	0x40012c00
 8003330:	fffff7ff 	.word	0xfffff7ff
 8003334:	fffffbff 	.word	0xfffffbff
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800
 8003344:	ffffefff 	.word	0xffffefff
 8003348:	ffffdfff 	.word	0xffffdfff

0800334c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	4a28      	ldr	r2, [pc, #160]	; (80033fc <TIM_OC4_SetConfig+0xb0>)
 800335c:	401a      	ands	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a22      	ldr	r2, [pc, #136]	; (8003400 <TIM_OC4_SetConfig+0xb4>)
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a21      	ldr	r2, [pc, #132]	; (8003404 <TIM_OC4_SetConfig+0xb8>)
 8003380:	4013      	ands	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <TIM_OC4_SetConfig+0xbc>)
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	031b      	lsls	r3, r3, #12
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a19      	ldr	r2, [pc, #100]	; (800340c <TIM_OC4_SetConfig+0xc0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00b      	beq.n	80033c4 <TIM_OC4_SetConfig+0x78>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a18      	ldr	r2, [pc, #96]	; (8003410 <TIM_OC4_SetConfig+0xc4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d007      	beq.n	80033c4 <TIM_OC4_SetConfig+0x78>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a17      	ldr	r2, [pc, #92]	; (8003414 <TIM_OC4_SetConfig+0xc8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_OC4_SetConfig+0x78>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a16      	ldr	r2, [pc, #88]	; (8003418 <TIM_OC4_SetConfig+0xcc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d109      	bne.n	80033d8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	4a15      	ldr	r2, [pc, #84]	; (800341c <TIM_OC4_SetConfig+0xd0>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	019b      	lsls	r3, r3, #6
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	621a      	str	r2, [r3, #32]
}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b006      	add	sp, #24
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	ffffefff 	.word	0xffffefff
 8003400:	ffff8fff 	.word	0xffff8fff
 8003404:	fffffcff 	.word	0xfffffcff
 8003408:	ffffdfff 	.word	0xffffdfff
 800340c:	40012c00 	.word	0x40012c00
 8003410:	40014000 	.word	0x40014000
 8003414:	40014400 	.word	0x40014400
 8003418:	40014800 	.word	0x40014800
 800341c:	ffffbfff 	.word	0xffffbfff

08003420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	221f      	movs	r2, #31
 8003430:	4013      	ands	r3, r2
 8003432:	2201      	movs	r2, #1
 8003434:	409a      	lsls	r2, r3
 8003436:	0013      	movs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	43d2      	mvns	r2, r2
 8003442:	401a      	ands	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	211f      	movs	r1, #31
 8003450:	400b      	ands	r3, r1
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4099      	lsls	r1, r3
 8003456:	000b      	movs	r3, r1
 8003458:	431a      	orrs	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	621a      	str	r2, [r3, #32]
}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b006      	add	sp, #24
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	223c      	movs	r2, #60	; 0x3c
 8003476:	5c9b      	ldrb	r3, [r3, r2]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800347c:	2302      	movs	r3, #2
 800347e:	e047      	b.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	223c      	movs	r2, #60	; 0x3c
 8003484:	2101      	movs	r1, #1
 8003486:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	223d      	movs	r2, #61	; 0x3d
 800348c:	2102      	movs	r1, #2
 800348e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2270      	movs	r2, #112	; 0x70
 80034a4:	4393      	bics	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a16      	ldr	r2, [pc, #88]	; (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00f      	beq.n	80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	05db      	lsls	r3, r3, #23
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d009      	beq.n	80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a11      	ldr	r2, [pc, #68]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a10      	ldr	r2, [pc, #64]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d10c      	bne.n	80034fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2280      	movs	r2, #128	; 0x80
 80034e8:	4393      	bics	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	223d      	movs	r2, #61	; 0x3d
 8003502:	2101      	movs	r1, #1
 8003504:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	223c      	movs	r2, #60	; 0x3c
 800350a:	2100      	movs	r1, #0
 800350c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	b004      	add	sp, #16
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40000400 	.word	0x40000400
 8003520:	40014000 	.word	0x40014000

08003524 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	223c      	movs	r2, #60	; 0x3c
 8003536:	5c9b      	ldrb	r3, [r3, r2]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800353c:	2302      	movs	r3, #2
 800353e:	e03e      	b.n	80035be <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	223c      	movs	r2, #60	; 0x3c
 8003544:	2101      	movs	r1, #1
 8003546:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	22ff      	movs	r2, #255	; 0xff
 800354c:	4393      	bics	r3, r2
 800354e:	001a      	movs	r2, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800355c:	401a      	ands	r2, r3
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4a18      	ldr	r2, [pc, #96]	; (80035cc <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800356a:	401a      	ands	r2, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003578:	401a      	ands	r2, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a13      	ldr	r2, [pc, #76]	; (80035d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003586:	401a      	ands	r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003594:	401a      	ands	r2, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80035a2:	401a      	ands	r2, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	223c      	movs	r2, #60	; 0x3c
 80035b8:	2100      	movs	r1, #0
 80035ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	0018      	movs	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b004      	add	sp, #16
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	fffffcff 	.word	0xfffffcff
 80035cc:	fffffbff 	.word	0xfffffbff
 80035d0:	fffff7ff 	.word	0xfffff7ff
 80035d4:	ffffefff 	.word	0xffffefff
 80035d8:	ffffdfff 	.word	0xffffdfff
 80035dc:	ffffbfff 	.word	0xffffbfff

080035e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b002      	add	sp, #8
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b002      	add	sp, #8
 80035fe:	bd80      	pop	{r7, pc}

08003600 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8003600:	b5b0      	push	{r4, r5, r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af02      	add	r7, sp, #8
 8003606:	0005      	movs	r5, r0
 8003608:	000c      	movs	r4, r1
 800360a:	0010      	movs	r0, r2
 800360c:	0019      	movs	r1, r3
 800360e:	1dfb      	adds	r3, r7, #7
 8003610:	1c2a      	adds	r2, r5, #0
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	1d3b      	adds	r3, r7, #4
 8003616:	1c22      	adds	r2, r4, #0
 8003618:	801a      	strh	r2, [r3, #0]
 800361a:	1cbb      	adds	r3, r7, #2
 800361c:	1c02      	adds	r2, r0, #0
 800361e:	801a      	strh	r2, [r3, #0]
 8003620:	003b      	movs	r3, r7
 8003622:	1c0a      	adds	r2, r1, #0
 8003624:	801a      	strh	r2, [r3, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8003626:	2117      	movs	r1, #23
 8003628:	187b      	adds	r3, r7, r1
 800362a:	1dfa      	adds	r2, r7, #7
 800362c:	7812      	ldrb	r2, [r2, #0]
 800362e:	701a      	strb	r2, [r3, #0]
		
    if (function_char < ' ')
 8003630:	187b      	adds	r3, r7, r1
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b1f      	cmp	r3, #31
 8003636:	d803      	bhi.n	8003640 <ILI9341_Draw_Char+0x40>
    {
        character = 0;
 8003638:	1dfb      	adds	r3, r7, #7
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	e005      	b.n	800364c <ILI9341_Draw_Char+0x4c>
    }
    else
    {
    	function_char -= 32;
 8003640:	2217      	movs	r2, #23
 8003642:	18bb      	adds	r3, r7, r2
 8003644:	18ba      	adds	r2, r7, r2
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	3a20      	subs	r2, #32
 800364a:	701a      	strb	r2, [r3, #0]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800364c:	2314      	movs	r3, #20
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	e016      	b.n	8003684 <ILI9341_Draw_Char+0x84>
	{
		temp[k] = font[function_char][k];
 8003656:	2317      	movs	r3, #23
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	781a      	ldrb	r2, [r3, #0]
 800365c:	2514      	movs	r5, #20
 800365e:	197b      	adds	r3, r7, r5
 8003660:	7818      	ldrb	r0, [r3, #0]
 8003662:	197b      	adds	r3, r7, r5
 8003664:	7819      	ldrb	r1, [r3, #0]
 8003666:	4c69      	ldr	r4, [pc, #420]	; (800380c <ILI9341_Draw_Char+0x20c>)
 8003668:	0013      	movs	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	189b      	adds	r3, r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	18e3      	adds	r3, r4, r3
 8003672:	5c1a      	ldrb	r2, [r3, r0]
 8003674:	230c      	movs	r3, #12
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	545a      	strb	r2, [r3, r1]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800367a:	197b      	adds	r3, r7, r5
 800367c:	781a      	ldrb	r2, [r3, #0]
 800367e:	197b      	adds	r3, r7, r5
 8003680:	3201      	adds	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	2314      	movs	r3, #20
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b05      	cmp	r3, #5
 800368c:	d9e3      	bls.n	8003656 <ILI9341_Draw_Char+0x56>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800368e:	2315      	movs	r3, #21
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	e0ae      	b.n	80037f6 <ILI9341_Draw_Char+0x1f6>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8003698:	2316      	movs	r3, #22
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
 80036a0:	e09d      	b.n	80037de <ILI9341_Draw_Char+0x1de>
        {
            if (temp[j] & (1<<i))
 80036a2:	2315      	movs	r3, #21
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	220c      	movs	r2, #12
 80036aa:	18ba      	adds	r2, r7, r2
 80036ac:	5cd3      	ldrb	r3, [r2, r3]
 80036ae:	001a      	movs	r2, r3
 80036b0:	2316      	movs	r3, #22
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	411a      	asrs	r2, r3
 80036b8:	0013      	movs	r3, r2
 80036ba:	2201      	movs	r2, #1
 80036bc:	4013      	ands	r3, r2
 80036be:	d043      	beq.n	8003748 <ILI9341_Draw_Char+0x148>
            {
            	if(size == 1)
 80036c0:	2328      	movs	r3, #40	; 0x28
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d115      	bne.n	80036f6 <ILI9341_Draw_Char+0xf6>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 80036ca:	2315      	movs	r3, #21
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	1d3b      	adds	r3, r7, #4
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	18d3      	adds	r3, r2, r3
 80036d8:	b298      	uxth	r0, r3
 80036da:	2316      	movs	r3, #22
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	1cbb      	adds	r3, r7, #2
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	18d3      	adds	r3, r2, r3
 80036e8:	b299      	uxth	r1, r3
 80036ea:	003b      	movs	r3, r7
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	001a      	movs	r2, r3
 80036f0:	f000 fb32 	bl	8003d58 <ILI9341_Draw_Pixel>
 80036f4:	e06d      	b.n	80037d2 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 80036f6:	2315      	movs	r3, #21
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2128      	movs	r1, #40	; 0x28
 8003700:	187a      	adds	r2, r7, r1
 8003702:	8812      	ldrh	r2, [r2, #0]
 8003704:	4353      	muls	r3, r2
 8003706:	b29a      	uxth	r2, r3
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	18d3      	adds	r3, r2, r3
 800370e:	b298      	uxth	r0, r3
 8003710:	2316      	movs	r3, #22
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	000c      	movs	r4, r1
 800371a:	187a      	adds	r2, r7, r1
 800371c:	8812      	ldrh	r2, [r2, #0]
 800371e:	4353      	muls	r3, r2
 8003720:	b29a      	uxth	r2, r3
 8003722:	1cbb      	adds	r3, r7, #2
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	18d3      	adds	r3, r2, r3
 8003728:	b299      	uxth	r1, r3
 800372a:	0022      	movs	r2, r4
 800372c:	193b      	adds	r3, r7, r4
 800372e:	881c      	ldrh	r4, [r3, #0]
 8003730:	0013      	movs	r3, r2
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	881a      	ldrh	r2, [r3, #0]
 8003736:	2301      	movs	r3, #1
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	003b      	movs	r3, r7
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	0023      	movs	r3, r4
 8003742:	f000 fcad 	bl	80040a0 <ILI9341_Draw_Rectangle>
 8003746:	e044      	b.n	80037d2 <ILI9341_Draw_Char+0x1d2>
				}
            }
            else
            {
               	if(size == 1)
 8003748:	2328      	movs	r3, #40	; 0x28
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d116      	bne.n	8003780 <ILI9341_Draw_Char+0x180>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8003752:	2315      	movs	r3, #21
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	b29a      	uxth	r2, r3
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	18d3      	adds	r3, r2, r3
 8003760:	b298      	uxth	r0, r3
 8003762:	2316      	movs	r3, #22
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b29a      	uxth	r2, r3
 800376a:	1cbb      	adds	r3, r7, #2
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	b299      	uxth	r1, r3
 8003772:	232c      	movs	r3, #44	; 0x2c
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	001a      	movs	r2, r3
 800377a:	f000 faed 	bl	8003d58 <ILI9341_Draw_Pixel>
 800377e:	e028      	b.n	80037d2 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8003780:	2315      	movs	r3, #21
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	b29b      	uxth	r3, r3
 8003788:	2128      	movs	r1, #40	; 0x28
 800378a:	187a      	adds	r2, r7, r1
 800378c:	8812      	ldrh	r2, [r2, #0]
 800378e:	4353      	muls	r3, r2
 8003790:	b29a      	uxth	r2, r3
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	18d3      	adds	r3, r2, r3
 8003798:	b298      	uxth	r0, r3
 800379a:	2316      	movs	r3, #22
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	000c      	movs	r4, r1
 80037a4:	187a      	adds	r2, r7, r1
 80037a6:	8812      	ldrh	r2, [r2, #0]
 80037a8:	4353      	muls	r3, r2
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	1cbb      	adds	r3, r7, #2
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	18d3      	adds	r3, r2, r3
 80037b2:	b299      	uxth	r1, r3
 80037b4:	0022      	movs	r2, r4
 80037b6:	193b      	adds	r3, r7, r4
 80037b8:	881c      	ldrh	r4, [r3, #0]
 80037ba:	0013      	movs	r3, r2
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	881a      	ldrh	r2, [r3, #0]
 80037c0:	2301      	movs	r3, #1
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	232c      	movs	r3, #44	; 0x2c
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	0023      	movs	r3, r4
 80037ce:	f000 fc67 	bl	80040a0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 80037d2:	2116      	movs	r1, #22
 80037d4:	187b      	adds	r3, r7, r1
 80037d6:	781a      	ldrb	r2, [r3, #0]
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	3201      	adds	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	2316      	movs	r3, #22
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b07      	cmp	r3, #7
 80037e6:	d800      	bhi.n	80037ea <ILI9341_Draw_Char+0x1ea>
 80037e8:	e75b      	b.n	80036a2 <ILI9341_Draw_Char+0xa2>
    for (j=0; j<CHAR_WIDTH; j++)
 80037ea:	2115      	movs	r1, #21
 80037ec:	187b      	adds	r3, r7, r1
 80037ee:	781a      	ldrb	r2, [r3, #0]
 80037f0:	187b      	adds	r3, r7, r1
 80037f2:	3201      	adds	r2, #1
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	2315      	movs	r3, #21
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	d800      	bhi.n	8003802 <ILI9341_Draw_Char+0x202>
 8003800:	e74a      	b.n	8003698 <ILI9341_Draw_Char+0x98>
				}
            }
        }
    }
}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	46bd      	mov	sp, r7
 8003806:	b006      	add	sp, #24
 8003808:	bdb0      	pop	{r4, r5, r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	08005024 	.word	0x08005024

08003810 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8003810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003812:	b087      	sub	sp, #28
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	000c      	movs	r4, r1
 800381a:	0010      	movs	r0, r2
 800381c:	0019      	movs	r1, r3
 800381e:	250a      	movs	r5, #10
 8003820:	197b      	adds	r3, r7, r5
 8003822:	1c22      	adds	r2, r4, #0
 8003824:	801a      	strh	r2, [r3, #0]
 8003826:	2608      	movs	r6, #8
 8003828:	19bb      	adds	r3, r7, r6
 800382a:	1c02      	adds	r2, r0, #0
 800382c:	801a      	strh	r2, [r3, #0]
 800382e:	1dbb      	adds	r3, r7, #6
 8003830:	1c0a      	adds	r2, r1, #0
 8003832:	801a      	strh	r2, [r3, #0]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 8003834:	197b      	adds	r3, r7, r5
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	3b01      	subs	r3, #1
 800383a:	b298      	uxth	r0, r3
 800383c:	2320      	movs	r3, #32
 800383e:	2208      	movs	r2, #8
 8003840:	4694      	mov	ip, r2
 8003842:	44bc      	add	ip, r7
 8003844:	4463      	add	r3, ip
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	b29a      	uxth	r2, r3
 800384c:	2124      	movs	r1, #36	; 0x24
 800384e:	2308      	movs	r3, #8
 8003850:	18fc      	adds	r4, r7, r3
 8003852:	1863      	adds	r3, r4, r1
 8003854:	881c      	ldrh	r4, [r3, #0]
 8003856:	19bb      	adds	r3, r7, r6
 8003858:	8819      	ldrh	r1, [r3, #0]
 800385a:	0023      	movs	r3, r4
 800385c:	f000 f974 	bl	8003b48 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 8003860:	197b      	adds	r3, r7, r5
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	3b02      	subs	r3, #2
 8003866:	b298      	uxth	r0, r3
 8003868:	2320      	movs	r3, #32
 800386a:	2208      	movs	r2, #8
 800386c:	4694      	mov	ip, r2
 800386e:	44bc      	add	ip, r7
 8003870:	4463      	add	r3, ip
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	b29a      	uxth	r2, r3
 8003878:	2124      	movs	r1, #36	; 0x24
 800387a:	2308      	movs	r3, #8
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	185b      	adds	r3, r3, r1
 8003880:	881c      	ldrh	r4, [r3, #0]
 8003882:	19bb      	adds	r3, r7, r6
 8003884:	8819      	ldrh	r1, [r3, #0]
 8003886:	0023      	movs	r3, r4
 8003888:	f000 f95e 	bl	8003b48 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800388c:	e029      	b.n	80038e2 <ILI9341_Draw_Text+0xd2>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	60fa      	str	r2, [r7, #12]
 8003894:	7818      	ldrb	r0, [r3, #0]
 8003896:	1dbb      	adds	r3, r7, #6
 8003898:	881c      	ldrh	r4, [r3, #0]
 800389a:	2308      	movs	r3, #8
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	881a      	ldrh	r2, [r3, #0]
 80038a0:	250a      	movs	r5, #10
 80038a2:	197b      	adds	r3, r7, r5
 80038a4:	8819      	ldrh	r1, [r3, #0]
 80038a6:	2324      	movs	r3, #36	; 0x24
 80038a8:	2608      	movs	r6, #8
 80038aa:	46b4      	mov	ip, r6
 80038ac:	44bc      	add	ip, r7
 80038ae:	4463      	add	r3, ip
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	2620      	movs	r6, #32
 80038b6:	2308      	movs	r3, #8
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	199b      	adds	r3, r3, r6
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	0023      	movs	r3, r4
 80038c2:	f7ff fe9d 	bl	8003600 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 80038c6:	2308      	movs	r3, #8
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	199b      	adds	r3, r3, r6
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	1c1a      	adds	r2, r3, #0
 80038d0:	1892      	adds	r2, r2, r2
 80038d2:	18d3      	adds	r3, r2, r3
 80038d4:	18db      	adds	r3, r3, r3
 80038d6:	b299      	uxth	r1, r3
 80038d8:	197b      	adds	r3, r7, r5
 80038da:	197a      	adds	r2, r7, r5
 80038dc:	8812      	ldrh	r2, [r2, #0]
 80038de:	188a      	adds	r2, r1, r2
 80038e0:	801a      	strh	r2, [r3, #0]
    while (*Text) {
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1d1      	bne.n	800388e <ILI9341_Draw_Text+0x7e>
    }


}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b005      	add	sp, #20
 80038f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038f2 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	af00      	add	r7, sp, #0

	_LCD_Enable();
 80038f6:	f000 fcf1 	bl	80042dc <_LCD_Enable>
	ILI9341_SPI_Init();
 80038fa:	f000 f909 	bl	8003b10 <ILI9341_SPI_Init>
	_LCD_Reset();
 80038fe:	f000 fcfb 	bl	80042f8 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 8003902:	2001      	movs	r0, #1
 8003904:	f000 fdfe 	bl	8004504 <_LCD_SendCommand>
	HAL_Delay(2000);
 8003908:	23fa      	movs	r3, #250	; 0xfa
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	0018      	movs	r0, r3
 800390e:	f7fd ff5f 	bl	80017d0 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 8003912:	20cb      	movs	r0, #203	; 0xcb
 8003914:	f000 fdf6 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 8003918:	2039      	movs	r0, #57	; 0x39
 800391a:	f000 fe2d 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800391e:	202c      	movs	r0, #44	; 0x2c
 8003920:	f000 fe2a 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x00);
 8003924:	2000      	movs	r0, #0
 8003926:	f000 fe27 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x34);
 800392a:	2034      	movs	r0, #52	; 0x34
 800392c:	f000 fe24 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x02);
 8003930:	2002      	movs	r0, #2
 8003932:	f000 fe21 	bl	8004578 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 8003936:	20cf      	movs	r0, #207	; 0xcf
 8003938:	f000 fde4 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800393c:	2000      	movs	r0, #0
 800393e:	f000 fe1b 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8003942:	20c1      	movs	r0, #193	; 0xc1
 8003944:	f000 fe18 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x30);
 8003948:	2030      	movs	r0, #48	; 0x30
 800394a:	f000 fe15 	bl	8004578 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800394e:	20e8      	movs	r0, #232	; 0xe8
 8003950:	f000 fdd8 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8003954:	2085      	movs	r0, #133	; 0x85
 8003956:	f000 fe0f 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x00);
 800395a:	2000      	movs	r0, #0
 800395c:	f000 fe0c 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x78);
 8003960:	2078      	movs	r0, #120	; 0x78
 8003962:	f000 fe09 	bl	8004578 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 8003966:	20ea      	movs	r0, #234	; 0xea
 8003968:	f000 fdcc 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800396c:	2000      	movs	r0, #0
 800396e:	f000 fe03 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x00);
 8003972:	2000      	movs	r0, #0
 8003974:	f000 fe00 	bl	8004578 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 8003978:	20ed      	movs	r0, #237	; 0xed
 800397a:	f000 fdc3 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800397e:	2064      	movs	r0, #100	; 0x64
 8003980:	f000 fdfa 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x03);
 8003984:	2003      	movs	r0, #3
 8003986:	f000 fdf7 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x12);
 800398a:	2012      	movs	r0, #18
 800398c:	f000 fdf4 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x81);
 8003990:	2081      	movs	r0, #129	; 0x81
 8003992:	f000 fdf1 	bl	8004578 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 8003996:	20f7      	movs	r0, #247	; 0xf7
 8003998:	f000 fdb4 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800399c:	2020      	movs	r0, #32
 800399e:	f000 fdeb 	bl	8004578 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 80039a2:	20c0      	movs	r0, #192	; 0xc0
 80039a4:	f000 fdae 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 80039a8:	2023      	movs	r0, #35	; 0x23
 80039aa:	f000 fde5 	bl	8004578 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 80039ae:	20c1      	movs	r0, #193	; 0xc1
 80039b0:	f000 fda8 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 80039b4:	2010      	movs	r0, #16
 80039b6:	f000 fddf 	bl	8004578 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 80039ba:	20c5      	movs	r0, #197	; 0xc5
 80039bc:	f000 fda2 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 80039c0:	203e      	movs	r0, #62	; 0x3e
 80039c2:	f000 fdd9 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x28);
 80039c6:	2028      	movs	r0, #40	; 0x28
 80039c8:	f000 fdd6 	bl	8004578 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 80039cc:	20c7      	movs	r0, #199	; 0xc7
 80039ce:	f000 fd99 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 80039d2:	2086      	movs	r0, #134	; 0x86
 80039d4:	f000 fdd0 	bl	8004578 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 80039d8:	2036      	movs	r0, #54	; 0x36
 80039da:	f000 fd93 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 80039de:	2048      	movs	r0, #72	; 0x48
 80039e0:	f000 fdca 	bl	8004578 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 80039e4:	203a      	movs	r0, #58	; 0x3a
 80039e6:	f000 fd8d 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 80039ea:	2055      	movs	r0, #85	; 0x55
 80039ec:	f000 fdc4 	bl	8004578 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 80039f0:	20b1      	movs	r0, #177	; 0xb1
 80039f2:	f000 fd87 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80039f6:	2000      	movs	r0, #0
 80039f8:	f000 fdbe 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x18);
 80039fc:	2018      	movs	r0, #24
 80039fe:	f000 fdbb 	bl	8004578 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 8003a02:	20b6      	movs	r0, #182	; 0xb6
 8003a04:	f000 fd7e 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 8003a08:	2008      	movs	r0, #8
 8003a0a:	f000 fdb5 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x82);
 8003a0e:	2082      	movs	r0, #130	; 0x82
 8003a10:	f000 fdb2 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x27);
 8003a14:	2027      	movs	r0, #39	; 0x27
 8003a16:	f000 fdaf 	bl	8004578 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 8003a1a:	20f2      	movs	r0, #242	; 0xf2
 8003a1c:	f000 fd72 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8003a20:	2000      	movs	r0, #0
 8003a22:	f000 fda9 	bl	8004578 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 8003a26:	2026      	movs	r0, #38	; 0x26
 8003a28:	f000 fd6c 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f000 fda3 	bl	8004578 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8003a32:	20e0      	movs	r0, #224	; 0xe0
 8003a34:	f000 fd66 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 8003a38:	200f      	movs	r0, #15
 8003a3a:	f000 fd9d 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x31);
 8003a3e:	2031      	movs	r0, #49	; 0x31
 8003a40:	f000 fd9a 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8003a44:	202b      	movs	r0, #43	; 0x2b
 8003a46:	f000 fd97 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8003a4a:	200c      	movs	r0, #12
 8003a4c:	f000 fd94 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8003a50:	200e      	movs	r0, #14
 8003a52:	f000 fd91 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x08);
 8003a56:	2008      	movs	r0, #8
 8003a58:	f000 fd8e 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x4E);
 8003a5c:	204e      	movs	r0, #78	; 0x4e
 8003a5e:	f000 fd8b 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0xF1);
 8003a62:	20f1      	movs	r0, #241	; 0xf1
 8003a64:	f000 fd88 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x37);
 8003a68:	2037      	movs	r0, #55	; 0x37
 8003a6a:	f000 fd85 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x07);
 8003a6e:	2007      	movs	r0, #7
 8003a70:	f000 fd82 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x10);
 8003a74:	2010      	movs	r0, #16
 8003a76:	f000 fd7f 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x03);
 8003a7a:	2003      	movs	r0, #3
 8003a7c:	f000 fd7c 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8003a80:	200e      	movs	r0, #14
 8003a82:	f000 fd79 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x09);
 8003a86:	2009      	movs	r0, #9
 8003a88:	f000 fd76 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x00);
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	f000 fd73 	bl	8004578 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8003a92:	20e1      	movs	r0, #225	; 0xe1
 8003a94:	f000 fd36 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f000 fd6d 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8003a9e:	200e      	movs	r0, #14
 8003aa0:	f000 fd6a 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x14);
 8003aa4:	2014      	movs	r0, #20
 8003aa6:	f000 fd67 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x03);
 8003aaa:	2003      	movs	r0, #3
 8003aac:	f000 fd64 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x11);
 8003ab0:	2011      	movs	r0, #17
 8003ab2:	f000 fd61 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x07);
 8003ab6:	2007      	movs	r0, #7
 8003ab8:	f000 fd5e 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x31);
 8003abc:	2031      	movs	r0, #49	; 0x31
 8003abe:	f000 fd5b 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8003ac2:	20c1      	movs	r0, #193	; 0xc1
 8003ac4:	f000 fd58 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x48);
 8003ac8:	2048      	movs	r0, #72	; 0x48
 8003aca:	f000 fd55 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x08);
 8003ace:	2008      	movs	r0, #8
 8003ad0:	f000 fd52 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8003ad4:	200f      	movs	r0, #15
 8003ad6:	f000 fd4f 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8003ada:	200c      	movs	r0, #12
 8003adc:	f000 fd4c 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x31);
 8003ae0:	2031      	movs	r0, #49	; 0x31
 8003ae2:	f000 fd49 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x36);
 8003ae6:	2036      	movs	r0, #54	; 0x36
 8003ae8:	f000 fd46 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8003aec:	200f      	movs	r0, #15
 8003aee:	f000 fd43 	bl	8004578 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 8003af2:	2011      	movs	r0, #17
 8003af4:	f000 fd06 	bl	8004504 <_LCD_SendCommand>
	HAL_Delay(240);
 8003af8:	20f0      	movs	r0, #240	; 0xf0
 8003afa:	f7fd fe69 	bl	80017d0 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 8003afe:	2029      	movs	r0, #41	; 0x29
 8003b00:	f000 fd00 	bl	8004504 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8003b04:	2000      	movs	r0, #0
 8003b06:	f000 fb99 	bl	800423c <ILI9341_Set_Rotation>
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <ILI9341_SPI_Init+0x34>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2240      	movs	r2, #64	; 0x40
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d005      	beq.n	8003b2c <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8003b20:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <ILI9341_SPI_Init+0x34>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <ILI9341_SPI_Init+0x34>)
 8003b26:	2140      	movs	r1, #64	; 0x40
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003b2c:	2390      	movs	r3, #144	; 0x90
 8003b2e:	05db      	lsls	r3, r3, #23
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	2390      	movs	r3, #144	; 0x90
 8003b34:	05db      	lsls	r3, r3, #23
 8003b36:	2108      	movs	r1, #8
 8003b38:	438a      	bics	r2, r1
 8003b3a:	615a      	str	r2, [r3, #20]
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	40013000 	.word	0x40013000

08003b48 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8003b48:	b5b0      	push	{r4, r5, r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	0005      	movs	r5, r0
 8003b50:	000c      	movs	r4, r1
 8003b52:	0010      	movs	r0, r2
 8003b54:	0019      	movs	r1, r3
 8003b56:	1dbb      	adds	r3, r7, #6
 8003b58:	1c2a      	adds	r2, r5, #0
 8003b5a:	801a      	strh	r2, [r3, #0]
 8003b5c:	1d3b      	adds	r3, r7, #4
 8003b5e:	1c22      	adds	r2, r4, #0
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	1cbb      	adds	r3, r7, #2
 8003b64:	1c02      	adds	r2, r0, #0
 8003b66:	801a      	strh	r2, [r3, #0]
 8003b68:	003b      	movs	r3, r7
 8003b6a:	1c0a      	adds	r2, r1, #0
 8003b6c:	801a      	strh	r2, [r3, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8003b6e:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <ILI9341_Draw_Vertical_Line+0x104>)
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	1dba      	adds	r2, r7, #6
 8003b76:	8812      	ldrh	r2, [r2, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d300      	bcc.n	8003b7e <ILI9341_Draw_Vertical_Line+0x36>
 8003b7c:	e062      	b.n	8003c44 <ILI9341_Draw_Vertical_Line+0xfc>
 8003b7e:	4b34      	ldr	r3, [pc, #208]	; (8003c50 <ILI9341_Draw_Vertical_Line+0x108>)
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	1d3a      	adds	r2, r7, #4
 8003b86:	8812      	ldrh	r2, [r2, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d25b      	bcs.n	8003c44 <ILI9341_Draw_Vertical_Line+0xfc>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	881a      	ldrh	r2, [r3, #0]
 8003b90:	1cbb      	adds	r3, r7, #2
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	18d3      	adds	r3, r2, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	4a2d      	ldr	r2, [pc, #180]	; (8003c50 <ILI9341_Draw_Vertical_Line+0x108>)
 8003b9a:	8812      	ldrh	r2, [r2, #0]
 8003b9c:	b292      	uxth	r2, r2
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	db07      	blt.n	8003bb2 <ILI9341_Draw_Vertical_Line+0x6a>
	{
		height= LCD_HEIGHT - ypos;
 8003ba2:	4b2b      	ldr	r3, [pc, #172]	; (8003c50 <ILI9341_Draw_Vertical_Line+0x108>)
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	b299      	uxth	r1, r3
 8003ba8:	1cbb      	adds	r3, r7, #2
 8003baa:	1d3a      	adds	r2, r7, #4
 8003bac:	8812      	ldrh	r2, [r2, #0]
 8003bae:	1a8a      	subs	r2, r1, r2
 8003bb0:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8003bb2:	1d3a      	adds	r2, r7, #4
 8003bb4:	1cbb      	adds	r3, r7, #2
 8003bb6:	8812      	ldrh	r2, [r2, #0]
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	18d3      	adds	r3, r2, r3
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29c      	uxth	r4, r3
 8003bc2:	1dbb      	adds	r3, r7, #6
 8003bc4:	881a      	ldrh	r2, [r3, #0]
 8003bc6:	1d3b      	adds	r3, r7, #4
 8003bc8:	8819      	ldrh	r1, [r3, #0]
 8003bca:	1dbb      	adds	r3, r7, #6
 8003bcc:	8818      	ldrh	r0, [r3, #0]
 8003bce:	0023      	movs	r3, r4
 8003bd0:	f000 f840 	bl	8003c54 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8003bd4:	230f      	movs	r3, #15
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8003bdc:	1cbb      	adds	r3, r7, #2
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	2201      	movs	r2, #1
 8003be2:	4013      	ands	r3, r2
 8003be4:	d00e      	beq.n	8003c04 <ILI9341_Draw_Vertical_Line+0xbc>
 8003be6:	1cbb      	adds	r3, r7, #2
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d90a      	bls.n	8003c04 <ILI9341_Draw_Vertical_Line+0xbc>
	{
		truncated = 1;
 8003bee:	230f      	movs	r3, #15
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	701a      	strb	r2, [r3, #0]
		height = ((height >> 1) * 2);
 8003bf6:	1cbb      	adds	r3, r7, #2
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	1cba      	adds	r2, r7, #2
 8003c00:	18db      	adds	r3, r3, r3
 8003c02:	8013      	strh	r3, [r2, #0]
//TODO


	//

	if(truncated)
 8003c04:	230f      	movs	r3, #15
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00c      	beq.n	8003c28 <ILI9341_Draw_Vertical_Line+0xe0>
	{
		ILI9341_Draw_Pixel(	(xpos),
 8003c0e:	1d3a      	adds	r2, r7, #4
 8003c10:	1cbb      	adds	r3, r7, #2
 8003c12:	8812      	ldrh	r2, [r2, #0]
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	18d3      	adds	r3, r2, r3
 8003c18:	b299      	uxth	r1, r3
 8003c1a:	003b      	movs	r3, r7
 8003c1c:	881a      	ldrh	r2, [r3, #0]
 8003c1e:	1dbb      	adds	r3, r7, #6
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	0018      	movs	r0, r3
 8003c24:	f000 f898 	bl	8003d58 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8003c28:	1cbb      	adds	r3, r7, #2
 8003c2a:	881c      	ldrh	r4, [r3, #0]
 8003c2c:	003b      	movs	r3, r7
 8003c2e:	881a      	ldrh	r2, [r3, #0]
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	8819      	ldrh	r1, [r3, #0]
 8003c34:	1dbb      	adds	r3, r7, #6
 8003c36:	8818      	ldrh	r0, [r3, #0]
 8003c38:	2303      	movs	r3, #3
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	0023      	movs	r3, r4
 8003c3e:	f000 fb7d 	bl	800433c <_LCD_Write_Frame>
 8003c42:	e000      	b.n	8003c46 <ILI9341_Draw_Vertical_Line+0xfe>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8003c44:	46c0      	nop			; (mov r8, r8)
}
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b004      	add	sp, #16
 8003c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c4c:	20000014 	.word	0x20000014
 8003c50:	20000012 	.word	0x20000012

08003c54 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8003c54:	b5b0      	push	{r4, r5, r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	0005      	movs	r5, r0
 8003c5c:	000c      	movs	r4, r1
 8003c5e:	0010      	movs	r0, r2
 8003c60:	0019      	movs	r1, r3
 8003c62:	1dbb      	adds	r3, r7, #6
 8003c64:	1c2a      	adds	r2, r5, #0
 8003c66:	801a      	strh	r2, [r3, #0]
 8003c68:	1d3b      	adds	r3, r7, #4
 8003c6a:	1c22      	adds	r2, r4, #0
 8003c6c:	801a      	strh	r2, [r3, #0]
 8003c6e:	1cbb      	adds	r3, r7, #2
 8003c70:	1c02      	adds	r2, r0, #0
 8003c72:	801a      	strh	r2, [r3, #0]
 8003c74:	003b      	movs	r3, r7
 8003c76:	1c0a      	adds	r2, r1, #0
 8003c78:	801a      	strh	r2, [r3, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 8003c7a:	202a      	movs	r0, #42	; 0x2a
 8003c7c:	f000 fc42 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8003c80:	1dbb      	adds	r3, r7, #6
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f000 fc74 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(sc);
 8003c90:	1dbb      	adds	r3, r7, #6
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	0018      	movs	r0, r3
 8003c98:	f000 fc6e 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8003c9c:	1cbb      	adds	r3, r7, #2
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f000 fc66 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(ec);
 8003cac:	1cbb      	adds	r3, r7, #2
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 fc60 	bl	8004578 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 8003cb8:	202b      	movs	r0, #43	; 0x2b
 8003cba:	f000 fc23 	bl	8004504 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 8003cbe:	1d3b      	adds	r3, r7, #4
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f000 fc55 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(sp);
 8003cce:	1d3b      	adds	r3, r7, #4
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f000 fc4f 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 8003cda:	003b      	movs	r3, r7
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 fc47 	bl	8004578 <_LCD_SendData>
	_LCD_SendData(ep);
 8003cea:	003b      	movs	r3, r7
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f000 fc41 	bl	8004578 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 8003cf6:	202c      	movs	r0, #44	; 0x2c
 8003cf8:	f000 fc04 	bl	8004504 <_LCD_SendCommand>
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bdb0      	pop	{r4, r5, r7, pc}

08003d04 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	1dbb      	adds	r3, r7, #6
 8003d0e:	801a      	strh	r2, [r3, #0]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8003d10:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <ILI9341_Fill_Screen+0x4c>)
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <ILI9341_Fill_Screen+0x50>)
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	2000      	movs	r0, #0
 8003d20:	f7ff ff98 	bl	8003c54 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <ILI9341_Fill_Screen+0x4c>)
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	001a      	movs	r2, r3
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <ILI9341_Fill_Screen+0x50>)
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	4353      	muls	r3, r2
 8003d34:	0019      	movs	r1, r3
 8003d36:	1dbb      	adds	r3, r7, #6
 8003d38:	881a      	ldrh	r2, [r3, #0]
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	000b      	movs	r3, r1
 8003d40:	2100      	movs	r1, #0
 8003d42:	2000      	movs	r0, #0
 8003d44:	f000 fafa 	bl	800433c <_LCD_Write_Frame>
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b002      	add	sp, #8
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20000014 	.word	0x20000014
 8003d54:	20000012 	.word	0x20000012

08003d58 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b08f      	sub	sp, #60	; 0x3c
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	0004      	movs	r4, r0
 8003d60:	0008      	movs	r0, r1
 8003d62:	0011      	movs	r1, r2
 8003d64:	1dbb      	adds	r3, r7, #6
 8003d66:	1c22      	adds	r2, r4, #0
 8003d68:	801a      	strh	r2, [r3, #0]
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	1c02      	adds	r2, r0, #0
 8003d6e:	801a      	strh	r2, [r3, #0]
 8003d70:	1cbb      	adds	r3, r7, #2
 8003d72:	1c0a      	adds	r2, r1, #0
 8003d74:	801a      	strh	r2, [r3, #0]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003d76:	4bc8      	ldr	r3, [pc, #800]	; (8004098 <ILI9341_Draw_Pixel+0x340>)
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	1dba      	adds	r2, r7, #6
 8003d7e:	8812      	ldrh	r2, [r2, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d300      	bcc.n	8003d86 <ILI9341_Draw_Pixel+0x2e>
 8003d84:	e184      	b.n	8004090 <ILI9341_Draw_Pixel+0x338>
 8003d86:	4bc5      	ldr	r3, [pc, #788]	; (800409c <ILI9341_Draw_Pixel+0x344>)
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	1d3a      	adds	r2, r7, #4
 8003d8e:	8812      	ldrh	r2, [r2, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d300      	bcc.n	8003d96 <ILI9341_Draw_Pixel+0x3e>
 8003d94:	e17c      	b.n	8004090 <ILI9341_Draw_Pixel+0x338>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8003d96:	2390      	movs	r3, #144	; 0x90
 8003d98:	05db      	lsls	r3, r3, #23
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	2390      	movs	r3, #144	; 0x90
 8003d9e:	05db      	lsls	r3, r3, #23
 8003da0:	2110      	movs	r1, #16
 8003da2:	438a      	bics	r2, r1
 8003da4:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003da6:	2390      	movs	r3, #144	; 0x90
 8003da8:	05db      	lsls	r3, r3, #23
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	2390      	movs	r3, #144	; 0x90
 8003dae:	05db      	lsls	r3, r3, #23
 8003db0:	2108      	movs	r1, #8
 8003db2:	438a      	bics	r2, r1
 8003db4:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8003db6:	220a      	movs	r2, #10
 8003db8:	2100      	movs	r1, #0
 8003dba:	202a      	movs	r0, #42	; 0x2a
 8003dbc:	f000 fc16 	bl	80045ec <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc4:	e00a      	b.n	8003ddc <ILI9341_Draw_Pixel+0x84>
 8003dc6:	2390      	movs	r3, #144	; 0x90
 8003dc8:	05db      	lsls	r3, r3, #23
 8003dca:	695a      	ldr	r2, [r3, #20]
 8003dcc:	2390      	movs	r3, #144	; 0x90
 8003dce:	05db      	lsls	r3, r3, #23
 8003dd0:	2108      	movs	r1, #8
 8003dd2:	438a      	bics	r2, r1
 8003dd4:	615a      	str	r2, [r3, #20]
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd8:	3301      	adds	r3, #1
 8003dda:	637b      	str	r3, [r7, #52]	; 0x34
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	ddf1      	ble.n	8003dc6 <ILI9341_Draw_Pixel+0x6e>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8003de2:	2390      	movs	r3, #144	; 0x90
 8003de4:	05db      	lsls	r3, r3, #23
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	2390      	movs	r3, #144	; 0x90
 8003dea:	05db      	lsls	r3, r3, #23
 8003dec:	2110      	movs	r1, #16
 8003dee:	430a      	orrs	r2, r1
 8003df0:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003df2:	2390      	movs	r3, #144	; 0x90
 8003df4:	05db      	lsls	r3, r3, #23
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	2390      	movs	r3, #144	; 0x90
 8003dfa:	05db      	lsls	r3, r3, #23
 8003dfc:	2108      	movs	r1, #8
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	615a      	str	r2, [r3, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003e02:	2390      	movs	r3, #144	; 0x90
 8003e04:	05db      	lsls	r3, r3, #23
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	2390      	movs	r3, #144	; 0x90
 8003e0a:	05db      	lsls	r3, r3, #23
 8003e0c:	2108      	movs	r1, #8
 8003e0e:	438a      	bics	r2, r1
 8003e10:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 8003e12:	1dbb      	adds	r3, r7, #6
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	0a1b      	lsrs	r3, r3, #8
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	2114      	movs	r1, #20
 8003e1e:	187b      	adds	r3, r7, r1
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	1dbb      	adds	r3, r7, #6
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	187b      	adds	r3, r7, r1
 8003e2a:	705a      	strb	r2, [r3, #1]
 8003e2c:	1dbb      	adds	r3, r7, #6
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	121b      	asrs	r3, r3, #8
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	187b      	adds	r3, r7, r1
 8003e38:	709a      	strb	r2, [r3, #2]
 8003e3a:	1dbb      	adds	r3, r7, #6
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	3301      	adds	r3, #1
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	187b      	adds	r3, r7, r1
 8003e46:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 8003e48:	1878      	adds	r0, r7, r1
 8003e4a:	230a      	movs	r3, #10
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2104      	movs	r1, #4
 8003e50:	f000 fc06 	bl	8004660 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003e54:	2300      	movs	r3, #0
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30
 8003e58:	e00a      	b.n	8003e70 <ILI9341_Draw_Pixel+0x118>
 8003e5a:	2390      	movs	r3, #144	; 0x90
 8003e5c:	05db      	lsls	r3, r3, #23
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	2390      	movs	r3, #144	; 0x90
 8003e62:	05db      	lsls	r3, r3, #23
 8003e64:	2108      	movs	r1, #8
 8003e66:	438a      	bics	r2, r1
 8003e68:	615a      	str	r2, [r3, #20]
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	ddf1      	ble.n	8003e5a <ILI9341_Draw_Pixel+0x102>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003e76:	2390      	movs	r3, #144	; 0x90
 8003e78:	05db      	lsls	r3, r3, #23
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	2390      	movs	r3, #144	; 0x90
 8003e7e:	05db      	lsls	r3, r3, #23
 8003e80:	2108      	movs	r1, #8
 8003e82:	430a      	orrs	r2, r1
 8003e84:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8003e86:	2390      	movs	r3, #144	; 0x90
 8003e88:	05db      	lsls	r3, r3, #23
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	2390      	movs	r3, #144	; 0x90
 8003e8e:	05db      	lsls	r3, r3, #23
 8003e90:	2110      	movs	r1, #16
 8003e92:	438a      	bics	r2, r1
 8003e94:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003e96:	2390      	movs	r3, #144	; 0x90
 8003e98:	05db      	lsls	r3, r3, #23
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	2390      	movs	r3, #144	; 0x90
 8003e9e:	05db      	lsls	r3, r3, #23
 8003ea0:	2108      	movs	r1, #8
 8003ea2:	438a      	bics	r2, r1
 8003ea4:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8003ea6:	220a      	movs	r2, #10
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	202b      	movs	r0, #43	; 0x2b
 8003eac:	f000 fb9e 	bl	80045ec <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb4:	e00a      	b.n	8003ecc <ILI9341_Draw_Pixel+0x174>
 8003eb6:	2390      	movs	r3, #144	; 0x90
 8003eb8:	05db      	lsls	r3, r3, #23
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	2390      	movs	r3, #144	; 0x90
 8003ebe:	05db      	lsls	r3, r3, #23
 8003ec0:	2108      	movs	r1, #8
 8003ec2:	438a      	bics	r2, r1
 8003ec4:	615a      	str	r2, [r3, #20]
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	3301      	adds	r3, #1
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	ddf1      	ble.n	8003eb6 <ILI9341_Draw_Pixel+0x15e>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8003ed2:	2390      	movs	r3, #144	; 0x90
 8003ed4:	05db      	lsls	r3, r3, #23
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	2390      	movs	r3, #144	; 0x90
 8003eda:	05db      	lsls	r3, r3, #23
 8003edc:	2110      	movs	r1, #16
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003ee2:	2390      	movs	r3, #144	; 0x90
 8003ee4:	05db      	lsls	r3, r3, #23
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	2390      	movs	r3, #144	; 0x90
 8003eea:	05db      	lsls	r3, r3, #23
 8003eec:	2108      	movs	r1, #8
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	615a      	str	r2, [r3, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003ef2:	2390      	movs	r3, #144	; 0x90
 8003ef4:	05db      	lsls	r3, r3, #23
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	2390      	movs	r3, #144	; 0x90
 8003efa:	05db      	lsls	r3, r3, #23
 8003efc:	2108      	movs	r1, #8
 8003efe:	438a      	bics	r2, r1
 8003f00:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 8003f02:	1d3b      	adds	r3, r7, #4
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	2110      	movs	r1, #16
 8003f0e:	187b      	adds	r3, r7, r1
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	1d3b      	adds	r3, r7, #4
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	187b      	adds	r3, r7, r1
 8003f1a:	705a      	strb	r2, [r3, #1]
 8003f1c:	1d3b      	adds	r3, r7, #4
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	3301      	adds	r3, #1
 8003f22:	121b      	asrs	r3, r3, #8
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	187b      	adds	r3, r7, r1
 8003f28:	709a      	strb	r2, [r3, #2]
 8003f2a:	1d3b      	adds	r3, r7, #4
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	3301      	adds	r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 8003f38:	1878      	adds	r0, r7, r1
 8003f3a:	230a      	movs	r3, #10
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2104      	movs	r1, #4
 8003f40:	f000 fb8e 	bl	8004660 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003f44:	2300      	movs	r3, #0
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f48:	e00a      	b.n	8003f60 <ILI9341_Draw_Pixel+0x208>
 8003f4a:	2390      	movs	r3, #144	; 0x90
 8003f4c:	05db      	lsls	r3, r3, #23
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	2390      	movs	r3, #144	; 0x90
 8003f52:	05db      	lsls	r3, r3, #23
 8003f54:	2108      	movs	r1, #8
 8003f56:	438a      	bics	r2, r1
 8003f58:	615a      	str	r2, [r3, #20]
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	ddf1      	ble.n	8003f4a <ILI9341_Draw_Pixel+0x1f2>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003f66:	2390      	movs	r3, #144	; 0x90
 8003f68:	05db      	lsls	r3, r3, #23
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	2390      	movs	r3, #144	; 0x90
 8003f6e:	05db      	lsls	r3, r3, #23
 8003f70:	2108      	movs	r1, #8
 8003f72:	430a      	orrs	r2, r1
 8003f74:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8003f76:	2390      	movs	r3, #144	; 0x90
 8003f78:	05db      	lsls	r3, r3, #23
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	2390      	movs	r3, #144	; 0x90
 8003f7e:	05db      	lsls	r3, r3, #23
 8003f80:	2110      	movs	r1, #16
 8003f82:	438a      	bics	r2, r1
 8003f84:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003f86:	2390      	movs	r3, #144	; 0x90
 8003f88:	05db      	lsls	r3, r3, #23
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	2390      	movs	r3, #144	; 0x90
 8003f8e:	05db      	lsls	r3, r3, #23
 8003f90:	2108      	movs	r1, #8
 8003f92:	438a      	bics	r2, r1
 8003f94:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2C, 0, 10);
 8003f96:	220a      	movs	r2, #10
 8003f98:	2100      	movs	r1, #0
 8003f9a:	202c      	movs	r0, #44	; 0x2c
 8003f9c:	f000 fb26 	bl	80045ec <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa4:	e00a      	b.n	8003fbc <ILI9341_Draw_Pixel+0x264>
 8003fa6:	2390      	movs	r3, #144	; 0x90
 8003fa8:	05db      	lsls	r3, r3, #23
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	2390      	movs	r3, #144	; 0x90
 8003fae:	05db      	lsls	r3, r3, #23
 8003fb0:	2108      	movs	r1, #8
 8003fb2:	438a      	bics	r2, r1
 8003fb4:	615a      	str	r2, [r3, #20]
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	3301      	adds	r3, #1
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	ddf1      	ble.n	8003fa6 <ILI9341_Draw_Pixel+0x24e>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8003fc2:	2390      	movs	r3, #144	; 0x90
 8003fc4:	05db      	lsls	r3, r3, #23
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	2390      	movs	r3, #144	; 0x90
 8003fca:	05db      	lsls	r3, r3, #23
 8003fcc:	2110      	movs	r1, #16
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003fd2:	2390      	movs	r3, #144	; 0x90
 8003fd4:	05db      	lsls	r3, r3, #23
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	2390      	movs	r3, #144	; 0x90
 8003fda:	05db      	lsls	r3, r3, #23
 8003fdc:	2108      	movs	r1, #8
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	615a      	str	r2, [r3, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003fe2:	2390      	movs	r3, #144	; 0x90
 8003fe4:	05db      	lsls	r3, r3, #23
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	2390      	movs	r3, #144	; 0x90
 8003fea:	05db      	lsls	r3, r3, #23
 8003fec:	2108      	movs	r1, #8
 8003fee:	438a      	bics	r2, r1
 8003ff0:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8003ff2:	1cbb      	adds	r3, r7, #2
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	210c      	movs	r1, #12
 8003ffe:	187b      	adds	r3, r7, r1
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	1cbb      	adds	r3, r7, #2
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	b2da      	uxtb	r2, r3
 8004008:	187b      	adds	r3, r7, r1
 800400a:	705a      	strb	r2, [r3, #1]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800400c:	1878      	adds	r0, r7, r1
 800400e:	2301      	movs	r3, #1
 8004010:	2200      	movs	r2, #0
 8004012:	2102      	movs	r1, #2
 8004014:	f000 fb24 	bl	8004660 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004018:	2300      	movs	r3, #0
 800401a:	623b      	str	r3, [r7, #32]
 800401c:	e00a      	b.n	8004034 <ILI9341_Draw_Pixel+0x2dc>
 800401e:	2390      	movs	r3, #144	; 0x90
 8004020:	05db      	lsls	r3, r3, #23
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	2390      	movs	r3, #144	; 0x90
 8004026:	05db      	lsls	r3, r3, #23
 8004028:	2108      	movs	r1, #8
 800402a:	438a      	bics	r2, r1
 800402c:	615a      	str	r2, [r3, #20]
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	3301      	adds	r3, #1
 8004032:	623b      	str	r3, [r7, #32]
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	2b02      	cmp	r3, #2
 8004038:	ddf1      	ble.n	800401e <ILI9341_Draw_Pixel+0x2c6>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e00a      	b.n	8004056 <ILI9341_Draw_Pixel+0x2fe>
 8004040:	2390      	movs	r3, #144	; 0x90
 8004042:	05db      	lsls	r3, r3, #23
 8004044:	695a      	ldr	r2, [r3, #20]
 8004046:	2390      	movs	r3, #144	; 0x90
 8004048:	05db      	lsls	r3, r3, #23
 800404a:	2108      	movs	r1, #8
 800404c:	438a      	bics	r2, r1
 800404e:	615a      	str	r2, [r3, #20]
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	3301      	adds	r3, #1
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	2b02      	cmp	r3, #2
 800405a:	ddf1      	ble.n	8004040 <ILI9341_Draw_Pixel+0x2e8>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	e00a      	b.n	8004078 <ILI9341_Draw_Pixel+0x320>
 8004062:	2390      	movs	r3, #144	; 0x90
 8004064:	05db      	lsls	r3, r3, #23
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	2390      	movs	r3, #144	; 0x90
 800406a:	05db      	lsls	r3, r3, #23
 800406c:	2108      	movs	r1, #8
 800406e:	438a      	bics	r2, r1
 8004070:	615a      	str	r2, [r3, #20]
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	3301      	adds	r3, #1
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b02      	cmp	r3, #2
 800407c:	ddf1      	ble.n	8004062 <ILI9341_Draw_Pixel+0x30a>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800407e:	2390      	movs	r3, #144	; 0x90
 8004080:	05db      	lsls	r3, r3, #23
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	2390      	movs	r3, #144	; 0x90
 8004086:	05db      	lsls	r3, r3, #23
 8004088:	2108      	movs	r1, #8
 800408a:	430a      	orrs	r2, r1
 800408c:	615a      	str	r2, [r3, #20]
 800408e:	e000      	b.n	8004092 <ILI9341_Draw_Pixel+0x33a>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8004090:	46c0      	nop			; (mov r8, r8)


}
 8004092:	46bd      	mov	sp, r7
 8004094:	b00f      	add	sp, #60	; 0x3c
 8004096:	bd90      	pop	{r4, r7, pc}
 8004098:	20000014 	.word	0x20000014
 800409c:	20000012 	.word	0x20000012

080040a0 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 80040a0:	b5b0      	push	{r4, r5, r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	0005      	movs	r5, r0
 80040a8:	000c      	movs	r4, r1
 80040aa:	0010      	movs	r0, r2
 80040ac:	0019      	movs	r1, r3
 80040ae:	1dbb      	adds	r3, r7, #6
 80040b0:	1c2a      	adds	r2, r5, #0
 80040b2:	801a      	strh	r2, [r3, #0]
 80040b4:	1d3b      	adds	r3, r7, #4
 80040b6:	1c22      	adds	r2, r4, #0
 80040b8:	801a      	strh	r2, [r3, #0]
 80040ba:	1cbb      	adds	r3, r7, #2
 80040bc:	1c02      	adds	r2, r0, #0
 80040be:	801a      	strh	r2, [r3, #0]
 80040c0:	003b      	movs	r3, r7
 80040c2:	1c0a      	adds	r2, r1, #0
 80040c4:	801a      	strh	r2, [r3, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80040c6:	4b5b      	ldr	r3, [pc, #364]	; (8004234 <ILI9341_Draw_Rectangle+0x194>)
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	1dba      	adds	r2, r7, #6
 80040ce:	8812      	ldrh	r2, [r2, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d300      	bcc.n	80040d6 <ILI9341_Draw_Rectangle+0x36>
 80040d4:	e0a9      	b.n	800422a <ILI9341_Draw_Rectangle+0x18a>
 80040d6:	4b58      	ldr	r3, [pc, #352]	; (8004238 <ILI9341_Draw_Rectangle+0x198>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	1d3a      	adds	r2, r7, #4
 80040de:	8812      	ldrh	r2, [r2, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d300      	bcc.n	80040e6 <ILI9341_Draw_Rectangle+0x46>
 80040e4:	e0a1      	b.n	800422a <ILI9341_Draw_Rectangle+0x18a>
	if((xpos+width-1)>=LCD_WIDTH)
 80040e6:	1dbb      	adds	r3, r7, #6
 80040e8:	881a      	ldrh	r2, [r3, #0]
 80040ea:	1cbb      	adds	r3, r7, #2
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	18d3      	adds	r3, r2, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	4a50      	ldr	r2, [pc, #320]	; (8004234 <ILI9341_Draw_Rectangle+0x194>)
 80040f4:	8812      	ldrh	r2, [r2, #0]
 80040f6:	b292      	uxth	r2, r2
 80040f8:	4293      	cmp	r3, r2
 80040fa:	db07      	blt.n	800410c <ILI9341_Draw_Rectangle+0x6c>
		{
			width=LCD_WIDTH-xpos;
 80040fc:	4b4d      	ldr	r3, [pc, #308]	; (8004234 <ILI9341_Draw_Rectangle+0x194>)
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b299      	uxth	r1, r3
 8004102:	1cbb      	adds	r3, r7, #2
 8004104:	1dba      	adds	r2, r7, #6
 8004106:	8812      	ldrh	r2, [r2, #0]
 8004108:	1a8a      	subs	r2, r1, r2
 800410a:	801a      	strh	r2, [r3, #0]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800410c:	1d3b      	adds	r3, r7, #4
 800410e:	881a      	ldrh	r2, [r3, #0]
 8004110:	003b      	movs	r3, r7
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	18d3      	adds	r3, r2, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	4a47      	ldr	r2, [pc, #284]	; (8004238 <ILI9341_Draw_Rectangle+0x198>)
 800411a:	8812      	ldrh	r2, [r2, #0]
 800411c:	b292      	uxth	r2, r2
 800411e:	4293      	cmp	r3, r2
 8004120:	db07      	blt.n	8004132 <ILI9341_Draw_Rectangle+0x92>
		{
			height=LCD_HEIGHT-ypos;
 8004122:	4b45      	ldr	r3, [pc, #276]	; (8004238 <ILI9341_Draw_Rectangle+0x198>)
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b299      	uxth	r1, r3
 8004128:	003b      	movs	r3, r7
 800412a:	1d3a      	adds	r2, r7, #4
 800412c:	8812      	ldrh	r2, [r2, #0]
 800412e:	1a8a      	subs	r2, r1, r2
 8004130:	801a      	strh	r2, [r3, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 8004132:	1dba      	adds	r2, r7, #6
 8004134:	1cbb      	adds	r3, r7, #2
 8004136:	8812      	ldrh	r2, [r2, #0]
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	18d3      	adds	r3, r2, r3
 800413c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800413e:	3b01      	subs	r3, #1
 8004140:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8004142:	1d3a      	adds	r2, r7, #4
 8004144:	003b      	movs	r3, r7
 8004146:	8812      	ldrh	r2, [r2, #0]
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	18d3      	adds	r3, r2, r3
 800414c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	8819      	ldrh	r1, [r3, #0]
 8004156:	1dbb      	adds	r3, r7, #6
 8004158:	8818      	ldrh	r0, [r3, #0]
 800415a:	0013      	movs	r3, r2
 800415c:	0022      	movs	r2, r4
 800415e:	f7ff fd79 	bl	8003c54 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8004162:	200e      	movs	r0, #14
 8004164:	183b      	adds	r3, r7, r0
 8004166:	003a      	movs	r2, r7
 8004168:	1cb9      	adds	r1, r7, #2
 800416a:	8812      	ldrh	r2, [r2, #0]
 800416c:	8809      	ldrh	r1, [r1, #0]
 800416e:	434a      	muls	r2, r1
 8004170:	801a      	strh	r2, [r3, #0]
	uint8_t truncated = 0;
 8004172:	230d      	movs	r3, #13
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800417a:	183b      	adds	r3, r7, r0
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	2201      	movs	r2, #1
 8004180:	4013      	ands	r3, r2
 8004182:	d010      	beq.n	80041a6 <ILI9341_Draw_Rectangle+0x106>
 8004184:	230e      	movs	r3, #14
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d90b      	bls.n	80041a6 <ILI9341_Draw_Rectangle+0x106>
	{
		truncated = 1;
 800418e:	230d      	movs	r3, #13
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	2201      	movs	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
	 	size = ((size >> 1) * 2);
 8004196:	220e      	movs	r2, #14
 8004198:	18bb      	adds	r3, r7, r2
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	b29b      	uxth	r3, r3
 80041a0:	18ba      	adds	r2, r7, r2
 80041a2:	18db      	adds	r3, r3, r3
 80041a4:	8013      	strh	r3, [r2, #0]
	}

	_LCD_Write_Frame(	xpos,
 80041a6:	230e      	movs	r3, #14
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	881c      	ldrh	r4, [r3, #0]
 80041ac:	2320      	movs	r3, #32
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	881a      	ldrh	r2, [r3, #0]
 80041b2:	1d3b      	adds	r3, r7, #4
 80041b4:	8819      	ldrh	r1, [r3, #0]
 80041b6:	1dbb      	adds	r3, r7, #6
 80041b8:	8818      	ldrh	r0, [r3, #0]
 80041ba:	2324      	movs	r3, #36	; 0x24
 80041bc:	18fb      	adds	r3, r7, r3
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	0023      	movs	r3, r4
 80041c4:	f000 f8ba 	bl	800433c <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 80041c8:	230d      	movs	r3, #13
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d02c      	beq.n	800422c <ILI9341_Draw_Rectangle+0x18c>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 80041d2:	1dba      	adds	r2, r7, #6
 80041d4:	1cbb      	adds	r3, r7, #2
 80041d6:	8812      	ldrh	r2, [r2, #0]
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	18d3      	adds	r3, r2, r3
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b02      	subs	r3, #2
 80041e0:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80041e2:	1d3a      	adds	r2, r7, #4
 80041e4:	003b      	movs	r3, r7
 80041e6:	8812      	ldrh	r2, [r2, #0]
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	18d3      	adds	r3, r2, r3
 80041ec:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2420      	movs	r4, #32
 80041f4:	193a      	adds	r2, r7, r4
 80041f6:	8812      	ldrh	r2, [r2, #0]
 80041f8:	0019      	movs	r1, r3
 80041fa:	f7ff fdad 	bl	8003d58 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80041fe:	1dba      	adds	r2, r7, #6
 8004200:	1cbb      	adds	r3, r7, #2
 8004202:	8812      	ldrh	r2, [r2, #0]
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	18d3      	adds	r3, r2, r3
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800420e:	1d3a      	adds	r2, r7, #4
 8004210:	003b      	movs	r3, r7
 8004212:	8812      	ldrh	r2, [r2, #0]
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	18d3      	adds	r3, r2, r3
 8004218:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800421a:	3b01      	subs	r3, #1
 800421c:	b29b      	uxth	r3, r3
 800421e:	193a      	adds	r2, r7, r4
 8004220:	8812      	ldrh	r2, [r2, #0]
 8004222:	0019      	movs	r1, r3
 8004224:	f7ff fd98 	bl	8003d58 <ILI9341_Draw_Pixel>
 8004228:	e000      	b.n	800422c <ILI9341_Draw_Rectangle+0x18c>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800422a:	46c0      	nop			; (mov r8, r8)
							colour);
	}
}
 800422c:	46bd      	mov	sp, r7
 800422e:	b004      	add	sp, #16
 8004230:	bdb0      	pop	{r4, r5, r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	20000014 	.word	0x20000014
 8004238:	20000012 	.word	0x20000012

0800423c <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800423c:	b590      	push	{r4, r7, lr}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	0002      	movs	r2, r0
 8004244:	1dfb      	adds	r3, r7, #7
 8004246:	701a      	strb	r2, [r3, #0]

	uint8_t screen_rotation = rotation;
 8004248:	240f      	movs	r4, #15
 800424a:	193b      	adds	r3, r7, r4
 800424c:	1dfa      	adds	r2, r7, #7
 800424e:	7812      	ldrb	r2, [r2, #0]
 8004250:	701a      	strb	r2, [r3, #0]

	_LCD_SendCommand(0x36);
 8004252:	2036      	movs	r0, #54	; 0x36
 8004254:	f000 f956 	bl	8004504 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8004258:	193b      	adds	r3, r7, r4
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d013      	beq.n	8004288 <ILI9341_Set_Rotation+0x4c>
 8004260:	dc02      	bgt.n	8004268 <ILI9341_Set_Rotation+0x2c>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <ILI9341_Set_Rotation+0x36>
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8004266:	e030      	b.n	80042ca <ILI9341_Set_Rotation+0x8e>
	switch(screen_rotation)
 8004268:	2b02      	cmp	r3, #2
 800426a:	d018      	beq.n	800429e <ILI9341_Set_Rotation+0x62>
 800426c:	2b03      	cmp	r3, #3
 800426e:	d021      	beq.n	80042b4 <ILI9341_Set_Rotation+0x78>
			break;
 8004270:	e02b      	b.n	80042ca <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x08);
 8004272:	2048      	movs	r0, #72	; 0x48
 8004274:	f000 f980 	bl	8004578 <_LCD_SendData>
			LCD_WIDTH = 240;
 8004278:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <ILI9341_Set_Rotation+0x98>)
 800427a:	22f0      	movs	r2, #240	; 0xf0
 800427c:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800427e:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <ILI9341_Set_Rotation+0x9c>)
 8004280:	22a0      	movs	r2, #160	; 0xa0
 8004282:	0052      	lsls	r2, r2, #1
 8004284:	801a      	strh	r2, [r3, #0]
			break;
 8004286:	e020      	b.n	80042ca <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x20|0x08);
 8004288:	2028      	movs	r0, #40	; 0x28
 800428a:	f000 f975 	bl	8004578 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800428e:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <ILI9341_Set_Rotation+0x98>)
 8004290:	22a0      	movs	r2, #160	; 0xa0
 8004292:	0052      	lsls	r2, r2, #1
 8004294:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004296:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <ILI9341_Set_Rotation+0x9c>)
 8004298:	22f0      	movs	r2, #240	; 0xf0
 800429a:	801a      	strh	r2, [r3, #0]
			break;
 800429c:	e015      	b.n	80042ca <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x80|0x08);
 800429e:	2088      	movs	r0, #136	; 0x88
 80042a0:	f000 f96a 	bl	8004578 <_LCD_SendData>
			LCD_WIDTH  = 240;
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <ILI9341_Set_Rotation+0x98>)
 80042a6:	22f0      	movs	r2, #240	; 0xf0
 80042a8:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <ILI9341_Set_Rotation+0x9c>)
 80042ac:	22a0      	movs	r2, #160	; 0xa0
 80042ae:	0052      	lsls	r2, r2, #1
 80042b0:	801a      	strh	r2, [r3, #0]
			break;
 80042b2:	e00a      	b.n	80042ca <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x80|0x20|0x08);
 80042b4:	20e8      	movs	r0, #232	; 0xe8
 80042b6:	f000 f95f 	bl	8004578 <_LCD_SendData>
			LCD_WIDTH  = 320;
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <ILI9341_Set_Rotation+0x98>)
 80042bc:	22a0      	movs	r2, #160	; 0xa0
 80042be:	0052      	lsls	r2, r2, #1
 80042c0:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80042c2:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <ILI9341_Set_Rotation+0x9c>)
 80042c4:	22f0      	movs	r2, #240	; 0xf0
 80042c6:	801a      	strh	r2, [r3, #0]
			break;
 80042c8:	46c0      	nop			; (mov r8, r8)
	}
}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b005      	add	sp, #20
 80042d0:	bd90      	pop	{r4, r7, pc}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	20000014 	.word	0x20000014
 80042d8:	20000012 	.word	0x20000012

080042dc <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80042e0:	4b04      	ldr	r3, [pc, #16]	; (80042f4 <_LCD_Enable+0x18>)
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <_LCD_Enable+0x18>)
 80042e6:	2101      	movs	r1, #1
 80042e8:	430a      	orrs	r2, r1
 80042ea:	615a      	str	r2, [r3, #20]
}
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	48000400 	.word	0x48000400

080042f8 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <_LCD_Reset+0x40>)
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <_LCD_Reset+0x40>)
 8004302:	2101      	movs	r1, #1
 8004304:	438a      	bics	r2, r1
 8004306:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 8004308:	20c8      	movs	r0, #200	; 0xc8
 800430a:	f7fd fa61 	bl	80017d0 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800430e:	2390      	movs	r3, #144	; 0x90
 8004310:	05db      	lsls	r3, r3, #23
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	2390      	movs	r3, #144	; 0x90
 8004316:	05db      	lsls	r3, r3, #23
 8004318:	2108      	movs	r1, #8
 800431a:	438a      	bics	r2, r1
 800431c:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 800431e:	20c8      	movs	r0, #200	; 0xc8
 8004320:	f7fd fa56 	bl	80017d0 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <_LCD_Reset+0x40>)
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <_LCD_Reset+0x40>)
 800432a:	2101      	movs	r1, #1
 800432c:	430a      	orrs	r2, r1
 800432e:	615a      	str	r2, [r3, #20]
}
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	48000400 	.word	0x48000400

0800433c <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800433c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433e:	b095      	sub	sp, #84	; 0x54
 8004340:	af00      	add	r7, sp, #0
 8004342:	0006      	movs	r6, r0
 8004344:	0008      	movs	r0, r1
 8004346:	0011      	movs	r1, r2
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	230e      	movs	r3, #14
 800434c:	2218      	movs	r2, #24
 800434e:	4694      	mov	ip, r2
 8004350:	44bc      	add	ip, r7
 8004352:	4463      	add	r3, ip
 8004354:	1c32      	adds	r2, r6, #0
 8004356:	801a      	strh	r2, [r3, #0]
 8004358:	230c      	movs	r3, #12
 800435a:	2218      	movs	r2, #24
 800435c:	4694      	mov	ip, r2
 800435e:	44bc      	add	ip, r7
 8004360:	4463      	add	r3, ip
 8004362:	1c02      	adds	r2, r0, #0
 8004364:	801a      	strh	r2, [r3, #0]
 8004366:	230a      	movs	r3, #10
 8004368:	2218      	movs	r2, #24
 800436a:	4694      	mov	ip, r2
 800436c:	44bc      	add	ip, r7
 800436e:	4463      	add	r3, ip
 8004370:	1c0a      	adds	r2, r1, #0
 8004372:	801a      	strh	r2, [r3, #0]
 8004374:	466b      	mov	r3, sp
 8004376:	61bb      	str	r3, [r7, #24]

	uint32_t buffer_size = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	647b      	str	r3, [r7, #68]	; 0x44
	if((chunk_size*2) < BURST_MAX_SIZE)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	4a5f      	ldr	r2, [pc, #380]	; (8004500 <_LCD_Write_Frame+0x1c4>)
 8004382:	8812      	ldrh	r2, [r2, #0]
 8004384:	4293      	cmp	r3, r2
 8004386:	d202      	bcs.n	800438e <_LCD_Write_Frame+0x52>
	{
		buffer_size = chunk_size;
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	647b      	str	r3, [r7, #68]	; 0x44
 800438c:	e002      	b.n	8004394 <_LCD_Write_Frame+0x58>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800438e:	4b5c      	ldr	r3, [pc, #368]	; (8004500 <_LCD_Write_Frame+0x1c4>)
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	647b      	str	r3, [r7, #68]	; 0x44
	}

	unsigned char chifted = 	colour>>8;;
 8004394:	230a      	movs	r3, #10
 8004396:	2218      	movs	r2, #24
 8004398:	4694      	mov	ip, r2
 800439a:	44bc      	add	ip, r7
 800439c:	4463      	add	r3, ip
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	0a1b      	lsrs	r3, r3, #8
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	231f      	movs	r3, #31
 80043a6:	2118      	movs	r1, #24
 80043a8:	468c      	mov	ip, r1
 80043aa:	44bc      	add	ip, r7
 80043ac:	4463      	add	r3, ip
 80043ae:	701a      	strb	r2, [r3, #0]
	unsigned char burst_buffer[buffer_size];
 80043b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b2:	001a      	movs	r2, r3
 80043b4:	3a01      	subs	r2, #1
 80043b6:	633a      	str	r2, [r7, #48]	; 0x30
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	2200      	movs	r2, #0
 80043bc:	60fa      	str	r2, [r7, #12]
 80043be:	68b8      	ldr	r0, [r7, #8]
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	0002      	movs	r2, r0
 80043c4:	0f52      	lsrs	r2, r2, #29
 80043c6:	000e      	movs	r6, r1
 80043c8:	00f6      	lsls	r6, r6, #3
 80043ca:	617e      	str	r6, [r7, #20]
 80043cc:	697e      	ldr	r6, [r7, #20]
 80043ce:	4316      	orrs	r6, r2
 80043d0:	617e      	str	r6, [r7, #20]
 80043d2:	0002      	movs	r2, r0
 80043d4:	00d2      	lsls	r2, r2, #3
 80043d6:	613a      	str	r2, [r7, #16]
 80043d8:	603b      	str	r3, [r7, #0]
 80043da:	2200      	movs	r2, #0
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	6838      	ldr	r0, [r7, #0]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	0002      	movs	r2, r0
 80043e4:	0f52      	lsrs	r2, r2, #29
 80043e6:	000e      	movs	r6, r1
 80043e8:	00f5      	lsls	r5, r6, #3
 80043ea:	4315      	orrs	r5, r2
 80043ec:	0002      	movs	r2, r0
 80043ee:	00d4      	lsls	r4, r2, #3
 80043f0:	3307      	adds	r3, #7
 80043f2:	08db      	lsrs	r3, r3, #3
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	466a      	mov	r2, sp
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	469d      	mov	sp, r3
 80043fc:	466b      	mov	r3, sp
 80043fe:	3300      	adds	r3, #0
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8004402:	2300      	movs	r3, #0
 8004404:	64bb      	str	r3, [r7, #72]	; 0x48
 8004406:	e017      	b.n	8004438 <_LCD_Write_Frame+0xfc>
	{
			burst_buffer[j] = 	chifted;
 8004408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800440a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440c:	18d3      	adds	r3, r2, r3
 800440e:	221f      	movs	r2, #31
 8004410:	2118      	movs	r1, #24
 8004412:	468c      	mov	ip, r1
 8004414:	44bc      	add	ip, r7
 8004416:	4462      	add	r2, ip
 8004418:	7812      	ldrb	r2, [r2, #0]
 800441a:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800441c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800441e:	3301      	adds	r3, #1
 8004420:	220a      	movs	r2, #10
 8004422:	2118      	movs	r1, #24
 8004424:	468c      	mov	ip, r1
 8004426:	44bc      	add	ip, r7
 8004428:	4462      	add	r2, ip
 800442a:	8812      	ldrh	r2, [r2, #0]
 800442c:	b2d1      	uxtb	r1, r2
 800442e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004430:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8004432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004434:	3302      	adds	r3, #2
 8004436:	64bb      	str	r3, [r7, #72]	; 0x48
 8004438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800443a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800443c:	429a      	cmp	r2, r3
 800443e:	d3e3      	bcc.n	8004408 <_LCD_Write_Frame+0xcc>
	}
	
	uint32_t Sending_size = chunk_size*2;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8004446:	2301      	movs	r3, #1
 8004448:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Remainder_from_block = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	643b      	str	r3, [r7, #64]	; 0x40
	if(chunk_size > 0)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00c      	beq.n	800446e <_LCD_Write_Frame+0x132>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8004454:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004458:	f7fb fe56 	bl	8000108 <__udivsi3>
 800445c:	0003      	movs	r3, r0
 800445e:	64fb      	str	r3, [r7, #76]	; 0x4c
			Remainder_from_block 	= Sending_size%buffer_size;
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004464:	0018      	movs	r0, r3
 8004466:	f7fb fed5 	bl	8000214 <__aeabi_uidivmod>
 800446a:	000b      	movs	r3, r1
 800446c:	643b      	str	r3, [r7, #64]	; 0x40
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800446e:	2390      	movs	r3, #144	; 0x90
 8004470:	05db      	lsls	r3, r3, #23
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	2390      	movs	r3, #144	; 0x90
 8004476:	05db      	lsls	r3, r3, #23
 8004478:	2110      	movs	r1, #16
 800447a:	430a      	orrs	r2, r1
 800447c:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800447e:	2390      	movs	r3, #144	; 0x90
 8004480:	05db      	lsls	r3, r3, #23
 8004482:	695a      	ldr	r2, [r3, #20]
 8004484:	2390      	movs	r3, #144	; 0x90
 8004486:	05db      	lsls	r3, r3, #23
 8004488:	2108      	movs	r1, #8
 800448a:	438a      	bics	r2, r1
 800448c:	615a      	str	r2, [r3, #20]
//TODO
	if(Sending_in_Block != 0)
 800448e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00f      	beq.n	80044b4 <_LCD_Write_Frame+0x178>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8004494:	2300      	movs	r3, #0
 8004496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004498:	e008      	b.n	80044ac <_LCD_Write_Frame+0x170>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800449a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800449c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800449e:	230a      	movs	r3, #10
 80044a0:	2200      	movs	r2, #0
 80044a2:	f000 f8dd 	bl	8004660 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80044a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a8:	3301      	adds	r3, #1
 80044aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d3f2      	bcc.n	800449a <_LCD_Write_Frame+0x15e>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 80044b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044b8:	230a      	movs	r3, #10
 80044ba:	2200      	movs	r2, #0
 80044bc:	f000 f8d0 	bl	8004660 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80044c0:	2300      	movs	r3, #0
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044c4:	e00a      	b.n	80044dc <_LCD_Write_Frame+0x1a0>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80044c6:	2390      	movs	r3, #144	; 0x90
 80044c8:	05db      	lsls	r3, r3, #23
 80044ca:	695a      	ldr	r2, [r3, #20]
 80044cc:	2390      	movs	r3, #144	; 0x90
 80044ce:	05db      	lsls	r3, r3, #23
 80044d0:	2108      	movs	r1, #8
 80044d2:	438a      	bics	r2, r1
 80044d4:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80044d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d8:	3301      	adds	r3, #1
 80044da:	63bb      	str	r3, [r7, #56]	; 0x38
 80044dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044de:	2b02      	cmp	r3, #2
 80044e0:	ddf1      	ble.n	80044c6 <_LCD_Write_Frame+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80044e2:	2390      	movs	r3, #144	; 0x90
 80044e4:	05db      	lsls	r3, r3, #23
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	2390      	movs	r3, #144	; 0x90
 80044ea:	05db      	lsls	r3, r3, #23
 80044ec:	2108      	movs	r1, #8
 80044ee:	430a      	orrs	r2, r1
 80044f0:	615a      	str	r2, [r3, #20]
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	469d      	mov	sp, r3

}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b015      	add	sp, #84	; 0x54
 80044fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	20000016 	.word	0x20000016

08004504 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	0002      	movs	r2, r0
 800450c:	1dfb      	adds	r3, r7, #7
 800450e:	701a      	strb	r2, [r3, #0]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004510:	2390      	movs	r3, #144	; 0x90
 8004512:	05db      	lsls	r3, r3, #23
 8004514:	695a      	ldr	r2, [r3, #20]
 8004516:	2390      	movs	r3, #144	; 0x90
 8004518:	05db      	lsls	r3, r3, #23
 800451a:	2108      	movs	r1, #8
 800451c:	438a      	bics	r2, r1
 800451e:	615a      	str	r2, [r3, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8004520:	2390      	movs	r3, #144	; 0x90
 8004522:	05db      	lsls	r3, r3, #23
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	2390      	movs	r3, #144	; 0x90
 8004528:	05db      	lsls	r3, r3, #23
 800452a:	2110      	movs	r1, #16
 800452c:	438a      	bics	r2, r1
 800452e:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(command, 0 , 0);
 8004530:	1dfb      	adds	r3, r7, #7
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2200      	movs	r2, #0
 8004536:	2100      	movs	r1, #0
 8004538:	0018      	movs	r0, r3
 800453a:	f000 f857 	bl	80045ec <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	e00a      	b.n	800455a <_LCD_SendCommand+0x56>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004544:	2390      	movs	r3, #144	; 0x90
 8004546:	05db      	lsls	r3, r3, #23
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	2390      	movs	r3, #144	; 0x90
 800454c:	05db      	lsls	r3, r3, #23
 800454e:	2108      	movs	r1, #8
 8004550:	438a      	bics	r2, r1
 8004552:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3301      	adds	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b02      	cmp	r3, #2
 800455e:	ddf1      	ble.n	8004544 <_LCD_SendCommand+0x40>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8004560:	2390      	movs	r3, #144	; 0x90
 8004562:	05db      	lsls	r3, r3, #23
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	2390      	movs	r3, #144	; 0x90
 8004568:	05db      	lsls	r3, r3, #23
 800456a:	2108      	movs	r1, #8
 800456c:	430a      	orrs	r2, r1
 800456e:	615a      	str	r2, [r3, #20]
}
 8004570:	46c0      	nop			; (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b004      	add	sp, #16
 8004576:	bd80      	pop	{r7, pc}

08004578 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	0002      	movs	r2, r0
 8004580:	1dfb      	adds	r3, r7, #7
 8004582:	701a      	strb	r2, [r3, #0]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8004584:	2390      	movs	r3, #144	; 0x90
 8004586:	05db      	lsls	r3, r3, #23
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	2390      	movs	r3, #144	; 0x90
 800458c:	05db      	lsls	r3, r3, #23
 800458e:	2110      	movs	r1, #16
 8004590:	430a      	orrs	r2, r1
 8004592:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004594:	2390      	movs	r3, #144	; 0x90
 8004596:	05db      	lsls	r3, r3, #23
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	2390      	movs	r3, #144	; 0x90
 800459c:	05db      	lsls	r3, r3, #23
 800459e:	2108      	movs	r1, #8
 80045a0:	438a      	bics	r2, r1
 80045a2:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(data, 0 , 0);
 80045a4:	1dfb      	adds	r3, r7, #7
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2100      	movs	r1, #0
 80045ac:	0018      	movs	r0, r3
 80045ae:	f000 f81d 	bl	80045ec <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	e00a      	b.n	80045ce <_LCD_SendData+0x56>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80045b8:	2390      	movs	r3, #144	; 0x90
 80045ba:	05db      	lsls	r3, r3, #23
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	2390      	movs	r3, #144	; 0x90
 80045c0:	05db      	lsls	r3, r3, #23
 80045c2:	2108      	movs	r1, #8
 80045c4:	438a      	bics	r2, r1
 80045c6:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3301      	adds	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	ddf1      	ble.n	80045b8 <_LCD_SendData+0x40>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80045d4:	2390      	movs	r3, #144	; 0x90
 80045d6:	05db      	lsls	r3, r3, #23
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	2390      	movs	r3, #144	; 0x90
 80045dc:	05db      	lsls	r3, r3, #23
 80045de:	2108      	movs	r1, #8
 80045e0:	438a      	bics	r2, r1
 80045e2:	615a      	str	r2, [r3, #20]
}
 80045e4:	46c0      	nop			; (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b004      	add	sp, #16
 80045ea:	bd80      	pop	{r7, pc}

080045ec <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	0004      	movs	r4, r0
 80045f4:	0008      	movs	r0, r1
 80045f6:	0011      	movs	r1, r2
 80045f8:	1dfb      	adds	r3, r7, #7
 80045fa:	1c22      	adds	r2, r4, #0
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	1dbb      	adds	r3, r7, #6
 8004600:	1c02      	adds	r2, r0, #0
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	1d7b      	adds	r3, r7, #5
 8004606:	1c0a      	adds	r2, r1, #0
 8004608:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	e003      	b.n	8004618 <_SPI_SendByte+0x2c>
   		asm("nop");
 8004610:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3301      	adds	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	1dbb      	adds	r3, r7, #6
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	429a      	cmp	r2, r3
 8004620:	dbf6      	blt.n	8004610 <_SPI_SendByte+0x24>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8004622:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <_SPI_SendByte+0x6c>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2202      	movs	r2, #2
 8004628:	4013      	ands	r3, r2
 800462a:	2b02      	cmp	r3, #2
 800462c:	d103      	bne.n	8004636 <_SPI_SendByte+0x4a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800462e:	4a0b      	ldr	r2, [pc, #44]	; (800465c <_SPI_SendByte+0x70>)
 8004630:	1dfb      	adds	r3, r7, #7
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	e003      	b.n	8004644 <_SPI_SendByte+0x58>
   		asm("nop");
 800463c:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	3301      	adds	r3, #1
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	1d7b      	adds	r3, r7, #5
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	429a      	cmp	r2, r3
 800464c:	dbf6      	blt.n	800463c <_SPI_SendByte+0x50>

#endif

}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b005      	add	sp, #20
 8004654:	bd90      	pop	{r4, r7, pc}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	40013000 	.word	0x40013000
 800465c:	4001300c 	.word	0x4001300c

08004660 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	0019      	movs	r1, r3
 800466c:	1dfb      	adds	r3, r7, #7
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	1dbb      	adds	r3, r7, #6
 8004672:	1c0a      	adds	r2, r1, #0
 8004674:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e003      	b.n	8004684 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800467c:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	3301      	adds	r3, #1
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	1dfb      	adds	r3, r7, #7
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	429a      	cmp	r2, r3
 800468c:	dbf6      	blt.n	800467c <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 8004692:	e01d      	b.n	80046d0 <_SPI_SendByteMultiByte+0x70>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <_SPI_SendByteMultiByte+0xa4>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2202      	movs	r2, #2
 800469a:	4013      	ands	r3, r2
 800469c:	2b02      	cmp	r3, #2
 800469e:	d117      	bne.n	80046d0 <_SPI_SendByteMultiByte+0x70>
		{
			if (buffer_size > 1U)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d90a      	bls.n	80046bc <_SPI_SendByteMultiByte+0x5c>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	881a      	ldrh	r2, [r3, #0]
 80046aa:	4b16      	ldr	r3, [pc, #88]	; (8004704 <_SPI_SendByteMultiByte+0xa4>)
 80046ac:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	3302      	adds	r3, #2
 80046b2:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	3b02      	subs	r3, #2
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	e009      	b.n	80046d0 <_SPI_SendByteMultiByte+0x70>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 80046bc:	4a12      	ldr	r2, [pc, #72]	; (8004708 <_SPI_SendByteMultiByte+0xa8>)
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	3301      	adds	r3, #1
 80046c8:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1de      	bne.n	8004694 <_SPI_SendByteMultiByte+0x34>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 80046d6:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <_SPI_SendByteMultiByte+0xa4>)
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <_SPI_SendByteMultiByte+0xa4>)
 80046dc:	2140      	movs	r1, #64	; 0x40
 80046de:	438a      	bics	r2, r1
 80046e0:	609a      	str	r2, [r3, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e003      	b.n	80046f0 <_SPI_SendByteMultiByte+0x90>
   		asm("nop");
 80046e8:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	3301      	adds	r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	1dbb      	adds	r3, r7, #6
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	dbf6      	blt.n	80046e8 <_SPI_SendByteMultiByte+0x88>

#endif

}
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b008      	add	sp, #32
 8004700:	bd80      	pop	{r7, pc}
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	40013000 	.word	0x40013000
 8004708:	4001300c 	.word	0x4001300c

0800470c <__errno>:
 800470c:	4b01      	ldr	r3, [pc, #4]	; (8004714 <__errno+0x8>)
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	4770      	bx	lr
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	20000018 	.word	0x20000018

08004718 <__libc_init_array>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	2600      	movs	r6, #0
 800471c:	4d0c      	ldr	r5, [pc, #48]	; (8004750 <__libc_init_array+0x38>)
 800471e:	4c0d      	ldr	r4, [pc, #52]	; (8004754 <__libc_init_array+0x3c>)
 8004720:	1b64      	subs	r4, r4, r5
 8004722:	10a4      	asrs	r4, r4, #2
 8004724:	42a6      	cmp	r6, r4
 8004726:	d109      	bne.n	800473c <__libc_init_array+0x24>
 8004728:	2600      	movs	r6, #0
 800472a:	f000 fc3b 	bl	8004fa4 <_init>
 800472e:	4d0a      	ldr	r5, [pc, #40]	; (8004758 <__libc_init_array+0x40>)
 8004730:	4c0a      	ldr	r4, [pc, #40]	; (800475c <__libc_init_array+0x44>)
 8004732:	1b64      	subs	r4, r4, r5
 8004734:	10a4      	asrs	r4, r4, #2
 8004736:	42a6      	cmp	r6, r4
 8004738:	d105      	bne.n	8004746 <__libc_init_array+0x2e>
 800473a:	bd70      	pop	{r4, r5, r6, pc}
 800473c:	00b3      	lsls	r3, r6, #2
 800473e:	58eb      	ldr	r3, [r5, r3]
 8004740:	4798      	blx	r3
 8004742:	3601      	adds	r6, #1
 8004744:	e7ee      	b.n	8004724 <__libc_init_array+0xc>
 8004746:	00b3      	lsls	r3, r6, #2
 8004748:	58eb      	ldr	r3, [r5, r3]
 800474a:	4798      	blx	r3
 800474c:	3601      	adds	r6, #1
 800474e:	e7f2      	b.n	8004736 <__libc_init_array+0x1e>
 8004750:	08005298 	.word	0x08005298
 8004754:	08005298 	.word	0x08005298
 8004758:	08005298 	.word	0x08005298
 800475c:	0800529c 	.word	0x0800529c

08004760 <memset>:
 8004760:	0003      	movs	r3, r0
 8004762:	1812      	adds	r2, r2, r0
 8004764:	4293      	cmp	r3, r2
 8004766:	d100      	bne.n	800476a <memset+0xa>
 8004768:	4770      	bx	lr
 800476a:	7019      	strb	r1, [r3, #0]
 800476c:	3301      	adds	r3, #1
 800476e:	e7f9      	b.n	8004764 <memset+0x4>

08004770 <sniprintf>:
 8004770:	b40c      	push	{r2, r3}
 8004772:	b530      	push	{r4, r5, lr}
 8004774:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <sniprintf+0x60>)
 8004776:	b09d      	sub	sp, #116	; 0x74
 8004778:	1e0c      	subs	r4, r1, #0
 800477a:	681d      	ldr	r5, [r3, #0]
 800477c:	da08      	bge.n	8004790 <sniprintf+0x20>
 800477e:	238b      	movs	r3, #139	; 0x8b
 8004780:	2001      	movs	r0, #1
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	4240      	negs	r0, r0
 8004786:	b01d      	add	sp, #116	; 0x74
 8004788:	bc30      	pop	{r4, r5}
 800478a:	bc08      	pop	{r3}
 800478c:	b002      	add	sp, #8
 800478e:	4718      	bx	r3
 8004790:	2382      	movs	r3, #130	; 0x82
 8004792:	a902      	add	r1, sp, #8
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	818b      	strh	r3, [r1, #12]
 8004798:	2300      	movs	r3, #0
 800479a:	9002      	str	r0, [sp, #8]
 800479c:	6108      	str	r0, [r1, #16]
 800479e:	429c      	cmp	r4, r3
 80047a0:	d000      	beq.n	80047a4 <sniprintf+0x34>
 80047a2:	1e63      	subs	r3, r4, #1
 80047a4:	608b      	str	r3, [r1, #8]
 80047a6:	614b      	str	r3, [r1, #20]
 80047a8:	2301      	movs	r3, #1
 80047aa:	425b      	negs	r3, r3
 80047ac:	81cb      	strh	r3, [r1, #14]
 80047ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80047b0:	ab21      	add	r3, sp, #132	; 0x84
 80047b2:	0028      	movs	r0, r5
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	f000 f86f 	bl	8004898 <_svfiprintf_r>
 80047ba:	1c43      	adds	r3, r0, #1
 80047bc:	da01      	bge.n	80047c2 <sniprintf+0x52>
 80047be:	238b      	movs	r3, #139	; 0x8b
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	2c00      	cmp	r4, #0
 80047c4:	d0df      	beq.n	8004786 <sniprintf+0x16>
 80047c6:	2300      	movs	r3, #0
 80047c8:	9a02      	ldr	r2, [sp, #8]
 80047ca:	7013      	strb	r3, [r2, #0]
 80047cc:	e7db      	b.n	8004786 <sniprintf+0x16>
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	20000018 	.word	0x20000018

080047d4 <__ssputs_r>:
 80047d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d6:	688e      	ldr	r6, [r1, #8]
 80047d8:	b085      	sub	sp, #20
 80047da:	0007      	movs	r7, r0
 80047dc:	000c      	movs	r4, r1
 80047de:	9203      	str	r2, [sp, #12]
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	429e      	cmp	r6, r3
 80047e4:	d83c      	bhi.n	8004860 <__ssputs_r+0x8c>
 80047e6:	2390      	movs	r3, #144	; 0x90
 80047e8:	898a      	ldrh	r2, [r1, #12]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	421a      	tst	r2, r3
 80047ee:	d034      	beq.n	800485a <__ssputs_r+0x86>
 80047f0:	2503      	movs	r5, #3
 80047f2:	6909      	ldr	r1, [r1, #16]
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	1a5b      	subs	r3, r3, r1
 80047f8:	9302      	str	r3, [sp, #8]
 80047fa:	6963      	ldr	r3, [r4, #20]
 80047fc:	9802      	ldr	r0, [sp, #8]
 80047fe:	435d      	muls	r5, r3
 8004800:	0feb      	lsrs	r3, r5, #31
 8004802:	195d      	adds	r5, r3, r5
 8004804:	9b01      	ldr	r3, [sp, #4]
 8004806:	106d      	asrs	r5, r5, #1
 8004808:	3301      	adds	r3, #1
 800480a:	181b      	adds	r3, r3, r0
 800480c:	42ab      	cmp	r3, r5
 800480e:	d900      	bls.n	8004812 <__ssputs_r+0x3e>
 8004810:	001d      	movs	r5, r3
 8004812:	0553      	lsls	r3, r2, #21
 8004814:	d532      	bpl.n	800487c <__ssputs_r+0xa8>
 8004816:	0029      	movs	r1, r5
 8004818:	0038      	movs	r0, r7
 800481a:	f000 fb23 	bl	8004e64 <_malloc_r>
 800481e:	1e06      	subs	r6, r0, #0
 8004820:	d109      	bne.n	8004836 <__ssputs_r+0x62>
 8004822:	230c      	movs	r3, #12
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	2340      	movs	r3, #64	; 0x40
 8004828:	2001      	movs	r0, #1
 800482a:	89a2      	ldrh	r2, [r4, #12]
 800482c:	4240      	negs	r0, r0
 800482e:	4313      	orrs	r3, r2
 8004830:	81a3      	strh	r3, [r4, #12]
 8004832:	b005      	add	sp, #20
 8004834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004836:	9a02      	ldr	r2, [sp, #8]
 8004838:	6921      	ldr	r1, [r4, #16]
 800483a:	f000 faac 	bl	8004d96 <memcpy>
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	4a14      	ldr	r2, [pc, #80]	; (8004894 <__ssputs_r+0xc0>)
 8004842:	401a      	ands	r2, r3
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	4313      	orrs	r3, r2
 8004848:	81a3      	strh	r3, [r4, #12]
 800484a:	9b02      	ldr	r3, [sp, #8]
 800484c:	6126      	str	r6, [r4, #16]
 800484e:	18f6      	adds	r6, r6, r3
 8004850:	6026      	str	r6, [r4, #0]
 8004852:	6165      	str	r5, [r4, #20]
 8004854:	9e01      	ldr	r6, [sp, #4]
 8004856:	1aed      	subs	r5, r5, r3
 8004858:	60a5      	str	r5, [r4, #8]
 800485a:	9b01      	ldr	r3, [sp, #4]
 800485c:	429e      	cmp	r6, r3
 800485e:	d900      	bls.n	8004862 <__ssputs_r+0x8e>
 8004860:	9e01      	ldr	r6, [sp, #4]
 8004862:	0032      	movs	r2, r6
 8004864:	9903      	ldr	r1, [sp, #12]
 8004866:	6820      	ldr	r0, [r4, #0]
 8004868:	f000 fa9e 	bl	8004da8 <memmove>
 800486c:	68a3      	ldr	r3, [r4, #8]
 800486e:	2000      	movs	r0, #0
 8004870:	1b9b      	subs	r3, r3, r6
 8004872:	60a3      	str	r3, [r4, #8]
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	199e      	adds	r6, r3, r6
 8004878:	6026      	str	r6, [r4, #0]
 800487a:	e7da      	b.n	8004832 <__ssputs_r+0x5e>
 800487c:	002a      	movs	r2, r5
 800487e:	0038      	movs	r0, r7
 8004880:	f000 fb4e 	bl	8004f20 <_realloc_r>
 8004884:	1e06      	subs	r6, r0, #0
 8004886:	d1e0      	bne.n	800484a <__ssputs_r+0x76>
 8004888:	6921      	ldr	r1, [r4, #16]
 800488a:	0038      	movs	r0, r7
 800488c:	f000 faa0 	bl	8004dd0 <_free_r>
 8004890:	e7c7      	b.n	8004822 <__ssputs_r+0x4e>
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	fffffb7f 	.word	0xfffffb7f

08004898 <_svfiprintf_r>:
 8004898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800489a:	b0a1      	sub	sp, #132	; 0x84
 800489c:	9003      	str	r0, [sp, #12]
 800489e:	001d      	movs	r5, r3
 80048a0:	898b      	ldrh	r3, [r1, #12]
 80048a2:	000f      	movs	r7, r1
 80048a4:	0016      	movs	r6, r2
 80048a6:	061b      	lsls	r3, r3, #24
 80048a8:	d511      	bpl.n	80048ce <_svfiprintf_r+0x36>
 80048aa:	690b      	ldr	r3, [r1, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10e      	bne.n	80048ce <_svfiprintf_r+0x36>
 80048b0:	2140      	movs	r1, #64	; 0x40
 80048b2:	f000 fad7 	bl	8004e64 <_malloc_r>
 80048b6:	6038      	str	r0, [r7, #0]
 80048b8:	6138      	str	r0, [r7, #16]
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d105      	bne.n	80048ca <_svfiprintf_r+0x32>
 80048be:	230c      	movs	r3, #12
 80048c0:	9a03      	ldr	r2, [sp, #12]
 80048c2:	3801      	subs	r0, #1
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	b021      	add	sp, #132	; 0x84
 80048c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ca:	2340      	movs	r3, #64	; 0x40
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	2300      	movs	r3, #0
 80048d0:	ac08      	add	r4, sp, #32
 80048d2:	6163      	str	r3, [r4, #20]
 80048d4:	3320      	adds	r3, #32
 80048d6:	7663      	strb	r3, [r4, #25]
 80048d8:	3310      	adds	r3, #16
 80048da:	76a3      	strb	r3, [r4, #26]
 80048dc:	9507      	str	r5, [sp, #28]
 80048de:	0035      	movs	r5, r6
 80048e0:	782b      	ldrb	r3, [r5, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <_svfiprintf_r+0x52>
 80048e6:	2b25      	cmp	r3, #37	; 0x25
 80048e8:	d146      	bne.n	8004978 <_svfiprintf_r+0xe0>
 80048ea:	1bab      	subs	r3, r5, r6
 80048ec:	9305      	str	r3, [sp, #20]
 80048ee:	d00c      	beq.n	800490a <_svfiprintf_r+0x72>
 80048f0:	0032      	movs	r2, r6
 80048f2:	0039      	movs	r1, r7
 80048f4:	9803      	ldr	r0, [sp, #12]
 80048f6:	f7ff ff6d 	bl	80047d4 <__ssputs_r>
 80048fa:	1c43      	adds	r3, r0, #1
 80048fc:	d100      	bne.n	8004900 <_svfiprintf_r+0x68>
 80048fe:	e0ae      	b.n	8004a5e <_svfiprintf_r+0x1c6>
 8004900:	6962      	ldr	r2, [r4, #20]
 8004902:	9b05      	ldr	r3, [sp, #20]
 8004904:	4694      	mov	ip, r2
 8004906:	4463      	add	r3, ip
 8004908:	6163      	str	r3, [r4, #20]
 800490a:	782b      	ldrb	r3, [r5, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d100      	bne.n	8004912 <_svfiprintf_r+0x7a>
 8004910:	e0a5      	b.n	8004a5e <_svfiprintf_r+0x1c6>
 8004912:	2201      	movs	r2, #1
 8004914:	2300      	movs	r3, #0
 8004916:	4252      	negs	r2, r2
 8004918:	6062      	str	r2, [r4, #4]
 800491a:	a904      	add	r1, sp, #16
 800491c:	3254      	adds	r2, #84	; 0x54
 800491e:	1852      	adds	r2, r2, r1
 8004920:	1c6e      	adds	r6, r5, #1
 8004922:	6023      	str	r3, [r4, #0]
 8004924:	60e3      	str	r3, [r4, #12]
 8004926:	60a3      	str	r3, [r4, #8]
 8004928:	7013      	strb	r3, [r2, #0]
 800492a:	65a3      	str	r3, [r4, #88]	; 0x58
 800492c:	7831      	ldrb	r1, [r6, #0]
 800492e:	2205      	movs	r2, #5
 8004930:	4853      	ldr	r0, [pc, #332]	; (8004a80 <_svfiprintf_r+0x1e8>)
 8004932:	f000 fa25 	bl	8004d80 <memchr>
 8004936:	1c75      	adds	r5, r6, #1
 8004938:	2800      	cmp	r0, #0
 800493a:	d11f      	bne.n	800497c <_svfiprintf_r+0xe4>
 800493c:	6822      	ldr	r2, [r4, #0]
 800493e:	06d3      	lsls	r3, r2, #27
 8004940:	d504      	bpl.n	800494c <_svfiprintf_r+0xb4>
 8004942:	2353      	movs	r3, #83	; 0x53
 8004944:	a904      	add	r1, sp, #16
 8004946:	185b      	adds	r3, r3, r1
 8004948:	2120      	movs	r1, #32
 800494a:	7019      	strb	r1, [r3, #0]
 800494c:	0713      	lsls	r3, r2, #28
 800494e:	d504      	bpl.n	800495a <_svfiprintf_r+0xc2>
 8004950:	2353      	movs	r3, #83	; 0x53
 8004952:	a904      	add	r1, sp, #16
 8004954:	185b      	adds	r3, r3, r1
 8004956:	212b      	movs	r1, #43	; 0x2b
 8004958:	7019      	strb	r1, [r3, #0]
 800495a:	7833      	ldrb	r3, [r6, #0]
 800495c:	2b2a      	cmp	r3, #42	; 0x2a
 800495e:	d016      	beq.n	800498e <_svfiprintf_r+0xf6>
 8004960:	0035      	movs	r5, r6
 8004962:	2100      	movs	r1, #0
 8004964:	200a      	movs	r0, #10
 8004966:	68e3      	ldr	r3, [r4, #12]
 8004968:	782a      	ldrb	r2, [r5, #0]
 800496a:	1c6e      	adds	r6, r5, #1
 800496c:	3a30      	subs	r2, #48	; 0x30
 800496e:	2a09      	cmp	r2, #9
 8004970:	d94e      	bls.n	8004a10 <_svfiprintf_r+0x178>
 8004972:	2900      	cmp	r1, #0
 8004974:	d018      	beq.n	80049a8 <_svfiprintf_r+0x110>
 8004976:	e010      	b.n	800499a <_svfiprintf_r+0x102>
 8004978:	3501      	adds	r5, #1
 800497a:	e7b1      	b.n	80048e0 <_svfiprintf_r+0x48>
 800497c:	4b40      	ldr	r3, [pc, #256]	; (8004a80 <_svfiprintf_r+0x1e8>)
 800497e:	6822      	ldr	r2, [r4, #0]
 8004980:	1ac0      	subs	r0, r0, r3
 8004982:	2301      	movs	r3, #1
 8004984:	4083      	lsls	r3, r0
 8004986:	4313      	orrs	r3, r2
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	002e      	movs	r6, r5
 800498c:	e7ce      	b.n	800492c <_svfiprintf_r+0x94>
 800498e:	9b07      	ldr	r3, [sp, #28]
 8004990:	1d19      	adds	r1, r3, #4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	9107      	str	r1, [sp, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	db01      	blt.n	800499e <_svfiprintf_r+0x106>
 800499a:	930b      	str	r3, [sp, #44]	; 0x2c
 800499c:	e004      	b.n	80049a8 <_svfiprintf_r+0x110>
 800499e:	425b      	negs	r3, r3
 80049a0:	60e3      	str	r3, [r4, #12]
 80049a2:	2302      	movs	r3, #2
 80049a4:	4313      	orrs	r3, r2
 80049a6:	6023      	str	r3, [r4, #0]
 80049a8:	782b      	ldrb	r3, [r5, #0]
 80049aa:	2b2e      	cmp	r3, #46	; 0x2e
 80049ac:	d10a      	bne.n	80049c4 <_svfiprintf_r+0x12c>
 80049ae:	786b      	ldrb	r3, [r5, #1]
 80049b0:	2b2a      	cmp	r3, #42	; 0x2a
 80049b2:	d135      	bne.n	8004a20 <_svfiprintf_r+0x188>
 80049b4:	9b07      	ldr	r3, [sp, #28]
 80049b6:	3502      	adds	r5, #2
 80049b8:	1d1a      	adds	r2, r3, #4
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	9207      	str	r2, [sp, #28]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	db2b      	blt.n	8004a1a <_svfiprintf_r+0x182>
 80049c2:	9309      	str	r3, [sp, #36]	; 0x24
 80049c4:	4e2f      	ldr	r6, [pc, #188]	; (8004a84 <_svfiprintf_r+0x1ec>)
 80049c6:	7829      	ldrb	r1, [r5, #0]
 80049c8:	2203      	movs	r2, #3
 80049ca:	0030      	movs	r0, r6
 80049cc:	f000 f9d8 	bl	8004d80 <memchr>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d006      	beq.n	80049e2 <_svfiprintf_r+0x14a>
 80049d4:	2340      	movs	r3, #64	; 0x40
 80049d6:	1b80      	subs	r0, r0, r6
 80049d8:	4083      	lsls	r3, r0
 80049da:	6822      	ldr	r2, [r4, #0]
 80049dc:	3501      	adds	r5, #1
 80049de:	4313      	orrs	r3, r2
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	7829      	ldrb	r1, [r5, #0]
 80049e4:	2206      	movs	r2, #6
 80049e6:	4828      	ldr	r0, [pc, #160]	; (8004a88 <_svfiprintf_r+0x1f0>)
 80049e8:	1c6e      	adds	r6, r5, #1
 80049ea:	7621      	strb	r1, [r4, #24]
 80049ec:	f000 f9c8 	bl	8004d80 <memchr>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d03c      	beq.n	8004a6e <_svfiprintf_r+0x1d6>
 80049f4:	4b25      	ldr	r3, [pc, #148]	; (8004a8c <_svfiprintf_r+0x1f4>)
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d125      	bne.n	8004a46 <_svfiprintf_r+0x1ae>
 80049fa:	2207      	movs	r2, #7
 80049fc:	9b07      	ldr	r3, [sp, #28]
 80049fe:	3307      	adds	r3, #7
 8004a00:	4393      	bics	r3, r2
 8004a02:	3308      	adds	r3, #8
 8004a04:	9307      	str	r3, [sp, #28]
 8004a06:	6963      	ldr	r3, [r4, #20]
 8004a08:	9a04      	ldr	r2, [sp, #16]
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	6163      	str	r3, [r4, #20]
 8004a0e:	e766      	b.n	80048de <_svfiprintf_r+0x46>
 8004a10:	4343      	muls	r3, r0
 8004a12:	2101      	movs	r1, #1
 8004a14:	189b      	adds	r3, r3, r2
 8004a16:	0035      	movs	r5, r6
 8004a18:	e7a6      	b.n	8004968 <_svfiprintf_r+0xd0>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	425b      	negs	r3, r3
 8004a1e:	e7d0      	b.n	80049c2 <_svfiprintf_r+0x12a>
 8004a20:	2300      	movs	r3, #0
 8004a22:	200a      	movs	r0, #10
 8004a24:	001a      	movs	r2, r3
 8004a26:	3501      	adds	r5, #1
 8004a28:	6063      	str	r3, [r4, #4]
 8004a2a:	7829      	ldrb	r1, [r5, #0]
 8004a2c:	1c6e      	adds	r6, r5, #1
 8004a2e:	3930      	subs	r1, #48	; 0x30
 8004a30:	2909      	cmp	r1, #9
 8004a32:	d903      	bls.n	8004a3c <_svfiprintf_r+0x1a4>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0c5      	beq.n	80049c4 <_svfiprintf_r+0x12c>
 8004a38:	9209      	str	r2, [sp, #36]	; 0x24
 8004a3a:	e7c3      	b.n	80049c4 <_svfiprintf_r+0x12c>
 8004a3c:	4342      	muls	r2, r0
 8004a3e:	2301      	movs	r3, #1
 8004a40:	1852      	adds	r2, r2, r1
 8004a42:	0035      	movs	r5, r6
 8004a44:	e7f1      	b.n	8004a2a <_svfiprintf_r+0x192>
 8004a46:	ab07      	add	r3, sp, #28
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	003a      	movs	r2, r7
 8004a4c:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <_svfiprintf_r+0x1f8>)
 8004a4e:	0021      	movs	r1, r4
 8004a50:	9803      	ldr	r0, [sp, #12]
 8004a52:	e000      	b.n	8004a56 <_svfiprintf_r+0x1be>
 8004a54:	bf00      	nop
 8004a56:	9004      	str	r0, [sp, #16]
 8004a58:	9b04      	ldr	r3, [sp, #16]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	d1d3      	bne.n	8004a06 <_svfiprintf_r+0x16e>
 8004a5e:	89bb      	ldrh	r3, [r7, #12]
 8004a60:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004a62:	065b      	lsls	r3, r3, #25
 8004a64:	d400      	bmi.n	8004a68 <_svfiprintf_r+0x1d0>
 8004a66:	e72e      	b.n	80048c6 <_svfiprintf_r+0x2e>
 8004a68:	2001      	movs	r0, #1
 8004a6a:	4240      	negs	r0, r0
 8004a6c:	e72b      	b.n	80048c6 <_svfiprintf_r+0x2e>
 8004a6e:	ab07      	add	r3, sp, #28
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	003a      	movs	r2, r7
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <_svfiprintf_r+0x1f8>)
 8004a76:	0021      	movs	r1, r4
 8004a78:	9803      	ldr	r0, [sp, #12]
 8004a7a:	f000 f879 	bl	8004b70 <_printf_i>
 8004a7e:	e7ea      	b.n	8004a56 <_svfiprintf_r+0x1be>
 8004a80:	08005264 	.word	0x08005264
 8004a84:	0800526a 	.word	0x0800526a
 8004a88:	0800526e 	.word	0x0800526e
 8004a8c:	00000000 	.word	0x00000000
 8004a90:	080047d5 	.word	0x080047d5

08004a94 <_printf_common>:
 8004a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a96:	0015      	movs	r5, r2
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	688a      	ldr	r2, [r1, #8]
 8004a9c:	690b      	ldr	r3, [r1, #16]
 8004a9e:	9000      	str	r0, [sp, #0]
 8004aa0:	000c      	movs	r4, r1
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	da00      	bge.n	8004aa8 <_printf_common+0x14>
 8004aa6:	0013      	movs	r3, r2
 8004aa8:	0022      	movs	r2, r4
 8004aaa:	602b      	str	r3, [r5, #0]
 8004aac:	3243      	adds	r2, #67	; 0x43
 8004aae:	7812      	ldrb	r2, [r2, #0]
 8004ab0:	2a00      	cmp	r2, #0
 8004ab2:	d001      	beq.n	8004ab8 <_printf_common+0x24>
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	602b      	str	r3, [r5, #0]
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	069b      	lsls	r3, r3, #26
 8004abc:	d502      	bpl.n	8004ac4 <_printf_common+0x30>
 8004abe:	682b      	ldr	r3, [r5, #0]
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	602b      	str	r3, [r5, #0]
 8004ac4:	2706      	movs	r7, #6
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	401f      	ands	r7, r3
 8004aca:	d027      	beq.n	8004b1c <_printf_common+0x88>
 8004acc:	0023      	movs	r3, r4
 8004ace:	3343      	adds	r3, #67	; 0x43
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	1e5a      	subs	r2, r3, #1
 8004ad4:	4193      	sbcs	r3, r2
 8004ad6:	6822      	ldr	r2, [r4, #0]
 8004ad8:	0692      	lsls	r2, r2, #26
 8004ada:	d430      	bmi.n	8004b3e <_printf_common+0xaa>
 8004adc:	0022      	movs	r2, r4
 8004ade:	9901      	ldr	r1, [sp, #4]
 8004ae0:	3243      	adds	r2, #67	; 0x43
 8004ae2:	9800      	ldr	r0, [sp, #0]
 8004ae4:	9e08      	ldr	r6, [sp, #32]
 8004ae6:	47b0      	blx	r6
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d025      	beq.n	8004b38 <_printf_common+0xa4>
 8004aec:	2306      	movs	r3, #6
 8004aee:	6820      	ldr	r0, [r4, #0]
 8004af0:	682a      	ldr	r2, [r5, #0]
 8004af2:	68e1      	ldr	r1, [r4, #12]
 8004af4:	4003      	ands	r3, r0
 8004af6:	2500      	movs	r5, #0
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d103      	bne.n	8004b04 <_printf_common+0x70>
 8004afc:	1a8d      	subs	r5, r1, r2
 8004afe:	43eb      	mvns	r3, r5
 8004b00:	17db      	asrs	r3, r3, #31
 8004b02:	401d      	ands	r5, r3
 8004b04:	68a3      	ldr	r3, [r4, #8]
 8004b06:	6922      	ldr	r2, [r4, #16]
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	dd01      	ble.n	8004b10 <_printf_common+0x7c>
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	18ed      	adds	r5, r5, r3
 8004b10:	2700      	movs	r7, #0
 8004b12:	42bd      	cmp	r5, r7
 8004b14:	d120      	bne.n	8004b58 <_printf_common+0xc4>
 8004b16:	2000      	movs	r0, #0
 8004b18:	e010      	b.n	8004b3c <_printf_common+0xa8>
 8004b1a:	3701      	adds	r7, #1
 8004b1c:	68e3      	ldr	r3, [r4, #12]
 8004b1e:	682a      	ldr	r2, [r5, #0]
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	42bb      	cmp	r3, r7
 8004b24:	ddd2      	ble.n	8004acc <_printf_common+0x38>
 8004b26:	0022      	movs	r2, r4
 8004b28:	2301      	movs	r3, #1
 8004b2a:	3219      	adds	r2, #25
 8004b2c:	9901      	ldr	r1, [sp, #4]
 8004b2e:	9800      	ldr	r0, [sp, #0]
 8004b30:	9e08      	ldr	r6, [sp, #32]
 8004b32:	47b0      	blx	r6
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	d1f0      	bne.n	8004b1a <_printf_common+0x86>
 8004b38:	2001      	movs	r0, #1
 8004b3a:	4240      	negs	r0, r0
 8004b3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b3e:	2030      	movs	r0, #48	; 0x30
 8004b40:	18e1      	adds	r1, r4, r3
 8004b42:	3143      	adds	r1, #67	; 0x43
 8004b44:	7008      	strb	r0, [r1, #0]
 8004b46:	0021      	movs	r1, r4
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	3145      	adds	r1, #69	; 0x45
 8004b4c:	7809      	ldrb	r1, [r1, #0]
 8004b4e:	18a2      	adds	r2, r4, r2
 8004b50:	3243      	adds	r2, #67	; 0x43
 8004b52:	3302      	adds	r3, #2
 8004b54:	7011      	strb	r1, [r2, #0]
 8004b56:	e7c1      	b.n	8004adc <_printf_common+0x48>
 8004b58:	0022      	movs	r2, r4
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	321a      	adds	r2, #26
 8004b5e:	9901      	ldr	r1, [sp, #4]
 8004b60:	9800      	ldr	r0, [sp, #0]
 8004b62:	9e08      	ldr	r6, [sp, #32]
 8004b64:	47b0      	blx	r6
 8004b66:	1c43      	adds	r3, r0, #1
 8004b68:	d0e6      	beq.n	8004b38 <_printf_common+0xa4>
 8004b6a:	3701      	adds	r7, #1
 8004b6c:	e7d1      	b.n	8004b12 <_printf_common+0x7e>
	...

08004b70 <_printf_i>:
 8004b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b72:	b089      	sub	sp, #36	; 0x24
 8004b74:	9204      	str	r2, [sp, #16]
 8004b76:	000a      	movs	r2, r1
 8004b78:	3243      	adds	r2, #67	; 0x43
 8004b7a:	9305      	str	r3, [sp, #20]
 8004b7c:	9003      	str	r0, [sp, #12]
 8004b7e:	9202      	str	r2, [sp, #8]
 8004b80:	7e0a      	ldrb	r2, [r1, #24]
 8004b82:	000c      	movs	r4, r1
 8004b84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b86:	2a6e      	cmp	r2, #110	; 0x6e
 8004b88:	d100      	bne.n	8004b8c <_printf_i+0x1c>
 8004b8a:	e086      	b.n	8004c9a <_printf_i+0x12a>
 8004b8c:	d81f      	bhi.n	8004bce <_printf_i+0x5e>
 8004b8e:	2a63      	cmp	r2, #99	; 0x63
 8004b90:	d033      	beq.n	8004bfa <_printf_i+0x8a>
 8004b92:	d808      	bhi.n	8004ba6 <_printf_i+0x36>
 8004b94:	2a00      	cmp	r2, #0
 8004b96:	d100      	bne.n	8004b9a <_printf_i+0x2a>
 8004b98:	e08c      	b.n	8004cb4 <_printf_i+0x144>
 8004b9a:	2a58      	cmp	r2, #88	; 0x58
 8004b9c:	d04d      	beq.n	8004c3a <_printf_i+0xca>
 8004b9e:	0025      	movs	r5, r4
 8004ba0:	3542      	adds	r5, #66	; 0x42
 8004ba2:	702a      	strb	r2, [r5, #0]
 8004ba4:	e030      	b.n	8004c08 <_printf_i+0x98>
 8004ba6:	2a64      	cmp	r2, #100	; 0x64
 8004ba8:	d001      	beq.n	8004bae <_printf_i+0x3e>
 8004baa:	2a69      	cmp	r2, #105	; 0x69
 8004bac:	d1f7      	bne.n	8004b9e <_printf_i+0x2e>
 8004bae:	6819      	ldr	r1, [r3, #0]
 8004bb0:	6825      	ldr	r5, [r4, #0]
 8004bb2:	1d0a      	adds	r2, r1, #4
 8004bb4:	0628      	lsls	r0, r5, #24
 8004bb6:	d529      	bpl.n	8004c0c <_printf_i+0x9c>
 8004bb8:	6808      	ldr	r0, [r1, #0]
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	da03      	bge.n	8004bc8 <_printf_i+0x58>
 8004bc0:	232d      	movs	r3, #45	; 0x2d
 8004bc2:	9a02      	ldr	r2, [sp, #8]
 8004bc4:	4240      	negs	r0, r0
 8004bc6:	7013      	strb	r3, [r2, #0]
 8004bc8:	4e6b      	ldr	r6, [pc, #428]	; (8004d78 <_printf_i+0x208>)
 8004bca:	270a      	movs	r7, #10
 8004bcc:	e04f      	b.n	8004c6e <_printf_i+0xfe>
 8004bce:	2a73      	cmp	r2, #115	; 0x73
 8004bd0:	d074      	beq.n	8004cbc <_printf_i+0x14c>
 8004bd2:	d808      	bhi.n	8004be6 <_printf_i+0x76>
 8004bd4:	2a6f      	cmp	r2, #111	; 0x6f
 8004bd6:	d01f      	beq.n	8004c18 <_printf_i+0xa8>
 8004bd8:	2a70      	cmp	r2, #112	; 0x70
 8004bda:	d1e0      	bne.n	8004b9e <_printf_i+0x2e>
 8004bdc:	2220      	movs	r2, #32
 8004bde:	6809      	ldr	r1, [r1, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	6022      	str	r2, [r4, #0]
 8004be4:	e003      	b.n	8004bee <_printf_i+0x7e>
 8004be6:	2a75      	cmp	r2, #117	; 0x75
 8004be8:	d016      	beq.n	8004c18 <_printf_i+0xa8>
 8004bea:	2a78      	cmp	r2, #120	; 0x78
 8004bec:	d1d7      	bne.n	8004b9e <_printf_i+0x2e>
 8004bee:	0022      	movs	r2, r4
 8004bf0:	2178      	movs	r1, #120	; 0x78
 8004bf2:	3245      	adds	r2, #69	; 0x45
 8004bf4:	7011      	strb	r1, [r2, #0]
 8004bf6:	4e61      	ldr	r6, [pc, #388]	; (8004d7c <_printf_i+0x20c>)
 8004bf8:	e022      	b.n	8004c40 <_printf_i+0xd0>
 8004bfa:	0025      	movs	r5, r4
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	3542      	adds	r5, #66	; 0x42
 8004c00:	1d11      	adds	r1, r2, #4
 8004c02:	6019      	str	r1, [r3, #0]
 8004c04:	6813      	ldr	r3, [r2, #0]
 8004c06:	702b      	strb	r3, [r5, #0]
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e065      	b.n	8004cd8 <_printf_i+0x168>
 8004c0c:	6808      	ldr	r0, [r1, #0]
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	0669      	lsls	r1, r5, #25
 8004c12:	d5d3      	bpl.n	8004bbc <_printf_i+0x4c>
 8004c14:	b200      	sxth	r0, r0
 8004c16:	e7d1      	b.n	8004bbc <_printf_i+0x4c>
 8004c18:	6819      	ldr	r1, [r3, #0]
 8004c1a:	6825      	ldr	r5, [r4, #0]
 8004c1c:	1d08      	adds	r0, r1, #4
 8004c1e:	6018      	str	r0, [r3, #0]
 8004c20:	6808      	ldr	r0, [r1, #0]
 8004c22:	062e      	lsls	r6, r5, #24
 8004c24:	d505      	bpl.n	8004c32 <_printf_i+0xc2>
 8004c26:	4e54      	ldr	r6, [pc, #336]	; (8004d78 <_printf_i+0x208>)
 8004c28:	2708      	movs	r7, #8
 8004c2a:	2a6f      	cmp	r2, #111	; 0x6f
 8004c2c:	d01b      	beq.n	8004c66 <_printf_i+0xf6>
 8004c2e:	270a      	movs	r7, #10
 8004c30:	e019      	b.n	8004c66 <_printf_i+0xf6>
 8004c32:	066d      	lsls	r5, r5, #25
 8004c34:	d5f7      	bpl.n	8004c26 <_printf_i+0xb6>
 8004c36:	b280      	uxth	r0, r0
 8004c38:	e7f5      	b.n	8004c26 <_printf_i+0xb6>
 8004c3a:	3145      	adds	r1, #69	; 0x45
 8004c3c:	4e4e      	ldr	r6, [pc, #312]	; (8004d78 <_printf_i+0x208>)
 8004c3e:	700a      	strb	r2, [r1, #0]
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	6822      	ldr	r2, [r4, #0]
 8004c44:	1d01      	adds	r1, r0, #4
 8004c46:	6800      	ldr	r0, [r0, #0]
 8004c48:	6019      	str	r1, [r3, #0]
 8004c4a:	0615      	lsls	r5, r2, #24
 8004c4c:	d521      	bpl.n	8004c92 <_printf_i+0x122>
 8004c4e:	07d3      	lsls	r3, r2, #31
 8004c50:	d502      	bpl.n	8004c58 <_printf_i+0xe8>
 8004c52:	2320      	movs	r3, #32
 8004c54:	431a      	orrs	r2, r3
 8004c56:	6022      	str	r2, [r4, #0]
 8004c58:	2710      	movs	r7, #16
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	d103      	bne.n	8004c66 <_printf_i+0xf6>
 8004c5e:	2320      	movs	r3, #32
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	439a      	bics	r2, r3
 8004c64:	6022      	str	r2, [r4, #0]
 8004c66:	0023      	movs	r3, r4
 8004c68:	2200      	movs	r2, #0
 8004c6a:	3343      	adds	r3, #67	; 0x43
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	6863      	ldr	r3, [r4, #4]
 8004c70:	60a3      	str	r3, [r4, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	db58      	blt.n	8004d28 <_printf_i+0x1b8>
 8004c76:	2204      	movs	r2, #4
 8004c78:	6821      	ldr	r1, [r4, #0]
 8004c7a:	4391      	bics	r1, r2
 8004c7c:	6021      	str	r1, [r4, #0]
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d154      	bne.n	8004d2c <_printf_i+0x1bc>
 8004c82:	9d02      	ldr	r5, [sp, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d05a      	beq.n	8004d3e <_printf_i+0x1ce>
 8004c88:	0025      	movs	r5, r4
 8004c8a:	7833      	ldrb	r3, [r6, #0]
 8004c8c:	3542      	adds	r5, #66	; 0x42
 8004c8e:	702b      	strb	r3, [r5, #0]
 8004c90:	e055      	b.n	8004d3e <_printf_i+0x1ce>
 8004c92:	0655      	lsls	r5, r2, #25
 8004c94:	d5db      	bpl.n	8004c4e <_printf_i+0xde>
 8004c96:	b280      	uxth	r0, r0
 8004c98:	e7d9      	b.n	8004c4e <_printf_i+0xde>
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	680d      	ldr	r5, [r1, #0]
 8004c9e:	1d10      	adds	r0, r2, #4
 8004ca0:	6949      	ldr	r1, [r1, #20]
 8004ca2:	6018      	str	r0, [r3, #0]
 8004ca4:	6813      	ldr	r3, [r2, #0]
 8004ca6:	062e      	lsls	r6, r5, #24
 8004ca8:	d501      	bpl.n	8004cae <_printf_i+0x13e>
 8004caa:	6019      	str	r1, [r3, #0]
 8004cac:	e002      	b.n	8004cb4 <_printf_i+0x144>
 8004cae:	066d      	lsls	r5, r5, #25
 8004cb0:	d5fb      	bpl.n	8004caa <_printf_i+0x13a>
 8004cb2:	8019      	strh	r1, [r3, #0]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	9d02      	ldr	r5, [sp, #8]
 8004cb8:	6123      	str	r3, [r4, #16]
 8004cba:	e04f      	b.n	8004d5c <_printf_i+0x1ec>
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	1d11      	adds	r1, r2, #4
 8004cc0:	6019      	str	r1, [r3, #0]
 8004cc2:	6815      	ldr	r5, [r2, #0]
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	6862      	ldr	r2, [r4, #4]
 8004cc8:	0028      	movs	r0, r5
 8004cca:	f000 f859 	bl	8004d80 <memchr>
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d001      	beq.n	8004cd6 <_printf_i+0x166>
 8004cd2:	1b40      	subs	r0, r0, r5
 8004cd4:	6060      	str	r0, [r4, #4]
 8004cd6:	6863      	ldr	r3, [r4, #4]
 8004cd8:	6123      	str	r3, [r4, #16]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9a02      	ldr	r2, [sp, #8]
 8004cde:	7013      	strb	r3, [r2, #0]
 8004ce0:	e03c      	b.n	8004d5c <_printf_i+0x1ec>
 8004ce2:	6923      	ldr	r3, [r4, #16]
 8004ce4:	002a      	movs	r2, r5
 8004ce6:	9904      	ldr	r1, [sp, #16]
 8004ce8:	9803      	ldr	r0, [sp, #12]
 8004cea:	9d05      	ldr	r5, [sp, #20]
 8004cec:	47a8      	blx	r5
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d03e      	beq.n	8004d70 <_printf_i+0x200>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	079b      	lsls	r3, r3, #30
 8004cf6:	d415      	bmi.n	8004d24 <_printf_i+0x1b4>
 8004cf8:	9b07      	ldr	r3, [sp, #28]
 8004cfa:	68e0      	ldr	r0, [r4, #12]
 8004cfc:	4298      	cmp	r0, r3
 8004cfe:	da39      	bge.n	8004d74 <_printf_i+0x204>
 8004d00:	0018      	movs	r0, r3
 8004d02:	e037      	b.n	8004d74 <_printf_i+0x204>
 8004d04:	0022      	movs	r2, r4
 8004d06:	2301      	movs	r3, #1
 8004d08:	3219      	adds	r2, #25
 8004d0a:	9904      	ldr	r1, [sp, #16]
 8004d0c:	9803      	ldr	r0, [sp, #12]
 8004d0e:	9e05      	ldr	r6, [sp, #20]
 8004d10:	47b0      	blx	r6
 8004d12:	1c43      	adds	r3, r0, #1
 8004d14:	d02c      	beq.n	8004d70 <_printf_i+0x200>
 8004d16:	3501      	adds	r5, #1
 8004d18:	68e3      	ldr	r3, [r4, #12]
 8004d1a:	9a07      	ldr	r2, [sp, #28]
 8004d1c:	1a9b      	subs	r3, r3, r2
 8004d1e:	42ab      	cmp	r3, r5
 8004d20:	dcf0      	bgt.n	8004d04 <_printf_i+0x194>
 8004d22:	e7e9      	b.n	8004cf8 <_printf_i+0x188>
 8004d24:	2500      	movs	r5, #0
 8004d26:	e7f7      	b.n	8004d18 <_printf_i+0x1a8>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d0ad      	beq.n	8004c88 <_printf_i+0x118>
 8004d2c:	9d02      	ldr	r5, [sp, #8]
 8004d2e:	0039      	movs	r1, r7
 8004d30:	f7fb fa70 	bl	8000214 <__aeabi_uidivmod>
 8004d34:	5c73      	ldrb	r3, [r6, r1]
 8004d36:	3d01      	subs	r5, #1
 8004d38:	702b      	strb	r3, [r5, #0]
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	d1f7      	bne.n	8004d2e <_printf_i+0x1be>
 8004d3e:	2f08      	cmp	r7, #8
 8004d40:	d109      	bne.n	8004d56 <_printf_i+0x1e6>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	07db      	lsls	r3, r3, #31
 8004d46:	d506      	bpl.n	8004d56 <_printf_i+0x1e6>
 8004d48:	6863      	ldr	r3, [r4, #4]
 8004d4a:	6922      	ldr	r2, [r4, #16]
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	dc02      	bgt.n	8004d56 <_printf_i+0x1e6>
 8004d50:	2330      	movs	r3, #48	; 0x30
 8004d52:	3d01      	subs	r5, #1
 8004d54:	702b      	strb	r3, [r5, #0]
 8004d56:	9b02      	ldr	r3, [sp, #8]
 8004d58:	1b5b      	subs	r3, r3, r5
 8004d5a:	6123      	str	r3, [r4, #16]
 8004d5c:	9b05      	ldr	r3, [sp, #20]
 8004d5e:	aa07      	add	r2, sp, #28
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	0021      	movs	r1, r4
 8004d64:	9b04      	ldr	r3, [sp, #16]
 8004d66:	9803      	ldr	r0, [sp, #12]
 8004d68:	f7ff fe94 	bl	8004a94 <_printf_common>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d1b8      	bne.n	8004ce2 <_printf_i+0x172>
 8004d70:	2001      	movs	r0, #1
 8004d72:	4240      	negs	r0, r0
 8004d74:	b009      	add	sp, #36	; 0x24
 8004d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d78:	08005275 	.word	0x08005275
 8004d7c:	08005286 	.word	0x08005286

08004d80 <memchr>:
 8004d80:	b2c9      	uxtb	r1, r1
 8004d82:	1882      	adds	r2, r0, r2
 8004d84:	4290      	cmp	r0, r2
 8004d86:	d101      	bne.n	8004d8c <memchr+0xc>
 8004d88:	2000      	movs	r0, #0
 8004d8a:	4770      	bx	lr
 8004d8c:	7803      	ldrb	r3, [r0, #0]
 8004d8e:	428b      	cmp	r3, r1
 8004d90:	d0fb      	beq.n	8004d8a <memchr+0xa>
 8004d92:	3001      	adds	r0, #1
 8004d94:	e7f6      	b.n	8004d84 <memchr+0x4>

08004d96 <memcpy>:
 8004d96:	2300      	movs	r3, #0
 8004d98:	b510      	push	{r4, lr}
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d100      	bne.n	8004da0 <memcpy+0xa>
 8004d9e:	bd10      	pop	{r4, pc}
 8004da0:	5ccc      	ldrb	r4, [r1, r3]
 8004da2:	54c4      	strb	r4, [r0, r3]
 8004da4:	3301      	adds	r3, #1
 8004da6:	e7f8      	b.n	8004d9a <memcpy+0x4>

08004da8 <memmove>:
 8004da8:	b510      	push	{r4, lr}
 8004daa:	4288      	cmp	r0, r1
 8004dac:	d902      	bls.n	8004db4 <memmove+0xc>
 8004dae:	188b      	adds	r3, r1, r2
 8004db0:	4298      	cmp	r0, r3
 8004db2:	d303      	bcc.n	8004dbc <memmove+0x14>
 8004db4:	2300      	movs	r3, #0
 8004db6:	e007      	b.n	8004dc8 <memmove+0x20>
 8004db8:	5c8b      	ldrb	r3, [r1, r2]
 8004dba:	5483      	strb	r3, [r0, r2]
 8004dbc:	3a01      	subs	r2, #1
 8004dbe:	d2fb      	bcs.n	8004db8 <memmove+0x10>
 8004dc0:	bd10      	pop	{r4, pc}
 8004dc2:	5ccc      	ldrb	r4, [r1, r3]
 8004dc4:	54c4      	strb	r4, [r0, r3]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d1fa      	bne.n	8004dc2 <memmove+0x1a>
 8004dcc:	e7f8      	b.n	8004dc0 <memmove+0x18>
	...

08004dd0 <_free_r>:
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	0005      	movs	r5, r0
 8004dd4:	2900      	cmp	r1, #0
 8004dd6:	d010      	beq.n	8004dfa <_free_r+0x2a>
 8004dd8:	1f0c      	subs	r4, r1, #4
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	da00      	bge.n	8004de2 <_free_r+0x12>
 8004de0:	18e4      	adds	r4, r4, r3
 8004de2:	0028      	movs	r0, r5
 8004de4:	f000 f8d4 	bl	8004f90 <__malloc_lock>
 8004de8:	4a1d      	ldr	r2, [pc, #116]	; (8004e60 <_free_r+0x90>)
 8004dea:	6813      	ldr	r3, [r2, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d105      	bne.n	8004dfc <_free_r+0x2c>
 8004df0:	6063      	str	r3, [r4, #4]
 8004df2:	6014      	str	r4, [r2, #0]
 8004df4:	0028      	movs	r0, r5
 8004df6:	f000 f8cc 	bl	8004f92 <__malloc_unlock>
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	42a3      	cmp	r3, r4
 8004dfe:	d909      	bls.n	8004e14 <_free_r+0x44>
 8004e00:	6821      	ldr	r1, [r4, #0]
 8004e02:	1860      	adds	r0, r4, r1
 8004e04:	4283      	cmp	r3, r0
 8004e06:	d1f3      	bne.n	8004df0 <_free_r+0x20>
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	1841      	adds	r1, r0, r1
 8004e0e:	6021      	str	r1, [r4, #0]
 8004e10:	e7ee      	b.n	8004df0 <_free_r+0x20>
 8004e12:	0013      	movs	r3, r2
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	2a00      	cmp	r2, #0
 8004e18:	d001      	beq.n	8004e1e <_free_r+0x4e>
 8004e1a:	42a2      	cmp	r2, r4
 8004e1c:	d9f9      	bls.n	8004e12 <_free_r+0x42>
 8004e1e:	6819      	ldr	r1, [r3, #0]
 8004e20:	1858      	adds	r0, r3, r1
 8004e22:	42a0      	cmp	r0, r4
 8004e24:	d10b      	bne.n	8004e3e <_free_r+0x6e>
 8004e26:	6820      	ldr	r0, [r4, #0]
 8004e28:	1809      	adds	r1, r1, r0
 8004e2a:	1858      	adds	r0, r3, r1
 8004e2c:	6019      	str	r1, [r3, #0]
 8004e2e:	4282      	cmp	r2, r0
 8004e30:	d1e0      	bne.n	8004df4 <_free_r+0x24>
 8004e32:	6810      	ldr	r0, [r2, #0]
 8004e34:	6852      	ldr	r2, [r2, #4]
 8004e36:	1841      	adds	r1, r0, r1
 8004e38:	6019      	str	r1, [r3, #0]
 8004e3a:	605a      	str	r2, [r3, #4]
 8004e3c:	e7da      	b.n	8004df4 <_free_r+0x24>
 8004e3e:	42a0      	cmp	r0, r4
 8004e40:	d902      	bls.n	8004e48 <_free_r+0x78>
 8004e42:	230c      	movs	r3, #12
 8004e44:	602b      	str	r3, [r5, #0]
 8004e46:	e7d5      	b.n	8004df4 <_free_r+0x24>
 8004e48:	6821      	ldr	r1, [r4, #0]
 8004e4a:	1860      	adds	r0, r4, r1
 8004e4c:	4282      	cmp	r2, r0
 8004e4e:	d103      	bne.n	8004e58 <_free_r+0x88>
 8004e50:	6810      	ldr	r0, [r2, #0]
 8004e52:	6852      	ldr	r2, [r2, #4]
 8004e54:	1841      	adds	r1, r0, r1
 8004e56:	6021      	str	r1, [r4, #0]
 8004e58:	6062      	str	r2, [r4, #4]
 8004e5a:	605c      	str	r4, [r3, #4]
 8004e5c:	e7ca      	b.n	8004df4 <_free_r+0x24>
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	200000a4 	.word	0x200000a4

08004e64 <_malloc_r>:
 8004e64:	2303      	movs	r3, #3
 8004e66:	b570      	push	{r4, r5, r6, lr}
 8004e68:	1ccd      	adds	r5, r1, #3
 8004e6a:	439d      	bics	r5, r3
 8004e6c:	3508      	adds	r5, #8
 8004e6e:	0006      	movs	r6, r0
 8004e70:	2d0c      	cmp	r5, #12
 8004e72:	d21e      	bcs.n	8004eb2 <_malloc_r+0x4e>
 8004e74:	250c      	movs	r5, #12
 8004e76:	42a9      	cmp	r1, r5
 8004e78:	d81d      	bhi.n	8004eb6 <_malloc_r+0x52>
 8004e7a:	0030      	movs	r0, r6
 8004e7c:	f000 f888 	bl	8004f90 <__malloc_lock>
 8004e80:	4a25      	ldr	r2, [pc, #148]	; (8004f18 <_malloc_r+0xb4>)
 8004e82:	6814      	ldr	r4, [r2, #0]
 8004e84:	0021      	movs	r1, r4
 8004e86:	2900      	cmp	r1, #0
 8004e88:	d119      	bne.n	8004ebe <_malloc_r+0x5a>
 8004e8a:	4c24      	ldr	r4, [pc, #144]	; (8004f1c <_malloc_r+0xb8>)
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d103      	bne.n	8004e9a <_malloc_r+0x36>
 8004e92:	0030      	movs	r0, r6
 8004e94:	f000 f86a 	bl	8004f6c <_sbrk_r>
 8004e98:	6020      	str	r0, [r4, #0]
 8004e9a:	0029      	movs	r1, r5
 8004e9c:	0030      	movs	r0, r6
 8004e9e:	f000 f865 	bl	8004f6c <_sbrk_r>
 8004ea2:	1c43      	adds	r3, r0, #1
 8004ea4:	d12b      	bne.n	8004efe <_malloc_r+0x9a>
 8004ea6:	230c      	movs	r3, #12
 8004ea8:	0030      	movs	r0, r6
 8004eaa:	6033      	str	r3, [r6, #0]
 8004eac:	f000 f871 	bl	8004f92 <__malloc_unlock>
 8004eb0:	e003      	b.n	8004eba <_malloc_r+0x56>
 8004eb2:	2d00      	cmp	r5, #0
 8004eb4:	dadf      	bge.n	8004e76 <_malloc_r+0x12>
 8004eb6:	230c      	movs	r3, #12
 8004eb8:	6033      	str	r3, [r6, #0]
 8004eba:	2000      	movs	r0, #0
 8004ebc:	bd70      	pop	{r4, r5, r6, pc}
 8004ebe:	680b      	ldr	r3, [r1, #0]
 8004ec0:	1b5b      	subs	r3, r3, r5
 8004ec2:	d419      	bmi.n	8004ef8 <_malloc_r+0x94>
 8004ec4:	2b0b      	cmp	r3, #11
 8004ec6:	d903      	bls.n	8004ed0 <_malloc_r+0x6c>
 8004ec8:	600b      	str	r3, [r1, #0]
 8004eca:	18cc      	adds	r4, r1, r3
 8004ecc:	6025      	str	r5, [r4, #0]
 8004ece:	e003      	b.n	8004ed8 <_malloc_r+0x74>
 8004ed0:	684b      	ldr	r3, [r1, #4]
 8004ed2:	428c      	cmp	r4, r1
 8004ed4:	d10d      	bne.n	8004ef2 <_malloc_r+0x8e>
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	0030      	movs	r0, r6
 8004eda:	f000 f85a 	bl	8004f92 <__malloc_unlock>
 8004ede:	0020      	movs	r0, r4
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	300b      	adds	r0, #11
 8004ee4:	1d23      	adds	r3, r4, #4
 8004ee6:	4390      	bics	r0, r2
 8004ee8:	1ac3      	subs	r3, r0, r3
 8004eea:	d0e7      	beq.n	8004ebc <_malloc_r+0x58>
 8004eec:	425a      	negs	r2, r3
 8004eee:	50e2      	str	r2, [r4, r3]
 8004ef0:	e7e4      	b.n	8004ebc <_malloc_r+0x58>
 8004ef2:	6063      	str	r3, [r4, #4]
 8004ef4:	000c      	movs	r4, r1
 8004ef6:	e7ef      	b.n	8004ed8 <_malloc_r+0x74>
 8004ef8:	000c      	movs	r4, r1
 8004efa:	6849      	ldr	r1, [r1, #4]
 8004efc:	e7c3      	b.n	8004e86 <_malloc_r+0x22>
 8004efe:	2303      	movs	r3, #3
 8004f00:	1cc4      	adds	r4, r0, #3
 8004f02:	439c      	bics	r4, r3
 8004f04:	42a0      	cmp	r0, r4
 8004f06:	d0e1      	beq.n	8004ecc <_malloc_r+0x68>
 8004f08:	1a21      	subs	r1, r4, r0
 8004f0a:	0030      	movs	r0, r6
 8004f0c:	f000 f82e 	bl	8004f6c <_sbrk_r>
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	d1db      	bne.n	8004ecc <_malloc_r+0x68>
 8004f14:	e7c7      	b.n	8004ea6 <_malloc_r+0x42>
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	200000a4 	.word	0x200000a4
 8004f1c:	200000a8 	.word	0x200000a8

08004f20 <_realloc_r>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	0007      	movs	r7, r0
 8004f24:	000d      	movs	r5, r1
 8004f26:	0016      	movs	r6, r2
 8004f28:	2900      	cmp	r1, #0
 8004f2a:	d105      	bne.n	8004f38 <_realloc_r+0x18>
 8004f2c:	0011      	movs	r1, r2
 8004f2e:	f7ff ff99 	bl	8004e64 <_malloc_r>
 8004f32:	0004      	movs	r4, r0
 8004f34:	0020      	movs	r0, r4
 8004f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f38:	2a00      	cmp	r2, #0
 8004f3a:	d103      	bne.n	8004f44 <_realloc_r+0x24>
 8004f3c:	f7ff ff48 	bl	8004dd0 <_free_r>
 8004f40:	0034      	movs	r4, r6
 8004f42:	e7f7      	b.n	8004f34 <_realloc_r+0x14>
 8004f44:	f000 f826 	bl	8004f94 <_malloc_usable_size_r>
 8004f48:	002c      	movs	r4, r5
 8004f4a:	42b0      	cmp	r0, r6
 8004f4c:	d2f2      	bcs.n	8004f34 <_realloc_r+0x14>
 8004f4e:	0031      	movs	r1, r6
 8004f50:	0038      	movs	r0, r7
 8004f52:	f7ff ff87 	bl	8004e64 <_malloc_r>
 8004f56:	1e04      	subs	r4, r0, #0
 8004f58:	d0ec      	beq.n	8004f34 <_realloc_r+0x14>
 8004f5a:	0029      	movs	r1, r5
 8004f5c:	0032      	movs	r2, r6
 8004f5e:	f7ff ff1a 	bl	8004d96 <memcpy>
 8004f62:	0029      	movs	r1, r5
 8004f64:	0038      	movs	r0, r7
 8004f66:	f7ff ff33 	bl	8004dd0 <_free_r>
 8004f6a:	e7e3      	b.n	8004f34 <_realloc_r+0x14>

08004f6c <_sbrk_r>:
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	b570      	push	{r4, r5, r6, lr}
 8004f70:	4c06      	ldr	r4, [pc, #24]	; (8004f8c <_sbrk_r+0x20>)
 8004f72:	0005      	movs	r5, r0
 8004f74:	0008      	movs	r0, r1
 8004f76:	6023      	str	r3, [r4, #0]
 8004f78:	f7fb ff68 	bl	8000e4c <_sbrk>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d103      	bne.n	8004f88 <_sbrk_r+0x1c>
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d000      	beq.n	8004f88 <_sbrk_r+0x1c>
 8004f86:	602b      	str	r3, [r5, #0]
 8004f88:	bd70      	pop	{r4, r5, r6, pc}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	200002d8 	.word	0x200002d8

08004f90 <__malloc_lock>:
 8004f90:	4770      	bx	lr

08004f92 <__malloc_unlock>:
 8004f92:	4770      	bx	lr

08004f94 <_malloc_usable_size_r>:
 8004f94:	1f0b      	subs	r3, r1, #4
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	1f18      	subs	r0, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	da01      	bge.n	8004fa2 <_malloc_usable_size_r+0xe>
 8004f9e:	580b      	ldr	r3, [r1, r0]
 8004fa0:	18c0      	adds	r0, r0, r3
 8004fa2:	4770      	bx	lr

08004fa4 <_init>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004faa:	bc08      	pop	{r3}
 8004fac:	469e      	mov	lr, r3
 8004fae:	4770      	bx	lr

08004fb0 <_fini>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr
