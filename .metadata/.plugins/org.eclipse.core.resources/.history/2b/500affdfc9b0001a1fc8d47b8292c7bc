/*
 * RotaryEncoder.c
 *
 *  Created on: Jun 17, 2020
 *      Author: chris
 */


#include "RotaryEncoder.h"

#include "UvboxManager.h"

#define ENCODER_MODIFY_VALUE	1
uint8_t previous_encoder_dir = 0;

void RE_Setup()
{
	HAL_TIM_Base_Start(&htim2);
	previous_encoder_dir = (TIM2->CR1 & TIM_CR1_DIR);
}

void RE_UpdateLeds()
{
	if(eLidStatus)
	{
	  	uint8_t new_encoder_dir = (TIM2->CR1 & TIM_CR1_DIR);

	  	// encoder direction has changed from increasing to decreasing
		if( (previous_encoder_dir) && (!new_encoder_dir) )
		{
			TIM1->CCR1 = TIM1->CCR1 - ENCODER_MODIFY_VALUE;
			TIM1->CCR2 = TIM1->CCR1 - ENCODER_MODIFY_VALUE;
			TIM1->CCR3 = TIM1->CCR3 - ENCODER_MODIFY_VALUE;
			TIM1->CCR4 = TIM1->CCR4 - ENCODER_MODIFY_VALUE;

			// clamp lower range integer overflow to
			// MAX_UVLED_PWM_PERIOD+1
			if(	(TIM1->CCR1 > MAX_UVLED_PWM_PERIOD+1) ||
				(TIM1->CCR2 > MAX_UVLED_PWM_PERIOD+1)	||
				(TIM1->CCR3 > MAX_UVLED_PWM_PERIOD+1) ||
				(TIM1->CCR4 > MAX_UVLED_PWM_PERIOD+1)
				)
			{
				TIM1->CCR1 = 0;
				TIM1->CCR2 = 0;
				TIM1->CCR3 = 0;
				TIM1->CCR4 = 0;
			}

			previous_encoder_dir = (TIM2->CR1 & TIM_CR1_DIR);
		}
		// encoder direction has changed from decreasing to increasing
		else if( (!previous_encoder_dir) && (new_encoder_dir) )
		{
			TIM1->CCR1 = TIM1->CCR1 + ENCODER_MODIFY_VALUE;
			TIM1->CCR2 = TIM1->CCR2 + ENCODER_MODIFY_VALUE;
			TIM1->CCR3 = TIM1->CCR3 + ENCODER_MODIFY_VALUE;
			TIM1->CCR4 = TIM1->CCR4 + ENCODER_MODIFY_VALUE;

			// clamp upper range integer overflow to
			// MAX_UVLED_PWM_PERIOD
			if(	(TIM1->CCR1 > MAX_UVLED_PWM_PERIOD) ||
				(TIM1->CCR2 > MAX_UVLED_PWM_PERIOD)	||
				(TIM1->CCR3 > MAX_UVLED_PWM_PERIOD) ||
				(TIM1->CCR4 > MAX_UVLED_PWM_PERIOD)
				)
			{
				TIM1->CCR1 = MAX_UVLED_PWM_PERIOD;
				TIM1->CCR2 = MAX_UVLED_PWM_PERIOD;
				TIM1->CCR3 = MAX_UVLED_PWM_PERIOD;
				TIM1->CCR4 = MAX_UVLED_PWM_PERIOD;
			}

			previous_encoder_dir = (TIM2->CR1 & TIM_CR1_DIR);
		}

	}
	else
	{
	  	uint8_t new_encoder_dir = (TIM2->CR1 & TIM_CR1_DIR);

	  	// encoder direction has changed from increasing to decreasing
		if( (previous_encoder_dir) && (!new_encoder_dir) )
		{
			TIM14->CCR1 = TIM14->CCR1 - ENCODER_MODIFY_VALUE;

			// clamp lower range integer overflow to
			// MAX_UVLED_PWM_PERIOD+1
			if(	(TIM14->CCR1 > MAX_LED_PWM_PERIOD+1) )
			{
				TIM14->CCR1 = 0;
			}

			previous_encoder_dir = (TIM2->CR1 & TIM_CR1_DIR);
		}
		// encoder direction has changed from decreasing to increasing
		else if( (!previous_encoder_dir) && (new_encoder_dir) )
		{
			TIM14->CCR1 = TIM14->CCR1 + ENCODER_MODIFY_VALUE;

			// clamp upper range integer overflow to
			// MAX_UVLED_PWM_PERIOD
			if(	(TIM14->CCR1 > MAX_LED_PWM_PERIOD) )
			{
				TIM14->CCR1 = MAX_LED_PWM_PERIOD;
			}

			previous_encoder_dir = (TIM2->CR1 & TIM_CR1_DIR);
		}

	}
}
