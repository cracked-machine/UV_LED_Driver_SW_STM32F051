/*
 * UVBOX_Manager.c
 *
 *  Created on: Jun 17, 2020
 *      Author: chris
 */


#include "UvboxManager.h"
#include "RotaryEncoder.h"
#include "EventManager.h"

UVBOX_LidStatusTypedef eLidStatus = UVBOX_LIDOPEN;
uint16_t debounce_last_interrupt_time = 0;

void UM_Setup()
{

	  // PWM OUTPUTS

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
	  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);

	  TIM1->ARR = 0xFF;		// 	255
	  TIM1->CCR1 = 0x00;	// 	31	12.5%
	  TIM1->CCR2 = 0x00;	//	63	25%
	  TIM1->CCR3 = 0x00;	//	127 50%
	  TIM1->CCR4 = 0x00;	//  191 75%

	  TIM14->ARR = 0xFF;	// 	255
	  TIM14->CCR1 = MAX_ENCODER_LIMIT;

	  // debounce timer
	  HAL_TIM_Base_Start(&htim17);

	  // status output LED
	  HAL_GPIO_WritePin(GPIOA, STATUS_BLUE_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOA, STATUS_RED_Pin, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA, STATUS_GREEN_Pin, GPIO_PIN_SET);

	  // rotary encoder
	  RE_Setup();

}

void UM_ToggleLedMode()
{
	uint16_t debounce_interrupt_time = TIM17->CNT;
	if ((debounce_interrupt_time - UM_getLastDebounceTime()) > MAX_DEBOUNCE_DELAY)
	{
		eLidStatus ^= 0x1;

		if(EM_getSystemState())
			EM_ProcessEvent(UVBOX_evLidOpened);
		else
			EM_ProcessEvent(UVBOX_evLidClosed);

		if(eLidStatus)	// lid closed
		{
			HAL_GPIO_WritePin(GPIOA, STATUS_GREEN_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA, STATUS_RED_Pin, GPIO_PIN_SET);

			TIM1->CCR1 = MAX_UVLED_PWM_PERIOD;
			TIM1->CCR2 = MAX_UVLED_PWM_PERIOD;
			TIM1->CCR3 = MAX_UVLED_PWM_PERIOD;
			TIM1->CCR4 = MAX_UVLED_PWM_PERIOD;
			TIM14->CCR1 = 0;
		}
		else			// lid open
		{
			HAL_GPIO_WritePin(GPIOA, STATUS_GREEN_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOA, STATUS_RED_Pin, GPIO_PIN_RESET);

			TIM1->CCR1 = 0;
			TIM1->CCR2 = 0;
			TIM1->CCR3 = 0;
			TIM1->CCR4 = 0;
			TIM14->CCR1 = MAX_LED_PWM_PERIOD;
		}

	}
	UM_SetLastDebounceTime(debounce_interrupt_time);
}

void UM_SetLastDebounceTime(uint16_t pDebounceTime)
{
	debounce_last_interrupt_time = pDebounceTime;
}

uint16_t UM_getLastDebounceTime()
{
	return debounce_last_interrupt_time;
}

