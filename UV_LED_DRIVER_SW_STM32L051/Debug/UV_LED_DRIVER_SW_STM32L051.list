
UV_LED_DRIVER_SW_STM32L051.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e80  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800521c  0800521c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800521c  0800521c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800521c  0800521c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800521c  0800521c  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005220  08005220  00015220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000078  0800529c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  0800529c  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118e6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029c6  00000000  00000000  00031986  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da8  00000000  00000000  00034350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  000350f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010c38  00000000  00000000  00035d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc61  00000000  00000000  00046970  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00057aef  00000000  00000000  000545d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac0c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c8  00000000  00000000  000ac13c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004f28 	.word	0x08004f28

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08004f28 	.word	0x08004f28

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <EM_getSystemState>:
 *	@retval UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
										UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef 	EM_getSystemState()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	return eTheSystemState;
 8000224:	4b02      	ldr	r3, [pc, #8]	; (8000230 <EM_getSystemState+0x10>)
 8000226:	781b      	ldrb	r3, [r3, #0]
}
 8000228:	0018      	movs	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	20000094 	.word	0x20000094

08000234 <EM_ProcessEvent>:
											UVBOX_evLidClosed,
 *	@retval None
 *
 */
void EM_ProcessEvent(UVBOX_SystemEventsTypedef newEvent)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	701a      	strb	r2, [r3, #0]
	switch(eTheSystemState)
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <EM_ProcessEvent+0x58>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d002      	beq.n	800024e <EM_ProcessEvent+0x1a>
 8000248:	2b01      	cmp	r3, #1
 800024a:	d00d      	beq.n	8000268 <EM_ProcessEvent+0x34>
					break;
			}

			break;
	}
}
 800024c:	e019      	b.n	8000282 <EM_ProcessEvent+0x4e>
			switch(newEvent)
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b01      	cmp	r3, #1
 8000254:	d000      	beq.n	8000258 <EM_ProcessEvent+0x24>
					break;
 8000256:	e006      	b.n	8000266 <EM_ProcessEvent+0x32>
					eTheSystemState = LM_EnableUVMode();
 8000258:	f000 f81a 	bl	8000290 <LM_EnableUVMode>
 800025c:	0003      	movs	r3, r0
 800025e:	001a      	movs	r2, r3
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <EM_ProcessEvent+0x58>)
 8000262:	701a      	strb	r2, [r3, #0]
					break;
 8000264:	46c0      	nop			; (mov r8, r8)
			break;
 8000266:	e00c      	b.n	8000282 <EM_ProcessEvent+0x4e>
			switch(newEvent)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d000      	beq.n	8000272 <EM_ProcessEvent+0x3e>
					break;
 8000270:	e006      	b.n	8000280 <EM_ProcessEvent+0x4c>
					eTheSystemState = LM_DisableUVMode();
 8000272:	f000 f831 	bl	80002d8 <LM_DisableUVMode>
 8000276:	0003      	movs	r3, r0
 8000278:	001a      	movs	r2, r3
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <EM_ProcessEvent+0x58>)
 800027c:	701a      	strb	r2, [r3, #0]
					break;
 800027e:	46c0      	nop			; (mov r8, r8)
			break;
 8000280:	46c0      	nop			; (mov r8, r8)
}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	46bd      	mov	sp, r7
 8000286:	b002      	add	sp, #8
 8000288:	bd80      	pop	{r7, pc}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	20000094 	.word	0x20000094

08000290 <LM_EnableUVMode>:
 *	@retval 	UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
											UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef LM_EnableUVMode()
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	LM_SetStatusLed(UVBOX_StatusLedGreen);
 8000294:	2000      	movs	r0, #0
 8000296:	f000 f957 	bl	8000548 <LM_SetStatusLed>

	UV_PWM_TIMER.Instance->CCR1 = MAX_UVLED_PWM_PERIOD;
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <LM_EnableUVMode+0x40>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	22a0      	movs	r2, #160	; 0xa0
 80002a0:	635a      	str	r2, [r3, #52]	; 0x34
	UV_PWM_TIMER.Instance->CCR2 = MAX_UVLED_PWM_PERIOD;
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <LM_EnableUVMode+0x40>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	22a0      	movs	r2, #160	; 0xa0
 80002a8:	639a      	str	r2, [r3, #56]	; 0x38
	UV_PWM_TIMER.Instance->CCR3 = MAX_UVLED_PWM_PERIOD;
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <LM_EnableUVMode+0x40>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	22a0      	movs	r2, #160	; 0xa0
 80002b0:	63da      	str	r2, [r3, #60]	; 0x3c
	UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
 80002b2:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <LM_EnableUVMode+0x40>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	22a0      	movs	r2, #160	; 0xa0
 80002b8:	641a      	str	r2, [r3, #64]	; 0x40
	LED_PWM_TIMER.Instance->CCR1 = 0;
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <LM_EnableUVMode+0x44>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2200      	movs	r2, #0
 80002c0:	635a      	str	r2, [r3, #52]	; 0x34


	TM_StartTimer();
 80002c2:	f000 f9d5 	bl	8000670 <TM_StartTimer>

	return UVBOX_LidClosed;
 80002c6:	2301      	movs	r3, #1
}
 80002c8:	0018      	movs	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	200001cc 	.word	0x200001cc
 80002d4:	2000024c 	.word	0x2000024c

080002d8 <LM_DisableUVMode>:
 *	@retval 	UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
											UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef LM_DisableUVMode()
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	LM_SetStatusLed(UVBOX_StatusLedRed);
 80002dc:	2001      	movs	r0, #1
 80002de:	f000 f933 	bl	8000548 <LM_SetStatusLed>

	UV_PWM_TIMER.Instance->CCR1 = 0;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <LM_DisableUVMode+0x44>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2200      	movs	r2, #0
 80002e8:	635a      	str	r2, [r3, #52]	; 0x34
	UV_PWM_TIMER.Instance->CCR2 = 0;
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <LM_DisableUVMode+0x44>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2200      	movs	r2, #0
 80002f0:	639a      	str	r2, [r3, #56]	; 0x38
	UV_PWM_TIMER.Instance->CCR3 = 0;
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <LM_DisableUVMode+0x44>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2200      	movs	r2, #0
 80002f8:	63da      	str	r2, [r3, #60]	; 0x3c
	UV_PWM_TIMER.Instance->CCR4 = 0;
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <LM_DisableUVMode+0x44>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2200      	movs	r2, #0
 8000300:	641a      	str	r2, [r3, #64]	; 0x40
	LED_PWM_TIMER.Instance->CCR1 = MAX_LED_PWM_PERIOD;
 8000302:	4b07      	ldr	r3, [pc, #28]	; (8000320 <LM_DisableUVMode+0x48>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2278      	movs	r2, #120	; 0x78
 8000308:	635a      	str	r2, [r3, #52]	; 0x34

	TM_StopTimer();
 800030a:	f000 f9c7 	bl	800069c <TM_StopTimer>
	TM_ResetTimer();
 800030e:	f000 f951 	bl	80005b4 <TM_ResetTimer>

	return UVBOX_LidOpen;
 8000312:	2300      	movs	r3, #0
}
 8000314:	0018      	movs	r0, r3
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	200001cc 	.word	0x200001cc
 8000320:	2000024c 	.word	0x2000024c

08000324 <_UpdateUvPwm>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void _UpdateUvPwm(UVBOX_EncoderDirTypeDef new_encoder_dir)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	0002      	movs	r2, r0
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	701a      	strb	r2, [r3, #0]
  	// encoder direction has changed from increasing to decreasing
	if( (RE_getPrevEncoderDir()) && (!new_encoder_dir) )
 8000330:	f000 f926 	bl	8000580 <RE_getPrevEncoderDir>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d04e      	beq.n	80003d6 <_UpdateUvPwm+0xb2>
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d14a      	bne.n	80003d6 <_UpdateUvPwm+0xb2>
	{
		UV_PWM_TIMER.Instance->CCR1 -= ENCODER_STEP;
 8000340:	4b50      	ldr	r3, [pc, #320]	; (8000484 <_UpdateUvPwm+0x160>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000346:	4b4f      	ldr	r3, [pc, #316]	; (8000484 <_UpdateUvPwm+0x160>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3a01      	subs	r2, #1
 800034c:	635a      	str	r2, [r3, #52]	; 0x34
		UV_PWM_TIMER.Instance->CCR2 -= ENCODER_STEP;
 800034e:	4b4d      	ldr	r3, [pc, #308]	; (8000484 <_UpdateUvPwm+0x160>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000354:	4b4b      	ldr	r3, [pc, #300]	; (8000484 <_UpdateUvPwm+0x160>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	3a01      	subs	r2, #1
 800035a:	639a      	str	r2, [r3, #56]	; 0x38
		UV_PWM_TIMER.Instance->CCR3 -= ENCODER_STEP;
 800035c:	4b49      	ldr	r3, [pc, #292]	; (8000484 <_UpdateUvPwm+0x160>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000362:	4b48      	ldr	r3, [pc, #288]	; (8000484 <_UpdateUvPwm+0x160>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	3a01      	subs	r2, #1
 8000368:	63da      	str	r2, [r3, #60]	; 0x3c
		UV_PWM_TIMER.Instance->CCR4 -= ENCODER_STEP;
 800036a:	4b46      	ldr	r3, [pc, #280]	; (8000484 <_UpdateUvPwm+0x160>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000370:	4b44      	ldr	r3, [pc, #272]	; (8000484 <_UpdateUvPwm+0x160>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	3a01      	subs	r2, #1
 8000376:	641a      	str	r2, [r3, #64]	; 0x40

		// clamp lower range integer overflow to
		// MAX_UVLED_PWM_PERIOD+1
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD+1) ||
 8000378:	4b42      	ldr	r3, [pc, #264]	; (8000484 <_UpdateUvPwm+0x160>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800037e:	2ba1      	cmp	r3, #161	; 0xa1
 8000380:	d80e      	bhi.n	80003a0 <_UpdateUvPwm+0x7c>
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD+1)	||
 8000382:	4b40      	ldr	r3, [pc, #256]	; (8000484 <_UpdateUvPwm+0x160>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD+1) ||
 8000388:	2ba1      	cmp	r3, #161	; 0xa1
 800038a:	d809      	bhi.n	80003a0 <_UpdateUvPwm+0x7c>
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD+1) ||
 800038c:	4b3d      	ldr	r3, [pc, #244]	; (8000484 <_UpdateUvPwm+0x160>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD+1)	||
 8000392:	2ba1      	cmp	r3, #161	; 0xa1
 8000394:	d804      	bhi.n	80003a0 <_UpdateUvPwm+0x7c>
			(UV_PWM_TIMER.Instance->CCR4 > MAX_UVLED_PWM_PERIOD+1)
 8000396:	4b3b      	ldr	r3, [pc, #236]	; (8000484 <_UpdateUvPwm+0x160>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD+1) ||
 800039c:	2ba1      	cmp	r3, #161	; 0xa1
 800039e:	d90f      	bls.n	80003c0 <_UpdateUvPwm+0x9c>
			)
		{
			UV_PWM_TIMER.Instance->CCR1 = 0;
 80003a0:	4b38      	ldr	r3, [pc, #224]	; (8000484 <_UpdateUvPwm+0x160>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2200      	movs	r2, #0
 80003a6:	635a      	str	r2, [r3, #52]	; 0x34
			UV_PWM_TIMER.Instance->CCR2 = 0;
 80003a8:	4b36      	ldr	r3, [pc, #216]	; (8000484 <_UpdateUvPwm+0x160>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2200      	movs	r2, #0
 80003ae:	639a      	str	r2, [r3, #56]	; 0x38
			UV_PWM_TIMER.Instance->CCR3 = 0;
 80003b0:	4b34      	ldr	r3, [pc, #208]	; (8000484 <_UpdateUvPwm+0x160>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2200      	movs	r2, #0
 80003b6:	63da      	str	r2, [r3, #60]	; 0x3c
			UV_PWM_TIMER.Instance->CCR4 = 0;
 80003b8:	4b32      	ldr	r3, [pc, #200]	; (8000484 <_UpdateUvPwm+0x160>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2200      	movs	r2, #0
 80003be:	641a      	str	r2, [r3, #64]	; 0x40
		}

		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
 80003c0:	4b31      	ldr	r3, [pc, #196]	; (8000488 <_UpdateUvPwm+0x164>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	2210      	movs	r2, #16
 80003ca:	4013      	ands	r3, r2
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f8e0 	bl	8000594 <RE_setPrevEncoderDir>
			UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
		}

		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
	}
}
 80003d4:	e051      	b.n	800047a <_UpdateUvPwm+0x156>
	else if( (!RE_getPrevEncoderDir()) && (new_encoder_dir) )
 80003d6:	f000 f8d3 	bl	8000580 <RE_getPrevEncoderDir>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d14d      	bne.n	800047a <_UpdateUvPwm+0x156>
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d049      	beq.n	800047a <_UpdateUvPwm+0x156>
		UV_PWM_TIMER.Instance->CCR1 += ENCODER_STEP;
 80003e6:	4b27      	ldr	r3, [pc, #156]	; (8000484 <_UpdateUvPwm+0x160>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003ec:	4b25      	ldr	r3, [pc, #148]	; (8000484 <_UpdateUvPwm+0x160>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3201      	adds	r2, #1
 80003f2:	635a      	str	r2, [r3, #52]	; 0x34
		UV_PWM_TIMER.Instance->CCR2 += ENCODER_STEP;
 80003f4:	4b23      	ldr	r3, [pc, #140]	; (8000484 <_UpdateUvPwm+0x160>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80003fa:	4b22      	ldr	r3, [pc, #136]	; (8000484 <_UpdateUvPwm+0x160>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	3201      	adds	r2, #1
 8000400:	639a      	str	r2, [r3, #56]	; 0x38
		UV_PWM_TIMER.Instance->CCR3 += ENCODER_STEP;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <_UpdateUvPwm+0x160>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <_UpdateUvPwm+0x160>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3201      	adds	r2, #1
 800040e:	63da      	str	r2, [r3, #60]	; 0x3c
		UV_PWM_TIMER.Instance->CCR4 += ENCODER_STEP;
 8000410:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <_UpdateUvPwm+0x160>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000416:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <_UpdateUvPwm+0x160>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	3201      	adds	r2, #1
 800041c:	641a      	str	r2, [r3, #64]	; 0x40
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD) ||
 800041e:	4b19      	ldr	r3, [pc, #100]	; (8000484 <_UpdateUvPwm+0x160>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000424:	2ba0      	cmp	r3, #160	; 0xa0
 8000426:	d80e      	bhi.n	8000446 <_UpdateUvPwm+0x122>
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD)	||
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <_UpdateUvPwm+0x160>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD) ||
 800042e:	2ba0      	cmp	r3, #160	; 0xa0
 8000430:	d809      	bhi.n	8000446 <_UpdateUvPwm+0x122>
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD) ||
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <_UpdateUvPwm+0x160>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD)	||
 8000438:	2ba0      	cmp	r3, #160	; 0xa0
 800043a:	d804      	bhi.n	8000446 <_UpdateUvPwm+0x122>
			(UV_PWM_TIMER.Instance->CCR4 > MAX_UVLED_PWM_PERIOD)
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <_UpdateUvPwm+0x160>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD) ||
 8000442:	2ba0      	cmp	r3, #160	; 0xa0
 8000444:	d90f      	bls.n	8000466 <_UpdateUvPwm+0x142>
			UV_PWM_TIMER.Instance->CCR1 = MAX_UVLED_PWM_PERIOD;
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <_UpdateUvPwm+0x160>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	22a0      	movs	r2, #160	; 0xa0
 800044c:	635a      	str	r2, [r3, #52]	; 0x34
			UV_PWM_TIMER.Instance->CCR2 = MAX_UVLED_PWM_PERIOD;
 800044e:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <_UpdateUvPwm+0x160>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	22a0      	movs	r2, #160	; 0xa0
 8000454:	639a      	str	r2, [r3, #56]	; 0x38
			UV_PWM_TIMER.Instance->CCR3 = MAX_UVLED_PWM_PERIOD;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <_UpdateUvPwm+0x160>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	22a0      	movs	r2, #160	; 0xa0
 800045c:	63da      	str	r2, [r3, #60]	; 0x3c
			UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <_UpdateUvPwm+0x160>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	22a0      	movs	r2, #160	; 0xa0
 8000464:	641a      	str	r2, [r3, #64]	; 0x40
		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <_UpdateUvPwm+0x164>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2210      	movs	r2, #16
 8000470:	4013      	ands	r3, r2
 8000472:	b2db      	uxtb	r3, r3
 8000474:	0018      	movs	r0, r3
 8000476:	f000 f88d 	bl	8000594 <RE_setPrevEncoderDir>
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	200001cc 	.word	0x200001cc
 8000488:	2000020c 	.word	0x2000020c

0800048c <_UpdateLedPwm>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void _UpdateLedPwm(UVBOX_EncoderDirTypeDef new_encoder_dir)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	0002      	movs	r2, r0
 8000494:	1dfb      	adds	r3, r7, #7
 8000496:	701a      	strb	r2, [r3, #0]
	uint16_t top_encoder_limit = 127;
 8000498:	230e      	movs	r3, #14
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	227f      	movs	r2, #127	; 0x7f
 800049e:	801a      	strh	r2, [r3, #0]
	uint8_t encoder_dir = ((ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR);
 80004a0:	4b17      	ldr	r3, [pc, #92]	; (8000500 <_UpdateLedPwm+0x74>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2210      	movs	r2, #16
 80004a8:	4013      	ands	r3, r2
 80004aa:	3b10      	subs	r3, #16
 80004ac:	425a      	negs	r2, r3
 80004ae:	4153      	adcs	r3, r2
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	210d      	movs	r1, #13
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	701a      	strb	r2, [r3, #0]
	if(encoder_dir)
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d00c      	beq.n	80004da <_UpdateLedPwm+0x4e>
	{
		if(LED_PWM_TIMER.Instance->CCR1 > 0)
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <_UpdateLedPwm+0x78>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d016      	beq.n	80004f8 <_UpdateLedPwm+0x6c>
			LED_PWM_TIMER.Instance->CCR1 -= ENCODER_STEP;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <_UpdateLedPwm+0x78>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <_UpdateLedPwm+0x78>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3a01      	subs	r2, #1
 80004d6:	635a      	str	r2, [r3, #52]	; 0x34

		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
	}

	*/
}
 80004d8:	e00e      	b.n	80004f8 <_UpdateLedPwm+0x6c>
		if(LED_PWM_TIMER.Instance->CCR1 < top_encoder_limit)
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <_UpdateLedPwm+0x78>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004e0:	230e      	movs	r3, #14
 80004e2:	18fb      	adds	r3, r7, r3
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d206      	bcs.n	80004f8 <_UpdateLedPwm+0x6c>
			LED_PWM_TIMER.Instance->CCR1 += ENCODER_STEP;
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <_UpdateLedPwm+0x78>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <_UpdateLedPwm+0x78>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	3201      	adds	r2, #1
 80004f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	2000020c 	.word	0x2000020c
 8000504:	2000024c 	.word	0x2000024c

08000508 <LM_UpdatePwm>:
 *	@param 		None
 *	@retval 	None
 *
 */
void LM_UpdatePwm()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	if(EM_getSystemState())
 800050c:	f7ff fe88 	bl	8000220 <EM_getSystemState>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d00a      	beq.n	800052a <LM_UpdatePwm+0x22>
	{
	  	_UpdateUvPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <LM_UpdatePwm+0x3c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	b2db      	uxtb	r3, r3
 800051c:	2210      	movs	r2, #16
 800051e:	4013      	ands	r3, r2
 8000520:	b2db      	uxtb	r3, r3
 8000522:	0018      	movs	r0, r3
 8000524:	f7ff fefe 	bl	8000324 <_UpdateUvPwm>
	}
	else
	{
		_UpdateLedPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
	}
}
 8000528:	e009      	b.n	800053e <LM_UpdatePwm+0x36>
		_UpdateLedPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <LM_UpdatePwm+0x3c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2210      	movs	r2, #16
 8000534:	4013      	ands	r3, r2
 8000536:	b2db      	uxtb	r3, r3
 8000538:	0018      	movs	r0, r3
 800053a:	f7ff ffa7 	bl	800048c <_UpdateLedPwm>
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	2000020c 	.word	0x2000020c

08000548 <LM_SetStatusLed>:
											UVBOX_StatusLedBlue
 *	@retval 	None
 *
 */
void LM_SetStatusLed(UVBOX_StatusLedTypeDef new_status)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	0002      	movs	r2, r0
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, STATUS_RED_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, STATUS_BLUE_Pin, GPIO_PIN_RESET);
		break;
	}
*/
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b002      	add	sp, #8
 800055a:	bd80      	pop	{r7, pc}

0800055c <RE_Setup>:
 *	@param 	None
 *	@retval None
 *
 */
void RE_Setup()
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&ROTARY_ENCODER, TIM_CHANNEL_ALL);
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <RE_Setup+0x1c>)
 8000562:	213c      	movs	r1, #60	; 0x3c
 8000564:	0018      	movs	r0, r3
 8000566:	f002 fa53 	bl	8002a10 <HAL_TIM_Encoder_Start_IT>
	ROTARY_ENCODER.Instance->CNT = 32767;
 800056a:	4b03      	ldr	r3, [pc, #12]	; (8000578 <RE_Setup+0x1c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a03      	ldr	r2, [pc, #12]	; (800057c <RE_Setup+0x20>)
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000020c 	.word	0x2000020c
 800057c:	00007fff 	.word	0x00007fff

08000580 <RE_getPrevEncoderDir>:
 *	@retval 	UVBOX_EncoderDirTypeDef - 	UVBOX_ENCODER_DOWN = 0x0,
											UVBOX_ENCODER_UP
 *
 */
UVBOX_EncoderDirTypeDef RE_getPrevEncoderDir()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	return previous_encoder_dir;
 8000584:	4b02      	ldr	r3, [pc, #8]	; (8000590 <RE_getPrevEncoderDir+0x10>)
 8000586:	781b      	ldrb	r3, [r3, #0]
}
 8000588:	0018      	movs	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	200000a4 	.word	0x200000a4

08000594 <RE_setPrevEncoderDir>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void RE_setPrevEncoderDir(UVBOX_EncoderDirTypeDef direction)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	0002      	movs	r2, r0
 800059c:	1dfb      	adds	r3, r7, #7
 800059e:	701a      	strb	r2, [r3, #0]
	previous_encoder_dir = direction;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <RE_setPrevEncoderDir+0x1c>)
 80005a2:	1dfa      	adds	r2, r7, #7
 80005a4:	7812      	ldrb	r2, [r2, #0]
 80005a6:	701a      	strb	r2, [r3, #0]
}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b002      	add	sp, #8
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000a4 	.word	0x200000a4

080005b4 <TM_ResetTimer>:
#define DEFAULT_TIMEOUT 60
uint16_t user_defined_timeout = DEFAULT_TIMEOUT;		// seconds
uint16_t timer_count = DEFAULT_TIMEOUT;

void TM_ResetTimer()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	timer_count = DEFAULT_TIMEOUT;
 80005b8:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <TM_ResetTimer+0x10>)
 80005ba:	223c      	movs	r2, #60	; 0x3c
 80005bc:	801a      	strh	r2, [r3, #0]
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000002 	.word	0x20000002

080005c8 <TM_UserIncrementTimer>:

void TM_UserIncrementTimer()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	user_defined_timeout += 10;
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <TM_UserIncrementTimer+0x24>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	330a      	adds	r3, #10
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <TM_UserIncrementTimer+0x24>)
 80005d6:	801a      	strh	r2, [r3, #0]
	timer_count += 10;
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <TM_UserIncrementTimer+0x28>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	330a      	adds	r3, #10
 80005de:	b29a      	uxth	r2, r3
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <TM_UserIncrementTimer+0x28>)
 80005e2:	801a      	strh	r2, [r3, #0]
}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000002 	.word	0x20000002

080005f4 <TM_UserDecrementTimer>:

void TM_UserDecrementTimer()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	user_defined_timeout -= 10;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <TM_UserDecrementTimer+0x24>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	3b0a      	subs	r3, #10
 80005fe:	b29a      	uxth	r2, r3
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <TM_UserDecrementTimer+0x24>)
 8000602:	801a      	strh	r2, [r3, #0]
	timer_count -= 10;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <TM_UserDecrementTimer+0x28>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	3b0a      	subs	r3, #10
 800060a:	b29a      	uxth	r2, r3
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <TM_UserDecrementTimer+0x28>)
 800060e:	801a      	strh	r2, [r3, #0]
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	20000000 	.word	0x20000000
 800061c:	20000002 	.word	0x20000002

08000620 <TM_DecrementTimer>:


void TM_DecrementTimer()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	timer_count--;
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <TM_DecrementTimer+0x1c>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	3b01      	subs	r3, #1
 800062a:	b29a      	uxth	r2, r3
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <TM_DecrementTimer+0x1c>)
 800062e:	801a      	strh	r2, [r3, #0]

	TM_CheckTimer();
 8000630:	f000 f810 	bl	8000654 <TM_CheckTimer>
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	20000002 	.word	0x20000002

08000640 <TM_GetTimerCount>:

uint16_t TM_GetTimerCount()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	return timer_count;
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <TM_GetTimerCount+0x10>)
 8000646:	881b      	ldrh	r3, [r3, #0]
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	20000002 	.word	0x20000002

08000654 <TM_CheckTimer>:

void TM_CheckTimer()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	if(timer_count == 0)
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <TM_CheckTimer+0x18>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d102      	bne.n	8000666 <TM_CheckTimer+0x12>
	{
		EM_ProcessEvent(UVBOX_evLidOpened);
 8000660:	2000      	movs	r0, #0
 8000662:	f7ff fde7 	bl	8000234 <EM_ProcessEvent>
	}
}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000002 	.word	0x20000002

08000670 <TM_StartTimer>:

void TM_StartTimer()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	EXPOSE_TIMER.Instance->SR &= ~(TIM_SR_UIF);	// reset
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <TM_StartTimer+0x28>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	691a      	ldr	r2, [r3, #16]
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <TM_StartTimer+0x28>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2101      	movs	r1, #1
 8000680:	438a      	bics	r2, r1
 8000682:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&EXPOSE_TIMER);
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <TM_StartTimer+0x28>)
 8000686:	0018      	movs	r0, r3
 8000688:	f002 f86a 	bl	8002760 <HAL_TIM_Base_Start_IT>
	UM_DisplayRunningMsg();
 800068c:	f000 f814 	bl	80006b8 <UM_DisplayRunningMsg>
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	2000018c 	.word	0x2000018c

0800069c <TM_StopTimer>:

void TM_StopTimer()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&EXPOSE_TIMER);
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <TM_StopTimer+0x18>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f002 f87e 	bl	80027a4 <HAL_TIM_Base_Stop_IT>
	UM_DisplayExpiredMsg();
 80006a8:	f000 f81e 	bl	80006e8 <UM_DisplayExpiredMsg>
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	2000018c 	.word	0x2000018c

080006b8 <UM_DisplayRunningMsg>:
//UVBOX_LidStatusTypedef eLidStatus = UVBOX_LIDOPEN;
uint16_t debounce_last_interrupt_time = 0;


void UM_DisplayRunningMsg()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 80006be:	2000      	movs	r0, #0
 80006c0:	f003 fae2 	bl	8003c88 <ILI9341_Fill_Screen>
	ILI9341_Draw_Text("RUNNING", 10, 120, RUNTEXT, 7, BGCOLOUR);
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <UM_DisplayRunningMsg+0x28>)
 80006c6:	4807      	ldr	r0, [pc, #28]	; (80006e4 <UM_DisplayRunningMsg+0x2c>)
 80006c8:	2300      	movs	r3, #0
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	2307      	movs	r3, #7
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	0013      	movs	r3, r2
 80006d2:	2278      	movs	r2, #120	; 0x78
 80006d4:	210a      	movs	r1, #10
 80006d6:	f003 f85d 	bl	8003794 <ILI9341_Draw_Text>
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	000014a2 	.word	0x000014a2
 80006e4:	08004f40 	.word	0x08004f40

080006e8 <UM_DisplayExpiredMsg>:

void UM_DisplayExpiredMsg()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f003 faca 	bl	8003c88 <ILI9341_Fill_Screen>
	ILI9341_Draw_Text("STOPPED", 10, 120, STOPTEXT, 7, BGCOLOUR);
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <UM_DisplayExpiredMsg+0x44>)
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <UM_DisplayExpiredMsg+0x48>)
 80006f8:	2300      	movs	r3, #0
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	2307      	movs	r3, #7
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	0013      	movs	r3, r2
 8000702:	2278      	movs	r2, #120	; 0x78
 8000704:	210a      	movs	r1, #10
 8000706:	f003 f845 	bl	8003794 <ILI9341_Draw_Text>
	BUZZER_PWM.Instance->PSC = 256;
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <UM_DisplayExpiredMsg+0x4c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2280      	movs	r2, #128	; 0x80
 8000710:	0052      	lsls	r2, r2, #1
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(1000);
 8000714:	23fa      	movs	r3, #250	; 0xfa
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	0018      	movs	r0, r3
 800071a:	f001 f837 	bl	800178c <HAL_Delay>
	BUZZER_PWM.Instance->PSC = 0;
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <UM_DisplayExpiredMsg+0x4c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	0000d8c3 	.word	0x0000d8c3
 8000730:	08004f48 	.word	0x08004f48
 8000734:	2000014c 	.word	0x2000014c

08000738 <UM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void UM_UpdateDisplay()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af02      	add	r7, sp, #8
	UM_DisplayAsMinutesAndSeconds(TM_GetTimerCount());
 800073e:	f7ff ff7f 	bl	8000640 <TM_GetTimerCount>
 8000742:	0003      	movs	r3, r0
 8000744:	0018      	movs	r0, r3
 8000746:	f000 f81d 	bl	8000784 <UM_DisplayAsMinutesAndSeconds>

	char enc_cnt[20];
	snprintf(enc_cnt, sizeof(enc_cnt), "%lu", LED_PWM_TIMER.Instance->CCR1);
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <UM_UpdateDisplay+0x40>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000750:	4a0a      	ldr	r2, [pc, #40]	; (800077c <UM_UpdateDisplay+0x44>)
 8000752:	1d38      	adds	r0, r7, #4
 8000754:	2114      	movs	r1, #20
 8000756:	f003 ffcd 	bl	80046f4 <sniprintf>
	ILI9341_Draw_Text(enc_cnt, 10, 200, WHITE, 2, BLACK);
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <UM_UpdateDisplay+0x48>)
 800075c:	1d38      	adds	r0, r7, #4
 800075e:	2300      	movs	r3, #0
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	2302      	movs	r3, #2
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	0013      	movs	r3, r2
 8000768:	22c8      	movs	r2, #200	; 0xc8
 800076a:	210a      	movs	r1, #10
 800076c:	f003 f812 	bl	8003794 <ILI9341_Draw_Text>
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b006      	add	sp, #24
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000024c 	.word	0x2000024c
 800077c:	08004f50 	.word	0x08004f50
 8000780:	0000ffff 	.word	0x0000ffff

08000784 <UM_DisplayAsMinutesAndSeconds>:
 *	@param pSeconds
 *	@retval None
 *
 */
void UM_DisplayAsMinutesAndSeconds(uint16_t pSeconds)
{
 8000784:	b5b0      	push	{r4, r5, r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af02      	add	r7, sp, #8
 800078a:	0002      	movs	r2, r0
 800078c:	1dbb      	adds	r3, r7, #6
 800078e:	801a      	strh	r2, [r3, #0]
	uint8_t minutes = 0;
 8000790:	2427      	movs	r4, #39	; 0x27
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
	uint8_t seconds = 0;
 8000798:	2526      	movs	r5, #38	; 0x26
 800079a:	197b      	adds	r3, r7, r5
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]

	minutes = pSeconds / 60;
 80007a0:	1dbb      	adds	r3, r7, #6
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	213c      	movs	r1, #60	; 0x3c
 80007a6:	0018      	movs	r0, r3
 80007a8:	f7ff fcae 	bl	8000108 <__udivsi3>
 80007ac:	0003      	movs	r3, r0
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	701a      	strb	r2, [r3, #0]
	seconds = pSeconds % 60;
 80007b4:	1dbb      	adds	r3, r7, #6
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	213c      	movs	r1, #60	; 0x3c
 80007ba:	0018      	movs	r0, r3
 80007bc:	f7ff fd2a 	bl	8000214 <__aeabi_uidivmod>
 80007c0:	000b      	movs	r3, r1
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	197b      	adds	r3, r7, r5
 80007c6:	701a      	strb	r2, [r3, #0]

	char timer_count[30];
	snprintf(timer_count, sizeof(timer_count), "%02d:%02d", minutes, seconds);
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	7819      	ldrb	r1, [r3, #0]
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <UM_DisplayAsMinutesAndSeconds+0x7c>)
 80007d2:	2408      	movs	r4, #8
 80007d4:	1938      	adds	r0, r7, r4
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	000b      	movs	r3, r1
 80007da:	211e      	movs	r1, #30
 80007dc:	f003 ff8a 	bl	80046f4 <sniprintf>
	ILI9341_Draw_Text(timer_count, 30, 50, TIMETEXT, 9, BGCOLOUR);
 80007e0:	4a08      	ldr	r2, [pc, #32]	; (8000804 <UM_DisplayAsMinutesAndSeconds+0x80>)
 80007e2:	1938      	adds	r0, r7, r4
 80007e4:	2300      	movs	r3, #0
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	2309      	movs	r3, #9
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	0013      	movs	r3, r2
 80007ee:	2232      	movs	r2, #50	; 0x32
 80007f0:	211e      	movs	r1, #30
 80007f2:	f002 ffcf 	bl	8003794 <ILI9341_Draw_Text>
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b00a      	add	sp, #40	; 0x28
 80007fc:	bdb0      	pop	{r4, r5, r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	08004f54 	.word	0x08004f54
 8000804:	000002fd 	.word	0x000002fd

08000808 <UM_Setup>:
 *	@param None
 *	@retval None
 *
 */
void UM_Setup()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af02      	add	r7, sp, #8
	  // enable TFT ILI9341 driver
	  ILI9341_Init();
 800080e:	f003 f832 	bl	8003876 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000812:	2003      	movs	r0, #3
 8000814:	f003 fcd4 	bl	80041c0 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(BLACK);
 8000818:	2000      	movs	r0, #0
 800081a:	f003 fa35 	bl	8003c88 <ILI9341_Fill_Screen>
	  ILI9341_Draw_Text("INITIALISING...", 10, 10, SYSTEXT, 1, BGCOLOUR);
 800081e:	4a35      	ldr	r2, [pc, #212]	; (80008f4 <UM_Setup+0xec>)
 8000820:	4835      	ldr	r0, [pc, #212]	; (80008f8 <UM_Setup+0xf0>)
 8000822:	2300      	movs	r3, #0
 8000824:	9301      	str	r3, [sp, #4]
 8000826:	2301      	movs	r3, #1
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	0013      	movs	r3, r2
 800082c:	220a      	movs	r2, #10
 800082e:	210a      	movs	r1, #10
 8000830:	f002 ffb0 	bl	8003794 <ILI9341_Draw_Text>

	  // PWM OUTPUTS

	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_1 );
 8000834:	4b31      	ldr	r3, [pc, #196]	; (80008fc <UM_Setup+0xf4>)
 8000836:	2100      	movs	r1, #0
 8000838:	0018      	movs	r0, r3
 800083a:	f002 f809 	bl	8002850 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_2 );
 800083e:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <UM_Setup+0xf4>)
 8000840:	2104      	movs	r1, #4
 8000842:	0018      	movs	r0, r3
 8000844:	f002 f804 	bl	8002850 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_3 );
 8000848:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <UM_Setup+0xf4>)
 800084a:	2108      	movs	r1, #8
 800084c:	0018      	movs	r0, r3
 800084e:	f001 ffff 	bl	8002850 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_4 );
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <UM_Setup+0xf4>)
 8000854:	210c      	movs	r1, #12
 8000856:	0018      	movs	r0, r3
 8000858:	f001 fffa 	bl	8002850 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &LED_PWM_TIMER, TIM_CHANNEL_1 );
 800085c:	4b28      	ldr	r3, [pc, #160]	; (8000900 <UM_Setup+0xf8>)
 800085e:	2100      	movs	r1, #0
 8000860:	0018      	movs	r0, r3
 8000862:	f001 fff5 	bl	8002850 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &BUZZER_PWM, TIM_CHANNEL_1);
 8000866:	4b27      	ldr	r3, [pc, #156]	; (8000904 <UM_Setup+0xfc>)
 8000868:	2100      	movs	r1, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f001 fff0 	bl	8002850 <HAL_TIM_PWM_Start>

	  UV_PWM_TIMER.Instance->ARR	= 0xFF;		// 	255
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <UM_Setup+0xf4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	22ff      	movs	r2, #255	; 0xff
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
	  UV_PWM_TIMER.Instance->CCR1 	= 0x00;
 8000878:	4b20      	ldr	r3, [pc, #128]	; (80008fc <UM_Setup+0xf4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
	  UV_PWM_TIMER.Instance->CCR2 	= 0x00;
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <UM_Setup+0xf4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38
	  UV_PWM_TIMER.Instance->CCR3 	= 0x00;
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <UM_Setup+0xf4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
	  UV_PWM_TIMER.Instance->CCR4 	= 0x00;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <UM_Setup+0xf4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2200      	movs	r2, #0
 8000896:	641a      	str	r2, [r3, #64]	; 0x40

	  LED_PWM_TIMER.Instance->ARR  	= 0xFF;		// 	255
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <UM_Setup+0xf8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	22ff      	movs	r2, #255	; 0xff
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
	  LED_PWM_TIMER.Instance->CCR1 	= MAX_LED_PWM_PERIOD;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <UM_Setup+0xf8>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2278      	movs	r2, #120	; 0x78
 80008a6:	635a      	str	r2, [r3, #52]	; 0x34

	  BUZZER_PWM.Instance->ARR = 0xFF;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <UM_Setup+0xfc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	22ff      	movs	r2, #255	; 0xff
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
	  BUZZER_PWM.Instance->CCR1 = 127;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <UM_Setup+0xfc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	227f      	movs	r2, #127	; 0x7f
 80008b6:	635a      	str	r2, [r3, #52]	; 0x34
	  BUZZER_PWM.Instance->PSC = 0;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <UM_Setup+0xfc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2200      	movs	r2, #0
 80008be:	629a      	str	r2, [r3, #40]	; 0x28

	  // debounce timer
	  HAL_TIM_Base_Start( &DEBOUNCE_TIMER );
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <UM_Setup+0x100>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 ff2a 	bl	800271c <HAL_TIM_Base_Start>

	  // status output LED
	  LM_SetStatusLed(UVBOX_StatusLedBlue);
 80008c8:	2002      	movs	r0, #2
 80008ca:	f7ff fe3d 	bl	8000548 <LM_SetStatusLed>

	  // rotary encoder
	  RE_Setup();
 80008ce:	f7ff fe45 	bl	800055c <RE_Setup>


	  HAL_Delay(100);
 80008d2:	2064      	movs	r0, #100	; 0x64
 80008d4:	f000 ff5a 	bl	800178c <HAL_Delay>
	  ILI9341_Draw_Text("READY!", 100, 10, SYSTEXT, 1, BGCOLOUR);
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <UM_Setup+0xec>)
 80008da:	480c      	ldr	r0, [pc, #48]	; (800090c <UM_Setup+0x104>)
 80008dc:	2300      	movs	r3, #0
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	2301      	movs	r3, #1
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	0013      	movs	r3, r2
 80008e6:	220a      	movs	r2, #10
 80008e8:	2164      	movs	r1, #100	; 0x64
 80008ea:	f002 ff53 	bl	8003794 <ILI9341_Draw_Text>



}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	0000ffff 	.word	0x0000ffff
 80008f8:	08004f60 	.word	0x08004f60
 80008fc:	200001cc 	.word	0x200001cc
 8000900:	2000024c 	.word	0x2000024c
 8000904:	2000014c 	.word	0x2000014c
 8000908:	2000010c 	.word	0x2000010c
 800090c:	08004f70 	.word	0x08004f70

08000910 <UM_EXTI0_1_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void UM_EXTI0_1_IRQHandler()
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
	uint16_t debounce_interrupt_time = DEBOUNCE_TIMER.Instance->CNT;
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <UM_EXTI0_1_IRQHandler+0x5c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800091c:	1dbb      	adds	r3, r7, #6
 800091e:	801a      	strh	r2, [r3, #0]
	if ((debounce_interrupt_time - UM_getLastDebounceTime()) > MAX_DEBOUNCE_DELAY)
 8000920:	1dbb      	adds	r3, r7, #6
 8000922:	881c      	ldrh	r4, [r3, #0]
 8000924:	f000 f85c 	bl	80009e0 <UM_getLastDebounceTime>
 8000928:	0003      	movs	r3, r0
 800092a:	1ae3      	subs	r3, r4, r3
 800092c:	2baf      	cmp	r3, #175	; 0xaf
 800092e:	dd14      	ble.n	800095a <UM_EXTI0_1_IRQHandler+0x4a>
	{
		if(EM_getSystemState())	// LID CLOSED
 8000930:	f7ff fc76 	bl	8000220 <EM_getSystemState>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d110      	bne.n	800095a <UM_EXTI0_1_IRQHandler+0x4a>
			//EM_ProcessEvent(UVBOX_evLidOpened);
		}
		else
		{

			if( (EXTI->PR & EXTI_PR_PR0) == EXTI_PR_PR0)
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <UM_EXTI0_1_IRQHandler+0x60>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	2201      	movs	r2, #1
 800093e:	4013      	ands	r3, r2
 8000940:	2b01      	cmp	r3, #1
 8000942:	d102      	bne.n	800094a <UM_EXTI0_1_IRQHandler+0x3a>
			{
				TM_UserDecrementTimer();
 8000944:	f7ff fe56 	bl	80005f4 <TM_UserDecrementTimer>
 8000948:	e007      	b.n	800095a <UM_EXTI0_1_IRQHandler+0x4a>
			}
			else if( (EXTI->PR & EXTI_PR_PR1) == EXTI_PR_PR1)
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <UM_EXTI0_1_IRQHandler+0x60>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	2202      	movs	r2, #2
 8000950:	4013      	ands	r3, r2
 8000952:	2b02      	cmp	r3, #2
 8000954:	d101      	bne.n	800095a <UM_EXTI0_1_IRQHandler+0x4a>
			{
				TM_UserIncrementTimer();
 8000956:	f7ff fe37 	bl	80005c8 <TM_UserIncrementTimer>
			}

		}
	}
	UM_SetLastDebounceTime(debounce_interrupt_time);
 800095a:	1dbb      	adds	r3, r7, #6
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	0018      	movs	r0, r3
 8000960:	f000 f82e 	bl	80009c0 <UM_SetLastDebounceTime>


}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b003      	add	sp, #12
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	2000010c 	.word	0x2000010c
 8000970:	40010400 	.word	0x40010400

08000974 <UM_EXTI2_3_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void UM_EXTI2_3_IRQHandler()
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
	uint16_t debounce_interrupt_time = DEBOUNCE_TIMER.Instance->CNT;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <UM_EXTI2_3_IRQHandler+0x48>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000980:	1dbb      	adds	r3, r7, #6
 8000982:	801a      	strh	r2, [r3, #0]
	if ((debounce_interrupt_time - UM_getLastDebounceTime()) > MAX_DEBOUNCE_DELAY)
 8000984:	1dbb      	adds	r3, r7, #6
 8000986:	881c      	ldrh	r4, [r3, #0]
 8000988:	f000 f82a 	bl	80009e0 <UM_getLastDebounceTime>
 800098c:	0003      	movs	r3, r0
 800098e:	1ae3      	subs	r3, r4, r3
 8000990:	2baf      	cmp	r3, #175	; 0xaf
 8000992:	dd0a      	ble.n	80009aa <UM_EXTI2_3_IRQHandler+0x36>
	{
		if(EM_getSystemState())	// LID CLOSED
 8000994:	f7ff fc44 	bl	8000220 <EM_getSystemState>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d003      	beq.n	80009a4 <UM_EXTI2_3_IRQHandler+0x30>
		{
			EM_ProcessEvent(UVBOX_evLidOpened);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff fc49 	bl	8000234 <EM_ProcessEvent>
 80009a2:	e002      	b.n	80009aa <UM_EXTI2_3_IRQHandler+0x36>
		}
		else
		{
			EM_ProcessEvent(UVBOX_evLidClosed);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff fc45 	bl	8000234 <EM_ProcessEvent>
		}
	}
	UM_SetLastDebounceTime(debounce_interrupt_time);
 80009aa:	1dbb      	adds	r3, r7, #6
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 f806 	bl	80009c0 <UM_SetLastDebounceTime>
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b003      	add	sp, #12
 80009ba:	bd90      	pop	{r4, r7, pc}
 80009bc:	2000010c 	.word	0x2000010c

080009c0 <UM_SetLastDebounceTime>:
 *	@param pDebounceTime
 *	@retval None
 *
 */
void UM_SetLastDebounceTime(uint16_t pDebounceTime)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	0002      	movs	r2, r0
 80009c8:	1dbb      	adds	r3, r7, #6
 80009ca:	801a      	strh	r2, [r3, #0]
	debounce_last_interrupt_time = pDebounceTime;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <UM_SetLastDebounceTime+0x1c>)
 80009ce:	1dba      	adds	r2, r7, #6
 80009d0:	8812      	ldrh	r2, [r2, #0]
 80009d2:	801a      	strh	r2, [r3, #0]
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000096 	.word	0x20000096

080009e0 <UM_getLastDebounceTime>:
 *	@param None
 *	@retval debounce_last_interrupt_time
 *
 */
uint16_t UM_getLastDebounceTime()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	return debounce_last_interrupt_time;
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <UM_getLastDebounceTime+0x10>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
}
 80009e8:	0018      	movs	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20000096 	.word	0x20000096

080009f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b089      	sub	sp, #36	; 0x24
 80009f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	240c      	movs	r4, #12
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	0018      	movs	r0, r3
 8000a00:	2314      	movs	r3, #20
 8000a02:	001a      	movs	r2, r3
 8000a04:	2100      	movs	r1, #0
 8000a06:	f003 fe6d 	bl	80046e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0a:	4b48      	ldr	r3, [pc, #288]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000a0c:	695a      	ldr	r2, [r3, #20]
 8000a0e:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	03c9      	lsls	r1, r1, #15
 8000a14:	430a      	orrs	r2, r1
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000a1a:	695a      	ldr	r2, [r3, #20]
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	03db      	lsls	r3, r3, #15
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b41      	ldr	r3, [pc, #260]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000a28:	695a      	ldr	r2, [r3, #20]
 8000a2a:	4b40      	ldr	r3, [pc, #256]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	0289      	lsls	r1, r1, #10
 8000a30:	430a      	orrs	r2, r1
 8000a32:	615a      	str	r2, [r3, #20]
 8000a34:	4b3d      	ldr	r3, [pc, #244]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000a36:	695a      	ldr	r2, [r3, #20]
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	029b      	lsls	r3, r3, #10
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	4b3a      	ldr	r3, [pc, #232]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000a44:	695a      	ldr	r2, [r3, #20]
 8000a46:	4b39      	ldr	r3, [pc, #228]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	02c9      	lsls	r1, r1, #11
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	4b36      	ldr	r3, [pc, #216]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000a52:	695a      	ldr	r2, [r3, #20]
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	02db      	lsls	r3, r3, #11
 8000a58:	4013      	ands	r3, r2
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|DC_Pin, GPIO_PIN_RESET);
 8000a5e:	2390      	movs	r3, #144	; 0x90
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	2200      	movs	r2, #0
 8000a64:	2118      	movs	r1, #24
 8000a66:	0018      	movs	r0, r3
 8000a68:	f001 f900 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000a6c:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <MX_GPIO_Init+0x13c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2101      	movs	r1, #1
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 f8fa 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	4a2c      	ldr	r2, [pc, #176]	; (8000b34 <MX_GPIO_Init+0x140>)
 8000a82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2202      	movs	r2, #2
 8000a88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <MX_GPIO_Init+0x144>)
 8000a8e:	0019      	movs	r1, r3
 8000a90:	0010      	movs	r0, r2
 8000a92:	f000 ff7b 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2206      	movs	r2, #6
 8000a9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	4a25      	ldr	r2, [pc, #148]	; (8000b34 <MX_GPIO_Init+0x140>)
 8000aa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	193a      	adds	r2, r7, r4
 8000aaa:	2390      	movs	r3, #144	; 0x90
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	0011      	movs	r1, r2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f000 ff6b 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2218      	movs	r2, #24
 8000aba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2201      	movs	r2, #1
 8000ac0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	193a      	adds	r2, r7, r4
 8000ad0:	2390      	movs	r3, #144	; 0x90
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 ff58 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000adc:	0021      	movs	r1, r4
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <MX_GPIO_Init+0x13c>)
 8000afa:	0019      	movs	r1, r3
 8000afc:	0010      	movs	r0, r2
 8000afe:	f000 ff45 	bl	800198c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2101      	movs	r1, #1
 8000b06:	2005      	movs	r0, #5
 8000b08:	f000 ff0e 	bl	8001928 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000b0c:	2005      	movs	r0, #5
 8000b0e:	f000 ff20 	bl	8001952 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2101      	movs	r1, #1
 8000b16:	2006      	movs	r0, #6
 8000b18:	f000 ff06 	bl	8001928 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000b1c:	2006      	movs	r0, #6
 8000b1e:	f000 ff18 	bl	8001952 <HAL_NVIC_EnableIRQ>

}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b009      	add	sp, #36	; 0x24
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	48000400 	.word	0x48000400
 8000b34:	10110000 	.word	0x10110000
 8000b38:	48001400 	.word	0x48001400

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b40:	f000 fdc0 	bl	80016c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b44:	f000 f817 	bl	8000b76 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f7ff ff54 	bl	80009f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b4c:	f000 f98e 	bl	8000e6c <MX_TIM1_Init>
  MX_TIM17_Init();
 8000b50:	f000 fbb6 	bl	80012c0 <MX_TIM17_Init>
  MX_TIM14_Init();
 8000b54:	f000 fb40 	bl	80011d8 <MX_TIM14_Init>
  MX_SPI1_Init();
 8000b58:	f000 f85c 	bl	8000c14 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000b5c:	f000 fa3c 	bl	8000fd8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b60:	f000 fa9e 	bl	80010a0 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000b64:	f000 fb86 	bl	8001274 <MX_TIM16_Init>
  MX_TIM6_Init();
 8000b68:	f000 fafa 	bl	8001160 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  UM_Setup();
 8000b6c:	f7ff fe4c 	bl	8000808 <UM_Setup>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 // LM_UpdatePwm();
	  UM_UpdateDisplay();
 8000b70:	f7ff fde2 	bl	8000738 <UM_UpdateDisplay>
 8000b74:	e7fc      	b.n	8000b70 <main+0x34>

08000b76 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b76:	b590      	push	{r4, r7, lr}
 8000b78:	b091      	sub	sp, #68	; 0x44
 8000b7a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7c:	2410      	movs	r4, #16
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	0018      	movs	r0, r3
 8000b82:	2330      	movs	r3, #48	; 0x30
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f003 fdac 	bl	80046e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	003b      	movs	r3, r7
 8000b8e:	0018      	movs	r0, r3
 8000b90:	2310      	movs	r3, #16
 8000b92:	001a      	movs	r2, r3
 8000b94:	2100      	movs	r1, #0
 8000b96:	f003 fda5 	bl	80046e4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b9a:	0021      	movs	r1, r4
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2210      	movs	r2, #16
 8000bac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	0352      	lsls	r2, r2, #13
 8000bc0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f001 f892 	bl	8001cf4 <HAL_RCC_OscConfig>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000bd4:	f000 f819 	bl	8000c0a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	003b      	movs	r3, r7
 8000bda:	2207      	movs	r2, #7
 8000bdc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bde:	003b      	movs	r3, r7
 8000be0:	2202      	movs	r2, #2
 8000be2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be4:	003b      	movs	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bea:	003b      	movs	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf0:	003b      	movs	r3, r7
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f001 fb99 	bl	800232c <HAL_RCC_ClockConfig>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000bfe:	f000 f804 	bl	8000c0a <Error_Handler>
  }
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b011      	add	sp, #68	; 0x44
 8000c08:	bd90      	pop	{r4, r7, pc}

08000c0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c1a:	4a1c      	ldr	r2, [pc, #112]	; (8000c8c <MX_SPI1_Init+0x78>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c20:	2282      	movs	r2, #130	; 0x82
 8000c22:	0052      	lsls	r2, r2, #1
 8000c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c2e:	22e0      	movs	r2, #224	; 0xe0
 8000c30:	00d2      	lsls	r2, r2, #3
 8000c32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c42:	2280      	movs	r2, #128	; 0x80
 8000c44:	0092      	lsls	r2, r2, #2
 8000c46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c62:	2207      	movs	r2, #7
 8000c64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c6e:	2208      	movs	r2, #8
 8000c70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 fc8b 	bl	8002590 <HAL_SPI_Init>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c7e:	f7ff ffc4 	bl	8000c0a <Error_Handler>
  }

}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200000a8 	.word	0x200000a8
 8000c8c:	40013000 	.word	0x40013000

08000c90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	2314      	movs	r3, #20
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	2314      	movs	r3, #20
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f003 fd1e 	bl	80046e4 <memset>
  if(spiHandle->Instance==SPI1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <HAL_SPI_MspInit+0x90>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d132      	bne.n	8000d18 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <HAL_SPI_MspInit+0x94>)
 8000cb4:	699a      	ldr	r2, [r3, #24]
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_SPI_MspInit+0x94>)
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	0149      	lsls	r1, r1, #5
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	619a      	str	r2, [r3, #24]
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_SPI_MspInit+0x94>)
 8000cc2:	699a      	ldr	r2, [r3, #24]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	015b      	lsls	r3, r3, #5
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_SPI_MspInit+0x94>)
 8000cd0:	695a      	ldr	r2, [r3, #20]
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <HAL_SPI_MspInit+0x94>)
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	0289      	lsls	r1, r1, #10
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	615a      	str	r2, [r3, #20]
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_SPI_MspInit+0x94>)
 8000cde:	695a      	ldr	r2, [r3, #20]
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	029b      	lsls	r3, r3, #10
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cea:	2114      	movs	r1, #20
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	22e0      	movs	r2, #224	; 0xe0
 8000cf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2203      	movs	r2, #3
 8000d02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	187a      	adds	r2, r7, r1
 8000d0c:	2390      	movs	r3, #144	; 0x90
 8000d0e:	05db      	lsls	r3, r3, #23
 8000d10:	0011      	movs	r1, r2
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 fe3a 	bl	800198c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b00a      	add	sp, #40	; 0x28
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40013000 	.word	0x40013000
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_MspInit+0x44>)
 8000d30:	699a      	ldr	r2, [r3, #24]
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_MspInit+0x44>)
 8000d34:	2101      	movs	r1, #1
 8000d36:	430a      	orrs	r2, r1
 8000d38:	619a      	str	r2, [r3, #24]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_MspInit+0x44>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4013      	ands	r3, r2
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_MspInit+0x44>)
 8000d48:	69da      	ldr	r2, [r3, #28]
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_MspInit+0x44>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	0549      	lsls	r1, r1, #21
 8000d50:	430a      	orrs	r2, r1
 8000d52:	61da      	str	r2, [r3, #28]
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_MspInit+0x44>)
 8000d56:	69da      	ldr	r2, [r3, #28]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	055b      	lsls	r3, r3, #21
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	40021000 	.word	0x40021000

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d98:	f000 fcdc 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	UM_EXTI0_1_IRQHandler();
 8000da6:	f7ff fdb3 	bl	8000910 <UM_EXTI0_1_IRQHandler>
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f000 ff7c 	bl	8001ca8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000db0:	2002      	movs	r0, #2
 8000db2:	f000 ff79 	bl	8001ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
	UM_EXTI2_3_IRQHandler();
 8000dc0:	f7ff fdd8 	bl	8000974 <UM_EXTI2_3_IRQHandler>
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000dc4:	2004      	movs	r0, #4
 8000dc6:	f000 ff6f 	bl	8001ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LM_UpdatePwm();
 8000dd4:	f7ff fb98 	bl	8000508 <LM_UpdatePwm>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <TIM2_IRQHandler+0x18>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f001 fe6f 	bl	8002abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	2000020c 	.word	0x2000020c

08000dec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	TM_DecrementTimer();
 8000df0:	f7ff fc16 	bl	8000620 <TM_DecrementTimer>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <TIM6_DAC_IRQHandler+0x18>)
 8000df6:	0018      	movs	r0, r3
 8000df8:	f001 fe61 	bl	8002abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	2000018c 	.word	0x2000018c

08000e08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x50>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x16>
		heap_end = &end;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <_sbrk+0x50>)
 8000e1a:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <_sbrk+0x54>)
 8000e1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <_sbrk+0x50>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <_sbrk+0x50>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	18d3      	adds	r3, r2, r3
 8000e2c:	466a      	mov	r2, sp
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d907      	bls.n	8000e42 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e32:	f003 fc2d 	bl	8004690 <__errno>
 8000e36:	0003      	movs	r3, r0
 8000e38:	220c      	movs	r2, #12
 8000e3a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	425b      	negs	r3, r3
 8000e40:	e006      	b.n	8000e50 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <_sbrk+0x50>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	18d2      	adds	r2, r2, r3
 8000e4a:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <_sbrk+0x50>)
 8000e4c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b004      	add	sp, #16
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000098 	.word	0x20000098
 8000e5c:	200002d8 	.word	0x200002d8

08000e60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b092      	sub	sp, #72	; 0x48
 8000e70:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e72:	2340      	movs	r3, #64	; 0x40
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	0018      	movs	r0, r3
 8000e78:	2308      	movs	r3, #8
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	f003 fc31 	bl	80046e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e82:	2324      	movs	r3, #36	; 0x24
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	0018      	movs	r0, r3
 8000e88:	231c      	movs	r3, #28
 8000e8a:	001a      	movs	r2, r3
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	f003 fc29 	bl	80046e4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	0018      	movs	r0, r3
 8000e96:	2320      	movs	r3, #32
 8000e98:	001a      	movs	r2, r3
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f003 fc22 	bl	80046e4 <memset>

  htim1.Instance = TIM1;
 8000ea0:	4b4b      	ldr	r3, [pc, #300]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000ea2:	4a4c      	ldr	r2, [pc, #304]	; (8000fd4 <MX_TIM1_Init+0x168>)
 8000ea4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ea6:	4b4a      	ldr	r3, [pc, #296]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b48      	ldr	r3, [pc, #288]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64;
 8000eb2:	4b47      	ldr	r3, [pc, #284]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000eb4:	2240      	movs	r2, #64	; 0x40
 8000eb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb8:	4b45      	ldr	r3, [pc, #276]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ebe:	4b44      	ldr	r3, [pc, #272]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec4:	4b42      	ldr	r3, [pc, #264]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eca:	4b41      	ldr	r3, [pc, #260]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f001 fc93 	bl	80027f8 <HAL_TIM_PWM_Init>
 8000ed2:	1e03      	subs	r3, r0, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ed6:	f7ff fe98 	bl	8000c0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eda:	2140      	movs	r1, #64	; 0x40
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ee8:	187a      	adds	r2, r7, r1
 8000eea:	4b39      	ldr	r3, [pc, #228]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000eec:	0011      	movs	r1, r2
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f002 fa7c 	bl	80033ec <HAL_TIMEx_MasterConfigSynchronization>
 8000ef4:	1e03      	subs	r3, r0, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ef8:	f7ff fe87 	bl	8000c0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000efc:	2124      	movs	r1, #36	; 0x24
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2260      	movs	r2, #96	; 0x60
 8000f02:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f001 fedc 	bl	8002cec <HAL_TIM_PWM_ConfigChannel>
 8000f34:	1e03      	subs	r3, r0, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000f38:	f7ff fe67 	bl	8000c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f3c:	2324      	movs	r3, #36	; 0x24
 8000f3e:	18f9      	adds	r1, r7, r3
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000f42:	2204      	movs	r2, #4
 8000f44:	0018      	movs	r0, r3
 8000f46:	f001 fed1 	bl	8002cec <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8000f4e:	f7ff fe5c 	bl	8000c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f52:	2324      	movs	r3, #36	; 0x24
 8000f54:	18f9      	adds	r1, r7, r3
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000f58:	2208      	movs	r2, #8
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f001 fec6 	bl	8002cec <HAL_TIM_PWM_ConfigChannel>
 8000f60:	1e03      	subs	r3, r0, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000f64:	f7ff fe51 	bl	8000c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f68:	2324      	movs	r3, #36	; 0x24
 8000f6a:	18f9      	adds	r1, r7, r3
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	0018      	movs	r0, r3
 8000f72:	f001 febb 	bl	8002cec <HAL_TIM_PWM_ConfigChannel>
 8000f76:	1e03      	subs	r3, r0, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000f7a:	f7ff fe46 	bl	8000c0a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	0192      	lsls	r2, r2, #6
 8000fa2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000faa:	1d3a      	adds	r2, r7, #4
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000fae:	0011      	movs	r1, r2
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f002 fa79 	bl	80034a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fb6:	1e03      	subs	r3, r0, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000fba:	f7ff fe26 	bl	8000c0a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f000 fabb 	bl	800153c <HAL_TIM_MspPostInit>

}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b012      	add	sp, #72	; 0x48
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	200001cc 	.word	0x200001cc
 8000fd4:	40012c00 	.word	0x40012c00

08000fd8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b08d      	sub	sp, #52	; 0x34
 8000fdc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fde:	240c      	movs	r4, #12
 8000fe0:	193b      	adds	r3, r7, r4
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	2324      	movs	r3, #36	; 0x24
 8000fe6:	001a      	movs	r2, r3
 8000fe8:	2100      	movs	r1, #0
 8000fea:	f003 fb7b 	bl	80046e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f003 fb74 	bl	80046e4 <memset>

  htim2.Instance = TIM2;
 8000ffc:	4b26      	ldr	r3, [pc, #152]	; (8001098 <MX_TIM2_Init+0xc0>)
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	05d2      	lsls	r2, r2, #23
 8001002:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <MX_TIM2_Init+0xc0>)
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <MX_TIM2_Init+0xc0>)
 800100c:	2260      	movs	r2, #96	; 0x60
 800100e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MX_TIM2_Init+0xc0>)
 8001012:	4a22      	ldr	r2, [pc, #136]	; (800109c <MX_TIM2_Init+0xc4>)
 8001014:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <MX_TIM2_Init+0xc0>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <MX_TIM2_Init+0xc0>)
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001022:	0021      	movs	r1, r4
 8001024:	187b      	adds	r3, r7, r1
 8001026:	2203      	movs	r2, #3
 8001028:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001030:	187b      	adds	r3, r7, r1
 8001032:	2201      	movs	r2, #1
 8001034:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001036:	187b      	adds	r3, r7, r1
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 1;
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2201      	movs	r2, #1
 8001040:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2201      	movs	r2, #1
 800104c:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 1;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2201      	movs	r2, #1
 8001058:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800105a:	187a      	adds	r2, r7, r1
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_TIM2_Init+0xc0>)
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f001 fc41 	bl	80028e8 <HAL_TIM_Encoder_Init>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d001      	beq.n	800106e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800106a:	f7ff fdce 	bl	8000c0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2220      	movs	r2, #32
 8001072:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800107a:	1d3a      	adds	r2, r7, #4
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_TIM2_Init+0xc0>)
 800107e:	0011      	movs	r1, r2
 8001080:	0018      	movs	r0, r3
 8001082:	f002 f9b3 	bl	80033ec <HAL_TIMEx_MasterConfigSynchronization>
 8001086:	1e03      	subs	r3, r0, #0
 8001088:	d001      	beq.n	800108e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800108a:	f7ff fdbe 	bl	8000c0a <Error_Handler>
  }

}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b00d      	add	sp, #52	; 0x34
 8001094:	bd90      	pop	{r4, r7, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	2000020c 	.word	0x2000020c
 800109c:	0000ffff 	.word	0x0000ffff

080010a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a6:	2320      	movs	r3, #32
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	0018      	movs	r0, r3
 80010ac:	2308      	movs	r3, #8
 80010ae:	001a      	movs	r2, r3
 80010b0:	2100      	movs	r1, #0
 80010b2:	f003 fb17 	bl	80046e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	0018      	movs	r0, r3
 80010ba:	231c      	movs	r3, #28
 80010bc:	001a      	movs	r2, r3
 80010be:	2100      	movs	r1, #0
 80010c0:	f003 fb10 	bl	80046e4 <memset>

  htim3.Instance = TIM3;
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <MX_TIM3_Init+0xb8>)
 80010c6:	4a25      	ldr	r2, [pc, #148]	; (800115c <MX_TIM3_Init+0xbc>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <MX_TIM3_Init+0xb8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b21      	ldr	r3, [pc, #132]	; (8001158 <MX_TIM3_Init+0xb8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <MX_TIM3_Init+0xb8>)
 80010d8:	2201      	movs	r2, #1
 80010da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <MX_TIM3_Init+0xb8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <MX_TIM3_Init+0xb8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <MX_TIM3_Init+0xb8>)
 80010ea:	0018      	movs	r0, r3
 80010ec:	f001 fb84 	bl	80027f8 <HAL_TIM_PWM_Init>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80010f4:	f7ff fd89 	bl	8000c0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f8:	2120      	movs	r1, #32
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001100:	187b      	adds	r3, r7, r1
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001106:	187a      	adds	r2, r7, r1
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <MX_TIM3_Init+0xb8>)
 800110a:	0011      	movs	r1, r2
 800110c:	0018      	movs	r0, r3
 800110e:	f002 f96d 	bl	80033ec <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	1e03      	subs	r3, r0, #0
 8001114:	d001      	beq.n	800111a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001116:	f7ff fd78 	bl	8000c0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2260      	movs	r2, #96	; 0x60
 800111e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001132:	1d39      	adds	r1, r7, #4
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_TIM3_Init+0xb8>)
 8001136:	2200      	movs	r2, #0
 8001138:	0018      	movs	r0, r3
 800113a:	f001 fdd7 	bl	8002cec <HAL_TIM_PWM_ConfigChannel>
 800113e:	1e03      	subs	r3, r0, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8001142:	f7ff fd62 	bl	8000c0a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <MX_TIM3_Init+0xb8>)
 8001148:	0018      	movs	r0, r3
 800114a:	f000 f9f7 	bl	800153c <HAL_TIM_MspPostInit>

}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b00a      	add	sp, #40	; 0x28
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	2000014c 	.word	0x2000014c
 800115c:	40000400 	.word	0x40000400

08001160 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001166:	003b      	movs	r3, r7
 8001168:	0018      	movs	r0, r3
 800116a:	2308      	movs	r3, #8
 800116c:	001a      	movs	r2, r3
 800116e:	2100      	movs	r1, #0
 8001170:	f003 fab8 	bl	80046e4 <memset>

  htim6.Instance = TIM6;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_TIM6_Init+0x6c>)
 8001176:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <MX_TIM6_Init+0x70>)
 8001178:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 366;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_TIM6_Init+0x6c>)
 800117c:	22b7      	movs	r2, #183	; 0xb7
 800117e:	0052      	lsls	r2, r2, #1
 8001180:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_TIM6_Init+0x6c>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_TIM6_Init+0x6c>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <MX_TIM6_Init+0x74>)
 800118c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_TIM6_Init+0x6c>)
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <MX_TIM6_Init+0x6c>)
 8001196:	0018      	movs	r0, r3
 8001198:	f001 fa94 	bl	80026c4 <HAL_TIM_Base_Init>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 80011a0:	f7ff fd33 	bl	8000c0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a4:	003b      	movs	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	003b      	movs	r3, r7
 80011ac:	2200      	movs	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011b0:	003a      	movs	r2, r7
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_TIM6_Init+0x6c>)
 80011b4:	0011      	movs	r1, r2
 80011b6:	0018      	movs	r0, r3
 80011b8:	f002 f918 	bl	80033ec <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	1e03      	subs	r3, r0, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 80011c0:	f7ff fd23 	bl	8000c0a <Error_Handler>
  }

}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b002      	add	sp, #8
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2000018c 	.word	0x2000018c
 80011d0:	40001000 	.word	0x40001000
 80011d4:	0000ffff 	.word	0x0000ffff

080011d8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	0018      	movs	r0, r3
 80011e2:	231c      	movs	r3, #28
 80011e4:	001a      	movs	r2, r3
 80011e6:	2100      	movs	r1, #0
 80011e8:	f003 fa7c 	bl	80046e4 <memset>

  htim14.Instance = TIM14;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_TIM14_Init+0x94>)
 80011ee:	4a20      	ldr	r2, [pc, #128]	; (8001270 <MX_TIM14_Init+0x98>)
 80011f0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_TIM14_Init+0x94>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_TIM14_Init+0x94>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 64;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_TIM14_Init+0x94>)
 8001200:	2240      	movs	r2, #64	; 0x40
 8001202:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_TIM14_Init+0x94>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_TIM14_Init+0x94>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_TIM14_Init+0x94>)
 8001212:	0018      	movs	r0, r3
 8001214:	f001 fa56 	bl	80026c4 <HAL_TIM_Base_Init>
 8001218:	1e03      	subs	r3, r0, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800121c:	f7ff fcf5 	bl	8000c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_TIM14_Init+0x94>)
 8001222:	0018      	movs	r0, r3
 8001224:	f001 fae8 	bl	80027f8 <HAL_TIM_PWM_Init>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 800122c:	f7ff fced 	bl	8000c0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2260      	movs	r2, #96	; 0x60
 8001234:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001248:	1d39      	adds	r1, r7, #4
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_TIM14_Init+0x94>)
 800124c:	2200      	movs	r2, #0
 800124e:	0018      	movs	r0, r3
 8001250:	f001 fd4c 	bl	8002cec <HAL_TIM_PWM_ConfigChannel>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001258:	f7ff fcd7 	bl	8000c0a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <MX_TIM14_Init+0x94>)
 800125e:	0018      	movs	r0, r3
 8001260:	f000 f96c 	bl	800153c <HAL_TIM_MspPostInit>

}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b008      	add	sp, #32
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000024c 	.word	0x2000024c
 8001270:	40002000 	.word	0x40002000

08001274 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_TIM16_Init+0x44>)
 800127a:	4a10      	ldr	r2, [pc, #64]	; (80012bc <MX_TIM16_Init+0x48>)
 800127c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_TIM16_Init+0x44>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_TIM16_Init+0x44>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_TIM16_Init+0x44>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_TIM16_Init+0x44>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_TIM16_Init+0x44>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_TIM16_Init+0x44>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <MX_TIM16_Init+0x44>)
 80012a4:	0018      	movs	r0, r3
 80012a6:	f001 fa0d 	bl	80026c4 <HAL_TIM_Base_Init>
 80012aa:	1e03      	subs	r3, r0, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80012ae:	f7ff fcac 	bl	8000c0a <Error_Handler>
  }

}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000028c 	.word	0x2000028c
 80012bc:	40014400 	.word	0x40014400

080012c0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_TIM17_Init+0x44>)
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <MX_TIM17_Init+0x48>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 65535;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_TIM17_Init+0x44>)
 80012cc:	4a0f      	ldr	r2, [pc, #60]	; (800130c <MX_TIM17_Init+0x4c>)
 80012ce:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_TIM17_Init+0x44>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_TIM17_Init+0x44>)
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <MX_TIM17_Init+0x4c>)
 80012da:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_TIM17_Init+0x44>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_TIM17_Init+0x44>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_TIM17_Init+0x44>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <MX_TIM17_Init+0x44>)
 80012f0:	0018      	movs	r0, r3
 80012f2:	f001 f9e7 	bl	80026c4 <HAL_TIM_Base_Init>
 80012f6:	1e03      	subs	r3, r0, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80012fa:	f7ff fc86 	bl	8000c0a <Error_Handler>
  }

}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000010c 	.word	0x2000010c
 8001308:	40014800 	.word	0x40014800
 800130c:	0000ffff 	.word	0x0000ffff

08001310 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a13      	ldr	r2, [pc, #76]	; (800136c <HAL_TIM_PWM_MspInit+0x5c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d10e      	bne.n	8001340 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <HAL_TIM_PWM_MspInit+0x60>)
 8001324:	699a      	ldr	r2, [r3, #24]
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_TIM_PWM_MspInit+0x60>)
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	0109      	lsls	r1, r1, #4
 800132c:	430a      	orrs	r2, r1
 800132e:	619a      	str	r2, [r3, #24]
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_TIM_PWM_MspInit+0x60>)
 8001332:	699a      	ldr	r2, [r3, #24]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4013      	ands	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800133e:	e010      	b.n	8001362 <HAL_TIM_PWM_MspInit+0x52>
  else if(tim_pwmHandle->Instance==TIM3)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <HAL_TIM_PWM_MspInit+0x64>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d10b      	bne.n	8001362 <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_TIM_PWM_MspInit+0x60>)
 800134c:	69da      	ldr	r2, [r3, #28]
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_TIM_PWM_MspInit+0x60>)
 8001350:	2102      	movs	r1, #2
 8001352:	430a      	orrs	r2, r1
 8001354:	61da      	str	r2, [r3, #28]
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_TIM_PWM_MspInit+0x60>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	2202      	movs	r2, #2
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b004      	add	sp, #16
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	40012c00 	.word	0x40012c00
 8001370:	40021000 	.word	0x40021000
 8001374:	40000400 	.word	0x40000400

08001378 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b08b      	sub	sp, #44	; 0x2c
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	2314      	movs	r3, #20
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	0018      	movs	r0, r3
 8001386:	2314      	movs	r3, #20
 8001388:	001a      	movs	r2, r3
 800138a:	2100      	movs	r1, #0
 800138c:	f003 f9aa 	bl	80046e4 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	05db      	lsls	r3, r3, #23
 8001398:	429a      	cmp	r2, r3
 800139a:	d15e      	bne.n	800145a <HAL_TIM_Encoder_MspInit+0xe2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800139c:	4b31      	ldr	r3, [pc, #196]	; (8001464 <HAL_TIM_Encoder_MspInit+0xec>)
 800139e:	69da      	ldr	r2, [r3, #28]
 80013a0:	4b30      	ldr	r3, [pc, #192]	; (8001464 <HAL_TIM_Encoder_MspInit+0xec>)
 80013a2:	2101      	movs	r1, #1
 80013a4:	430a      	orrs	r2, r1
 80013a6:	61da      	str	r2, [r3, #28]
 80013a8:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <HAL_TIM_Encoder_MspInit+0xec>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	2201      	movs	r2, #1
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <HAL_TIM_Encoder_MspInit+0xec>)
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_TIM_Encoder_MspInit+0xec>)
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	0289      	lsls	r1, r1, #10
 80013be:	430a      	orrs	r2, r1
 80013c0:	615a      	str	r2, [r3, #20]
 80013c2:	4b28      	ldr	r3, [pc, #160]	; (8001464 <HAL_TIM_Encoder_MspInit+0xec>)
 80013c4:	695a      	ldr	r2, [r3, #20]
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	029b      	lsls	r3, r3, #10
 80013ca:	4013      	ands	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_TIM_Encoder_MspInit+0xec>)
 80013d2:	695a      	ldr	r2, [r3, #20]
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <HAL_TIM_Encoder_MspInit+0xec>)
 80013d6:	2180      	movs	r1, #128	; 0x80
 80013d8:	02c9      	lsls	r1, r1, #11
 80013da:	430a      	orrs	r2, r1
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_TIM_Encoder_MspInit+0xec>)
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	02db      	lsls	r3, r3, #11
 80013e6:	4013      	ands	r3, r2
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013ec:	2114      	movs	r1, #20
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	0212      	lsls	r2, r2, #8
 80013f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	000c      	movs	r4, r1
 80013f8:	193b      	adds	r3, r7, r4
 80013fa:	2202      	movs	r2, #2
 80013fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	193b      	adds	r3, r7, r4
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	193b      	adds	r3, r7, r4
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800140a:	193b      	adds	r3, r7, r4
 800140c:	2202      	movs	r2, #2
 800140e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	193a      	adds	r2, r7, r4
 8001412:	2390      	movs	r3, #144	; 0x90
 8001414:	05db      	lsls	r3, r3, #23
 8001416:	0011      	movs	r1, r2
 8001418:	0018      	movs	r0, r3
 800141a:	f000 fab7 	bl	800198c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800141e:	0021      	movs	r1, r4
 8001420:	187b      	adds	r3, r7, r1
 8001422:	2208      	movs	r2, #8
 8001424:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2202      	movs	r2, #2
 800142a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	187b      	adds	r3, r7, r1
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	187b      	adds	r3, r7, r1
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001438:	187b      	adds	r3, r7, r1
 800143a:	2202      	movs	r2, #2
 800143c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	187b      	adds	r3, r7, r1
 8001440:	4a09      	ldr	r2, [pc, #36]	; (8001468 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001442:	0019      	movs	r1, r3
 8001444:	0010      	movs	r0, r2
 8001446:	f000 faa1 	bl	800198c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2101      	movs	r1, #1
 800144e:	200f      	movs	r0, #15
 8001450:	f000 fa6a 	bl	8001928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001454:	200f      	movs	r0, #15
 8001456:	f000 fa7c 	bl	8001952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	b00b      	add	sp, #44	; 0x2c
 8001460:	bd90      	pop	{r4, r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	40021000 	.word	0x40021000
 8001468:	48000400 	.word	0x48000400

0800146c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a2b      	ldr	r2, [pc, #172]	; (8001528 <HAL_TIM_Base_MspInit+0xbc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d114      	bne.n	80014a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <HAL_TIM_Base_MspInit+0xc0>)
 8001480:	69da      	ldr	r2, [r3, #28]
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_TIM_Base_MspInit+0xc0>)
 8001484:	2110      	movs	r1, #16
 8001486:	430a      	orrs	r2, r1
 8001488:	61da      	str	r2, [r3, #28]
 800148a:	4b28      	ldr	r3, [pc, #160]	; (800152c <HAL_TIM_Base_MspInit+0xc0>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	2210      	movs	r2, #16
 8001490:	4013      	ands	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2101      	movs	r1, #1
 800149a:	2011      	movs	r0, #17
 800149c:	f000 fa44 	bl	8001928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014a0:	2011      	movs	r0, #17
 80014a2:	f000 fa56 	bl	8001952 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80014a6:	e03a      	b.n	800151e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM14)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a20      	ldr	r2, [pc, #128]	; (8001530 <HAL_TIM_Base_MspInit+0xc4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10e      	bne.n	80014d0 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_TIM_Base_MspInit+0xc0>)
 80014b4:	69da      	ldr	r2, [r3, #28]
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_TIM_Base_MspInit+0xc0>)
 80014b8:	2180      	movs	r1, #128	; 0x80
 80014ba:	0049      	lsls	r1, r1, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	61da      	str	r2, [r3, #28]
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_TIM_Base_MspInit+0xc0>)
 80014c2:	69da      	ldr	r2, [r3, #28]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
}
 80014ce:	e026      	b.n	800151e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM16)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_TIM_Base_MspInit+0xc8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d10e      	bne.n	80014f8 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_TIM_Base_MspInit+0xc0>)
 80014dc:	699a      	ldr	r2, [r3, #24]
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <HAL_TIM_Base_MspInit+0xc0>)
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	0289      	lsls	r1, r1, #10
 80014e4:	430a      	orrs	r2, r1
 80014e6:	619a      	str	r2, [r3, #24]
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_TIM_Base_MspInit+0xc0>)
 80014ea:	699a      	ldr	r2, [r3, #24]
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	029b      	lsls	r3, r3, #10
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
}
 80014f6:	e012      	b.n	800151e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM17)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <HAL_TIM_Base_MspInit+0xcc>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10d      	bne.n	800151e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_TIM_Base_MspInit+0xc0>)
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_TIM_Base_MspInit+0xc0>)
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	02c9      	lsls	r1, r1, #11
 800150c:	430a      	orrs	r2, r1
 800150e:	619a      	str	r2, [r3, #24]
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_TIM_Base_MspInit+0xc0>)
 8001512:	699a      	ldr	r2, [r3, #24]
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	02db      	lsls	r3, r3, #11
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b006      	add	sp, #24
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	40001000 	.word	0x40001000
 800152c:	40021000 	.word	0x40021000
 8001530:	40002000 	.word	0x40002000
 8001534:	40014400 	.word	0x40014400
 8001538:	40014800 	.word	0x40014800

0800153c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	2314      	movs	r3, #20
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	0018      	movs	r0, r3
 800154a:	2314      	movs	r3, #20
 800154c:	001a      	movs	r2, r3
 800154e:	2100      	movs	r1, #0
 8001550:	f003 f8c8 	bl	80046e4 <memset>
  if(timHandle->Instance==TIM1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a40      	ldr	r2, [pc, #256]	; (800165c <HAL_TIM_MspPostInit+0x120>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d126      	bne.n	80015ac <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b40      	ldr	r3, [pc, #256]	; (8001660 <HAL_TIM_MspPostInit+0x124>)
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <HAL_TIM_MspPostInit+0x124>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0289      	lsls	r1, r1, #10
 8001568:	430a      	orrs	r2, r1
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <HAL_TIM_MspPostInit+0x124>)
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	029b      	lsls	r3, r3, #10
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800157a:	2114      	movs	r1, #20
 800157c:	187b      	adds	r3, r7, r1
 800157e:	22f0      	movs	r2, #240	; 0xf0
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2202      	movs	r2, #2
 8001588:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	187b      	adds	r3, r7, r1
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	187b      	adds	r3, r7, r1
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2202      	movs	r2, #2
 800159a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	187a      	adds	r2, r7, r1
 800159e:	2390      	movs	r3, #144	; 0x90
 80015a0:	05db      	lsls	r3, r3, #23
 80015a2:	0011      	movs	r1, r2
 80015a4:	0018      	movs	r0, r3
 80015a6:	f000 f9f1 	bl	800198c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80015aa:	e052      	b.n	8001652 <HAL_TIM_MspPostInit+0x116>
  else if(timHandle->Instance==TIM3)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a2c      	ldr	r2, [pc, #176]	; (8001664 <HAL_TIM_MspPostInit+0x128>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d124      	bne.n	8001600 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <HAL_TIM_MspPostInit+0x124>)
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_TIM_MspPostInit+0x124>)
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	02c9      	lsls	r1, r1, #11
 80015c0:	430a      	orrs	r2, r1
 80015c2:	615a      	str	r2, [r3, #20]
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_TIM_MspPostInit+0x124>)
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	02db      	lsls	r3, r3, #11
 80015cc:	4013      	ands	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015d2:	2114      	movs	r1, #20
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	2210      	movs	r2, #16
 80015d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	2202      	movs	r2, #2
 80015de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	2201      	movs	r2, #1
 80015f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <HAL_TIM_MspPostInit+0x12c>)
 80015f6:	0019      	movs	r1, r3
 80015f8:	0010      	movs	r0, r2
 80015fa:	f000 f9c7 	bl	800198c <HAL_GPIO_Init>
}
 80015fe:	e028      	b.n	8001652 <HAL_TIM_MspPostInit+0x116>
  else if(timHandle->Instance==TIM14)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_TIM_MspPostInit+0x130>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d123      	bne.n	8001652 <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_TIM_MspPostInit+0x124>)
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_TIM_MspPostInit+0x124>)
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	02c9      	lsls	r1, r1, #11
 8001614:	430a      	orrs	r2, r1
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_TIM_MspPostInit+0x124>)
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	02db      	lsls	r3, r3, #11
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001626:	2114      	movs	r1, #20
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2202      	movs	r2, #2
 800162c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2202      	movs	r2, #2
 8001632:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	187b      	adds	r3, r7, r1
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	187b      	adds	r3, r7, r1
 8001648:	4a07      	ldr	r2, [pc, #28]	; (8001668 <HAL_TIM_MspPostInit+0x12c>)
 800164a:	0019      	movs	r1, r3
 800164c:	0010      	movs	r0, r2
 800164e:	f000 f99d 	bl	800198c <HAL_GPIO_Init>
}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b00a      	add	sp, #40	; 0x28
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	40012c00 	.word	0x40012c00
 8001660:	40021000 	.word	0x40021000
 8001664:	40000400 	.word	0x40000400
 8001668:	48000400 	.word	0x48000400
 800166c:	40002000 	.word	0x40002000

08001670 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001672:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480d      	ldr	r0, [pc, #52]	; (80016ac <LoopForever+0x6>)
  ldr r1, =_edata
 8001676:	490e      	ldr	r1, [pc, #56]	; (80016b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <LoopForever+0xe>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800168c:	4c0b      	ldr	r4, [pc, #44]	; (80016bc <LoopForever+0x16>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800169a:	f7ff fbe1 	bl	8000e60 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800169e:	f002 fffd 	bl	800469c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016a2:	f7ff fa4b 	bl	8000b3c <main>

080016a6 <LoopForever>:

LoopForever:
    b LoopForever
 80016a6:	e7fe      	b.n	80016a6 <LoopForever>
  ldr   r0, =_estack
 80016a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80016b4:	08005224 	.word	0x08005224
  ldr r2, =_sbss
 80016b8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80016bc:	200002d4 	.word	0x200002d4

080016c0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <ADC1_COMP_IRQHandler>
	...

080016c4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <HAL_Init+0x24>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_Init+0x24>)
 80016ce:	2110      	movs	r1, #16
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80016d4:	2000      	movs	r0, #0
 80016d6:	f000 f809 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016da:	f7ff fb25 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	40022000 	.word	0x40022000

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_InitTick+0x5c>)
 80016f6:	681c      	ldr	r4, [r3, #0]
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <HAL_InitTick+0x60>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	0019      	movs	r1, r3
 80016fe:	23fa      	movs	r3, #250	; 0xfa
 8001700:	0098      	lsls	r0, r3, #2
 8001702:	f7fe fd01 	bl	8000108 <__udivsi3>
 8001706:	0003      	movs	r3, r0
 8001708:	0019      	movs	r1, r3
 800170a:	0020      	movs	r0, r4
 800170c:	f7fe fcfc 	bl	8000108 <__udivsi3>
 8001710:	0003      	movs	r3, r0
 8001712:	0018      	movs	r0, r3
 8001714:	f000 f92d 	bl	8001972 <HAL_SYSTICK_Config>
 8001718:	1e03      	subs	r3, r0, #0
 800171a:	d001      	beq.n	8001720 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e00f      	b.n	8001740 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d80b      	bhi.n	800173e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	2301      	movs	r3, #1
 800172a:	425b      	negs	r3, r3
 800172c:	2200      	movs	r2, #0
 800172e:	0018      	movs	r0, r3
 8001730:	f000 f8fa 	bl	8001928 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_InitTick+0x64>)
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b003      	add	sp, #12
 8001746:	bd90      	pop	{r4, r7, pc}
 8001748:	20000004 	.word	0x20000004
 800174c:	2000000c 	.word	0x2000000c
 8001750:	20000008 	.word	0x20000008

08001754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_IncTick+0x1c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	001a      	movs	r2, r3
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_IncTick+0x20>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	18d2      	adds	r2, r2, r3
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <HAL_IncTick+0x20>)
 8001766:	601a      	str	r2, [r3, #0]
}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	2000000c 	.word	0x2000000c
 8001774:	200002cc 	.word	0x200002cc

08001778 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b02      	ldr	r3, [pc, #8]	; (8001788 <HAL_GetTick+0x10>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	0018      	movs	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	200002cc 	.word	0x200002cc

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff fff0 	bl	8001778 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3301      	adds	r3, #1
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_Delay+0x40>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	001a      	movs	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	189b      	adds	r3, r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	f7ff ffe0 	bl	8001778 <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b004      	add	sp, #16
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000000c 	.word	0x2000000c

080017d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	0002      	movs	r2, r0
 80017d8:	1dfb      	adds	r3, r7, #7
 80017da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	1dfb      	adds	r3, r7, #7
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b7f      	cmp	r3, #127	; 0x7f
 80017e2:	d809      	bhi.n	80017f8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e4:	1dfb      	adds	r3, r7, #7
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	001a      	movs	r2, r3
 80017ea:	231f      	movs	r3, #31
 80017ec:	401a      	ands	r2, r3
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__NVIC_EnableIRQ+0x30>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	4091      	lsls	r1, r2
 80017f4:	000a      	movs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]
  }
}
 80017f8:	46c0      	nop			; (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b002      	add	sp, #8
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	0002      	movs	r2, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b7f      	cmp	r3, #127	; 0x7f
 8001818:	d828      	bhi.n	800186c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800181a:	4a2f      	ldr	r2, [pc, #188]	; (80018d8 <__NVIC_SetPriority+0xd4>)
 800181c:	1dfb      	adds	r3, r7, #7
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b25b      	sxtb	r3, r3
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	33c0      	adds	r3, #192	; 0xc0
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	589b      	ldr	r3, [r3, r2]
 800182a:	1dfa      	adds	r2, r7, #7
 800182c:	7812      	ldrb	r2, [r2, #0]
 800182e:	0011      	movs	r1, r2
 8001830:	2203      	movs	r2, #3
 8001832:	400a      	ands	r2, r1
 8001834:	00d2      	lsls	r2, r2, #3
 8001836:	21ff      	movs	r1, #255	; 0xff
 8001838:	4091      	lsls	r1, r2
 800183a:	000a      	movs	r2, r1
 800183c:	43d2      	mvns	r2, r2
 800183e:	401a      	ands	r2, r3
 8001840:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	019b      	lsls	r3, r3, #6
 8001846:	22ff      	movs	r2, #255	; 0xff
 8001848:	401a      	ands	r2, r3
 800184a:	1dfb      	adds	r3, r7, #7
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	0018      	movs	r0, r3
 8001850:	2303      	movs	r3, #3
 8001852:	4003      	ands	r3, r0
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001858:	481f      	ldr	r0, [pc, #124]	; (80018d8 <__NVIC_SetPriority+0xd4>)
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b25b      	sxtb	r3, r3
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	430a      	orrs	r2, r1
 8001864:	33c0      	adds	r3, #192	; 0xc0
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800186a:	e031      	b.n	80018d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800186c:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <__NVIC_SetPriority+0xd8>)
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	0019      	movs	r1, r3
 8001874:	230f      	movs	r3, #15
 8001876:	400b      	ands	r3, r1
 8001878:	3b08      	subs	r3, #8
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3306      	adds	r3, #6
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	18d3      	adds	r3, r2, r3
 8001882:	3304      	adds	r3, #4
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	1dfa      	adds	r2, r7, #7
 8001888:	7812      	ldrb	r2, [r2, #0]
 800188a:	0011      	movs	r1, r2
 800188c:	2203      	movs	r2, #3
 800188e:	400a      	ands	r2, r1
 8001890:	00d2      	lsls	r2, r2, #3
 8001892:	21ff      	movs	r1, #255	; 0xff
 8001894:	4091      	lsls	r1, r2
 8001896:	000a      	movs	r2, r1
 8001898:	43d2      	mvns	r2, r2
 800189a:	401a      	ands	r2, r3
 800189c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	019b      	lsls	r3, r3, #6
 80018a2:	22ff      	movs	r2, #255	; 0xff
 80018a4:	401a      	ands	r2, r3
 80018a6:	1dfb      	adds	r3, r7, #7
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	0018      	movs	r0, r3
 80018ac:	2303      	movs	r3, #3
 80018ae:	4003      	ands	r3, r0
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b4:	4809      	ldr	r0, [pc, #36]	; (80018dc <__NVIC_SetPriority+0xd8>)
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	001c      	movs	r4, r3
 80018bc:	230f      	movs	r3, #15
 80018be:	4023      	ands	r3, r4
 80018c0:	3b08      	subs	r3, #8
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	430a      	orrs	r2, r1
 80018c6:	3306      	adds	r3, #6
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	18c3      	adds	r3, r0, r3
 80018cc:	3304      	adds	r3, #4
 80018ce:	601a      	str	r2, [r3, #0]
}
 80018d0:	46c0      	nop			; (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b003      	add	sp, #12
 80018d6:	bd90      	pop	{r4, r7, pc}
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <SysTick_Config+0x40>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e010      	b.n	8001918 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <SysTick_Config+0x44>)
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	3a01      	subs	r2, #1
 80018fc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	2301      	movs	r3, #1
 8001900:	425b      	negs	r3, r3
 8001902:	2103      	movs	r1, #3
 8001904:	0018      	movs	r0, r3
 8001906:	f7ff ff7d 	bl	8001804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <SysTick_Config+0x44>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x44>)
 8001912:	2207      	movs	r2, #7
 8001914:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001916:	2300      	movs	r3, #0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}
 8001920:	00ffffff 	.word	0x00ffffff
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	210f      	movs	r1, #15
 8001934:	187b      	adds	r3, r7, r1
 8001936:	1c02      	adds	r2, r0, #0
 8001938:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	187b      	adds	r3, r7, r1
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b25b      	sxtb	r3, r3
 8001942:	0011      	movs	r1, r2
 8001944:	0018      	movs	r0, r3
 8001946:	f7ff ff5d 	bl	8001804 <__NVIC_SetPriority>
}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	b004      	add	sp, #16
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	0002      	movs	r2, r0
 800195a:	1dfb      	adds	r3, r7, #7
 800195c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff ff33 	bl	80017d0 <__NVIC_EnableIRQ>
}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	b002      	add	sp, #8
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	0018      	movs	r0, r3
 800197e:	f7ff ffaf 	bl	80018e0 <SysTick_Config>
 8001982:	0003      	movs	r3, r0
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b002      	add	sp, #8
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199a:	e14f      	b.n	8001c3c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2101      	movs	r1, #1
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4091      	lsls	r1, r2
 80019a6:	000a      	movs	r2, r1
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d100      	bne.n	80019b4 <HAL_GPIO_Init+0x28>
 80019b2:	e140      	b.n	8001c36 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x38>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b12      	cmp	r3, #18
 80019c2:	d123      	bne.n	8001a0c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	0092      	lsls	r2, r2, #2
 80019ce:	58d3      	ldr	r3, [r2, r3]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2207      	movs	r2, #7
 80019d6:	4013      	ands	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	409a      	lsls	r2, r3
 80019de:	0013      	movs	r3, r2
 80019e0:	43da      	mvns	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2107      	movs	r1, #7
 80019f0:	400b      	ands	r3, r1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	409a      	lsls	r2, r3
 80019f6:	0013      	movs	r3, r2
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	6939      	ldr	r1, [r7, #16]
 8001a0a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	0013      	movs	r3, r2
 8001a1c:	43da      	mvns	r2, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2203      	movs	r2, #3
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	409a      	lsls	r2, r3
 8001a32:	0013      	movs	r3, r2
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d00b      	beq.n	8001a60 <HAL_GPIO_Init+0xd4>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d007      	beq.n	8001a60 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a54:	2b11      	cmp	r3, #17
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b12      	cmp	r3, #18
 8001a5e:	d130      	bne.n	8001ac2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	0013      	movs	r3, r2
 8001a70:	43da      	mvns	r2, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	409a      	lsls	r2, r3
 8001a82:	0013      	movs	r3, r2
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a96:	2201      	movs	r2, #1
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	0013      	movs	r3, r2
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	2201      	movs	r2, #1
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	0013      	movs	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	0013      	movs	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	055b      	lsls	r3, r3, #21
 8001afa:	4013      	ands	r3, r2
 8001afc:	d100      	bne.n	8001b00 <HAL_GPIO_Init+0x174>
 8001afe:	e09a      	b.n	8001c36 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b00:	4b54      	ldr	r3, [pc, #336]	; (8001c54 <HAL_GPIO_Init+0x2c8>)
 8001b02:	699a      	ldr	r2, [r3, #24]
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_GPIO_Init+0x2c8>)
 8001b06:	2101      	movs	r1, #1
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	619a      	str	r2, [r3, #24]
 8001b0c:	4b51      	ldr	r3, [pc, #324]	; (8001c54 <HAL_GPIO_Init+0x2c8>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2201      	movs	r2, #1
 8001b12:	4013      	ands	r3, r2
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b18:	4a4f      	ldr	r2, [pc, #316]	; (8001c58 <HAL_GPIO_Init+0x2cc>)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	589b      	ldr	r3, [r3, r2]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	409a      	lsls	r2, r3
 8001b32:	0013      	movs	r3, r2
 8001b34:	43da      	mvns	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	2390      	movs	r3, #144	; 0x90
 8001b40:	05db      	lsls	r3, r3, #23
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0x1e2>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a44      	ldr	r2, [pc, #272]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00d      	beq.n	8001b6a <HAL_GPIO_Init+0x1de>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a43      	ldr	r2, [pc, #268]	; (8001c60 <HAL_GPIO_Init+0x2d4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <HAL_GPIO_Init+0x1da>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a42      	ldr	r2, [pc, #264]	; (8001c64 <HAL_GPIO_Init+0x2d8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_GPIO_Init+0x1d6>
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x1e4>
 8001b62:	2305      	movs	r3, #5
 8001b64:	e004      	b.n	8001b70 <HAL_GPIO_Init+0x1e4>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_Init+0x1e4>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_Init+0x1e4>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	2103      	movs	r1, #3
 8001b74:	400a      	ands	r2, r1
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	4093      	lsls	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b80:	4935      	ldr	r1, [pc, #212]	; (8001c58 <HAL_GPIO_Init+0x2cc>)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3302      	adds	r3, #2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b8e:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43da      	mvns	r2, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	025b      	lsls	r3, r3, #9
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43da      	mvns	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	029b      	lsls	r3, r3, #10
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be2:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43da      	mvns	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	035b      	lsls	r3, r3, #13
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43da      	mvns	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	039b      	lsls	r3, r3, #14
 8001c24:	4013      	ands	r3, r2
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	40da      	lsrs	r2, r3
 8001c44:	1e13      	subs	r3, r2, #0
 8001c46:	d000      	beq.n	8001c4a <HAL_GPIO_Init+0x2be>
 8001c48:	e6a8      	b.n	800199c <HAL_GPIO_Init+0x10>
  } 
}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b006      	add	sp, #24
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	48000400 	.word	0x48000400
 8001c60:	48000800 	.word	0x48000800
 8001c64:	48000c00 	.word	0x48000c00
 8001c68:	40010400 	.word	0x40010400

08001c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	0008      	movs	r0, r1
 8001c76:	0011      	movs	r1, r2
 8001c78:	1cbb      	adds	r3, r7, #2
 8001c7a:	1c02      	adds	r2, r0, #0
 8001c7c:	801a      	strh	r2, [r3, #0]
 8001c7e:	1c7b      	adds	r3, r7, #1
 8001c80:	1c0a      	adds	r2, r1, #0
 8001c82:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c84:	1c7b      	adds	r3, r7, #1
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c8c:	1cbb      	adds	r3, r7, #2
 8001c8e:	881a      	ldrh	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c94:	e003      	b.n	8001c9e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c96:	1cbb      	adds	r3, r7, #2
 8001c98:	881a      	ldrh	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b002      	add	sp, #8
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	0002      	movs	r2, r0
 8001cb0:	1dbb      	adds	r3, r7, #6
 8001cb2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	1dba      	adds	r2, r7, #6
 8001cba:	8812      	ldrh	r2, [r2, #0]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d008      	beq.n	8001cd2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001cc2:	1dba      	adds	r2, r7, #6
 8001cc4:	8812      	ldrh	r2, [r2, #0]
 8001cc6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cc8:	1dbb      	adds	r3, r7, #6
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 f807 	bl	8001ce0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b002      	add	sp, #8
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	40010400 	.word	0x40010400

08001ce0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	1dbb      	adds	r3, r7, #6
 8001cea:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e303      	b.n	800230e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d100      	bne.n	8001d12 <HAL_RCC_OscConfig+0x1e>
 8001d10:	e08d      	b.n	8001e2e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d12:	4bc4      	ldr	r3, [pc, #784]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	220c      	movs	r2, #12
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d00e      	beq.n	8001d3c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d1e:	4bc1      	ldr	r3, [pc, #772]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	220c      	movs	r2, #12
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d116      	bne.n	8001d58 <HAL_RCC_OscConfig+0x64>
 8001d2a:	4bbe      	ldr	r3, [pc, #760]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	025b      	lsls	r3, r3, #9
 8001d32:	401a      	ands	r2, r3
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	025b      	lsls	r3, r3, #9
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d10d      	bne.n	8001d58 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	4bb9      	ldr	r3, [pc, #740]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	4013      	ands	r3, r2
 8001d46:	d100      	bne.n	8001d4a <HAL_RCC_OscConfig+0x56>
 8001d48:	e070      	b.n	8001e2c <HAL_RCC_OscConfig+0x138>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d000      	beq.n	8001d54 <HAL_RCC_OscConfig+0x60>
 8001d52:	e06b      	b.n	8001e2c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e2da      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_OscConfig+0x7c>
 8001d60:	4bb0      	ldr	r3, [pc, #704]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4baf      	ldr	r3, [pc, #700]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0249      	lsls	r1, r1, #9
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	e02f      	b.n	8001dd0 <HAL_RCC_OscConfig+0xdc>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10c      	bne.n	8001d92 <HAL_RCC_OscConfig+0x9e>
 8001d78:	4baa      	ldr	r3, [pc, #680]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4ba9      	ldr	r3, [pc, #676]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d7e:	49aa      	ldr	r1, [pc, #680]	; (8002028 <HAL_RCC_OscConfig+0x334>)
 8001d80:	400a      	ands	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	4ba7      	ldr	r3, [pc, #668]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4ba6      	ldr	r3, [pc, #664]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d8a:	49a8      	ldr	r1, [pc, #672]	; (800202c <HAL_RCC_OscConfig+0x338>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	e01e      	b.n	8001dd0 <HAL_RCC_OscConfig+0xdc>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d10e      	bne.n	8001db8 <HAL_RCC_OscConfig+0xc4>
 8001d9a:	4ba2      	ldr	r3, [pc, #648]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4ba1      	ldr	r3, [pc, #644]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	02c9      	lsls	r1, r1, #11
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	4b9e      	ldr	r3, [pc, #632]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b9d      	ldr	r3, [pc, #628]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001dae:	2180      	movs	r1, #128	; 0x80
 8001db0:	0249      	lsls	r1, r1, #9
 8001db2:	430a      	orrs	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_OscConfig+0xdc>
 8001db8:	4b9a      	ldr	r3, [pc, #616]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b99      	ldr	r3, [pc, #612]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001dbe:	499a      	ldr	r1, [pc, #616]	; (8002028 <HAL_RCC_OscConfig+0x334>)
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	4b97      	ldr	r3, [pc, #604]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b96      	ldr	r3, [pc, #600]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001dca:	4998      	ldr	r1, [pc, #608]	; (800202c <HAL_RCC_OscConfig+0x338>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d014      	beq.n	8001e02 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fcce 	bl	8001778 <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de2:	f7ff fcc9 	bl	8001778 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b64      	cmp	r3, #100	; 0x64
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e28c      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df4:	4b8b      	ldr	r3, [pc, #556]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	029b      	lsls	r3, r3, #10
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0xee>
 8001e00:	e015      	b.n	8001e2e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fcb9 	bl	8001778 <HAL_GetTick>
 8001e06:	0003      	movs	r3, r0
 8001e08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fcb4 	bl	8001778 <HAL_GetTick>
 8001e10:	0002      	movs	r2, r0
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e277      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1e:	4b81      	ldr	r3, [pc, #516]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	029b      	lsls	r3, r3, #10
 8001e26:	4013      	ands	r3, r2
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x118>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2202      	movs	r2, #2
 8001e34:	4013      	ands	r3, r2
 8001e36:	d100      	bne.n	8001e3a <HAL_RCC_OscConfig+0x146>
 8001e38:	e069      	b.n	8001f0e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e3a:	4b7a      	ldr	r3, [pc, #488]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	220c      	movs	r2, #12
 8001e40:	4013      	ands	r3, r2
 8001e42:	d00b      	beq.n	8001e5c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e44:	4b77      	ldr	r3, [pc, #476]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	220c      	movs	r2, #12
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d11c      	bne.n	8001e8a <HAL_RCC_OscConfig+0x196>
 8001e50:	4b74      	ldr	r3, [pc, #464]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	025b      	lsls	r3, r3, #9
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d116      	bne.n	8001e8a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5c:	4b71      	ldr	r3, [pc, #452]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2202      	movs	r2, #2
 8001e62:	4013      	ands	r3, r2
 8001e64:	d005      	beq.n	8001e72 <HAL_RCC_OscConfig+0x17e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e24d      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e72:	4b6c      	ldr	r3, [pc, #432]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	22f8      	movs	r2, #248	; 0xf8
 8001e78:	4393      	bics	r3, r2
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	00da      	lsls	r2, r3, #3
 8001e82:	4b68      	ldr	r3, [pc, #416]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e88:	e041      	b.n	8001f0e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d024      	beq.n	8001edc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e92:	4b64      	ldr	r3, [pc, #400]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fc6b 	bl	8001778 <HAL_GetTick>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea8:	f7ff fc66 	bl	8001778 <HAL_GetTick>
 8001eac:	0002      	movs	r2, r0
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e229      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eba:	4b5a      	ldr	r3, [pc, #360]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d0f1      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec4:	4b57      	ldr	r3, [pc, #348]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	22f8      	movs	r2, #248	; 0xf8
 8001eca:	4393      	bics	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	00da      	lsls	r2, r3, #3
 8001ed4:	4b53      	ldr	r3, [pc, #332]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e018      	b.n	8001f0e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001edc:	4b51      	ldr	r3, [pc, #324]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b50      	ldr	r3, [pc, #320]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	438a      	bics	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fc46 	bl	8001778 <HAL_GetTick>
 8001eec:	0003      	movs	r3, r0
 8001eee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7ff fc41 	bl	8001778 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e204      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f04:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d1f1      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2208      	movs	r2, #8
 8001f14:	4013      	ands	r3, r2
 8001f16:	d036      	beq.n	8001f86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d019      	beq.n	8001f54 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f20:	4b40      	ldr	r3, [pc, #256]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f24:	4b3f      	ldr	r3, [pc, #252]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001f26:	2101      	movs	r1, #1
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2c:	f7ff fc24 	bl	8001778 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f36:	f7ff fc1f 	bl	8001778 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e1e2      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f48:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d0f1      	beq.n	8001f36 <HAL_RCC_OscConfig+0x242>
 8001f52:	e018      	b.n	8001f86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f54:	4b33      	ldr	r3, [pc, #204]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f58:	4b32      	ldr	r3, [pc, #200]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	438a      	bics	r2, r1
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f60:	f7ff fc0a 	bl	8001778 <HAL_GetTick>
 8001f64:	0003      	movs	r3, r0
 8001f66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6a:	f7ff fc05 	bl	8001778 <HAL_GetTick>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e1c8      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7c:	4b29      	ldr	r3, [pc, #164]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	2202      	movs	r2, #2
 8001f82:	4013      	ands	r3, r2
 8001f84:	d1f1      	bne.n	8001f6a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d100      	bne.n	8001f92 <HAL_RCC_OscConfig+0x29e>
 8001f90:	e0b6      	b.n	8002100 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f92:	231f      	movs	r3, #31
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	055b      	lsls	r3, r3, #21
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d111      	bne.n	8001fca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001fac:	2180      	movs	r1, #128	; 0x80
 8001fae:	0549      	lsls	r1, r1, #21
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	61da      	str	r2, [r3, #28]
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001fb6:	69da      	ldr	r2, [r3, #28]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	055b      	lsls	r3, r3, #21
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fc2:	231f      	movs	r3, #31
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fca:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_RCC_OscConfig+0x33c>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d11a      	bne.n	800200c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_RCC_OscConfig+0x33c>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_RCC_OscConfig+0x33c>)
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	0049      	lsls	r1, r1, #1
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff fbc8 	bl	8001778 <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fee:	f7ff fbc3 	bl	8001778 <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b64      	cmp	r3, #100	; 0x64
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e186      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_OscConfig+0x33c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4013      	ands	r3, r2
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d10f      	bne.n	8002034 <HAL_RCC_OscConfig+0x340>
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8002016:	6a1a      	ldr	r2, [r3, #32]
 8002018:	4b02      	ldr	r3, [pc, #8]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 800201a:	2101      	movs	r1, #1
 800201c:	430a      	orrs	r2, r1
 800201e:	621a      	str	r2, [r3, #32]
 8002020:	e036      	b.n	8002090 <HAL_RCC_OscConfig+0x39c>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	40021000 	.word	0x40021000
 8002028:	fffeffff 	.word	0xfffeffff
 800202c:	fffbffff 	.word	0xfffbffff
 8002030:	40007000 	.word	0x40007000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10c      	bne.n	8002056 <HAL_RCC_OscConfig+0x362>
 800203c:	4bb6      	ldr	r3, [pc, #728]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 800203e:	6a1a      	ldr	r2, [r3, #32]
 8002040:	4bb5      	ldr	r3, [pc, #724]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002042:	2101      	movs	r1, #1
 8002044:	438a      	bics	r2, r1
 8002046:	621a      	str	r2, [r3, #32]
 8002048:	4bb3      	ldr	r3, [pc, #716]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	4bb2      	ldr	r3, [pc, #712]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 800204e:	2104      	movs	r1, #4
 8002050:	438a      	bics	r2, r1
 8002052:	621a      	str	r2, [r3, #32]
 8002054:	e01c      	b.n	8002090 <HAL_RCC_OscConfig+0x39c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b05      	cmp	r3, #5
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x384>
 800205e:	4bae      	ldr	r3, [pc, #696]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002060:	6a1a      	ldr	r2, [r3, #32]
 8002062:	4bad      	ldr	r3, [pc, #692]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002064:	2104      	movs	r1, #4
 8002066:	430a      	orrs	r2, r1
 8002068:	621a      	str	r2, [r3, #32]
 800206a:	4bab      	ldr	r3, [pc, #684]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 800206c:	6a1a      	ldr	r2, [r3, #32]
 800206e:	4baa      	ldr	r3, [pc, #680]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002070:	2101      	movs	r1, #1
 8002072:	430a      	orrs	r2, r1
 8002074:	621a      	str	r2, [r3, #32]
 8002076:	e00b      	b.n	8002090 <HAL_RCC_OscConfig+0x39c>
 8002078:	4ba7      	ldr	r3, [pc, #668]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 800207a:	6a1a      	ldr	r2, [r3, #32]
 800207c:	4ba6      	ldr	r3, [pc, #664]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 800207e:	2101      	movs	r1, #1
 8002080:	438a      	bics	r2, r1
 8002082:	621a      	str	r2, [r3, #32]
 8002084:	4ba4      	ldr	r3, [pc, #656]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002086:	6a1a      	ldr	r2, [r3, #32]
 8002088:	4ba3      	ldr	r3, [pc, #652]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 800208a:	2104      	movs	r1, #4
 800208c:	438a      	bics	r2, r1
 800208e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d014      	beq.n	80020c2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002098:	f7ff fb6e 	bl	8001778 <HAL_GetTick>
 800209c:	0003      	movs	r3, r0
 800209e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a0:	e009      	b.n	80020b6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7ff fb69 	bl	8001778 <HAL_GetTick>
 80020a6:	0002      	movs	r2, r0
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	4a9b      	ldr	r2, [pc, #620]	; (800231c <HAL_RCC_OscConfig+0x628>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e12b      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b6:	4b98      	ldr	r3, [pc, #608]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	2202      	movs	r2, #2
 80020bc:	4013      	ands	r3, r2
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x3ae>
 80020c0:	e013      	b.n	80020ea <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7ff fb59 	bl	8001778 <HAL_GetTick>
 80020c6:	0003      	movs	r3, r0
 80020c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ca:	e009      	b.n	80020e0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020cc:	f7ff fb54 	bl	8001778 <HAL_GetTick>
 80020d0:	0002      	movs	r2, r0
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	4a91      	ldr	r2, [pc, #580]	; (800231c <HAL_RCC_OscConfig+0x628>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e116      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e0:	4b8d      	ldr	r3, [pc, #564]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	2202      	movs	r2, #2
 80020e6:	4013      	ands	r3, r2
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020ea:	231f      	movs	r3, #31
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d105      	bne.n	8002100 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f4:	4b88      	ldr	r3, [pc, #544]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 80020f6:	69da      	ldr	r2, [r3, #28]
 80020f8:	4b87      	ldr	r3, [pc, #540]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 80020fa:	4989      	ldr	r1, [pc, #548]	; (8002320 <HAL_RCC_OscConfig+0x62c>)
 80020fc:	400a      	ands	r2, r1
 80020fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2210      	movs	r2, #16
 8002106:	4013      	ands	r3, r2
 8002108:	d063      	beq.n	80021d2 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d12a      	bne.n	8002168 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002112:	4b81      	ldr	r3, [pc, #516]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002116:	4b80      	ldr	r3, [pc, #512]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002118:	2104      	movs	r1, #4
 800211a:	430a      	orrs	r2, r1
 800211c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800211e:	4b7e      	ldr	r3, [pc, #504]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002122:	4b7d      	ldr	r3, [pc, #500]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002124:	2101      	movs	r1, #1
 8002126:	430a      	orrs	r2, r1
 8002128:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212a:	f7ff fb25 	bl	8001778 <HAL_GetTick>
 800212e:	0003      	movs	r3, r0
 8002130:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002134:	f7ff fb20 	bl	8001778 <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e0e3      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002146:	4b74      	ldr	r3, [pc, #464]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214a:	2202      	movs	r2, #2
 800214c:	4013      	ands	r3, r2
 800214e:	d0f1      	beq.n	8002134 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002150:	4b71      	ldr	r3, [pc, #452]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002154:	22f8      	movs	r2, #248	; 0xf8
 8002156:	4393      	bics	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	00da      	lsls	r2, r3, #3
 8002160:	4b6d      	ldr	r3, [pc, #436]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002162:	430a      	orrs	r2, r1
 8002164:	635a      	str	r2, [r3, #52]	; 0x34
 8002166:	e034      	b.n	80021d2 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	3305      	adds	r3, #5
 800216e:	d111      	bne.n	8002194 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002170:	4b69      	ldr	r3, [pc, #420]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002174:	4b68      	ldr	r3, [pc, #416]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002176:	2104      	movs	r1, #4
 8002178:	438a      	bics	r2, r1
 800217a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800217c:	4b66      	ldr	r3, [pc, #408]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 800217e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002180:	22f8      	movs	r2, #248	; 0xf8
 8002182:	4393      	bics	r3, r2
 8002184:	0019      	movs	r1, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	00da      	lsls	r2, r3, #3
 800218c:	4b62      	ldr	r3, [pc, #392]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 800218e:	430a      	orrs	r2, r1
 8002190:	635a      	str	r2, [r3, #52]	; 0x34
 8002192:	e01e      	b.n	80021d2 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002194:	4b60      	ldr	r3, [pc, #384]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002198:	4b5f      	ldr	r3, [pc, #380]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 800219a:	2104      	movs	r1, #4
 800219c:	430a      	orrs	r2, r1
 800219e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80021a0:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 80021a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a4:	4b5c      	ldr	r3, [pc, #368]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 80021a6:	2101      	movs	r1, #1
 80021a8:	438a      	bics	r2, r1
 80021aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7ff fae4 	bl	8001778 <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021b6:	f7ff fadf 	bl	8001778 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0a2      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80021c8:	4b53      	ldr	r3, [pc, #332]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 80021ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021cc:	2202      	movs	r2, #2
 80021ce:	4013      	ands	r3, r2
 80021d0:	d1f1      	bne.n	80021b6 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d100      	bne.n	80021dc <HAL_RCC_OscConfig+0x4e8>
 80021da:	e097      	b.n	800230c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021dc:	4b4e      	ldr	r3, [pc, #312]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	220c      	movs	r2, #12
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d100      	bne.n	80021ea <HAL_RCC_OscConfig+0x4f6>
 80021e8:	e06b      	b.n	80022c2 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d14c      	bne.n	800228c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f2:	4b49      	ldr	r3, [pc, #292]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4b48      	ldr	r3, [pc, #288]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 80021f8:	494a      	ldr	r1, [pc, #296]	; (8002324 <HAL_RCC_OscConfig+0x630>)
 80021fa:	400a      	ands	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fabb 	bl	8001778 <HAL_GetTick>
 8002202:	0003      	movs	r3, r0
 8002204:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7ff fab6 	bl	8001778 <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e079      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221a:	4b3f      	ldr	r3, [pc, #252]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	049b      	lsls	r3, r3, #18
 8002222:	4013      	ands	r3, r2
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002226:	4b3c      	ldr	r3, [pc, #240]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	220f      	movs	r2, #15
 800222c:	4393      	bics	r3, r2
 800222e:	0019      	movs	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002234:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002236:	430a      	orrs	r2, r1
 8002238:	62da      	str	r2, [r3, #44]	; 0x2c
 800223a:	4b37      	ldr	r3, [pc, #220]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4a3a      	ldr	r2, [pc, #232]	; (8002328 <HAL_RCC_OscConfig+0x634>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	431a      	orrs	r2, r3
 800224e:	4b32      	ldr	r3, [pc, #200]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002250:	430a      	orrs	r2, r1
 8002252:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002254:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 800225a:	2180      	movs	r1, #128	; 0x80
 800225c:	0449      	lsls	r1, r1, #17
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7ff fa89 	bl	8001778 <HAL_GetTick>
 8002266:	0003      	movs	r3, r0
 8002268:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226c:	f7ff fa84 	bl	8001778 <HAL_GetTick>
 8002270:	0002      	movs	r2, r0
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e047      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	049b      	lsls	r3, r3, #18
 8002286:	4013      	ands	r3, r2
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x578>
 800228a:	e03f      	b.n	800230c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 8002292:	4924      	ldr	r1, [pc, #144]	; (8002324 <HAL_RCC_OscConfig+0x630>)
 8002294:	400a      	ands	r2, r1
 8002296:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff fa6e 	bl	8001778 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a2:	f7ff fa69 	bl	8001778 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e02c      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	049b      	lsls	r3, r3, #18
 80022bc:	4013      	ands	r3, r2
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x5ae>
 80022c0:	e024      	b.n	800230c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e01f      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80022d4:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_RCC_OscConfig+0x624>)
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	025b      	lsls	r3, r3, #9
 80022e0:	401a      	ands	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d10e      	bne.n	8002308 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	220f      	movs	r2, #15
 80022ee:	401a      	ands	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d107      	bne.n	8002308 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	23f0      	movs	r3, #240	; 0xf0
 80022fc:	039b      	lsls	r3, r3, #14
 80022fe:	401a      	ands	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b008      	add	sp, #32
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	40021000 	.word	0x40021000
 800231c:	00001388 	.word	0x00001388
 8002320:	efffffff 	.word	0xefffffff
 8002324:	feffffff 	.word	0xfeffffff
 8002328:	ffc2ffff 	.word	0xffc2ffff

0800232c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b3      	b.n	80024a8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b5b      	ldr	r3, [pc, #364]	; (80024b0 <HAL_RCC_ClockConfig+0x184>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2201      	movs	r2, #1
 8002346:	4013      	ands	r3, r2
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d911      	bls.n	8002372 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b58      	ldr	r3, [pc, #352]	; (80024b0 <HAL_RCC_ClockConfig+0x184>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2201      	movs	r2, #1
 8002354:	4393      	bics	r3, r2
 8002356:	0019      	movs	r1, r3
 8002358:	4b55      	ldr	r3, [pc, #340]	; (80024b0 <HAL_RCC_ClockConfig+0x184>)
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002360:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_RCC_ClockConfig+0x184>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2201      	movs	r2, #1
 8002366:	4013      	ands	r3, r2
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d001      	beq.n	8002372 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e09a      	b.n	80024a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2202      	movs	r2, #2
 8002378:	4013      	ands	r3, r2
 800237a:	d015      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2204      	movs	r2, #4
 8002382:	4013      	ands	r3, r2
 8002384:	d006      	beq.n	8002394 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002386:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <HAL_RCC_ClockConfig+0x188>)
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4b4a      	ldr	r3, [pc, #296]	; (80024b4 <HAL_RCC_ClockConfig+0x188>)
 800238c:	21e0      	movs	r1, #224	; 0xe0
 800238e:	00c9      	lsls	r1, r1, #3
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002394:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <HAL_RCC_ClockConfig+0x188>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	22f0      	movs	r2, #240	; 0xf0
 800239a:	4393      	bics	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	4b44      	ldr	r3, [pc, #272]	; (80024b4 <HAL_RCC_ClockConfig+0x188>)
 80023a4:	430a      	orrs	r2, r1
 80023a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2201      	movs	r2, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	d040      	beq.n	8002434 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b3e      	ldr	r3, [pc, #248]	; (80024b4 <HAL_RCC_ClockConfig+0x188>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	029b      	lsls	r3, r3, #10
 80023c2:	4013      	ands	r3, r2
 80023c4:	d114      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e06e      	b.n	80024a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d2:	4b38      	ldr	r3, [pc, #224]	; (80024b4 <HAL_RCC_ClockConfig+0x188>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	049b      	lsls	r3, r3, #18
 80023da:	4013      	ands	r3, r2
 80023dc:	d108      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e062      	b.n	80024a8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e2:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <HAL_RCC_ClockConfig+0x188>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2202      	movs	r2, #2
 80023e8:	4013      	ands	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e05b      	b.n	80024a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f0:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <HAL_RCC_ClockConfig+0x188>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2203      	movs	r2, #3
 80023f6:	4393      	bics	r3, r2
 80023f8:	0019      	movs	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <HAL_RCC_ClockConfig+0x188>)
 8002400:	430a      	orrs	r2, r1
 8002402:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002404:	f7ff f9b8 	bl	8001778 <HAL_GetTick>
 8002408:	0003      	movs	r3, r0
 800240a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240c:	e009      	b.n	8002422 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240e:	f7ff f9b3 	bl	8001778 <HAL_GetTick>
 8002412:	0002      	movs	r2, r0
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	4a27      	ldr	r2, [pc, #156]	; (80024b8 <HAL_RCC_ClockConfig+0x18c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e042      	b.n	80024a8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <HAL_RCC_ClockConfig+0x188>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	220c      	movs	r2, #12
 8002428:	401a      	ands	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	429a      	cmp	r2, r3
 8002432:	d1ec      	bne.n	800240e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002434:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <HAL_RCC_ClockConfig+0x184>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2201      	movs	r2, #1
 800243a:	4013      	ands	r3, r2
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d211      	bcs.n	8002466 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_RCC_ClockConfig+0x184>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2201      	movs	r2, #1
 8002448:	4393      	bics	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_RCC_ClockConfig+0x184>)
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002454:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <HAL_RCC_ClockConfig+0x184>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2201      	movs	r2, #1
 800245a:	4013      	ands	r3, r2
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d001      	beq.n	8002466 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e020      	b.n	80024a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2204      	movs	r2, #4
 800246c:	4013      	ands	r3, r2
 800246e:	d009      	beq.n	8002484 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002470:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <HAL_RCC_ClockConfig+0x188>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a11      	ldr	r2, [pc, #68]	; (80024bc <HAL_RCC_ClockConfig+0x190>)
 8002476:	4013      	ands	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <HAL_RCC_ClockConfig+0x188>)
 8002480:	430a      	orrs	r2, r1
 8002482:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002484:	f000 f820 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8002488:	0001      	movs	r1, r0
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <HAL_RCC_ClockConfig+0x188>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	220f      	movs	r2, #15
 8002492:	4013      	ands	r3, r2
 8002494:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <HAL_RCC_ClockConfig+0x194>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	000a      	movs	r2, r1
 800249a:	40da      	lsrs	r2, r3
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_RCC_ClockConfig+0x198>)
 800249e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7ff f923 	bl	80016ec <HAL_InitTick>
  
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b004      	add	sp, #16
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40022000 	.word	0x40022000
 80024b4:	40021000 	.word	0x40021000
 80024b8:	00001388 	.word	0x00001388
 80024bc:	fffff8ff 	.word	0xfffff8ff
 80024c0:	08004f98 	.word	0x08004f98
 80024c4:	20000004 	.word	0x20000004

080024c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b08f      	sub	sp, #60	; 0x3c
 80024cc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80024ce:	2314      	movs	r3, #20
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	4a2b      	ldr	r2, [pc, #172]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024d6:	c313      	stmia	r3!, {r0, r1, r4}
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	4a29      	ldr	r2, [pc, #164]	; (8002584 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024e2:	c313      	stmia	r3!, {r0, r1, r4}
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ec:	2300      	movs	r3, #0
 80024ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f0:	2300      	movs	r3, #0
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
 80024f4:	2300      	movs	r3, #0
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80024fc:	4b22      	ldr	r3, [pc, #136]	; (8002588 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002504:	220c      	movs	r2, #12
 8002506:	4013      	ands	r3, r2
 8002508:	2b04      	cmp	r3, #4
 800250a:	d002      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x4a>
 800250c:	2b08      	cmp	r3, #8
 800250e:	d003      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x50>
 8002510:	e02d      	b.n	800256e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002514:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002516:	e02d      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251a:	0c9b      	lsrs	r3, r3, #18
 800251c:	220f      	movs	r2, #15
 800251e:	4013      	ands	r3, r2
 8002520:	2214      	movs	r2, #20
 8002522:	18ba      	adds	r2, r7, r2
 8002524:	5cd3      	ldrb	r3, [r2, r3]
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002528:	4b17      	ldr	r3, [pc, #92]	; (8002588 <HAL_RCC_GetSysClockFreq+0xc0>)
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	220f      	movs	r2, #15
 800252e:	4013      	ands	r3, r2
 8002530:	1d3a      	adds	r2, r7, #4
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	025b      	lsls	r3, r3, #9
 800253c:	4013      	ands	r3, r2
 800253e:	d009      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002542:	4812      	ldr	r0, [pc, #72]	; (800258c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002544:	f7fd fde0 	bl	8000108 <__udivsi3>
 8002548:	0003      	movs	r3, r0
 800254a:	001a      	movs	r2, r3
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	4353      	muls	r3, r2
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
 8002552:	e009      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002556:	000a      	movs	r2, r1
 8002558:	0152      	lsls	r2, r2, #5
 800255a:	1a52      	subs	r2, r2, r1
 800255c:	0193      	lsls	r3, r2, #6
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	185b      	adds	r3, r3, r1
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800256c:	e002      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800256e:	4b07      	ldr	r3, [pc, #28]	; (800258c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002570:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002572:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b00f      	add	sp, #60	; 0x3c
 800257c:	bd90      	pop	{r4, r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	08004f78 	.word	0x08004f78
 8002584:	08004f88 	.word	0x08004f88
 8002588:	40021000 	.word	0x40021000
 800258c:	007a1200 	.word	0x007a1200

08002590 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e08a      	b.n	80026b8 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	225d      	movs	r2, #93	; 0x5d
 80025ac:	5c9b      	ldrb	r3, [r3, r2]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d107      	bne.n	80025c4 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	225c      	movs	r2, #92	; 0x5c
 80025b8:	2100      	movs	r1, #0
 80025ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	0018      	movs	r0, r3
 80025c0:	f7fe fb66 	bl	8000c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	225d      	movs	r2, #93	; 0x5d
 80025c8:	2102      	movs	r1, #2
 80025ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2140      	movs	r1, #64	; 0x40
 80025d8:	438a      	bics	r2, r1
 80025da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	23e0      	movs	r3, #224	; 0xe0
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d902      	bls.n	80025ee <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	e002      	b.n	80025f4 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	015b      	lsls	r3, r3, #5
 80025f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	23f0      	movs	r3, #240	; 0xf0
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d008      	beq.n	8002612 <HAL_SPI_Init+0x82>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	23e0      	movs	r3, #224	; 0xe0
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	429a      	cmp	r2, r3
 800260a:	d002      	beq.n	8002612 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10c      	bne.n	8002634 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	23e0      	movs	r3, #224	; 0xe0
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	429a      	cmp	r2, r3
 8002624:	d903      	bls.n	800262e <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2202      	movs	r2, #2
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
 800262c:	e002      	b.n	8002634 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6999      	ldr	r1, [r3, #24]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	400b      	ands	r3, r1
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	431a      	orrs	r2, r3
 8002662:	0011      	movs	r1, r2
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	2204      	movs	r2, #4
 8002678:	401a      	ands	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	431a      	orrs	r2, r3
 800268c:	0011      	movs	r1, r2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	430a      	orrs	r2, r1
 8002696:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4907      	ldr	r1, [pc, #28]	; (80026c0 <HAL_SPI_Init+0x130>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	225d      	movs	r2, #93	; 0x5d
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	0018      	movs	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b004      	add	sp, #16
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	fffff7ff 	.word	0xfffff7ff

080026c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e01e      	b.n	8002714 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	223d      	movs	r2, #61	; 0x3d
 80026da:	5c9b      	ldrb	r3, [r3, r2]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d107      	bne.n	80026f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	223c      	movs	r2, #60	; 0x3c
 80026e6:	2100      	movs	r1, #0
 80026e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7fe febd 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	223d      	movs	r2, #61	; 0x3d
 80026f6:	2102      	movs	r1, #2
 80026f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	0019      	movs	r1, r3
 8002704:	0010      	movs	r0, r2
 8002706:	f000 fbd1 	bl	8002eac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	223d      	movs	r2, #61	; 0x3d
 800270e:	2101      	movs	r1, #1
 8002710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b002      	add	sp, #8
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	223d      	movs	r2, #61	; 0x3d
 8002728:	2102      	movs	r1, #2
 800272a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2207      	movs	r2, #7
 8002734:	4013      	ands	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b06      	cmp	r3, #6
 800273c:	d007      	beq.n	800274e <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2101      	movs	r1, #1
 800274a:	430a      	orrs	r2, r1
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	223d      	movs	r2, #61	; 0x3d
 8002752:	2101      	movs	r1, #1
 8002754:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b004      	add	sp, #16
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2101      	movs	r1, #1
 8002774:	430a      	orrs	r2, r1
 8002776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2207      	movs	r2, #7
 8002780:	4013      	ands	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b06      	cmp	r3, #6
 8002788:	d007      	beq.n	800279a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2101      	movs	r1, #1
 8002796:	430a      	orrs	r2, r1
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	0018      	movs	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	b004      	add	sp, #16
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2101      	movs	r1, #1
 80027b8:	438a      	bics	r2, r1
 80027ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <HAL_TIM_Base_Stop_IT+0x4c>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	d10d      	bne.n	80027e4 <HAL_TIM_Base_Stop_IT+0x40>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <HAL_TIM_Base_Stop_IT+0x50>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	d107      	bne.n	80027e4 <HAL_TIM_Base_Stop_IT+0x40>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2101      	movs	r1, #1
 80027e0:	438a      	bics	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b002      	add	sp, #8
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	00001111 	.word	0x00001111
 80027f4:	00000444 	.word	0x00000444

080027f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e01e      	b.n	8002848 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	223d      	movs	r2, #61	; 0x3d
 800280e:	5c9b      	ldrb	r3, [r3, r2]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d107      	bne.n	8002826 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	223c      	movs	r2, #60	; 0x3c
 800281a:	2100      	movs	r1, #0
 800281c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0018      	movs	r0, r3
 8002822:	f7fe fd75 	bl	8001310 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	223d      	movs	r2, #61	; 0x3d
 800282a:	2102      	movs	r1, #2
 800282c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	0019      	movs	r1, r3
 8002838:	0010      	movs	r0, r2
 800283a:	f000 fb37 	bl	8002eac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	223d      	movs	r2, #61	; 0x3d
 8002842:	2101      	movs	r1, #1
 8002844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6839      	ldr	r1, [r7, #0]
 8002860:	2201      	movs	r2, #1
 8002862:	0018      	movs	r0, r3
 8002864:	f000 fd9e 	bl	80033a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <HAL_TIM_PWM_Start+0x88>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00e      	beq.n	8002890 <HAL_TIM_PWM_Start+0x40>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a19      	ldr	r2, [pc, #100]	; (80028dc <HAL_TIM_PWM_Start+0x8c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d009      	beq.n	8002890 <HAL_TIM_PWM_Start+0x40>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a17      	ldr	r2, [pc, #92]	; (80028e0 <HAL_TIM_PWM_Start+0x90>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d004      	beq.n	8002890 <HAL_TIM_PWM_Start+0x40>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a16      	ldr	r2, [pc, #88]	; (80028e4 <HAL_TIM_PWM_Start+0x94>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_TIM_PWM_Start+0x44>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <HAL_TIM_PWM_Start+0x46>
 8002894:	2300      	movs	r3, #0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	0209      	lsls	r1, r1, #8
 80028a8:	430a      	orrs	r2, r1
 80028aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2207      	movs	r2, #7
 80028b4:	4013      	ands	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d007      	beq.n	80028ce <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2101      	movs	r1, #1
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	0018      	movs	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b004      	add	sp, #16
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40014000 	.word	0x40014000
 80028e0:	40014400 	.word	0x40014400
 80028e4:	40014800 	.word	0x40014800

080028e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e07c      	b.n	80029f6 <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	223d      	movs	r2, #61	; 0x3d
 8002900:	5c9b      	ldrb	r3, [r3, r2]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	223c      	movs	r2, #60	; 0x3c
 800290c:	2100      	movs	r1, #0
 800290e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	0018      	movs	r0, r3
 8002914:	f7fe fd30 	bl	8001378 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	223d      	movs	r2, #61	; 0x3d
 800291c:	2102      	movs	r1, #2
 800291e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4935      	ldr	r1, [pc, #212]	; (8002a00 <HAL_TIM_Encoder_Init+0x118>)
 800292c:	400a      	ands	r2, r1
 800292e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3304      	adds	r3, #4
 8002938:	0019      	movs	r1, r3
 800293a:	0010      	movs	r0, r2
 800293c:	f000 fab6 	bl	8002eac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4a27      	ldr	r2, [pc, #156]	; (8002a04 <HAL_TIM_Encoder_Init+0x11c>)
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	4313      	orrs	r3, r2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4a22      	ldr	r2, [pc, #136]	; (8002a08 <HAL_TIM_Encoder_Init+0x120>)
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <HAL_TIM_Encoder_Init+0x124>)
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	4313      	orrs	r3, r2
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	011a      	lsls	r2, r3, #4
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	031b      	lsls	r3, r3, #12
 80029aa:	4313      	orrs	r3, r2
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2222      	movs	r2, #34	; 0x22
 80029b6:	4393      	bics	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2288      	movs	r2, #136	; 0x88
 80029be:	4393      	bics	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	4313      	orrs	r3, r2
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	223d      	movs	r2, #61	; 0x3d
 80029f0:	2101      	movs	r1, #1
 80029f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	0018      	movs	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b006      	add	sp, #24
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	ffffbff8 	.word	0xffffbff8
 8002a04:	fffffcfc 	.word	0xfffffcfc
 8002a08:	fffff3f3 	.word	0xfffff3f3
 8002a0c:	ffff0f0f 	.word	0xffff0f0f

08002a10 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_TIM_Encoder_Start_IT+0x16>
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d010      	beq.n	8002a46 <HAL_TIM_Encoder_Start_IT+0x36>
 8002a24:	e01f      	b.n	8002a66 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 fcb8 	bl	80033a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2102      	movs	r1, #2
 8002a40:	430a      	orrs	r2, r1
 8002a42:	60da      	str	r2, [r3, #12]
      break;
 8002a44:	e02e      	b.n	8002aa4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	2104      	movs	r1, #4
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 fca8 	bl	80033a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2104      	movs	r1, #4
 8002a60:	430a      	orrs	r2, r1
 8002a62:	60da      	str	r2, [r3, #12]
      break;
 8002a64:	e01e      	b.n	8002aa4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 fc98 	bl	80033a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 fc91 	bl	80033a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2104      	movs	r1, #4
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	60da      	str	r2, [r3, #12]
      break;
 8002aa2:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2101      	movs	r1, #1
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b002      	add	sp, #8
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2202      	movs	r2, #2
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d124      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2202      	movs	r2, #2
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d11d      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	4252      	negs	r2, r2
 8002aea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2203      	movs	r2, #3
 8002afa:	4013      	ands	r3, r2
 8002afc:	d004      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f000 f9bb 	bl	8002e7c <HAL_TIM_IC_CaptureCallback>
 8002b06:	e007      	b.n	8002b18 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 f9ae 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f000 f9ba 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2204      	movs	r2, #4
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d125      	bne.n	8002b78 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2204      	movs	r2, #4
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d11e      	bne.n	8002b78 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2205      	movs	r2, #5
 8002b40:	4252      	negs	r2, r2
 8002b42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699a      	ldr	r2, [r3, #24]
 8002b50:	23c0      	movs	r3, #192	; 0xc0
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4013      	ands	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 f98e 	bl	8002e7c <HAL_TIM_IC_CaptureCallback>
 8002b60:	e007      	b.n	8002b72 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0018      	movs	r0, r3
 8002b66:	f000 f981 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f000 f98d 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2208      	movs	r2, #8
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d124      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d11d      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2209      	movs	r2, #9
 8002b9a:	4252      	negs	r2, r2
 8002b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	2203      	movs	r2, #3
 8002bac:	4013      	ands	r3, r2
 8002bae:	d004      	beq.n	8002bba <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 f962 	bl	8002e7c <HAL_TIM_IC_CaptureCallback>
 8002bb8:	e007      	b.n	8002bca <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 f955 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f000 f961 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	2210      	movs	r2, #16
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b10      	cmp	r3, #16
 8002bdc:	d125      	bne.n	8002c2a <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2210      	movs	r2, #16
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b10      	cmp	r3, #16
 8002bea:	d11e      	bne.n	8002c2a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2211      	movs	r2, #17
 8002bf2:	4252      	negs	r2, r2
 8002bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69da      	ldr	r2, [r3, #28]
 8002c02:	23c0      	movs	r3, #192	; 0xc0
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4013      	ands	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 f935 	bl	8002e7c <HAL_TIM_IC_CaptureCallback>
 8002c12:	e007      	b.n	8002c24 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	0018      	movs	r0, r3
 8002c18:	f000 f928 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f000 f934 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2201      	movs	r2, #1
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d10f      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d108      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	4252      	negs	r2, r2
 8002c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 f902 	bl	8002e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2280      	movs	r2, #128	; 0x80
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b80      	cmp	r3, #128	; 0x80
 8002c64:	d10f      	bne.n	8002c86 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b80      	cmp	r3, #128	; 0x80
 8002c72:	d108      	bne.n	8002c86 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2281      	movs	r2, #129	; 0x81
 8002c7a:	4252      	negs	r2, r2
 8002c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	0018      	movs	r0, r3
 8002c82:	f000 fc77 	bl	8003574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	2240      	movs	r2, #64	; 0x40
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d10f      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2240      	movs	r2, #64	; 0x40
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b40      	cmp	r3, #64	; 0x40
 8002ca0:	d108      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2241      	movs	r2, #65	; 0x41
 8002ca8:	4252      	negs	r2, r2
 8002caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 f8f4 	bl	8002e9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d10f      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d108      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2221      	movs	r2, #33	; 0x21
 8002cd6:	4252      	negs	r2, r2
 8002cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f000 fc41 	bl	8003564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b002      	add	sp, #8
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	223c      	movs	r2, #60	; 0x3c
 8002cfc:	5c9b      	ldrb	r3, [r3, r2]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e0a4      	b.n	8002e50 <HAL_TIM_PWM_ConfigChannel+0x164>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	223c      	movs	r2, #60	; 0x3c
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	223d      	movs	r2, #61	; 0x3d
 8002d12:	2102      	movs	r1, #2
 8002d14:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d029      	beq.n	8002d70 <HAL_TIM_PWM_ConfigChannel+0x84>
 8002d1c:	d802      	bhi.n	8002d24 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002d22:	e08c      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d046      	beq.n	8002db6 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d065      	beq.n	8002df8 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002d2c:	e087      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	0011      	movs	r1, r2
 8002d36:	0018      	movs	r0, r3
 8002d38:	f000 f938 	bl	8002fac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2108      	movs	r1, #8
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2104      	movs	r1, #4
 8002d58:	438a      	bics	r2, r1
 8002d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6999      	ldr	r1, [r3, #24]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	619a      	str	r2, [r3, #24]
      break;
 8002d6e:	e066      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	0011      	movs	r1, r2
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 f99f 	bl	80030bc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2180      	movs	r1, #128	; 0x80
 8002d8a:	0109      	lsls	r1, r1, #4
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	492f      	ldr	r1, [pc, #188]	; (8002e58 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6999      	ldr	r1, [r3, #24]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	021a      	lsls	r2, r3, #8
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	619a      	str	r2, [r3, #24]
      break;
 8002db4:	e043      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	0011      	movs	r1, r2
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 fa00 	bl	80031c4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2108      	movs	r1, #8
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2104      	movs	r1, #4
 8002de0:	438a      	bics	r2, r1
 8002de2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69d9      	ldr	r1, [r3, #28]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	61da      	str	r2, [r3, #28]
      break;
 8002df6:	e022      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	0011      	movs	r1, r2
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 fa65 	bl	80032d0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	0109      	lsls	r1, r1, #4
 8002e14:	430a      	orrs	r2, r1
 8002e16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	490d      	ldr	r1, [pc, #52]	; (8002e58 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002e24:	400a      	ands	r2, r1
 8002e26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69d9      	ldr	r1, [r3, #28]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	021a      	lsls	r2, r3, #8
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	61da      	str	r2, [r3, #28]
      break;
 8002e3c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	223d      	movs	r2, #61	; 0x3d
 8002e42:	2101      	movs	r1, #1
 8002e44:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	223c      	movs	r2, #60	; 0x3c
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	0018      	movs	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b004      	add	sp, #16
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	fffffbff 	.word	0xfffffbff

08002e5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b002      	add	sp, #8
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b002      	add	sp, #8
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a34      	ldr	r2, [pc, #208]	; (8002f90 <TIM_Base_SetConfig+0xe4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d008      	beq.n	8002ed6 <TIM_Base_SetConfig+0x2a>
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	05db      	lsls	r3, r3, #23
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d003      	beq.n	8002ed6 <TIM_Base_SetConfig+0x2a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a30      	ldr	r2, [pc, #192]	; (8002f94 <TIM_Base_SetConfig+0xe8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d108      	bne.n	8002ee8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2270      	movs	r2, #112	; 0x70
 8002eda:	4393      	bics	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a29      	ldr	r2, [pc, #164]	; (8002f90 <TIM_Base_SetConfig+0xe4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d018      	beq.n	8002f22 <TIM_Base_SetConfig+0x76>
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	05db      	lsls	r3, r3, #23
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d013      	beq.n	8002f22 <TIM_Base_SetConfig+0x76>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <TIM_Base_SetConfig+0xe8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00f      	beq.n	8002f22 <TIM_Base_SetConfig+0x76>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a24      	ldr	r2, [pc, #144]	; (8002f98 <TIM_Base_SetConfig+0xec>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00b      	beq.n	8002f22 <TIM_Base_SetConfig+0x76>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a23      	ldr	r2, [pc, #140]	; (8002f9c <TIM_Base_SetConfig+0xf0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <TIM_Base_SetConfig+0x76>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <TIM_Base_SetConfig+0xf4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_Base_SetConfig+0x76>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a21      	ldr	r2, [pc, #132]	; (8002fa4 <TIM_Base_SetConfig+0xf8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d108      	bne.n	8002f34 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a20      	ldr	r2, [pc, #128]	; (8002fa8 <TIM_Base_SetConfig+0xfc>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2280      	movs	r2, #128	; 0x80
 8002f38:	4393      	bics	r3, r2
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <TIM_Base_SetConfig+0xe4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00b      	beq.n	8002f7a <TIM_Base_SetConfig+0xce>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a0d      	ldr	r2, [pc, #52]	; (8002f9c <TIM_Base_SetConfig+0xf0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <TIM_Base_SetConfig+0xce>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a0c      	ldr	r2, [pc, #48]	; (8002fa0 <TIM_Base_SetConfig+0xf4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d003      	beq.n	8002f7a <TIM_Base_SetConfig+0xce>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <TIM_Base_SetConfig+0xf8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d103      	bne.n	8002f82 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	615a      	str	r2, [r3, #20]
}
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b004      	add	sp, #16
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40002000 	.word	0x40002000
 8002f9c:	40014000 	.word	0x40014000
 8002fa0:	40014400 	.word	0x40014400
 8002fa4:	40014800 	.word	0x40014800
 8002fa8:	fffffcff 	.word	0xfffffcff

08002fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4393      	bics	r3, r2
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2270      	movs	r2, #112	; 0x70
 8002fda:	4393      	bics	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	4393      	bics	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	4393      	bics	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a27      	ldr	r2, [pc, #156]	; (80030a4 <TIM_OC1_SetConfig+0xf8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00b      	beq.n	8003022 <TIM_OC1_SetConfig+0x76>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a26      	ldr	r2, [pc, #152]	; (80030a8 <TIM_OC1_SetConfig+0xfc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d007      	beq.n	8003022 <TIM_OC1_SetConfig+0x76>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a25      	ldr	r2, [pc, #148]	; (80030ac <TIM_OC1_SetConfig+0x100>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d003      	beq.n	8003022 <TIM_OC1_SetConfig+0x76>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a24      	ldr	r2, [pc, #144]	; (80030b0 <TIM_OC1_SetConfig+0x104>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d10c      	bne.n	800303c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2208      	movs	r2, #8
 8003026:	4393      	bics	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2204      	movs	r2, #4
 8003038:	4393      	bics	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <TIM_OC1_SetConfig+0xf8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00b      	beq.n	800305c <TIM_OC1_SetConfig+0xb0>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <TIM_OC1_SetConfig+0xfc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d007      	beq.n	800305c <TIM_OC1_SetConfig+0xb0>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a17      	ldr	r2, [pc, #92]	; (80030ac <TIM_OC1_SetConfig+0x100>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d003      	beq.n	800305c <TIM_OC1_SetConfig+0xb0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <TIM_OC1_SetConfig+0x104>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d111      	bne.n	8003080 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <TIM_OC1_SetConfig+0x108>)
 8003060:	4013      	ands	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <TIM_OC1_SetConfig+0x10c>)
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	621a      	str	r2, [r3, #32]
}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	46bd      	mov	sp, r7
 800309e:	b006      	add	sp, #24
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40014000 	.word	0x40014000
 80030ac:	40014400 	.word	0x40014400
 80030b0:	40014800 	.word	0x40014800
 80030b4:	fffffeff 	.word	0xfffffeff
 80030b8:	fffffdff 	.word	0xfffffdff

080030bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	2210      	movs	r2, #16
 80030cc:	4393      	bics	r3, r2
 80030ce:	001a      	movs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4a2e      	ldr	r2, [pc, #184]	; (80031a4 <TIM_OC2_SetConfig+0xe8>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a2d      	ldr	r2, [pc, #180]	; (80031a8 <TIM_OC2_SetConfig+0xec>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2220      	movs	r2, #32
 8003106:	4393      	bics	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a24      	ldr	r2, [pc, #144]	; (80031ac <TIM_OC2_SetConfig+0xf0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d10d      	bne.n	800313a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2280      	movs	r2, #128	; 0x80
 8003122:	4393      	bics	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2240      	movs	r2, #64	; 0x40
 8003136:	4393      	bics	r3, r2
 8003138:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <TIM_OC2_SetConfig+0xf0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00b      	beq.n	800315a <TIM_OC2_SetConfig+0x9e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a1a      	ldr	r2, [pc, #104]	; (80031b0 <TIM_OC2_SetConfig+0xf4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d007      	beq.n	800315a <TIM_OC2_SetConfig+0x9e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a19      	ldr	r2, [pc, #100]	; (80031b4 <TIM_OC2_SetConfig+0xf8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d003      	beq.n	800315a <TIM_OC2_SetConfig+0x9e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <TIM_OC2_SetConfig+0xfc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d113      	bne.n	8003182 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4a17      	ldr	r2, [pc, #92]	; (80031bc <TIM_OC2_SetConfig+0x100>)
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <TIM_OC2_SetConfig+0x104>)
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	621a      	str	r2, [r3, #32]
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b006      	add	sp, #24
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	ffff8fff 	.word	0xffff8fff
 80031a8:	fffffcff 	.word	0xfffffcff
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40014000 	.word	0x40014000
 80031b4:	40014400 	.word	0x40014400
 80031b8:	40014800 	.word	0x40014800
 80031bc:	fffffbff 	.word	0xfffffbff
 80031c0:	fffff7ff 	.word	0xfffff7ff

080031c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a35      	ldr	r2, [pc, #212]	; (80032a8 <TIM_OC3_SetConfig+0xe4>)
 80031d4:	401a      	ands	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2270      	movs	r2, #112	; 0x70
 80031f0:	4393      	bics	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2203      	movs	r2, #3
 80031f8:	4393      	bics	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	4a28      	ldr	r2, [pc, #160]	; (80032ac <TIM_OC3_SetConfig+0xe8>)
 800320a:	4013      	ands	r3, r2
 800320c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <TIM_OC3_SetConfig+0xec>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d10d      	bne.n	800323e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	4a23      	ldr	r2, [pc, #140]	; (80032b4 <TIM_OC3_SetConfig+0xf0>)
 8003226:	4013      	ands	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	4a1f      	ldr	r2, [pc, #124]	; (80032b8 <TIM_OC3_SetConfig+0xf4>)
 800323a:	4013      	ands	r3, r2
 800323c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <TIM_OC3_SetConfig+0xec>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00b      	beq.n	800325e <TIM_OC3_SetConfig+0x9a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a1c      	ldr	r2, [pc, #112]	; (80032bc <TIM_OC3_SetConfig+0xf8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d007      	beq.n	800325e <TIM_OC3_SetConfig+0x9a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a1b      	ldr	r2, [pc, #108]	; (80032c0 <TIM_OC3_SetConfig+0xfc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d003      	beq.n	800325e <TIM_OC3_SetConfig+0x9a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <TIM_OC3_SetConfig+0x100>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d113      	bne.n	8003286 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4a19      	ldr	r2, [pc, #100]	; (80032c8 <TIM_OC3_SetConfig+0x104>)
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4a18      	ldr	r2, [pc, #96]	; (80032cc <TIM_OC3_SetConfig+0x108>)
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	621a      	str	r2, [r3, #32]
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b006      	add	sp, #24
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	fffffeff 	.word	0xfffffeff
 80032ac:	fffffdff 	.word	0xfffffdff
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	fffff7ff 	.word	0xfffff7ff
 80032b8:	fffffbff 	.word	0xfffffbff
 80032bc:	40014000 	.word	0x40014000
 80032c0:	40014400 	.word	0x40014400
 80032c4:	40014800 	.word	0x40014800
 80032c8:	ffffefff 	.word	0xffffefff
 80032cc:	ffffdfff 	.word	0xffffdfff

080032d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	4a28      	ldr	r2, [pc, #160]	; (8003380 <TIM_OC4_SetConfig+0xb0>)
 80032e0:	401a      	ands	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a22      	ldr	r2, [pc, #136]	; (8003384 <TIM_OC4_SetConfig+0xb4>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a21      	ldr	r2, [pc, #132]	; (8003388 <TIM_OC4_SetConfig+0xb8>)
 8003304:	4013      	ands	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4a1d      	ldr	r2, [pc, #116]	; (800338c <TIM_OC4_SetConfig+0xbc>)
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	031b      	lsls	r3, r3, #12
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a19      	ldr	r2, [pc, #100]	; (8003390 <TIM_OC4_SetConfig+0xc0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00b      	beq.n	8003348 <TIM_OC4_SetConfig+0x78>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a18      	ldr	r2, [pc, #96]	; (8003394 <TIM_OC4_SetConfig+0xc4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <TIM_OC4_SetConfig+0x78>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a17      	ldr	r2, [pc, #92]	; (8003398 <TIM_OC4_SetConfig+0xc8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_OC4_SetConfig+0x78>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a16      	ldr	r2, [pc, #88]	; (800339c <TIM_OC4_SetConfig+0xcc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d109      	bne.n	800335c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	4a15      	ldr	r2, [pc, #84]	; (80033a0 <TIM_OC4_SetConfig+0xd0>)
 800334c:	4013      	ands	r3, r2
 800334e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	019b      	lsls	r3, r3, #6
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	621a      	str	r2, [r3, #32]
}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	46bd      	mov	sp, r7
 800337a:	b006      	add	sp, #24
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	ffffefff 	.word	0xffffefff
 8003384:	ffff8fff 	.word	0xffff8fff
 8003388:	fffffcff 	.word	0xfffffcff
 800338c:	ffffdfff 	.word	0xffffdfff
 8003390:	40012c00 	.word	0x40012c00
 8003394:	40014000 	.word	0x40014000
 8003398:	40014400 	.word	0x40014400
 800339c:	40014800 	.word	0x40014800
 80033a0:	ffffbfff 	.word	0xffffbfff

080033a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	221f      	movs	r2, #31
 80033b4:	4013      	ands	r3, r2
 80033b6:	2201      	movs	r2, #1
 80033b8:	409a      	lsls	r2, r3
 80033ba:	0013      	movs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	43d2      	mvns	r2, r2
 80033c6:	401a      	ands	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1a      	ldr	r2, [r3, #32]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	211f      	movs	r1, #31
 80033d4:	400b      	ands	r3, r1
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4099      	lsls	r1, r3
 80033da:	000b      	movs	r3, r1
 80033dc:	431a      	orrs	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b006      	add	sp, #24
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	223c      	movs	r2, #60	; 0x3c
 80033fa:	5c9b      	ldrb	r3, [r3, r2]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003400:	2302      	movs	r3, #2
 8003402:	e047      	b.n	8003494 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	223c      	movs	r2, #60	; 0x3c
 8003408:	2101      	movs	r1, #1
 800340a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	223d      	movs	r2, #61	; 0x3d
 8003410:	2102      	movs	r1, #2
 8003412:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2270      	movs	r2, #112	; 0x70
 8003428:	4393      	bics	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a16      	ldr	r2, [pc, #88]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00f      	beq.n	8003468 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	05db      	lsls	r3, r3, #23
 8003450:	429a      	cmp	r2, r3
 8003452:	d009      	beq.n	8003468 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d004      	beq.n	8003468 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d10c      	bne.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2280      	movs	r2, #128	; 0x80
 800346c:	4393      	bics	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	4313      	orrs	r3, r2
 8003478:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	223d      	movs	r2, #61	; 0x3d
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	223c      	movs	r2, #60	; 0x3c
 800348e:	2100      	movs	r1, #0
 8003490:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b004      	add	sp, #16
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40014000 	.word	0x40014000

080034a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	223c      	movs	r2, #60	; 0x3c
 80034ba:	5c9b      	ldrb	r3, [r3, r2]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e03e      	b.n	8003542 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	223c      	movs	r2, #60	; 0x3c
 80034c8:	2101      	movs	r1, #1
 80034ca:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	22ff      	movs	r2, #255	; 0xff
 80034d0:	4393      	bics	r3, r2
 80034d2:	001a      	movs	r2, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a1b      	ldr	r2, [pc, #108]	; (800354c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80034e0:	401a      	ands	r2, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a18      	ldr	r2, [pc, #96]	; (8003550 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80034ee:	401a      	ands	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4a16      	ldr	r2, [pc, #88]	; (8003554 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80034fc:	401a      	ands	r2, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a13      	ldr	r2, [pc, #76]	; (8003558 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800350a:	401a      	ands	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a11      	ldr	r2, [pc, #68]	; (800355c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003518:	401a      	ands	r2, r3
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4a0e      	ldr	r2, [pc, #56]	; (8003560 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003526:	401a      	ands	r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	223c      	movs	r2, #60	; 0x3c
 800353c:	2100      	movs	r1, #0
 800353e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	0018      	movs	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	b004      	add	sp, #16
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	fffffcff 	.word	0xfffffcff
 8003550:	fffffbff 	.word	0xfffffbff
 8003554:	fffff7ff 	.word	0xfffff7ff
 8003558:	ffffefff 	.word	0xffffefff
 800355c:	ffffdfff 	.word	0xffffdfff
 8003560:	ffffbfff 	.word	0xffffbfff

08003564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b002      	add	sp, #8
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}

08003584 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8003584:	b5b0      	push	{r4, r5, r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af02      	add	r7, sp, #8
 800358a:	0005      	movs	r5, r0
 800358c:	000c      	movs	r4, r1
 800358e:	0010      	movs	r0, r2
 8003590:	0019      	movs	r1, r3
 8003592:	1dfb      	adds	r3, r7, #7
 8003594:	1c2a      	adds	r2, r5, #0
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	1d3b      	adds	r3, r7, #4
 800359a:	1c22      	adds	r2, r4, #0
 800359c:	801a      	strh	r2, [r3, #0]
 800359e:	1cbb      	adds	r3, r7, #2
 80035a0:	1c02      	adds	r2, r0, #0
 80035a2:	801a      	strh	r2, [r3, #0]
 80035a4:	003b      	movs	r3, r7
 80035a6:	1c0a      	adds	r2, r1, #0
 80035a8:	801a      	strh	r2, [r3, #0]
    uint8_t 	i,j;
		



	function_char = character;
 80035aa:	2117      	movs	r1, #23
 80035ac:	187b      	adds	r3, r7, r1
 80035ae:	1dfa      	adds	r2, r7, #7
 80035b0:	7812      	ldrb	r2, [r2, #0]
 80035b2:	701a      	strb	r2, [r3, #0]
		
    if (function_char < ' ')
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b1f      	cmp	r3, #31
 80035ba:	d803      	bhi.n	80035c4 <ILI9341_Draw_Char+0x40>
    {
        character = 0;
 80035bc:	1dfb      	adds	r3, r7, #7
 80035be:	2200      	movs	r2, #0
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e005      	b.n	80035d0 <ILI9341_Draw_Char+0x4c>
    }
    else
    {
    	function_char -= 32;
 80035c4:	2217      	movs	r2, #23
 80035c6:	18bb      	adds	r3, r7, r2
 80035c8:	18ba      	adds	r2, r7, r2
 80035ca:	7812      	ldrb	r2, [r2, #0]
 80035cc:	3a20      	subs	r2, #32
 80035ce:	701a      	strb	r2, [r3, #0]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80035d0:	2314      	movs	r3, #20
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	e016      	b.n	8003608 <ILI9341_Draw_Char+0x84>
	{
		temp[k] = font[function_char][k];
 80035da:	2317      	movs	r3, #23
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	781a      	ldrb	r2, [r3, #0]
 80035e0:	2514      	movs	r5, #20
 80035e2:	197b      	adds	r3, r7, r5
 80035e4:	7818      	ldrb	r0, [r3, #0]
 80035e6:	197b      	adds	r3, r7, r5
 80035e8:	7819      	ldrb	r1, [r3, #0]
 80035ea:	4c69      	ldr	r4, [pc, #420]	; (8003790 <ILI9341_Draw_Char+0x20c>)
 80035ec:	0013      	movs	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	189b      	adds	r3, r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	18e3      	adds	r3, r4, r3
 80035f6:	5c1a      	ldrb	r2, [r3, r0]
 80035f8:	230c      	movs	r3, #12
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	545a      	strb	r2, [r3, r1]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80035fe:	197b      	adds	r3, r7, r5
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	197b      	adds	r3, r7, r5
 8003604:	3201      	adds	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	2314      	movs	r3, #20
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b05      	cmp	r3, #5
 8003610:	d9e3      	bls.n	80035da <ILI9341_Draw_Char+0x56>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8003612:	2315      	movs	r3, #21
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e0ae      	b.n	800377a <ILI9341_Draw_Char+0x1f6>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800361c:	2316      	movs	r3, #22
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e09d      	b.n	8003762 <ILI9341_Draw_Char+0x1de>
        {
            if (temp[j] & (1<<i))
 8003626:	2315      	movs	r3, #21
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	220c      	movs	r2, #12
 800362e:	18ba      	adds	r2, r7, r2
 8003630:	5cd3      	ldrb	r3, [r2, r3]
 8003632:	001a      	movs	r2, r3
 8003634:	2316      	movs	r3, #22
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	411a      	asrs	r2, r3
 800363c:	0013      	movs	r3, r2
 800363e:	2201      	movs	r2, #1
 8003640:	4013      	ands	r3, r2
 8003642:	d043      	beq.n	80036cc <ILI9341_Draw_Char+0x148>
            {
            	if(size == 1)
 8003644:	2328      	movs	r3, #40	; 0x28
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d115      	bne.n	800367a <ILI9341_Draw_Char+0xf6>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800364e:	2315      	movs	r3, #21
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	b29a      	uxth	r2, r3
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	18d3      	adds	r3, r2, r3
 800365c:	b298      	uxth	r0, r3
 800365e:	2316      	movs	r3, #22
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	b29a      	uxth	r2, r3
 8003666:	1cbb      	adds	r3, r7, #2
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	18d3      	adds	r3, r2, r3
 800366c:	b299      	uxth	r1, r3
 800366e:	003b      	movs	r3, r7
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	001a      	movs	r2, r3
 8003674:	f000 fb32 	bl	8003cdc <ILI9341_Draw_Pixel>
 8003678:	e06d      	b.n	8003756 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800367a:	2315      	movs	r3, #21
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	2128      	movs	r1, #40	; 0x28
 8003684:	187a      	adds	r2, r7, r1
 8003686:	8812      	ldrh	r2, [r2, #0]
 8003688:	4353      	muls	r3, r2
 800368a:	b29a      	uxth	r2, r3
 800368c:	1d3b      	adds	r3, r7, #4
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	18d3      	adds	r3, r2, r3
 8003692:	b298      	uxth	r0, r3
 8003694:	2316      	movs	r3, #22
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	000c      	movs	r4, r1
 800369e:	187a      	adds	r2, r7, r1
 80036a0:	8812      	ldrh	r2, [r2, #0]
 80036a2:	4353      	muls	r3, r2
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	1cbb      	adds	r3, r7, #2
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	18d3      	adds	r3, r2, r3
 80036ac:	b299      	uxth	r1, r3
 80036ae:	0022      	movs	r2, r4
 80036b0:	193b      	adds	r3, r7, r4
 80036b2:	881c      	ldrh	r4, [r3, #0]
 80036b4:	0013      	movs	r3, r2
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	881a      	ldrh	r2, [r3, #0]
 80036ba:	2301      	movs	r3, #1
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	003b      	movs	r3, r7
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	0023      	movs	r3, r4
 80036c6:	f000 fcad 	bl	8004024 <ILI9341_Draw_Rectangle>
 80036ca:	e044      	b.n	8003756 <ILI9341_Draw_Char+0x1d2>
				}
            }
            else
            {
               	if(size == 1)
 80036cc:	2328      	movs	r3, #40	; 0x28
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d116      	bne.n	8003704 <ILI9341_Draw_Char+0x180>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 80036d6:	2315      	movs	r3, #21
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	b29a      	uxth	r2, r3
 80036de:	1d3b      	adds	r3, r7, #4
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	18d3      	adds	r3, r2, r3
 80036e4:	b298      	uxth	r0, r3
 80036e6:	2316      	movs	r3, #22
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	1cbb      	adds	r3, r7, #2
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	18d3      	adds	r3, r2, r3
 80036f4:	b299      	uxth	r1, r3
 80036f6:	232c      	movs	r3, #44	; 0x2c
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	001a      	movs	r2, r3
 80036fe:	f000 faed 	bl	8003cdc <ILI9341_Draw_Pixel>
 8003702:	e028      	b.n	8003756 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8003704:	2315      	movs	r3, #21
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	b29b      	uxth	r3, r3
 800370c:	2128      	movs	r1, #40	; 0x28
 800370e:	187a      	adds	r2, r7, r1
 8003710:	8812      	ldrh	r2, [r2, #0]
 8003712:	4353      	muls	r3, r2
 8003714:	b29a      	uxth	r2, r3
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	18d3      	adds	r3, r2, r3
 800371c:	b298      	uxth	r0, r3
 800371e:	2316      	movs	r3, #22
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	b29b      	uxth	r3, r3
 8003726:	000c      	movs	r4, r1
 8003728:	187a      	adds	r2, r7, r1
 800372a:	8812      	ldrh	r2, [r2, #0]
 800372c:	4353      	muls	r3, r2
 800372e:	b29a      	uxth	r2, r3
 8003730:	1cbb      	adds	r3, r7, #2
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	18d3      	adds	r3, r2, r3
 8003736:	b299      	uxth	r1, r3
 8003738:	0022      	movs	r2, r4
 800373a:	193b      	adds	r3, r7, r4
 800373c:	881c      	ldrh	r4, [r3, #0]
 800373e:	0013      	movs	r3, r2
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	881a      	ldrh	r2, [r3, #0]
 8003744:	2301      	movs	r3, #1
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	232c      	movs	r3, #44	; 0x2c
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	0023      	movs	r3, r4
 8003752:	f000 fc67 	bl	8004024 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8003756:	2116      	movs	r1, #22
 8003758:	187b      	adds	r3, r7, r1
 800375a:	781a      	ldrb	r2, [r3, #0]
 800375c:	187b      	adds	r3, r7, r1
 800375e:	3201      	adds	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	2316      	movs	r3, #22
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b07      	cmp	r3, #7
 800376a:	d800      	bhi.n	800376e <ILI9341_Draw_Char+0x1ea>
 800376c:	e75b      	b.n	8003626 <ILI9341_Draw_Char+0xa2>
    for (j=0; j<CHAR_WIDTH; j++)
 800376e:	2115      	movs	r1, #21
 8003770:	187b      	adds	r3, r7, r1
 8003772:	781a      	ldrb	r2, [r3, #0]
 8003774:	187b      	adds	r3, r7, r1
 8003776:	3201      	adds	r2, #1
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	2315      	movs	r3, #21
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b05      	cmp	r3, #5
 8003782:	d800      	bhi.n	8003786 <ILI9341_Draw_Char+0x202>
 8003784:	e74a      	b.n	800361c <ILI9341_Draw_Char+0x98>
				}
            }
        }
    }
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	b006      	add	sp, #24
 800378c:	bdb0      	pop	{r4, r5, r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	08004fa8 	.word	0x08004fa8

08003794 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8003794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003796:	b087      	sub	sp, #28
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	000c      	movs	r4, r1
 800379e:	0010      	movs	r0, r2
 80037a0:	0019      	movs	r1, r3
 80037a2:	250a      	movs	r5, #10
 80037a4:	197b      	adds	r3, r7, r5
 80037a6:	1c22      	adds	r2, r4, #0
 80037a8:	801a      	strh	r2, [r3, #0]
 80037aa:	2608      	movs	r6, #8
 80037ac:	19bb      	adds	r3, r7, r6
 80037ae:	1c02      	adds	r2, r0, #0
 80037b0:	801a      	strh	r2, [r3, #0]
 80037b2:	1dbb      	adds	r3, r7, #6
 80037b4:	1c0a      	adds	r2, r1, #0
 80037b6:	801a      	strh	r2, [r3, #0]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 80037b8:	197b      	adds	r3, r7, r5
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	3b01      	subs	r3, #1
 80037be:	b298      	uxth	r0, r3
 80037c0:	2320      	movs	r3, #32
 80037c2:	2208      	movs	r2, #8
 80037c4:	4694      	mov	ip, r2
 80037c6:	44bc      	add	ip, r7
 80037c8:	4463      	add	r3, ip
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	2124      	movs	r1, #36	; 0x24
 80037d2:	2308      	movs	r3, #8
 80037d4:	18fc      	adds	r4, r7, r3
 80037d6:	1863      	adds	r3, r4, r1
 80037d8:	881c      	ldrh	r4, [r3, #0]
 80037da:	19bb      	adds	r3, r7, r6
 80037dc:	8819      	ldrh	r1, [r3, #0]
 80037de:	0023      	movs	r3, r4
 80037e0:	f000 f974 	bl	8003acc <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 80037e4:	197b      	adds	r3, r7, r5
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	3b02      	subs	r3, #2
 80037ea:	b298      	uxth	r0, r3
 80037ec:	2320      	movs	r3, #32
 80037ee:	2208      	movs	r2, #8
 80037f0:	4694      	mov	ip, r2
 80037f2:	44bc      	add	ip, r7
 80037f4:	4463      	add	r3, ip
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	2124      	movs	r1, #36	; 0x24
 80037fe:	2308      	movs	r3, #8
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	185b      	adds	r3, r3, r1
 8003804:	881c      	ldrh	r4, [r3, #0]
 8003806:	19bb      	adds	r3, r7, r6
 8003808:	8819      	ldrh	r1, [r3, #0]
 800380a:	0023      	movs	r3, r4
 800380c:	f000 f95e 	bl	8003acc <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 8003810:	e029      	b.n	8003866 <ILI9341_Draw_Text+0xd2>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	60fa      	str	r2, [r7, #12]
 8003818:	7818      	ldrb	r0, [r3, #0]
 800381a:	1dbb      	adds	r3, r7, #6
 800381c:	881c      	ldrh	r4, [r3, #0]
 800381e:	2308      	movs	r3, #8
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	881a      	ldrh	r2, [r3, #0]
 8003824:	250a      	movs	r5, #10
 8003826:	197b      	adds	r3, r7, r5
 8003828:	8819      	ldrh	r1, [r3, #0]
 800382a:	2324      	movs	r3, #36	; 0x24
 800382c:	2608      	movs	r6, #8
 800382e:	46b4      	mov	ip, r6
 8003830:	44bc      	add	ip, r7
 8003832:	4463      	add	r3, ip
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	2620      	movs	r6, #32
 800383a:	2308      	movs	r3, #8
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	199b      	adds	r3, r3, r6
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	0023      	movs	r3, r4
 8003846:	f7ff fe9d 	bl	8003584 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800384a:	2308      	movs	r3, #8
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	199b      	adds	r3, r3, r6
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	1c1a      	adds	r2, r3, #0
 8003854:	1892      	adds	r2, r2, r2
 8003856:	18d3      	adds	r3, r2, r3
 8003858:	18db      	adds	r3, r3, r3
 800385a:	b299      	uxth	r1, r3
 800385c:	197b      	adds	r3, r7, r5
 800385e:	197a      	adds	r2, r7, r5
 8003860:	8812      	ldrh	r2, [r2, #0]
 8003862:	188a      	adds	r2, r1, r2
 8003864:	801a      	strh	r2, [r3, #0]
    while (*Text) {
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1d1      	bne.n	8003812 <ILI9341_Draw_Text+0x7e>
    }


}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	b005      	add	sp, #20
 8003874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003876 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800387a:	f000 fcf1 	bl	8004260 <_LCD_Enable>
	ILI9341_SPI_Init();
 800387e:	f000 f909 	bl	8003a94 <ILI9341_SPI_Init>
	_LCD_Reset();
 8003882:	f000 fcfb 	bl	800427c <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 8003886:	2001      	movs	r0, #1
 8003888:	f000 fdfe 	bl	8004488 <_LCD_SendCommand>
	HAL_Delay(2000);
 800388c:	23fa      	movs	r3, #250	; 0xfa
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	0018      	movs	r0, r3
 8003892:	f7fd ff7b 	bl	800178c <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 8003896:	20cb      	movs	r0, #203	; 0xcb
 8003898:	f000 fdf6 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800389c:	2039      	movs	r0, #57	; 0x39
 800389e:	f000 fe2d 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x2C);
 80038a2:	202c      	movs	r0, #44	; 0x2c
 80038a4:	f000 fe2a 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x00);
 80038a8:	2000      	movs	r0, #0
 80038aa:	f000 fe27 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x34);
 80038ae:	2034      	movs	r0, #52	; 0x34
 80038b0:	f000 fe24 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x02);
 80038b4:	2002      	movs	r0, #2
 80038b6:	f000 fe21 	bl	80044fc <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 80038ba:	20cf      	movs	r0, #207	; 0xcf
 80038bc:	f000 fde4 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80038c0:	2000      	movs	r0, #0
 80038c2:	f000 fe1b 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0xC1);
 80038c6:	20c1      	movs	r0, #193	; 0xc1
 80038c8:	f000 fe18 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x30);
 80038cc:	2030      	movs	r0, #48	; 0x30
 80038ce:	f000 fe15 	bl	80044fc <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 80038d2:	20e8      	movs	r0, #232	; 0xe8
 80038d4:	f000 fdd8 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 80038d8:	2085      	movs	r0, #133	; 0x85
 80038da:	f000 fe0f 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x00);
 80038de:	2000      	movs	r0, #0
 80038e0:	f000 fe0c 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x78);
 80038e4:	2078      	movs	r0, #120	; 0x78
 80038e6:	f000 fe09 	bl	80044fc <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 80038ea:	20ea      	movs	r0, #234	; 0xea
 80038ec:	f000 fdcc 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80038f0:	2000      	movs	r0, #0
 80038f2:	f000 fe03 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x00);
 80038f6:	2000      	movs	r0, #0
 80038f8:	f000 fe00 	bl	80044fc <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 80038fc:	20ed      	movs	r0, #237	; 0xed
 80038fe:	f000 fdc3 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 8003902:	2064      	movs	r0, #100	; 0x64
 8003904:	f000 fdfa 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x03);
 8003908:	2003      	movs	r0, #3
 800390a:	f000 fdf7 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x12);
 800390e:	2012      	movs	r0, #18
 8003910:	f000 fdf4 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x81);
 8003914:	2081      	movs	r0, #129	; 0x81
 8003916:	f000 fdf1 	bl	80044fc <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800391a:	20f7      	movs	r0, #247	; 0xf7
 800391c:	f000 fdb4 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 8003920:	2020      	movs	r0, #32
 8003922:	f000 fdeb 	bl	80044fc <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8003926:	20c0      	movs	r0, #192	; 0xc0
 8003928:	f000 fdae 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800392c:	2023      	movs	r0, #35	; 0x23
 800392e:	f000 fde5 	bl	80044fc <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 8003932:	20c1      	movs	r0, #193	; 0xc1
 8003934:	f000 fda8 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8003938:	2010      	movs	r0, #16
 800393a:	f000 fddf 	bl	80044fc <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800393e:	20c5      	movs	r0, #197	; 0xc5
 8003940:	f000 fda2 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 8003944:	203e      	movs	r0, #62	; 0x3e
 8003946:	f000 fdd9 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x28);
 800394a:	2028      	movs	r0, #40	; 0x28
 800394c:	f000 fdd6 	bl	80044fc <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 8003950:	20c7      	movs	r0, #199	; 0xc7
 8003952:	f000 fd99 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 8003956:	2086      	movs	r0, #134	; 0x86
 8003958:	f000 fdd0 	bl	80044fc <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800395c:	2036      	movs	r0, #54	; 0x36
 800395e:	f000 fd93 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 8003962:	2048      	movs	r0, #72	; 0x48
 8003964:	f000 fdca 	bl	80044fc <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 8003968:	203a      	movs	r0, #58	; 0x3a
 800396a:	f000 fd8d 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800396e:	2055      	movs	r0, #85	; 0x55
 8003970:	f000 fdc4 	bl	80044fc <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 8003974:	20b1      	movs	r0, #177	; 0xb1
 8003976:	f000 fd87 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800397a:	2000      	movs	r0, #0
 800397c:	f000 fdbe 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x18);
 8003980:	2018      	movs	r0, #24
 8003982:	f000 fdbb 	bl	80044fc <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 8003986:	20b6      	movs	r0, #182	; 0xb6
 8003988:	f000 fd7e 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800398c:	2008      	movs	r0, #8
 800398e:	f000 fdb5 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x82);
 8003992:	2082      	movs	r0, #130	; 0x82
 8003994:	f000 fdb2 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x27);
 8003998:	2027      	movs	r0, #39	; 0x27
 800399a:	f000 fdaf 	bl	80044fc <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800399e:	20f2      	movs	r0, #242	; 0xf2
 80039a0:	f000 fd72 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80039a4:	2000      	movs	r0, #0
 80039a6:	f000 fda9 	bl	80044fc <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 80039aa:	2026      	movs	r0, #38	; 0x26
 80039ac:	f000 fd6c 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 80039b0:	2001      	movs	r0, #1
 80039b2:	f000 fda3 	bl	80044fc <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 80039b6:	20e0      	movs	r0, #224	; 0xe0
 80039b8:	f000 fd66 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 80039bc:	200f      	movs	r0, #15
 80039be:	f000 fd9d 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x31);
 80039c2:	2031      	movs	r0, #49	; 0x31
 80039c4:	f000 fd9a 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x2B);
 80039c8:	202b      	movs	r0, #43	; 0x2b
 80039ca:	f000 fd97 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x0C);
 80039ce:	200c      	movs	r0, #12
 80039d0:	f000 fd94 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x0E);
 80039d4:	200e      	movs	r0, #14
 80039d6:	f000 fd91 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x08);
 80039da:	2008      	movs	r0, #8
 80039dc:	f000 fd8e 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x4E);
 80039e0:	204e      	movs	r0, #78	; 0x4e
 80039e2:	f000 fd8b 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0xF1);
 80039e6:	20f1      	movs	r0, #241	; 0xf1
 80039e8:	f000 fd88 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x37);
 80039ec:	2037      	movs	r0, #55	; 0x37
 80039ee:	f000 fd85 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x07);
 80039f2:	2007      	movs	r0, #7
 80039f4:	f000 fd82 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x10);
 80039f8:	2010      	movs	r0, #16
 80039fa:	f000 fd7f 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x03);
 80039fe:	2003      	movs	r0, #3
 8003a00:	f000 fd7c 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x0E);
 8003a04:	200e      	movs	r0, #14
 8003a06:	f000 fd79 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x09);
 8003a0a:	2009      	movs	r0, #9
 8003a0c:	f000 fd76 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x00);
 8003a10:	2000      	movs	r0, #0
 8003a12:	f000 fd73 	bl	80044fc <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8003a16:	20e1      	movs	r0, #225	; 0xe1
 8003a18:	f000 fd36 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	f000 fd6d 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x0E);
 8003a22:	200e      	movs	r0, #14
 8003a24:	f000 fd6a 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x14);
 8003a28:	2014      	movs	r0, #20
 8003a2a:	f000 fd67 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x03);
 8003a2e:	2003      	movs	r0, #3
 8003a30:	f000 fd64 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x11);
 8003a34:	2011      	movs	r0, #17
 8003a36:	f000 fd61 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x07);
 8003a3a:	2007      	movs	r0, #7
 8003a3c:	f000 fd5e 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x31);
 8003a40:	2031      	movs	r0, #49	; 0x31
 8003a42:	f000 fd5b 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0xC1);
 8003a46:	20c1      	movs	r0, #193	; 0xc1
 8003a48:	f000 fd58 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x48);
 8003a4c:	2048      	movs	r0, #72	; 0x48
 8003a4e:	f000 fd55 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x08);
 8003a52:	2008      	movs	r0, #8
 8003a54:	f000 fd52 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x0F);
 8003a58:	200f      	movs	r0, #15
 8003a5a:	f000 fd4f 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x0C);
 8003a5e:	200c      	movs	r0, #12
 8003a60:	f000 fd4c 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x31);
 8003a64:	2031      	movs	r0, #49	; 0x31
 8003a66:	f000 fd49 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x36);
 8003a6a:	2036      	movs	r0, #54	; 0x36
 8003a6c:	f000 fd46 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(0x0F);
 8003a70:	200f      	movs	r0, #15
 8003a72:	f000 fd43 	bl	80044fc <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 8003a76:	2011      	movs	r0, #17
 8003a78:	f000 fd06 	bl	8004488 <_LCD_SendCommand>
	HAL_Delay(240);
 8003a7c:	20f0      	movs	r0, #240	; 0xf0
 8003a7e:	f7fd fe85 	bl	800178c <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 8003a82:	2029      	movs	r0, #41	; 0x29
 8003a84:	f000 fd00 	bl	8004488 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8003a88:	2000      	movs	r0, #0
 8003a8a:	f000 fb99 	bl	80041c0 <ILI9341_Set_Rotation>
}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <ILI9341_SPI_Init+0x34>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2240      	movs	r2, #64	; 0x40
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d005      	beq.n	8003ab0 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8003aa4:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <ILI9341_SPI_Init+0x34>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <ILI9341_SPI_Init+0x34>)
 8003aaa:	2140      	movs	r1, #64	; 0x40
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003ab0:	2390      	movs	r3, #144	; 0x90
 8003ab2:	05db      	lsls	r3, r3, #23
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	2390      	movs	r3, #144	; 0x90
 8003ab8:	05db      	lsls	r3, r3, #23
 8003aba:	2108      	movs	r1, #8
 8003abc:	438a      	bics	r2, r1
 8003abe:	615a      	str	r2, [r3, #20]
}
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	40013000 	.word	0x40013000

08003acc <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8003acc:	b5b0      	push	{r4, r5, r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	0005      	movs	r5, r0
 8003ad4:	000c      	movs	r4, r1
 8003ad6:	0010      	movs	r0, r2
 8003ad8:	0019      	movs	r1, r3
 8003ada:	1dbb      	adds	r3, r7, #6
 8003adc:	1c2a      	adds	r2, r5, #0
 8003ade:	801a      	strh	r2, [r3, #0]
 8003ae0:	1d3b      	adds	r3, r7, #4
 8003ae2:	1c22      	adds	r2, r4, #0
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	1cbb      	adds	r3, r7, #2
 8003ae8:	1c02      	adds	r2, r0, #0
 8003aea:	801a      	strh	r2, [r3, #0]
 8003aec:	003b      	movs	r3, r7
 8003aee:	1c0a      	adds	r2, r1, #0
 8003af0:	801a      	strh	r2, [r3, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8003af2:	4b37      	ldr	r3, [pc, #220]	; (8003bd0 <ILI9341_Draw_Vertical_Line+0x104>)
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	1dba      	adds	r2, r7, #6
 8003afa:	8812      	ldrh	r2, [r2, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d300      	bcc.n	8003b02 <ILI9341_Draw_Vertical_Line+0x36>
 8003b00:	e062      	b.n	8003bc8 <ILI9341_Draw_Vertical_Line+0xfc>
 8003b02:	4b34      	ldr	r3, [pc, #208]	; (8003bd4 <ILI9341_Draw_Vertical_Line+0x108>)
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	1d3a      	adds	r2, r7, #4
 8003b0a:	8812      	ldrh	r2, [r2, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d25b      	bcs.n	8003bc8 <ILI9341_Draw_Vertical_Line+0xfc>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	881a      	ldrh	r2, [r3, #0]
 8003b14:	1cbb      	adds	r3, r7, #2
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	18d3      	adds	r3, r2, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	4a2d      	ldr	r2, [pc, #180]	; (8003bd4 <ILI9341_Draw_Vertical_Line+0x108>)
 8003b1e:	8812      	ldrh	r2, [r2, #0]
 8003b20:	b292      	uxth	r2, r2
 8003b22:	4293      	cmp	r3, r2
 8003b24:	db07      	blt.n	8003b36 <ILI9341_Draw_Vertical_Line+0x6a>
	{
		height= LCD_HEIGHT - ypos;
 8003b26:	4b2b      	ldr	r3, [pc, #172]	; (8003bd4 <ILI9341_Draw_Vertical_Line+0x108>)
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b299      	uxth	r1, r3
 8003b2c:	1cbb      	adds	r3, r7, #2
 8003b2e:	1d3a      	adds	r2, r7, #4
 8003b30:	8812      	ldrh	r2, [r2, #0]
 8003b32:	1a8a      	subs	r2, r1, r2
 8003b34:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8003b36:	1d3a      	adds	r2, r7, #4
 8003b38:	1cbb      	adds	r3, r7, #2
 8003b3a:	8812      	ldrh	r2, [r2, #0]
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	18d3      	adds	r3, r2, r3
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29c      	uxth	r4, r3
 8003b46:	1dbb      	adds	r3, r7, #6
 8003b48:	881a      	ldrh	r2, [r3, #0]
 8003b4a:	1d3b      	adds	r3, r7, #4
 8003b4c:	8819      	ldrh	r1, [r3, #0]
 8003b4e:	1dbb      	adds	r3, r7, #6
 8003b50:	8818      	ldrh	r0, [r3, #0]
 8003b52:	0023      	movs	r3, r4
 8003b54:	f000 f840 	bl	8003bd8 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8003b58:	230f      	movs	r3, #15
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8003b60:	1cbb      	adds	r3, r7, #2
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	2201      	movs	r2, #1
 8003b66:	4013      	ands	r3, r2
 8003b68:	d00e      	beq.n	8003b88 <ILI9341_Draw_Vertical_Line+0xbc>
 8003b6a:	1cbb      	adds	r3, r7, #2
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d90a      	bls.n	8003b88 <ILI9341_Draw_Vertical_Line+0xbc>
	{
		truncated = 1;
 8003b72:	230f      	movs	r3, #15
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
		height = ((height >> 1) * 2);
 8003b7a:	1cbb      	adds	r3, r7, #2
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	1cba      	adds	r2, r7, #2
 8003b84:	18db      	adds	r3, r3, r3
 8003b86:	8013      	strh	r3, [r2, #0]
//TODO


	//

	if(truncated)
 8003b88:	230f      	movs	r3, #15
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00c      	beq.n	8003bac <ILI9341_Draw_Vertical_Line+0xe0>
	{
		ILI9341_Draw_Pixel(	(xpos),
 8003b92:	1d3a      	adds	r2, r7, #4
 8003b94:	1cbb      	adds	r3, r7, #2
 8003b96:	8812      	ldrh	r2, [r2, #0]
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	18d3      	adds	r3, r2, r3
 8003b9c:	b299      	uxth	r1, r3
 8003b9e:	003b      	movs	r3, r7
 8003ba0:	881a      	ldrh	r2, [r3, #0]
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f000 f898 	bl	8003cdc <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8003bac:	1cbb      	adds	r3, r7, #2
 8003bae:	881c      	ldrh	r4, [r3, #0]
 8003bb0:	003b      	movs	r3, r7
 8003bb2:	881a      	ldrh	r2, [r3, #0]
 8003bb4:	1d3b      	adds	r3, r7, #4
 8003bb6:	8819      	ldrh	r1, [r3, #0]
 8003bb8:	1dbb      	adds	r3, r7, #6
 8003bba:	8818      	ldrh	r0, [r3, #0]
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	0023      	movs	r3, r4
 8003bc2:	f000 fb7d 	bl	80042c0 <_LCD_Write_Frame>
 8003bc6:	e000      	b.n	8003bca <ILI9341_Draw_Vertical_Line+0xfe>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8003bc8:	46c0      	nop			; (mov r8, r8)
}
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b004      	add	sp, #16
 8003bce:	bdb0      	pop	{r4, r5, r7, pc}
 8003bd0:	20000010 	.word	0x20000010
 8003bd4:	2000000e 	.word	0x2000000e

08003bd8 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8003bd8:	b5b0      	push	{r4, r5, r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	0005      	movs	r5, r0
 8003be0:	000c      	movs	r4, r1
 8003be2:	0010      	movs	r0, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	1dbb      	adds	r3, r7, #6
 8003be8:	1c2a      	adds	r2, r5, #0
 8003bea:	801a      	strh	r2, [r3, #0]
 8003bec:	1d3b      	adds	r3, r7, #4
 8003bee:	1c22      	adds	r2, r4, #0
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	1cbb      	adds	r3, r7, #2
 8003bf4:	1c02      	adds	r2, r0, #0
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	1c0a      	adds	r2, r1, #0
 8003bfc:	801a      	strh	r2, [r3, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 8003bfe:	202a      	movs	r0, #42	; 0x2a
 8003c00:	f000 fc42 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8003c04:	1dbb      	adds	r3, r7, #6
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f000 fc74 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(sc);
 8003c14:	1dbb      	adds	r3, r7, #6
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f000 fc6e 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8003c20:	1cbb      	adds	r3, r7, #2
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	0a1b      	lsrs	r3, r3, #8
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f000 fc66 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(ec);
 8003c30:	1cbb      	adds	r3, r7, #2
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	0018      	movs	r0, r3
 8003c38:	f000 fc60 	bl	80044fc <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 8003c3c:	202b      	movs	r0, #43	; 0x2b
 8003c3e:	f000 fc23 	bl	8004488 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 8003c42:	1d3b      	adds	r3, r7, #4
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f000 fc55 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(sp);
 8003c52:	1d3b      	adds	r3, r7, #4
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f000 fc4f 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 8003c5e:	003b      	movs	r3, r7
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f000 fc47 	bl	80044fc <_LCD_SendData>
	_LCD_SendData(ep);
 8003c6e:	003b      	movs	r3, r7
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	0018      	movs	r0, r3
 8003c76:	f000 fc41 	bl	80044fc <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 8003c7a:	202c      	movs	r0, #44	; 0x2c
 8003c7c:	f000 fc04 	bl	8004488 <_LCD_SendCommand>
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bdb0      	pop	{r4, r5, r7, pc}

08003c88 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	0002      	movs	r2, r0
 8003c90:	1dbb      	adds	r3, r7, #6
 8003c92:	801a      	strh	r2, [r3, #0]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8003c94:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <ILI9341_Fill_Screen+0x4c>)
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <ILI9341_Fill_Screen+0x50>)
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	f7ff ff98 	bl	8003bd8 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <ILI9341_Fill_Screen+0x4c>)
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	001a      	movs	r2, r3
 8003cb0:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <ILI9341_Fill_Screen+0x50>)
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	4353      	muls	r3, r2
 8003cb8:	0019      	movs	r1, r3
 8003cba:	1dbb      	adds	r3, r7, #6
 8003cbc:	881a      	ldrh	r2, [r3, #0]
 8003cbe:	2304      	movs	r3, #4
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	000b      	movs	r3, r1
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	f000 fafa 	bl	80042c0 <_LCD_Write_Frame>
}
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000010 	.word	0x20000010
 8003cd8:	2000000e 	.word	0x2000000e

08003cdc <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b08f      	sub	sp, #60	; 0x3c
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	0004      	movs	r4, r0
 8003ce4:	0008      	movs	r0, r1
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	1dbb      	adds	r3, r7, #6
 8003cea:	1c22      	adds	r2, r4, #0
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	1d3b      	adds	r3, r7, #4
 8003cf0:	1c02      	adds	r2, r0, #0
 8003cf2:	801a      	strh	r2, [r3, #0]
 8003cf4:	1cbb      	adds	r3, r7, #2
 8003cf6:	1c0a      	adds	r2, r1, #0
 8003cf8:	801a      	strh	r2, [r3, #0]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003cfa:	4bc8      	ldr	r3, [pc, #800]	; (800401c <ILI9341_Draw_Pixel+0x340>)
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	1dba      	adds	r2, r7, #6
 8003d02:	8812      	ldrh	r2, [r2, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d300      	bcc.n	8003d0a <ILI9341_Draw_Pixel+0x2e>
 8003d08:	e184      	b.n	8004014 <ILI9341_Draw_Pixel+0x338>
 8003d0a:	4bc5      	ldr	r3, [pc, #788]	; (8004020 <ILI9341_Draw_Pixel+0x344>)
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	1d3a      	adds	r2, r7, #4
 8003d12:	8812      	ldrh	r2, [r2, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d300      	bcc.n	8003d1a <ILI9341_Draw_Pixel+0x3e>
 8003d18:	e17c      	b.n	8004014 <ILI9341_Draw_Pixel+0x338>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8003d1a:	2390      	movs	r3, #144	; 0x90
 8003d1c:	05db      	lsls	r3, r3, #23
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	2390      	movs	r3, #144	; 0x90
 8003d22:	05db      	lsls	r3, r3, #23
 8003d24:	2110      	movs	r1, #16
 8003d26:	438a      	bics	r2, r1
 8003d28:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003d2a:	2390      	movs	r3, #144	; 0x90
 8003d2c:	05db      	lsls	r3, r3, #23
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	2390      	movs	r3, #144	; 0x90
 8003d32:	05db      	lsls	r3, r3, #23
 8003d34:	2108      	movs	r1, #8
 8003d36:	438a      	bics	r2, r1
 8003d38:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8003d3a:	220a      	movs	r2, #10
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	202a      	movs	r0, #42	; 0x2a
 8003d40:	f000 fc16 	bl	8004570 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003d44:	2300      	movs	r3, #0
 8003d46:	637b      	str	r3, [r7, #52]	; 0x34
 8003d48:	e00a      	b.n	8003d60 <ILI9341_Draw_Pixel+0x84>
 8003d4a:	2390      	movs	r3, #144	; 0x90
 8003d4c:	05db      	lsls	r3, r3, #23
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	2390      	movs	r3, #144	; 0x90
 8003d52:	05db      	lsls	r3, r3, #23
 8003d54:	2108      	movs	r1, #8
 8003d56:	438a      	bics	r2, r1
 8003d58:	615a      	str	r2, [r3, #20]
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	ddf1      	ble.n	8003d4a <ILI9341_Draw_Pixel+0x6e>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8003d66:	2390      	movs	r3, #144	; 0x90
 8003d68:	05db      	lsls	r3, r3, #23
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	2390      	movs	r3, #144	; 0x90
 8003d6e:	05db      	lsls	r3, r3, #23
 8003d70:	2110      	movs	r1, #16
 8003d72:	430a      	orrs	r2, r1
 8003d74:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003d76:	2390      	movs	r3, #144	; 0x90
 8003d78:	05db      	lsls	r3, r3, #23
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	2390      	movs	r3, #144	; 0x90
 8003d7e:	05db      	lsls	r3, r3, #23
 8003d80:	2108      	movs	r1, #8
 8003d82:	430a      	orrs	r2, r1
 8003d84:	615a      	str	r2, [r3, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003d86:	2390      	movs	r3, #144	; 0x90
 8003d88:	05db      	lsls	r3, r3, #23
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	2390      	movs	r3, #144	; 0x90
 8003d8e:	05db      	lsls	r3, r3, #23
 8003d90:	2108      	movs	r1, #8
 8003d92:	438a      	bics	r2, r1
 8003d94:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 8003d96:	1dbb      	adds	r3, r7, #6
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	2114      	movs	r1, #20
 8003da2:	187b      	adds	r3, r7, r1
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	1dbb      	adds	r3, r7, #6
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	705a      	strb	r2, [r3, #1]
 8003db0:	1dbb      	adds	r3, r7, #6
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	121b      	asrs	r3, r3, #8
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	709a      	strb	r2, [r3, #2]
 8003dbe:	1dbb      	adds	r3, r7, #6
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	187b      	adds	r3, r7, r1
 8003dca:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 8003dcc:	1878      	adds	r0, r7, r1
 8003dce:	230a      	movs	r3, #10
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2104      	movs	r1, #4
 8003dd4:	f000 fc06 	bl	80045e4 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	633b      	str	r3, [r7, #48]	; 0x30
 8003ddc:	e00a      	b.n	8003df4 <ILI9341_Draw_Pixel+0x118>
 8003dde:	2390      	movs	r3, #144	; 0x90
 8003de0:	05db      	lsls	r3, r3, #23
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	2390      	movs	r3, #144	; 0x90
 8003de6:	05db      	lsls	r3, r3, #23
 8003de8:	2108      	movs	r1, #8
 8003dea:	438a      	bics	r2, r1
 8003dec:	615a      	str	r2, [r3, #20]
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	3301      	adds	r3, #1
 8003df2:	633b      	str	r3, [r7, #48]	; 0x30
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	ddf1      	ble.n	8003dde <ILI9341_Draw_Pixel+0x102>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003dfa:	2390      	movs	r3, #144	; 0x90
 8003dfc:	05db      	lsls	r3, r3, #23
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	2390      	movs	r3, #144	; 0x90
 8003e02:	05db      	lsls	r3, r3, #23
 8003e04:	2108      	movs	r1, #8
 8003e06:	430a      	orrs	r2, r1
 8003e08:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8003e0a:	2390      	movs	r3, #144	; 0x90
 8003e0c:	05db      	lsls	r3, r3, #23
 8003e0e:	695a      	ldr	r2, [r3, #20]
 8003e10:	2390      	movs	r3, #144	; 0x90
 8003e12:	05db      	lsls	r3, r3, #23
 8003e14:	2110      	movs	r1, #16
 8003e16:	438a      	bics	r2, r1
 8003e18:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003e1a:	2390      	movs	r3, #144	; 0x90
 8003e1c:	05db      	lsls	r3, r3, #23
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	2390      	movs	r3, #144	; 0x90
 8003e22:	05db      	lsls	r3, r3, #23
 8003e24:	2108      	movs	r1, #8
 8003e26:	438a      	bics	r2, r1
 8003e28:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8003e2a:	220a      	movs	r2, #10
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	202b      	movs	r0, #43	; 0x2b
 8003e30:	f000 fb9e 	bl	8004570 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003e34:	2300      	movs	r3, #0
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e38:	e00a      	b.n	8003e50 <ILI9341_Draw_Pixel+0x174>
 8003e3a:	2390      	movs	r3, #144	; 0x90
 8003e3c:	05db      	lsls	r3, r3, #23
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	2390      	movs	r3, #144	; 0x90
 8003e42:	05db      	lsls	r3, r3, #23
 8003e44:	2108      	movs	r1, #8
 8003e46:	438a      	bics	r2, r1
 8003e48:	615a      	str	r2, [r3, #20]
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	ddf1      	ble.n	8003e3a <ILI9341_Draw_Pixel+0x15e>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8003e56:	2390      	movs	r3, #144	; 0x90
 8003e58:	05db      	lsls	r3, r3, #23
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	2390      	movs	r3, #144	; 0x90
 8003e5e:	05db      	lsls	r3, r3, #23
 8003e60:	2110      	movs	r1, #16
 8003e62:	430a      	orrs	r2, r1
 8003e64:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003e66:	2390      	movs	r3, #144	; 0x90
 8003e68:	05db      	lsls	r3, r3, #23
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	2390      	movs	r3, #144	; 0x90
 8003e6e:	05db      	lsls	r3, r3, #23
 8003e70:	2108      	movs	r1, #8
 8003e72:	430a      	orrs	r2, r1
 8003e74:	615a      	str	r2, [r3, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003e76:	2390      	movs	r3, #144	; 0x90
 8003e78:	05db      	lsls	r3, r3, #23
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	2390      	movs	r3, #144	; 0x90
 8003e7e:	05db      	lsls	r3, r3, #23
 8003e80:	2108      	movs	r1, #8
 8003e82:	438a      	bics	r2, r1
 8003e84:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 8003e86:	1d3b      	adds	r3, r7, #4
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	0a1b      	lsrs	r3, r3, #8
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	2110      	movs	r1, #16
 8003e92:	187b      	adds	r3, r7, r1
 8003e94:	701a      	strb	r2, [r3, #0]
 8003e96:	1d3b      	adds	r3, r7, #4
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	705a      	strb	r2, [r3, #1]
 8003ea0:	1d3b      	adds	r3, r7, #4
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	121b      	asrs	r3, r3, #8
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	187b      	adds	r3, r7, r1
 8003eac:	709a      	strb	r2, [r3, #2]
 8003eae:	1d3b      	adds	r3, r7, #4
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	187b      	adds	r3, r7, r1
 8003eba:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 8003ebc:	1878      	adds	r0, r7, r1
 8003ebe:	230a      	movs	r3, #10
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2104      	movs	r1, #4
 8003ec4:	f000 fb8e 	bl	80045e4 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ecc:	e00a      	b.n	8003ee4 <ILI9341_Draw_Pixel+0x208>
 8003ece:	2390      	movs	r3, #144	; 0x90
 8003ed0:	05db      	lsls	r3, r3, #23
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	2390      	movs	r3, #144	; 0x90
 8003ed6:	05db      	lsls	r3, r3, #23
 8003ed8:	2108      	movs	r1, #8
 8003eda:	438a      	bics	r2, r1
 8003edc:	615a      	str	r2, [r3, #20]
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	ddf1      	ble.n	8003ece <ILI9341_Draw_Pixel+0x1f2>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003eea:	2390      	movs	r3, #144	; 0x90
 8003eec:	05db      	lsls	r3, r3, #23
 8003eee:	695a      	ldr	r2, [r3, #20]
 8003ef0:	2390      	movs	r3, #144	; 0x90
 8003ef2:	05db      	lsls	r3, r3, #23
 8003ef4:	2108      	movs	r1, #8
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8003efa:	2390      	movs	r3, #144	; 0x90
 8003efc:	05db      	lsls	r3, r3, #23
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	2390      	movs	r3, #144	; 0x90
 8003f02:	05db      	lsls	r3, r3, #23
 8003f04:	2110      	movs	r1, #16
 8003f06:	438a      	bics	r2, r1
 8003f08:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003f0a:	2390      	movs	r3, #144	; 0x90
 8003f0c:	05db      	lsls	r3, r3, #23
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	2390      	movs	r3, #144	; 0x90
 8003f12:	05db      	lsls	r3, r3, #23
 8003f14:	2108      	movs	r1, #8
 8003f16:	438a      	bics	r2, r1
 8003f18:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2C, 0, 10);
 8003f1a:	220a      	movs	r2, #10
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	202c      	movs	r0, #44	; 0x2c
 8003f20:	f000 fb26 	bl	8004570 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003f24:	2300      	movs	r3, #0
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
 8003f28:	e00a      	b.n	8003f40 <ILI9341_Draw_Pixel+0x264>
 8003f2a:	2390      	movs	r3, #144	; 0x90
 8003f2c:	05db      	lsls	r3, r3, #23
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	2390      	movs	r3, #144	; 0x90
 8003f32:	05db      	lsls	r3, r3, #23
 8003f34:	2108      	movs	r1, #8
 8003f36:	438a      	bics	r2, r1
 8003f38:	615a      	str	r2, [r3, #20]
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	ddf1      	ble.n	8003f2a <ILI9341_Draw_Pixel+0x24e>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8003f46:	2390      	movs	r3, #144	; 0x90
 8003f48:	05db      	lsls	r3, r3, #23
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	2390      	movs	r3, #144	; 0x90
 8003f4e:	05db      	lsls	r3, r3, #23
 8003f50:	2110      	movs	r1, #16
 8003f52:	430a      	orrs	r2, r1
 8003f54:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003f56:	2390      	movs	r3, #144	; 0x90
 8003f58:	05db      	lsls	r3, r3, #23
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	2390      	movs	r3, #144	; 0x90
 8003f5e:	05db      	lsls	r3, r3, #23
 8003f60:	2108      	movs	r1, #8
 8003f62:	430a      	orrs	r2, r1
 8003f64:	615a      	str	r2, [r3, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003f66:	2390      	movs	r3, #144	; 0x90
 8003f68:	05db      	lsls	r3, r3, #23
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	2390      	movs	r3, #144	; 0x90
 8003f6e:	05db      	lsls	r3, r3, #23
 8003f70:	2108      	movs	r1, #8
 8003f72:	438a      	bics	r2, r1
 8003f74:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8003f76:	1cbb      	adds	r3, r7, #2
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	0a1b      	lsrs	r3, r3, #8
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	210c      	movs	r1, #12
 8003f82:	187b      	adds	r3, r7, r1
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	1cbb      	adds	r3, r7, #2
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	705a      	strb	r2, [r3, #1]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 8003f90:	1878      	adds	r0, r7, r1
 8003f92:	2301      	movs	r3, #1
 8003f94:	2200      	movs	r2, #0
 8003f96:	2102      	movs	r1, #2
 8003f98:	f000 fb24 	bl	80045e4 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	623b      	str	r3, [r7, #32]
 8003fa0:	e00a      	b.n	8003fb8 <ILI9341_Draw_Pixel+0x2dc>
 8003fa2:	2390      	movs	r3, #144	; 0x90
 8003fa4:	05db      	lsls	r3, r3, #23
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	2390      	movs	r3, #144	; 0x90
 8003faa:	05db      	lsls	r3, r3, #23
 8003fac:	2108      	movs	r1, #8
 8003fae:	438a      	bics	r2, r1
 8003fb0:	615a      	str	r2, [r3, #20]
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	623b      	str	r3, [r7, #32]
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	ddf1      	ble.n	8003fa2 <ILI9341_Draw_Pixel+0x2c6>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	e00a      	b.n	8003fda <ILI9341_Draw_Pixel+0x2fe>
 8003fc4:	2390      	movs	r3, #144	; 0x90
 8003fc6:	05db      	lsls	r3, r3, #23
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	2390      	movs	r3, #144	; 0x90
 8003fcc:	05db      	lsls	r3, r3, #23
 8003fce:	2108      	movs	r1, #8
 8003fd0:	438a      	bics	r2, r1
 8003fd2:	615a      	str	r2, [r3, #20]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	ddf1      	ble.n	8003fc4 <ILI9341_Draw_Pixel+0x2e8>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61bb      	str	r3, [r7, #24]
 8003fe4:	e00a      	b.n	8003ffc <ILI9341_Draw_Pixel+0x320>
 8003fe6:	2390      	movs	r3, #144	; 0x90
 8003fe8:	05db      	lsls	r3, r3, #23
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	2390      	movs	r3, #144	; 0x90
 8003fee:	05db      	lsls	r3, r3, #23
 8003ff0:	2108      	movs	r1, #8
 8003ff2:	438a      	bics	r2, r1
 8003ff4:	615a      	str	r2, [r3, #20]
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	61bb      	str	r3, [r7, #24]
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	ddf1      	ble.n	8003fe6 <ILI9341_Draw_Pixel+0x30a>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8004002:	2390      	movs	r3, #144	; 0x90
 8004004:	05db      	lsls	r3, r3, #23
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	2390      	movs	r3, #144	; 0x90
 800400a:	05db      	lsls	r3, r3, #23
 800400c:	2108      	movs	r1, #8
 800400e:	430a      	orrs	r2, r1
 8004010:	615a      	str	r2, [r3, #20]
 8004012:	e000      	b.n	8004016 <ILI9341_Draw_Pixel+0x33a>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8004014:	46c0      	nop			; (mov r8, r8)


}
 8004016:	46bd      	mov	sp, r7
 8004018:	b00f      	add	sp, #60	; 0x3c
 800401a:	bd90      	pop	{r4, r7, pc}
 800401c:	20000010 	.word	0x20000010
 8004020:	2000000e 	.word	0x2000000e

08004024 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8004024:	b5b0      	push	{r4, r5, r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af02      	add	r7, sp, #8
 800402a:	0005      	movs	r5, r0
 800402c:	000c      	movs	r4, r1
 800402e:	0010      	movs	r0, r2
 8004030:	0019      	movs	r1, r3
 8004032:	1dbb      	adds	r3, r7, #6
 8004034:	1c2a      	adds	r2, r5, #0
 8004036:	801a      	strh	r2, [r3, #0]
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	1c22      	adds	r2, r4, #0
 800403c:	801a      	strh	r2, [r3, #0]
 800403e:	1cbb      	adds	r3, r7, #2
 8004040:	1c02      	adds	r2, r0, #0
 8004042:	801a      	strh	r2, [r3, #0]
 8004044:	003b      	movs	r3, r7
 8004046:	1c0a      	adds	r2, r1, #0
 8004048:	801a      	strh	r2, [r3, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800404a:	4b5b      	ldr	r3, [pc, #364]	; (80041b8 <ILI9341_Draw_Rectangle+0x194>)
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	b29b      	uxth	r3, r3
 8004050:	1dba      	adds	r2, r7, #6
 8004052:	8812      	ldrh	r2, [r2, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d300      	bcc.n	800405a <ILI9341_Draw_Rectangle+0x36>
 8004058:	e0a9      	b.n	80041ae <ILI9341_Draw_Rectangle+0x18a>
 800405a:	4b58      	ldr	r3, [pc, #352]	; (80041bc <ILI9341_Draw_Rectangle+0x198>)
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	1d3a      	adds	r2, r7, #4
 8004062:	8812      	ldrh	r2, [r2, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d300      	bcc.n	800406a <ILI9341_Draw_Rectangle+0x46>
 8004068:	e0a1      	b.n	80041ae <ILI9341_Draw_Rectangle+0x18a>
	if((xpos+width-1)>=LCD_WIDTH)
 800406a:	1dbb      	adds	r3, r7, #6
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	1cbb      	adds	r3, r7, #2
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	18d3      	adds	r3, r2, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	4a50      	ldr	r2, [pc, #320]	; (80041b8 <ILI9341_Draw_Rectangle+0x194>)
 8004078:	8812      	ldrh	r2, [r2, #0]
 800407a:	b292      	uxth	r2, r2
 800407c:	4293      	cmp	r3, r2
 800407e:	db07      	blt.n	8004090 <ILI9341_Draw_Rectangle+0x6c>
		{
			width=LCD_WIDTH-xpos;
 8004080:	4b4d      	ldr	r3, [pc, #308]	; (80041b8 <ILI9341_Draw_Rectangle+0x194>)
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b299      	uxth	r1, r3
 8004086:	1cbb      	adds	r3, r7, #2
 8004088:	1dba      	adds	r2, r7, #6
 800408a:	8812      	ldrh	r2, [r2, #0]
 800408c:	1a8a      	subs	r2, r1, r2
 800408e:	801a      	strh	r2, [r3, #0]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8004090:	1d3b      	adds	r3, r7, #4
 8004092:	881a      	ldrh	r2, [r3, #0]
 8004094:	003b      	movs	r3, r7
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	18d3      	adds	r3, r2, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	4a47      	ldr	r2, [pc, #284]	; (80041bc <ILI9341_Draw_Rectangle+0x198>)
 800409e:	8812      	ldrh	r2, [r2, #0]
 80040a0:	b292      	uxth	r2, r2
 80040a2:	4293      	cmp	r3, r2
 80040a4:	db07      	blt.n	80040b6 <ILI9341_Draw_Rectangle+0x92>
		{
			height=LCD_HEIGHT-ypos;
 80040a6:	4b45      	ldr	r3, [pc, #276]	; (80041bc <ILI9341_Draw_Rectangle+0x198>)
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b299      	uxth	r1, r3
 80040ac:	003b      	movs	r3, r7
 80040ae:	1d3a      	adds	r2, r7, #4
 80040b0:	8812      	ldrh	r2, [r2, #0]
 80040b2:	1a8a      	subs	r2, r1, r2
 80040b4:	801a      	strh	r2, [r3, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 80040b6:	1dba      	adds	r2, r7, #6
 80040b8:	1cbb      	adds	r3, r7, #2
 80040ba:	8812      	ldrh	r2, [r2, #0]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	18d3      	adds	r3, r2, r3
 80040c0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 80040c6:	1d3a      	adds	r2, r7, #4
 80040c8:	003b      	movs	r3, r7
 80040ca:	8812      	ldrh	r2, [r2, #0]
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	18d3      	adds	r3, r2, r3
 80040d0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	8819      	ldrh	r1, [r3, #0]
 80040da:	1dbb      	adds	r3, r7, #6
 80040dc:	8818      	ldrh	r0, [r3, #0]
 80040de:	0013      	movs	r3, r2
 80040e0:	0022      	movs	r2, r4
 80040e2:	f7ff fd79 	bl	8003bd8 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 80040e6:	200e      	movs	r0, #14
 80040e8:	183b      	adds	r3, r7, r0
 80040ea:	003a      	movs	r2, r7
 80040ec:	1cb9      	adds	r1, r7, #2
 80040ee:	8812      	ldrh	r2, [r2, #0]
 80040f0:	8809      	ldrh	r1, [r1, #0]
 80040f2:	434a      	muls	r2, r1
 80040f4:	801a      	strh	r2, [r3, #0]
	uint8_t truncated = 0;
 80040f6:	230d      	movs	r3, #13
 80040f8:	18fb      	adds	r3, r7, r3
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]

	if((size & 1) && (size > 1))		// don't round down to zero!
 80040fe:	183b      	adds	r3, r7, r0
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	2201      	movs	r2, #1
 8004104:	4013      	ands	r3, r2
 8004106:	d010      	beq.n	800412a <ILI9341_Draw_Rectangle+0x106>
 8004108:	230e      	movs	r3, #14
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d90b      	bls.n	800412a <ILI9341_Draw_Rectangle+0x106>
	{
		truncated = 1;
 8004112:	230d      	movs	r3, #13
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	2201      	movs	r2, #1
 8004118:	701a      	strb	r2, [r3, #0]
	 	size = ((size >> 1) * 2);
 800411a:	220e      	movs	r2, #14
 800411c:	18bb      	adds	r3, r7, r2
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	085b      	lsrs	r3, r3, #1
 8004122:	b29b      	uxth	r3, r3
 8004124:	18ba      	adds	r2, r7, r2
 8004126:	18db      	adds	r3, r3, r3
 8004128:	8013      	strh	r3, [r2, #0]
	}

	_LCD_Write_Frame(	xpos,
 800412a:	230e      	movs	r3, #14
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	881c      	ldrh	r4, [r3, #0]
 8004130:	2320      	movs	r3, #32
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	881a      	ldrh	r2, [r3, #0]
 8004136:	1d3b      	adds	r3, r7, #4
 8004138:	8819      	ldrh	r1, [r3, #0]
 800413a:	1dbb      	adds	r3, r7, #6
 800413c:	8818      	ldrh	r0, [r3, #0]
 800413e:	2324      	movs	r3, #36	; 0x24
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	0023      	movs	r3, r4
 8004148:	f000 f8ba 	bl	80042c0 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800414c:	230d      	movs	r3, #13
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d02c      	beq.n	80041b0 <ILI9341_Draw_Rectangle+0x18c>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8004156:	1dba      	adds	r2, r7, #6
 8004158:	1cbb      	adds	r3, r7, #2
 800415a:	8812      	ldrh	r2, [r2, #0]
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	18d3      	adds	r3, r2, r3
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b02      	subs	r3, #2
 8004164:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8004166:	1d3a      	adds	r2, r7, #4
 8004168:	003b      	movs	r3, r7
 800416a:	8812      	ldrh	r2, [r2, #0]
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	18d3      	adds	r3, r2, r3
 8004170:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8004172:	3b01      	subs	r3, #1
 8004174:	b29b      	uxth	r3, r3
 8004176:	2420      	movs	r4, #32
 8004178:	193a      	adds	r2, r7, r4
 800417a:	8812      	ldrh	r2, [r2, #0]
 800417c:	0019      	movs	r1, r3
 800417e:	f7ff fdad 	bl	8003cdc <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8004182:	1dba      	adds	r2, r7, #6
 8004184:	1cbb      	adds	r3, r7, #2
 8004186:	8812      	ldrh	r2, [r2, #0]
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	18d3      	adds	r3, r2, r3
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8004192:	1d3a      	adds	r2, r7, #4
 8004194:	003b      	movs	r3, r7
 8004196:	8812      	ldrh	r2, [r2, #0]
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	18d3      	adds	r3, r2, r3
 800419c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	193a      	adds	r2, r7, r4
 80041a4:	8812      	ldrh	r2, [r2, #0]
 80041a6:	0019      	movs	r1, r3
 80041a8:	f7ff fd98 	bl	8003cdc <ILI9341_Draw_Pixel>
 80041ac:	e000      	b.n	80041b0 <ILI9341_Draw_Rectangle+0x18c>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80041ae:	46c0      	nop			; (mov r8, r8)
							colour);
	}
}
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b004      	add	sp, #16
 80041b4:	bdb0      	pop	{r4, r5, r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	20000010 	.word	0x20000010
 80041bc:	2000000e 	.word	0x2000000e

080041c0 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	0002      	movs	r2, r0
 80041c8:	1dfb      	adds	r3, r7, #7
 80041ca:	701a      	strb	r2, [r3, #0]

	uint8_t screen_rotation = rotation;
 80041cc:	240f      	movs	r4, #15
 80041ce:	193b      	adds	r3, r7, r4
 80041d0:	1dfa      	adds	r2, r7, #7
 80041d2:	7812      	ldrb	r2, [r2, #0]
 80041d4:	701a      	strb	r2, [r3, #0]

	_LCD_SendCommand(0x36);
 80041d6:	2036      	movs	r0, #54	; 0x36
 80041d8:	f000 f956 	bl	8004488 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d013      	beq.n	800420c <ILI9341_Set_Rotation+0x4c>
 80041e4:	dc02      	bgt.n	80041ec <ILI9341_Set_Rotation+0x2c>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <ILI9341_Set_Rotation+0x36>
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80041ea:	e030      	b.n	800424e <ILI9341_Set_Rotation+0x8e>
	switch(screen_rotation)
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d018      	beq.n	8004222 <ILI9341_Set_Rotation+0x62>
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d021      	beq.n	8004238 <ILI9341_Set_Rotation+0x78>
			break;
 80041f4:	e02b      	b.n	800424e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x08);
 80041f6:	2048      	movs	r0, #72	; 0x48
 80041f8:	f000 f980 	bl	80044fc <_LCD_SendData>
			LCD_WIDTH = 240;
 80041fc:	4b16      	ldr	r3, [pc, #88]	; (8004258 <ILI9341_Set_Rotation+0x98>)
 80041fe:	22f0      	movs	r2, #240	; 0xf0
 8004200:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8004202:	4b16      	ldr	r3, [pc, #88]	; (800425c <ILI9341_Set_Rotation+0x9c>)
 8004204:	22a0      	movs	r2, #160	; 0xa0
 8004206:	0052      	lsls	r2, r2, #1
 8004208:	801a      	strh	r2, [r3, #0]
			break;
 800420a:	e020      	b.n	800424e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x20|0x08);
 800420c:	2028      	movs	r0, #40	; 0x28
 800420e:	f000 f975 	bl	80044fc <_LCD_SendData>
			LCD_WIDTH  = 320;
 8004212:	4b11      	ldr	r3, [pc, #68]	; (8004258 <ILI9341_Set_Rotation+0x98>)
 8004214:	22a0      	movs	r2, #160	; 0xa0
 8004216:	0052      	lsls	r2, r2, #1
 8004218:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <ILI9341_Set_Rotation+0x9c>)
 800421c:	22f0      	movs	r2, #240	; 0xf0
 800421e:	801a      	strh	r2, [r3, #0]
			break;
 8004220:	e015      	b.n	800424e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x80|0x08);
 8004222:	2088      	movs	r0, #136	; 0x88
 8004224:	f000 f96a 	bl	80044fc <_LCD_SendData>
			LCD_WIDTH  = 240;
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <ILI9341_Set_Rotation+0x98>)
 800422a:	22f0      	movs	r2, #240	; 0xf0
 800422c:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800422e:	4b0b      	ldr	r3, [pc, #44]	; (800425c <ILI9341_Set_Rotation+0x9c>)
 8004230:	22a0      	movs	r2, #160	; 0xa0
 8004232:	0052      	lsls	r2, r2, #1
 8004234:	801a      	strh	r2, [r3, #0]
			break;
 8004236:	e00a      	b.n	800424e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x80|0x20|0x08);
 8004238:	20e8      	movs	r0, #232	; 0xe8
 800423a:	f000 f95f 	bl	80044fc <_LCD_SendData>
			LCD_WIDTH  = 320;
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <ILI9341_Set_Rotation+0x98>)
 8004240:	22a0      	movs	r2, #160	; 0xa0
 8004242:	0052      	lsls	r2, r2, #1
 8004244:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004246:	4b05      	ldr	r3, [pc, #20]	; (800425c <ILI9341_Set_Rotation+0x9c>)
 8004248:	22f0      	movs	r2, #240	; 0xf0
 800424a:	801a      	strh	r2, [r3, #0]
			break;
 800424c:	46c0      	nop			; (mov r8, r8)
	}
}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	46bd      	mov	sp, r7
 8004252:	b005      	add	sp, #20
 8004254:	bd90      	pop	{r4, r7, pc}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	20000010 	.word	0x20000010
 800425c:	2000000e 	.word	0x2000000e

08004260 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <_LCD_Enable+0x18>)
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	4b03      	ldr	r3, [pc, #12]	; (8004278 <_LCD_Enable+0x18>)
 800426a:	2101      	movs	r1, #1
 800426c:	430a      	orrs	r2, r1
 800426e:	615a      	str	r2, [r3, #20]
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	48000400 	.word	0x48000400

0800427c <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8004280:	4b0e      	ldr	r3, [pc, #56]	; (80042bc <_LCD_Reset+0x40>)
 8004282:	695a      	ldr	r2, [r3, #20]
 8004284:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <_LCD_Reset+0x40>)
 8004286:	2101      	movs	r1, #1
 8004288:	438a      	bics	r2, r1
 800428a:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 800428c:	20c8      	movs	r0, #200	; 0xc8
 800428e:	f7fd fa7d 	bl	800178c <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004292:	2390      	movs	r3, #144	; 0x90
 8004294:	05db      	lsls	r3, r3, #23
 8004296:	695a      	ldr	r2, [r3, #20]
 8004298:	2390      	movs	r3, #144	; 0x90
 800429a:	05db      	lsls	r3, r3, #23
 800429c:	2108      	movs	r1, #8
 800429e:	438a      	bics	r2, r1
 80042a0:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 80042a2:	20c8      	movs	r0, #200	; 0xc8
 80042a4:	f7fd fa72 	bl	800178c <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80042a8:	4b04      	ldr	r3, [pc, #16]	; (80042bc <_LCD_Reset+0x40>)
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	4b03      	ldr	r3, [pc, #12]	; (80042bc <_LCD_Reset+0x40>)
 80042ae:	2101      	movs	r1, #1
 80042b0:	430a      	orrs	r2, r1
 80042b2:	615a      	str	r2, [r3, #20]
}
 80042b4:	46c0      	nop			; (mov r8, r8)
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	48000400 	.word	0x48000400

080042c0 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 80042c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c2:	b095      	sub	sp, #84	; 0x54
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	0006      	movs	r6, r0
 80042c8:	0008      	movs	r0, r1
 80042ca:	0011      	movs	r1, r2
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	230e      	movs	r3, #14
 80042d0:	2218      	movs	r2, #24
 80042d2:	4694      	mov	ip, r2
 80042d4:	44bc      	add	ip, r7
 80042d6:	4463      	add	r3, ip
 80042d8:	1c32      	adds	r2, r6, #0
 80042da:	801a      	strh	r2, [r3, #0]
 80042dc:	230c      	movs	r3, #12
 80042de:	2218      	movs	r2, #24
 80042e0:	4694      	mov	ip, r2
 80042e2:	44bc      	add	ip, r7
 80042e4:	4463      	add	r3, ip
 80042e6:	1c02      	adds	r2, r0, #0
 80042e8:	801a      	strh	r2, [r3, #0]
 80042ea:	230a      	movs	r3, #10
 80042ec:	2218      	movs	r2, #24
 80042ee:	4694      	mov	ip, r2
 80042f0:	44bc      	add	ip, r7
 80042f2:	4463      	add	r3, ip
 80042f4:	1c0a      	adds	r2, r1, #0
 80042f6:	801a      	strh	r2, [r3, #0]
 80042f8:	466b      	mov	r3, sp
 80042fa:	61bb      	str	r3, [r7, #24]

	uint32_t buffer_size = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	647b      	str	r3, [r7, #68]	; 0x44
	if((chunk_size*2) < BURST_MAX_SIZE)
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4a5f      	ldr	r2, [pc, #380]	; (8004484 <_LCD_Write_Frame+0x1c4>)
 8004306:	8812      	ldrh	r2, [r2, #0]
 8004308:	4293      	cmp	r3, r2
 800430a:	d202      	bcs.n	8004312 <_LCD_Write_Frame+0x52>
	{
		buffer_size = chunk_size;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	647b      	str	r3, [r7, #68]	; 0x44
 8004310:	e002      	b.n	8004318 <_LCD_Write_Frame+0x58>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8004312:	4b5c      	ldr	r3, [pc, #368]	; (8004484 <_LCD_Write_Frame+0x1c4>)
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	647b      	str	r3, [r7, #68]	; 0x44
	}

	unsigned char chifted = 	colour>>8;;
 8004318:	230a      	movs	r3, #10
 800431a:	2218      	movs	r2, #24
 800431c:	4694      	mov	ip, r2
 800431e:	44bc      	add	ip, r7
 8004320:	4463      	add	r3, ip
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	0a1b      	lsrs	r3, r3, #8
 8004326:	b29a      	uxth	r2, r3
 8004328:	231f      	movs	r3, #31
 800432a:	2118      	movs	r1, #24
 800432c:	468c      	mov	ip, r1
 800432e:	44bc      	add	ip, r7
 8004330:	4463      	add	r3, ip
 8004332:	701a      	strb	r2, [r3, #0]
	unsigned char burst_buffer[buffer_size];
 8004334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004336:	001a      	movs	r2, r3
 8004338:	3a01      	subs	r2, #1
 800433a:	633a      	str	r2, [r7, #48]	; 0x30
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	2200      	movs	r2, #0
 8004340:	60fa      	str	r2, [r7, #12]
 8004342:	68b8      	ldr	r0, [r7, #8]
 8004344:	68f9      	ldr	r1, [r7, #12]
 8004346:	0002      	movs	r2, r0
 8004348:	0f52      	lsrs	r2, r2, #29
 800434a:	000e      	movs	r6, r1
 800434c:	00f6      	lsls	r6, r6, #3
 800434e:	617e      	str	r6, [r7, #20]
 8004350:	697e      	ldr	r6, [r7, #20]
 8004352:	4316      	orrs	r6, r2
 8004354:	617e      	str	r6, [r7, #20]
 8004356:	0002      	movs	r2, r0
 8004358:	00d2      	lsls	r2, r2, #3
 800435a:	613a      	str	r2, [r7, #16]
 800435c:	603b      	str	r3, [r7, #0]
 800435e:	2200      	movs	r2, #0
 8004360:	607a      	str	r2, [r7, #4]
 8004362:	6838      	ldr	r0, [r7, #0]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	0002      	movs	r2, r0
 8004368:	0f52      	lsrs	r2, r2, #29
 800436a:	000e      	movs	r6, r1
 800436c:	00f5      	lsls	r5, r6, #3
 800436e:	4315      	orrs	r5, r2
 8004370:	0002      	movs	r2, r0
 8004372:	00d4      	lsls	r4, r2, #3
 8004374:	3307      	adds	r3, #7
 8004376:	08db      	lsrs	r3, r3, #3
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	466a      	mov	r2, sp
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	469d      	mov	sp, r3
 8004380:	466b      	mov	r3, sp
 8004382:	3300      	adds	r3, #0
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8004386:	2300      	movs	r3, #0
 8004388:	64bb      	str	r3, [r7, #72]	; 0x48
 800438a:	e017      	b.n	80043bc <_LCD_Write_Frame+0xfc>
	{
			burst_buffer[j] = 	chifted;
 800438c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800438e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004390:	18d3      	adds	r3, r2, r3
 8004392:	221f      	movs	r2, #31
 8004394:	2118      	movs	r1, #24
 8004396:	468c      	mov	ip, r1
 8004398:	44bc      	add	ip, r7
 800439a:	4462      	add	r2, ip
 800439c:	7812      	ldrb	r2, [r2, #0]
 800439e:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 80043a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a2:	3301      	adds	r3, #1
 80043a4:	220a      	movs	r2, #10
 80043a6:	2118      	movs	r1, #24
 80043a8:	468c      	mov	ip, r1
 80043aa:	44bc      	add	ip, r7
 80043ac:	4462      	add	r2, ip
 80043ae:	8812      	ldrh	r2, [r2, #0]
 80043b0:	b2d1      	uxtb	r1, r2
 80043b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b4:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80043b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b8:	3302      	adds	r3, #2
 80043ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80043bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d3e3      	bcc.n	800438c <_LCD_Write_Frame+0xcc>
	}
	
	uint32_t Sending_size = chunk_size*2;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	62bb      	str	r3, [r7, #40]	; 0x28

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 80043ca:	2301      	movs	r3, #1
 80043cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Remainder_from_block = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	643b      	str	r3, [r7, #64]	; 0x40
	if(chunk_size > 0)
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00c      	beq.n	80043f2 <_LCD_Write_Frame+0x132>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 80043d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043dc:	f7fb fe94 	bl	8000108 <__udivsi3>
 80043e0:	0003      	movs	r3, r0
 80043e2:	64fb      	str	r3, [r7, #76]	; 0x4c
			Remainder_from_block 	= Sending_size%buffer_size;
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043e8:	0018      	movs	r0, r3
 80043ea:	f7fb ff13 	bl	8000214 <__aeabi_uidivmod>
 80043ee:	000b      	movs	r3, r1
 80043f0:	643b      	str	r3, [r7, #64]	; 0x40
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80043f2:	2390      	movs	r3, #144	; 0x90
 80043f4:	05db      	lsls	r3, r3, #23
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	2390      	movs	r3, #144	; 0x90
 80043fa:	05db      	lsls	r3, r3, #23
 80043fc:	2110      	movs	r1, #16
 80043fe:	430a      	orrs	r2, r1
 8004400:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004402:	2390      	movs	r3, #144	; 0x90
 8004404:	05db      	lsls	r3, r3, #23
 8004406:	695a      	ldr	r2, [r3, #20]
 8004408:	2390      	movs	r3, #144	; 0x90
 800440a:	05db      	lsls	r3, r3, #23
 800440c:	2108      	movs	r1, #8
 800440e:	438a      	bics	r2, r1
 8004410:	615a      	str	r2, [r3, #20]
//TODO
	if(Sending_in_Block != 0)
 8004412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00f      	beq.n	8004438 <_LCD_Write_Frame+0x178>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8004418:	2300      	movs	r3, #0
 800441a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800441c:	e008      	b.n	8004430 <_LCD_Write_Frame+0x170>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800441e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004420:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004422:	230a      	movs	r3, #10
 8004424:	2200      	movs	r2, #0
 8004426:	f000 f8dd 	bl	80045e4 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800442a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800442c:	3301      	adds	r3, #1
 800442e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004434:	429a      	cmp	r2, r3
 8004436:	d3f2      	bcc.n	800441e <_LCD_Write_Frame+0x15e>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8004438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800443a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800443c:	230a      	movs	r3, #10
 800443e:	2200      	movs	r2, #0
 8004440:	f000 f8d0 	bl	80045e4 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004444:	2300      	movs	r3, #0
 8004446:	63bb      	str	r3, [r7, #56]	; 0x38
 8004448:	e00a      	b.n	8004460 <_LCD_Write_Frame+0x1a0>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800444a:	2390      	movs	r3, #144	; 0x90
 800444c:	05db      	lsls	r3, r3, #23
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	2390      	movs	r3, #144	; 0x90
 8004452:	05db      	lsls	r3, r3, #23
 8004454:	2108      	movs	r1, #8
 8004456:	438a      	bics	r2, r1
 8004458:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	3301      	adds	r3, #1
 800445e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004462:	2b02      	cmp	r3, #2
 8004464:	ddf1      	ble.n	800444a <_LCD_Write_Frame+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8004466:	2390      	movs	r3, #144	; 0x90
 8004468:	05db      	lsls	r3, r3, #23
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	2390      	movs	r3, #144	; 0x90
 800446e:	05db      	lsls	r3, r3, #23
 8004470:	2108      	movs	r1, #8
 8004472:	430a      	orrs	r2, r1
 8004474:	615a      	str	r2, [r3, #20]
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	469d      	mov	sp, r3

}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	46bd      	mov	sp, r7
 800447e:	b015      	add	sp, #84	; 0x54
 8004480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	20000012 	.word	0x20000012

08004488 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	0002      	movs	r2, r0
 8004490:	1dfb      	adds	r3, r7, #7
 8004492:	701a      	strb	r2, [r3, #0]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004494:	2390      	movs	r3, #144	; 0x90
 8004496:	05db      	lsls	r3, r3, #23
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	2390      	movs	r3, #144	; 0x90
 800449c:	05db      	lsls	r3, r3, #23
 800449e:	2108      	movs	r1, #8
 80044a0:	438a      	bics	r2, r1
 80044a2:	615a      	str	r2, [r3, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80044a4:	2390      	movs	r3, #144	; 0x90
 80044a6:	05db      	lsls	r3, r3, #23
 80044a8:	695a      	ldr	r2, [r3, #20]
 80044aa:	2390      	movs	r3, #144	; 0x90
 80044ac:	05db      	lsls	r3, r3, #23
 80044ae:	2110      	movs	r1, #16
 80044b0:	438a      	bics	r2, r1
 80044b2:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(command, 0 , 0);
 80044b4:	1dfb      	adds	r3, r7, #7
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2200      	movs	r2, #0
 80044ba:	2100      	movs	r1, #0
 80044bc:	0018      	movs	r0, r3
 80044be:	f000 f857 	bl	8004570 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	e00a      	b.n	80044de <_LCD_SendCommand+0x56>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80044c8:	2390      	movs	r3, #144	; 0x90
 80044ca:	05db      	lsls	r3, r3, #23
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	2390      	movs	r3, #144	; 0x90
 80044d0:	05db      	lsls	r3, r3, #23
 80044d2:	2108      	movs	r1, #8
 80044d4:	438a      	bics	r2, r1
 80044d6:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3301      	adds	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	ddf1      	ble.n	80044c8 <_LCD_SendCommand+0x40>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80044e4:	2390      	movs	r3, #144	; 0x90
 80044e6:	05db      	lsls	r3, r3, #23
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	2390      	movs	r3, #144	; 0x90
 80044ec:	05db      	lsls	r3, r3, #23
 80044ee:	2108      	movs	r1, #8
 80044f0:	430a      	orrs	r2, r1
 80044f2:	615a      	str	r2, [r3, #20]
}
 80044f4:	46c0      	nop			; (mov r8, r8)
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b004      	add	sp, #16
 80044fa:	bd80      	pop	{r7, pc}

080044fc <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	0002      	movs	r2, r0
 8004504:	1dfb      	adds	r3, r7, #7
 8004506:	701a      	strb	r2, [r3, #0]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8004508:	2390      	movs	r3, #144	; 0x90
 800450a:	05db      	lsls	r3, r3, #23
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	2390      	movs	r3, #144	; 0x90
 8004510:	05db      	lsls	r3, r3, #23
 8004512:	2110      	movs	r1, #16
 8004514:	430a      	orrs	r2, r1
 8004516:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004518:	2390      	movs	r3, #144	; 0x90
 800451a:	05db      	lsls	r3, r3, #23
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	2390      	movs	r3, #144	; 0x90
 8004520:	05db      	lsls	r3, r3, #23
 8004522:	2108      	movs	r1, #8
 8004524:	438a      	bics	r2, r1
 8004526:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(data, 0 , 0);
 8004528:	1dfb      	adds	r3, r7, #7
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2200      	movs	r2, #0
 800452e:	2100      	movs	r1, #0
 8004530:	0018      	movs	r0, r3
 8004532:	f000 f81d 	bl	8004570 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	e00a      	b.n	8004552 <_LCD_SendData+0x56>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800453c:	2390      	movs	r3, #144	; 0x90
 800453e:	05db      	lsls	r3, r3, #23
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	2390      	movs	r3, #144	; 0x90
 8004544:	05db      	lsls	r3, r3, #23
 8004546:	2108      	movs	r1, #8
 8004548:	438a      	bics	r2, r1
 800454a:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3301      	adds	r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b02      	cmp	r3, #2
 8004556:	ddf1      	ble.n	800453c <_LCD_SendData+0x40>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004558:	2390      	movs	r3, #144	; 0x90
 800455a:	05db      	lsls	r3, r3, #23
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	2390      	movs	r3, #144	; 0x90
 8004560:	05db      	lsls	r3, r3, #23
 8004562:	2108      	movs	r1, #8
 8004564:	438a      	bics	r2, r1
 8004566:	615a      	str	r2, [r3, #20]
}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b004      	add	sp, #16
 800456e:	bd80      	pop	{r7, pc}

08004570 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8004570:	b590      	push	{r4, r7, lr}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	0004      	movs	r4, r0
 8004578:	0008      	movs	r0, r1
 800457a:	0011      	movs	r1, r2
 800457c:	1dfb      	adds	r3, r7, #7
 800457e:	1c22      	adds	r2, r4, #0
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	1dbb      	adds	r3, r7, #6
 8004584:	1c02      	adds	r2, r0, #0
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	1d7b      	adds	r3, r7, #5
 800458a:	1c0a      	adds	r2, r1, #0
 800458c:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	e003      	b.n	800459c <_SPI_SendByte+0x2c>
   		asm("nop");
 8004594:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3301      	adds	r3, #1
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	1dbb      	adds	r3, r7, #6
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	dbf6      	blt.n	8004594 <_SPI_SendByte+0x24>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80045a6:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <_SPI_SendByte+0x6c>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2202      	movs	r2, #2
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d103      	bne.n	80045ba <_SPI_SendByte+0x4a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 80045b2:	4a0b      	ldr	r2, [pc, #44]	; (80045e0 <_SPI_SendByte+0x70>)
 80045b4:	1dfb      	adds	r3, r7, #7
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	e003      	b.n	80045c8 <_SPI_SendByte+0x58>
   		asm("nop");
 80045c0:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	3301      	adds	r3, #1
 80045c6:	60bb      	str	r3, [r7, #8]
 80045c8:	1d7b      	adds	r3, r7, #5
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	dbf6      	blt.n	80045c0 <_SPI_SendByte+0x50>

#endif

}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b005      	add	sp, #20
 80045d8:	bd90      	pop	{r4, r7, pc}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	40013000 	.word	0x40013000
 80045e0:	4001300c 	.word	0x4001300c

080045e4 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	0019      	movs	r1, r3
 80045f0:	1dfb      	adds	r3, r7, #7
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	1dbb      	adds	r3, r7, #6
 80045f6:	1c0a      	adds	r2, r1, #0
 80045f8:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	e003      	b.n	8004608 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 8004600:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3301      	adds	r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	1dfb      	adds	r3, r7, #7
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	429a      	cmp	r2, r3
 8004610:	dbf6      	blt.n	8004600 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 8004616:	e01d      	b.n	8004654 <_SPI_SendByteMultiByte+0x70>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8004618:	4b1b      	ldr	r3, [pc, #108]	; (8004688 <_SPI_SendByteMultiByte+0xa4>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2202      	movs	r2, #2
 800461e:	4013      	ands	r3, r2
 8004620:	2b02      	cmp	r3, #2
 8004622:	d117      	bne.n	8004654 <_SPI_SendByteMultiByte+0x70>
		{
			if (buffer_size > 1U)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d90a      	bls.n	8004640 <_SPI_SendByteMultiByte+0x5c>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	881a      	ldrh	r2, [r3, #0]
 800462e:	4b16      	ldr	r3, [pc, #88]	; (8004688 <_SPI_SendByteMultiByte+0xa4>)
 8004630:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	3302      	adds	r3, #2
 8004636:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	3b02      	subs	r3, #2
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	e009      	b.n	8004654 <_SPI_SendByteMultiByte+0x70>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 8004640:	4a12      	ldr	r2, [pc, #72]	; (800468c <_SPI_SendByteMultiByte+0xa8>)
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	3301      	adds	r3, #1
 800464c:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	3b01      	subs	r3, #1
 8004652:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1de      	bne.n	8004618 <_SPI_SendByteMultiByte+0x34>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800465a:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <_SPI_SendByteMultiByte+0xa4>)
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <_SPI_SendByteMultiByte+0xa4>)
 8004660:	2140      	movs	r1, #64	; 0x40
 8004662:	438a      	bics	r2, r1
 8004664:	609a      	str	r2, [r3, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e003      	b.n	8004674 <_SPI_SendByteMultiByte+0x90>
   		asm("nop");
 800466c:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	3301      	adds	r3, #1
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	1dbb      	adds	r3, r7, #6
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	429a      	cmp	r2, r3
 800467c:	dbf6      	blt.n	800466c <_SPI_SendByteMultiByte+0x88>

#endif

}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b008      	add	sp, #32
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	40013000 	.word	0x40013000
 800468c:	4001300c 	.word	0x4001300c

08004690 <__errno>:
 8004690:	4b01      	ldr	r3, [pc, #4]	; (8004698 <__errno+0x8>)
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	4770      	bx	lr
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	20000014 	.word	0x20000014

0800469c <__libc_init_array>:
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	2600      	movs	r6, #0
 80046a0:	4d0c      	ldr	r5, [pc, #48]	; (80046d4 <__libc_init_array+0x38>)
 80046a2:	4c0d      	ldr	r4, [pc, #52]	; (80046d8 <__libc_init_array+0x3c>)
 80046a4:	1b64      	subs	r4, r4, r5
 80046a6:	10a4      	asrs	r4, r4, #2
 80046a8:	42a6      	cmp	r6, r4
 80046aa:	d109      	bne.n	80046c0 <__libc_init_array+0x24>
 80046ac:	2600      	movs	r6, #0
 80046ae:	f000 fc3b 	bl	8004f28 <_init>
 80046b2:	4d0a      	ldr	r5, [pc, #40]	; (80046dc <__libc_init_array+0x40>)
 80046b4:	4c0a      	ldr	r4, [pc, #40]	; (80046e0 <__libc_init_array+0x44>)
 80046b6:	1b64      	subs	r4, r4, r5
 80046b8:	10a4      	asrs	r4, r4, #2
 80046ba:	42a6      	cmp	r6, r4
 80046bc:	d105      	bne.n	80046ca <__libc_init_array+0x2e>
 80046be:	bd70      	pop	{r4, r5, r6, pc}
 80046c0:	00b3      	lsls	r3, r6, #2
 80046c2:	58eb      	ldr	r3, [r5, r3]
 80046c4:	4798      	blx	r3
 80046c6:	3601      	adds	r6, #1
 80046c8:	e7ee      	b.n	80046a8 <__libc_init_array+0xc>
 80046ca:	00b3      	lsls	r3, r6, #2
 80046cc:	58eb      	ldr	r3, [r5, r3]
 80046ce:	4798      	blx	r3
 80046d0:	3601      	adds	r6, #1
 80046d2:	e7f2      	b.n	80046ba <__libc_init_array+0x1e>
 80046d4:	0800521c 	.word	0x0800521c
 80046d8:	0800521c 	.word	0x0800521c
 80046dc:	0800521c 	.word	0x0800521c
 80046e0:	08005220 	.word	0x08005220

080046e4 <memset>:
 80046e4:	0003      	movs	r3, r0
 80046e6:	1812      	adds	r2, r2, r0
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d100      	bne.n	80046ee <memset+0xa>
 80046ec:	4770      	bx	lr
 80046ee:	7019      	strb	r1, [r3, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	e7f9      	b.n	80046e8 <memset+0x4>

080046f4 <sniprintf>:
 80046f4:	b40c      	push	{r2, r3}
 80046f6:	b530      	push	{r4, r5, lr}
 80046f8:	4b16      	ldr	r3, [pc, #88]	; (8004754 <sniprintf+0x60>)
 80046fa:	b09d      	sub	sp, #116	; 0x74
 80046fc:	1e0c      	subs	r4, r1, #0
 80046fe:	681d      	ldr	r5, [r3, #0]
 8004700:	da08      	bge.n	8004714 <sniprintf+0x20>
 8004702:	238b      	movs	r3, #139	; 0x8b
 8004704:	2001      	movs	r0, #1
 8004706:	602b      	str	r3, [r5, #0]
 8004708:	4240      	negs	r0, r0
 800470a:	b01d      	add	sp, #116	; 0x74
 800470c:	bc30      	pop	{r4, r5}
 800470e:	bc08      	pop	{r3}
 8004710:	b002      	add	sp, #8
 8004712:	4718      	bx	r3
 8004714:	2382      	movs	r3, #130	; 0x82
 8004716:	a902      	add	r1, sp, #8
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	818b      	strh	r3, [r1, #12]
 800471c:	2300      	movs	r3, #0
 800471e:	9002      	str	r0, [sp, #8]
 8004720:	6108      	str	r0, [r1, #16]
 8004722:	429c      	cmp	r4, r3
 8004724:	d000      	beq.n	8004728 <sniprintf+0x34>
 8004726:	1e63      	subs	r3, r4, #1
 8004728:	608b      	str	r3, [r1, #8]
 800472a:	614b      	str	r3, [r1, #20]
 800472c:	2301      	movs	r3, #1
 800472e:	425b      	negs	r3, r3
 8004730:	81cb      	strh	r3, [r1, #14]
 8004732:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004734:	ab21      	add	r3, sp, #132	; 0x84
 8004736:	0028      	movs	r0, r5
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	f000 f86f 	bl	800481c <_svfiprintf_r>
 800473e:	1c43      	adds	r3, r0, #1
 8004740:	da01      	bge.n	8004746 <sniprintf+0x52>
 8004742:	238b      	movs	r3, #139	; 0x8b
 8004744:	602b      	str	r3, [r5, #0]
 8004746:	2c00      	cmp	r4, #0
 8004748:	d0df      	beq.n	800470a <sniprintf+0x16>
 800474a:	2300      	movs	r3, #0
 800474c:	9a02      	ldr	r2, [sp, #8]
 800474e:	7013      	strb	r3, [r2, #0]
 8004750:	e7db      	b.n	800470a <sniprintf+0x16>
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	20000014 	.word	0x20000014

08004758 <__ssputs_r>:
 8004758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475a:	688e      	ldr	r6, [r1, #8]
 800475c:	b085      	sub	sp, #20
 800475e:	0007      	movs	r7, r0
 8004760:	000c      	movs	r4, r1
 8004762:	9203      	str	r2, [sp, #12]
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	429e      	cmp	r6, r3
 8004768:	d83c      	bhi.n	80047e4 <__ssputs_r+0x8c>
 800476a:	2390      	movs	r3, #144	; 0x90
 800476c:	898a      	ldrh	r2, [r1, #12]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	421a      	tst	r2, r3
 8004772:	d034      	beq.n	80047de <__ssputs_r+0x86>
 8004774:	2503      	movs	r5, #3
 8004776:	6909      	ldr	r1, [r1, #16]
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	1a5b      	subs	r3, r3, r1
 800477c:	9302      	str	r3, [sp, #8]
 800477e:	6963      	ldr	r3, [r4, #20]
 8004780:	9802      	ldr	r0, [sp, #8]
 8004782:	435d      	muls	r5, r3
 8004784:	0feb      	lsrs	r3, r5, #31
 8004786:	195d      	adds	r5, r3, r5
 8004788:	9b01      	ldr	r3, [sp, #4]
 800478a:	106d      	asrs	r5, r5, #1
 800478c:	3301      	adds	r3, #1
 800478e:	181b      	adds	r3, r3, r0
 8004790:	42ab      	cmp	r3, r5
 8004792:	d900      	bls.n	8004796 <__ssputs_r+0x3e>
 8004794:	001d      	movs	r5, r3
 8004796:	0553      	lsls	r3, r2, #21
 8004798:	d532      	bpl.n	8004800 <__ssputs_r+0xa8>
 800479a:	0029      	movs	r1, r5
 800479c:	0038      	movs	r0, r7
 800479e:	f000 fb23 	bl	8004de8 <_malloc_r>
 80047a2:	1e06      	subs	r6, r0, #0
 80047a4:	d109      	bne.n	80047ba <__ssputs_r+0x62>
 80047a6:	230c      	movs	r3, #12
 80047a8:	603b      	str	r3, [r7, #0]
 80047aa:	2340      	movs	r3, #64	; 0x40
 80047ac:	2001      	movs	r0, #1
 80047ae:	89a2      	ldrh	r2, [r4, #12]
 80047b0:	4240      	negs	r0, r0
 80047b2:	4313      	orrs	r3, r2
 80047b4:	81a3      	strh	r3, [r4, #12]
 80047b6:	b005      	add	sp, #20
 80047b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ba:	9a02      	ldr	r2, [sp, #8]
 80047bc:	6921      	ldr	r1, [r4, #16]
 80047be:	f000 faac 	bl	8004d1a <memcpy>
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	4a14      	ldr	r2, [pc, #80]	; (8004818 <__ssputs_r+0xc0>)
 80047c6:	401a      	ands	r2, r3
 80047c8:	2380      	movs	r3, #128	; 0x80
 80047ca:	4313      	orrs	r3, r2
 80047cc:	81a3      	strh	r3, [r4, #12]
 80047ce:	9b02      	ldr	r3, [sp, #8]
 80047d0:	6126      	str	r6, [r4, #16]
 80047d2:	18f6      	adds	r6, r6, r3
 80047d4:	6026      	str	r6, [r4, #0]
 80047d6:	6165      	str	r5, [r4, #20]
 80047d8:	9e01      	ldr	r6, [sp, #4]
 80047da:	1aed      	subs	r5, r5, r3
 80047dc:	60a5      	str	r5, [r4, #8]
 80047de:	9b01      	ldr	r3, [sp, #4]
 80047e0:	429e      	cmp	r6, r3
 80047e2:	d900      	bls.n	80047e6 <__ssputs_r+0x8e>
 80047e4:	9e01      	ldr	r6, [sp, #4]
 80047e6:	0032      	movs	r2, r6
 80047e8:	9903      	ldr	r1, [sp, #12]
 80047ea:	6820      	ldr	r0, [r4, #0]
 80047ec:	f000 fa9e 	bl	8004d2c <memmove>
 80047f0:	68a3      	ldr	r3, [r4, #8]
 80047f2:	2000      	movs	r0, #0
 80047f4:	1b9b      	subs	r3, r3, r6
 80047f6:	60a3      	str	r3, [r4, #8]
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	199e      	adds	r6, r3, r6
 80047fc:	6026      	str	r6, [r4, #0]
 80047fe:	e7da      	b.n	80047b6 <__ssputs_r+0x5e>
 8004800:	002a      	movs	r2, r5
 8004802:	0038      	movs	r0, r7
 8004804:	f000 fb4e 	bl	8004ea4 <_realloc_r>
 8004808:	1e06      	subs	r6, r0, #0
 800480a:	d1e0      	bne.n	80047ce <__ssputs_r+0x76>
 800480c:	6921      	ldr	r1, [r4, #16]
 800480e:	0038      	movs	r0, r7
 8004810:	f000 faa0 	bl	8004d54 <_free_r>
 8004814:	e7c7      	b.n	80047a6 <__ssputs_r+0x4e>
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	fffffb7f 	.word	0xfffffb7f

0800481c <_svfiprintf_r>:
 800481c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481e:	b0a1      	sub	sp, #132	; 0x84
 8004820:	9003      	str	r0, [sp, #12]
 8004822:	001d      	movs	r5, r3
 8004824:	898b      	ldrh	r3, [r1, #12]
 8004826:	000f      	movs	r7, r1
 8004828:	0016      	movs	r6, r2
 800482a:	061b      	lsls	r3, r3, #24
 800482c:	d511      	bpl.n	8004852 <_svfiprintf_r+0x36>
 800482e:	690b      	ldr	r3, [r1, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10e      	bne.n	8004852 <_svfiprintf_r+0x36>
 8004834:	2140      	movs	r1, #64	; 0x40
 8004836:	f000 fad7 	bl	8004de8 <_malloc_r>
 800483a:	6038      	str	r0, [r7, #0]
 800483c:	6138      	str	r0, [r7, #16]
 800483e:	2800      	cmp	r0, #0
 8004840:	d105      	bne.n	800484e <_svfiprintf_r+0x32>
 8004842:	230c      	movs	r3, #12
 8004844:	9a03      	ldr	r2, [sp, #12]
 8004846:	3801      	subs	r0, #1
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	b021      	add	sp, #132	; 0x84
 800484c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800484e:	2340      	movs	r3, #64	; 0x40
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	2300      	movs	r3, #0
 8004854:	ac08      	add	r4, sp, #32
 8004856:	6163      	str	r3, [r4, #20]
 8004858:	3320      	adds	r3, #32
 800485a:	7663      	strb	r3, [r4, #25]
 800485c:	3310      	adds	r3, #16
 800485e:	76a3      	strb	r3, [r4, #26]
 8004860:	9507      	str	r5, [sp, #28]
 8004862:	0035      	movs	r5, r6
 8004864:	782b      	ldrb	r3, [r5, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <_svfiprintf_r+0x52>
 800486a:	2b25      	cmp	r3, #37	; 0x25
 800486c:	d146      	bne.n	80048fc <_svfiprintf_r+0xe0>
 800486e:	1bab      	subs	r3, r5, r6
 8004870:	9305      	str	r3, [sp, #20]
 8004872:	d00c      	beq.n	800488e <_svfiprintf_r+0x72>
 8004874:	0032      	movs	r2, r6
 8004876:	0039      	movs	r1, r7
 8004878:	9803      	ldr	r0, [sp, #12]
 800487a:	f7ff ff6d 	bl	8004758 <__ssputs_r>
 800487e:	1c43      	adds	r3, r0, #1
 8004880:	d100      	bne.n	8004884 <_svfiprintf_r+0x68>
 8004882:	e0ae      	b.n	80049e2 <_svfiprintf_r+0x1c6>
 8004884:	6962      	ldr	r2, [r4, #20]
 8004886:	9b05      	ldr	r3, [sp, #20]
 8004888:	4694      	mov	ip, r2
 800488a:	4463      	add	r3, ip
 800488c:	6163      	str	r3, [r4, #20]
 800488e:	782b      	ldrb	r3, [r5, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d100      	bne.n	8004896 <_svfiprintf_r+0x7a>
 8004894:	e0a5      	b.n	80049e2 <_svfiprintf_r+0x1c6>
 8004896:	2201      	movs	r2, #1
 8004898:	2300      	movs	r3, #0
 800489a:	4252      	negs	r2, r2
 800489c:	6062      	str	r2, [r4, #4]
 800489e:	a904      	add	r1, sp, #16
 80048a0:	3254      	adds	r2, #84	; 0x54
 80048a2:	1852      	adds	r2, r2, r1
 80048a4:	1c6e      	adds	r6, r5, #1
 80048a6:	6023      	str	r3, [r4, #0]
 80048a8:	60e3      	str	r3, [r4, #12]
 80048aa:	60a3      	str	r3, [r4, #8]
 80048ac:	7013      	strb	r3, [r2, #0]
 80048ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80048b0:	7831      	ldrb	r1, [r6, #0]
 80048b2:	2205      	movs	r2, #5
 80048b4:	4853      	ldr	r0, [pc, #332]	; (8004a04 <_svfiprintf_r+0x1e8>)
 80048b6:	f000 fa25 	bl	8004d04 <memchr>
 80048ba:	1c75      	adds	r5, r6, #1
 80048bc:	2800      	cmp	r0, #0
 80048be:	d11f      	bne.n	8004900 <_svfiprintf_r+0xe4>
 80048c0:	6822      	ldr	r2, [r4, #0]
 80048c2:	06d3      	lsls	r3, r2, #27
 80048c4:	d504      	bpl.n	80048d0 <_svfiprintf_r+0xb4>
 80048c6:	2353      	movs	r3, #83	; 0x53
 80048c8:	a904      	add	r1, sp, #16
 80048ca:	185b      	adds	r3, r3, r1
 80048cc:	2120      	movs	r1, #32
 80048ce:	7019      	strb	r1, [r3, #0]
 80048d0:	0713      	lsls	r3, r2, #28
 80048d2:	d504      	bpl.n	80048de <_svfiprintf_r+0xc2>
 80048d4:	2353      	movs	r3, #83	; 0x53
 80048d6:	a904      	add	r1, sp, #16
 80048d8:	185b      	adds	r3, r3, r1
 80048da:	212b      	movs	r1, #43	; 0x2b
 80048dc:	7019      	strb	r1, [r3, #0]
 80048de:	7833      	ldrb	r3, [r6, #0]
 80048e0:	2b2a      	cmp	r3, #42	; 0x2a
 80048e2:	d016      	beq.n	8004912 <_svfiprintf_r+0xf6>
 80048e4:	0035      	movs	r5, r6
 80048e6:	2100      	movs	r1, #0
 80048e8:	200a      	movs	r0, #10
 80048ea:	68e3      	ldr	r3, [r4, #12]
 80048ec:	782a      	ldrb	r2, [r5, #0]
 80048ee:	1c6e      	adds	r6, r5, #1
 80048f0:	3a30      	subs	r2, #48	; 0x30
 80048f2:	2a09      	cmp	r2, #9
 80048f4:	d94e      	bls.n	8004994 <_svfiprintf_r+0x178>
 80048f6:	2900      	cmp	r1, #0
 80048f8:	d018      	beq.n	800492c <_svfiprintf_r+0x110>
 80048fa:	e010      	b.n	800491e <_svfiprintf_r+0x102>
 80048fc:	3501      	adds	r5, #1
 80048fe:	e7b1      	b.n	8004864 <_svfiprintf_r+0x48>
 8004900:	4b40      	ldr	r3, [pc, #256]	; (8004a04 <_svfiprintf_r+0x1e8>)
 8004902:	6822      	ldr	r2, [r4, #0]
 8004904:	1ac0      	subs	r0, r0, r3
 8004906:	2301      	movs	r3, #1
 8004908:	4083      	lsls	r3, r0
 800490a:	4313      	orrs	r3, r2
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	002e      	movs	r6, r5
 8004910:	e7ce      	b.n	80048b0 <_svfiprintf_r+0x94>
 8004912:	9b07      	ldr	r3, [sp, #28]
 8004914:	1d19      	adds	r1, r3, #4
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	9107      	str	r1, [sp, #28]
 800491a:	2b00      	cmp	r3, #0
 800491c:	db01      	blt.n	8004922 <_svfiprintf_r+0x106>
 800491e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004920:	e004      	b.n	800492c <_svfiprintf_r+0x110>
 8004922:	425b      	negs	r3, r3
 8004924:	60e3      	str	r3, [r4, #12]
 8004926:	2302      	movs	r3, #2
 8004928:	4313      	orrs	r3, r2
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	782b      	ldrb	r3, [r5, #0]
 800492e:	2b2e      	cmp	r3, #46	; 0x2e
 8004930:	d10a      	bne.n	8004948 <_svfiprintf_r+0x12c>
 8004932:	786b      	ldrb	r3, [r5, #1]
 8004934:	2b2a      	cmp	r3, #42	; 0x2a
 8004936:	d135      	bne.n	80049a4 <_svfiprintf_r+0x188>
 8004938:	9b07      	ldr	r3, [sp, #28]
 800493a:	3502      	adds	r5, #2
 800493c:	1d1a      	adds	r2, r3, #4
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	9207      	str	r2, [sp, #28]
 8004942:	2b00      	cmp	r3, #0
 8004944:	db2b      	blt.n	800499e <_svfiprintf_r+0x182>
 8004946:	9309      	str	r3, [sp, #36]	; 0x24
 8004948:	4e2f      	ldr	r6, [pc, #188]	; (8004a08 <_svfiprintf_r+0x1ec>)
 800494a:	7829      	ldrb	r1, [r5, #0]
 800494c:	2203      	movs	r2, #3
 800494e:	0030      	movs	r0, r6
 8004950:	f000 f9d8 	bl	8004d04 <memchr>
 8004954:	2800      	cmp	r0, #0
 8004956:	d006      	beq.n	8004966 <_svfiprintf_r+0x14a>
 8004958:	2340      	movs	r3, #64	; 0x40
 800495a:	1b80      	subs	r0, r0, r6
 800495c:	4083      	lsls	r3, r0
 800495e:	6822      	ldr	r2, [r4, #0]
 8004960:	3501      	adds	r5, #1
 8004962:	4313      	orrs	r3, r2
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	7829      	ldrb	r1, [r5, #0]
 8004968:	2206      	movs	r2, #6
 800496a:	4828      	ldr	r0, [pc, #160]	; (8004a0c <_svfiprintf_r+0x1f0>)
 800496c:	1c6e      	adds	r6, r5, #1
 800496e:	7621      	strb	r1, [r4, #24]
 8004970:	f000 f9c8 	bl	8004d04 <memchr>
 8004974:	2800      	cmp	r0, #0
 8004976:	d03c      	beq.n	80049f2 <_svfiprintf_r+0x1d6>
 8004978:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <_svfiprintf_r+0x1f4>)
 800497a:	2b00      	cmp	r3, #0
 800497c:	d125      	bne.n	80049ca <_svfiprintf_r+0x1ae>
 800497e:	2207      	movs	r2, #7
 8004980:	9b07      	ldr	r3, [sp, #28]
 8004982:	3307      	adds	r3, #7
 8004984:	4393      	bics	r3, r2
 8004986:	3308      	adds	r3, #8
 8004988:	9307      	str	r3, [sp, #28]
 800498a:	6963      	ldr	r3, [r4, #20]
 800498c:	9a04      	ldr	r2, [sp, #16]
 800498e:	189b      	adds	r3, r3, r2
 8004990:	6163      	str	r3, [r4, #20]
 8004992:	e766      	b.n	8004862 <_svfiprintf_r+0x46>
 8004994:	4343      	muls	r3, r0
 8004996:	2101      	movs	r1, #1
 8004998:	189b      	adds	r3, r3, r2
 800499a:	0035      	movs	r5, r6
 800499c:	e7a6      	b.n	80048ec <_svfiprintf_r+0xd0>
 800499e:	2301      	movs	r3, #1
 80049a0:	425b      	negs	r3, r3
 80049a2:	e7d0      	b.n	8004946 <_svfiprintf_r+0x12a>
 80049a4:	2300      	movs	r3, #0
 80049a6:	200a      	movs	r0, #10
 80049a8:	001a      	movs	r2, r3
 80049aa:	3501      	adds	r5, #1
 80049ac:	6063      	str	r3, [r4, #4]
 80049ae:	7829      	ldrb	r1, [r5, #0]
 80049b0:	1c6e      	adds	r6, r5, #1
 80049b2:	3930      	subs	r1, #48	; 0x30
 80049b4:	2909      	cmp	r1, #9
 80049b6:	d903      	bls.n	80049c0 <_svfiprintf_r+0x1a4>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0c5      	beq.n	8004948 <_svfiprintf_r+0x12c>
 80049bc:	9209      	str	r2, [sp, #36]	; 0x24
 80049be:	e7c3      	b.n	8004948 <_svfiprintf_r+0x12c>
 80049c0:	4342      	muls	r2, r0
 80049c2:	2301      	movs	r3, #1
 80049c4:	1852      	adds	r2, r2, r1
 80049c6:	0035      	movs	r5, r6
 80049c8:	e7f1      	b.n	80049ae <_svfiprintf_r+0x192>
 80049ca:	ab07      	add	r3, sp, #28
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	003a      	movs	r2, r7
 80049d0:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <_svfiprintf_r+0x1f8>)
 80049d2:	0021      	movs	r1, r4
 80049d4:	9803      	ldr	r0, [sp, #12]
 80049d6:	e000      	b.n	80049da <_svfiprintf_r+0x1be>
 80049d8:	bf00      	nop
 80049da:	9004      	str	r0, [sp, #16]
 80049dc:	9b04      	ldr	r3, [sp, #16]
 80049de:	3301      	adds	r3, #1
 80049e0:	d1d3      	bne.n	800498a <_svfiprintf_r+0x16e>
 80049e2:	89bb      	ldrh	r3, [r7, #12]
 80049e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80049e6:	065b      	lsls	r3, r3, #25
 80049e8:	d400      	bmi.n	80049ec <_svfiprintf_r+0x1d0>
 80049ea:	e72e      	b.n	800484a <_svfiprintf_r+0x2e>
 80049ec:	2001      	movs	r0, #1
 80049ee:	4240      	negs	r0, r0
 80049f0:	e72b      	b.n	800484a <_svfiprintf_r+0x2e>
 80049f2:	ab07      	add	r3, sp, #28
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	003a      	movs	r2, r7
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <_svfiprintf_r+0x1f8>)
 80049fa:	0021      	movs	r1, r4
 80049fc:	9803      	ldr	r0, [sp, #12]
 80049fe:	f000 f879 	bl	8004af4 <_printf_i>
 8004a02:	e7ea      	b.n	80049da <_svfiprintf_r+0x1be>
 8004a04:	080051e8 	.word	0x080051e8
 8004a08:	080051ee 	.word	0x080051ee
 8004a0c:	080051f2 	.word	0x080051f2
 8004a10:	00000000 	.word	0x00000000
 8004a14:	08004759 	.word	0x08004759

08004a18 <_printf_common>:
 8004a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a1a:	0015      	movs	r5, r2
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	688a      	ldr	r2, [r1, #8]
 8004a20:	690b      	ldr	r3, [r1, #16]
 8004a22:	9000      	str	r0, [sp, #0]
 8004a24:	000c      	movs	r4, r1
 8004a26:	4293      	cmp	r3, r2
 8004a28:	da00      	bge.n	8004a2c <_printf_common+0x14>
 8004a2a:	0013      	movs	r3, r2
 8004a2c:	0022      	movs	r2, r4
 8004a2e:	602b      	str	r3, [r5, #0]
 8004a30:	3243      	adds	r2, #67	; 0x43
 8004a32:	7812      	ldrb	r2, [r2, #0]
 8004a34:	2a00      	cmp	r2, #0
 8004a36:	d001      	beq.n	8004a3c <_printf_common+0x24>
 8004a38:	3301      	adds	r3, #1
 8004a3a:	602b      	str	r3, [r5, #0]
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	069b      	lsls	r3, r3, #26
 8004a40:	d502      	bpl.n	8004a48 <_printf_common+0x30>
 8004a42:	682b      	ldr	r3, [r5, #0]
 8004a44:	3302      	adds	r3, #2
 8004a46:	602b      	str	r3, [r5, #0]
 8004a48:	2706      	movs	r7, #6
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	401f      	ands	r7, r3
 8004a4e:	d027      	beq.n	8004aa0 <_printf_common+0x88>
 8004a50:	0023      	movs	r3, r4
 8004a52:	3343      	adds	r3, #67	; 0x43
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	1e5a      	subs	r2, r3, #1
 8004a58:	4193      	sbcs	r3, r2
 8004a5a:	6822      	ldr	r2, [r4, #0]
 8004a5c:	0692      	lsls	r2, r2, #26
 8004a5e:	d430      	bmi.n	8004ac2 <_printf_common+0xaa>
 8004a60:	0022      	movs	r2, r4
 8004a62:	9901      	ldr	r1, [sp, #4]
 8004a64:	3243      	adds	r2, #67	; 0x43
 8004a66:	9800      	ldr	r0, [sp, #0]
 8004a68:	9e08      	ldr	r6, [sp, #32]
 8004a6a:	47b0      	blx	r6
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d025      	beq.n	8004abc <_printf_common+0xa4>
 8004a70:	2306      	movs	r3, #6
 8004a72:	6820      	ldr	r0, [r4, #0]
 8004a74:	682a      	ldr	r2, [r5, #0]
 8004a76:	68e1      	ldr	r1, [r4, #12]
 8004a78:	4003      	ands	r3, r0
 8004a7a:	2500      	movs	r5, #0
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d103      	bne.n	8004a88 <_printf_common+0x70>
 8004a80:	1a8d      	subs	r5, r1, r2
 8004a82:	43eb      	mvns	r3, r5
 8004a84:	17db      	asrs	r3, r3, #31
 8004a86:	401d      	ands	r5, r3
 8004a88:	68a3      	ldr	r3, [r4, #8]
 8004a8a:	6922      	ldr	r2, [r4, #16]
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	dd01      	ble.n	8004a94 <_printf_common+0x7c>
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	18ed      	adds	r5, r5, r3
 8004a94:	2700      	movs	r7, #0
 8004a96:	42bd      	cmp	r5, r7
 8004a98:	d120      	bne.n	8004adc <_printf_common+0xc4>
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	e010      	b.n	8004ac0 <_printf_common+0xa8>
 8004a9e:	3701      	adds	r7, #1
 8004aa0:	68e3      	ldr	r3, [r4, #12]
 8004aa2:	682a      	ldr	r2, [r5, #0]
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	42bb      	cmp	r3, r7
 8004aa8:	ddd2      	ble.n	8004a50 <_printf_common+0x38>
 8004aaa:	0022      	movs	r2, r4
 8004aac:	2301      	movs	r3, #1
 8004aae:	3219      	adds	r2, #25
 8004ab0:	9901      	ldr	r1, [sp, #4]
 8004ab2:	9800      	ldr	r0, [sp, #0]
 8004ab4:	9e08      	ldr	r6, [sp, #32]
 8004ab6:	47b0      	blx	r6
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d1f0      	bne.n	8004a9e <_printf_common+0x86>
 8004abc:	2001      	movs	r0, #1
 8004abe:	4240      	negs	r0, r0
 8004ac0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ac2:	2030      	movs	r0, #48	; 0x30
 8004ac4:	18e1      	adds	r1, r4, r3
 8004ac6:	3143      	adds	r1, #67	; 0x43
 8004ac8:	7008      	strb	r0, [r1, #0]
 8004aca:	0021      	movs	r1, r4
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	3145      	adds	r1, #69	; 0x45
 8004ad0:	7809      	ldrb	r1, [r1, #0]
 8004ad2:	18a2      	adds	r2, r4, r2
 8004ad4:	3243      	adds	r2, #67	; 0x43
 8004ad6:	3302      	adds	r3, #2
 8004ad8:	7011      	strb	r1, [r2, #0]
 8004ada:	e7c1      	b.n	8004a60 <_printf_common+0x48>
 8004adc:	0022      	movs	r2, r4
 8004ade:	2301      	movs	r3, #1
 8004ae0:	321a      	adds	r2, #26
 8004ae2:	9901      	ldr	r1, [sp, #4]
 8004ae4:	9800      	ldr	r0, [sp, #0]
 8004ae6:	9e08      	ldr	r6, [sp, #32]
 8004ae8:	47b0      	blx	r6
 8004aea:	1c43      	adds	r3, r0, #1
 8004aec:	d0e6      	beq.n	8004abc <_printf_common+0xa4>
 8004aee:	3701      	adds	r7, #1
 8004af0:	e7d1      	b.n	8004a96 <_printf_common+0x7e>
	...

08004af4 <_printf_i>:
 8004af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af6:	b089      	sub	sp, #36	; 0x24
 8004af8:	9204      	str	r2, [sp, #16]
 8004afa:	000a      	movs	r2, r1
 8004afc:	3243      	adds	r2, #67	; 0x43
 8004afe:	9305      	str	r3, [sp, #20]
 8004b00:	9003      	str	r0, [sp, #12]
 8004b02:	9202      	str	r2, [sp, #8]
 8004b04:	7e0a      	ldrb	r2, [r1, #24]
 8004b06:	000c      	movs	r4, r1
 8004b08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b0a:	2a6e      	cmp	r2, #110	; 0x6e
 8004b0c:	d100      	bne.n	8004b10 <_printf_i+0x1c>
 8004b0e:	e086      	b.n	8004c1e <_printf_i+0x12a>
 8004b10:	d81f      	bhi.n	8004b52 <_printf_i+0x5e>
 8004b12:	2a63      	cmp	r2, #99	; 0x63
 8004b14:	d033      	beq.n	8004b7e <_printf_i+0x8a>
 8004b16:	d808      	bhi.n	8004b2a <_printf_i+0x36>
 8004b18:	2a00      	cmp	r2, #0
 8004b1a:	d100      	bne.n	8004b1e <_printf_i+0x2a>
 8004b1c:	e08c      	b.n	8004c38 <_printf_i+0x144>
 8004b1e:	2a58      	cmp	r2, #88	; 0x58
 8004b20:	d04d      	beq.n	8004bbe <_printf_i+0xca>
 8004b22:	0025      	movs	r5, r4
 8004b24:	3542      	adds	r5, #66	; 0x42
 8004b26:	702a      	strb	r2, [r5, #0]
 8004b28:	e030      	b.n	8004b8c <_printf_i+0x98>
 8004b2a:	2a64      	cmp	r2, #100	; 0x64
 8004b2c:	d001      	beq.n	8004b32 <_printf_i+0x3e>
 8004b2e:	2a69      	cmp	r2, #105	; 0x69
 8004b30:	d1f7      	bne.n	8004b22 <_printf_i+0x2e>
 8004b32:	6819      	ldr	r1, [r3, #0]
 8004b34:	6825      	ldr	r5, [r4, #0]
 8004b36:	1d0a      	adds	r2, r1, #4
 8004b38:	0628      	lsls	r0, r5, #24
 8004b3a:	d529      	bpl.n	8004b90 <_printf_i+0x9c>
 8004b3c:	6808      	ldr	r0, [r1, #0]
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	2800      	cmp	r0, #0
 8004b42:	da03      	bge.n	8004b4c <_printf_i+0x58>
 8004b44:	232d      	movs	r3, #45	; 0x2d
 8004b46:	9a02      	ldr	r2, [sp, #8]
 8004b48:	4240      	negs	r0, r0
 8004b4a:	7013      	strb	r3, [r2, #0]
 8004b4c:	4e6b      	ldr	r6, [pc, #428]	; (8004cfc <_printf_i+0x208>)
 8004b4e:	270a      	movs	r7, #10
 8004b50:	e04f      	b.n	8004bf2 <_printf_i+0xfe>
 8004b52:	2a73      	cmp	r2, #115	; 0x73
 8004b54:	d074      	beq.n	8004c40 <_printf_i+0x14c>
 8004b56:	d808      	bhi.n	8004b6a <_printf_i+0x76>
 8004b58:	2a6f      	cmp	r2, #111	; 0x6f
 8004b5a:	d01f      	beq.n	8004b9c <_printf_i+0xa8>
 8004b5c:	2a70      	cmp	r2, #112	; 0x70
 8004b5e:	d1e0      	bne.n	8004b22 <_printf_i+0x2e>
 8004b60:	2220      	movs	r2, #32
 8004b62:	6809      	ldr	r1, [r1, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	6022      	str	r2, [r4, #0]
 8004b68:	e003      	b.n	8004b72 <_printf_i+0x7e>
 8004b6a:	2a75      	cmp	r2, #117	; 0x75
 8004b6c:	d016      	beq.n	8004b9c <_printf_i+0xa8>
 8004b6e:	2a78      	cmp	r2, #120	; 0x78
 8004b70:	d1d7      	bne.n	8004b22 <_printf_i+0x2e>
 8004b72:	0022      	movs	r2, r4
 8004b74:	2178      	movs	r1, #120	; 0x78
 8004b76:	3245      	adds	r2, #69	; 0x45
 8004b78:	7011      	strb	r1, [r2, #0]
 8004b7a:	4e61      	ldr	r6, [pc, #388]	; (8004d00 <_printf_i+0x20c>)
 8004b7c:	e022      	b.n	8004bc4 <_printf_i+0xd0>
 8004b7e:	0025      	movs	r5, r4
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	3542      	adds	r5, #66	; 0x42
 8004b84:	1d11      	adds	r1, r2, #4
 8004b86:	6019      	str	r1, [r3, #0]
 8004b88:	6813      	ldr	r3, [r2, #0]
 8004b8a:	702b      	strb	r3, [r5, #0]
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e065      	b.n	8004c5c <_printf_i+0x168>
 8004b90:	6808      	ldr	r0, [r1, #0]
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	0669      	lsls	r1, r5, #25
 8004b96:	d5d3      	bpl.n	8004b40 <_printf_i+0x4c>
 8004b98:	b200      	sxth	r0, r0
 8004b9a:	e7d1      	b.n	8004b40 <_printf_i+0x4c>
 8004b9c:	6819      	ldr	r1, [r3, #0]
 8004b9e:	6825      	ldr	r5, [r4, #0]
 8004ba0:	1d08      	adds	r0, r1, #4
 8004ba2:	6018      	str	r0, [r3, #0]
 8004ba4:	6808      	ldr	r0, [r1, #0]
 8004ba6:	062e      	lsls	r6, r5, #24
 8004ba8:	d505      	bpl.n	8004bb6 <_printf_i+0xc2>
 8004baa:	4e54      	ldr	r6, [pc, #336]	; (8004cfc <_printf_i+0x208>)
 8004bac:	2708      	movs	r7, #8
 8004bae:	2a6f      	cmp	r2, #111	; 0x6f
 8004bb0:	d01b      	beq.n	8004bea <_printf_i+0xf6>
 8004bb2:	270a      	movs	r7, #10
 8004bb4:	e019      	b.n	8004bea <_printf_i+0xf6>
 8004bb6:	066d      	lsls	r5, r5, #25
 8004bb8:	d5f7      	bpl.n	8004baa <_printf_i+0xb6>
 8004bba:	b280      	uxth	r0, r0
 8004bbc:	e7f5      	b.n	8004baa <_printf_i+0xb6>
 8004bbe:	3145      	adds	r1, #69	; 0x45
 8004bc0:	4e4e      	ldr	r6, [pc, #312]	; (8004cfc <_printf_i+0x208>)
 8004bc2:	700a      	strb	r2, [r1, #0]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	6822      	ldr	r2, [r4, #0]
 8004bc8:	1d01      	adds	r1, r0, #4
 8004bca:	6800      	ldr	r0, [r0, #0]
 8004bcc:	6019      	str	r1, [r3, #0]
 8004bce:	0615      	lsls	r5, r2, #24
 8004bd0:	d521      	bpl.n	8004c16 <_printf_i+0x122>
 8004bd2:	07d3      	lsls	r3, r2, #31
 8004bd4:	d502      	bpl.n	8004bdc <_printf_i+0xe8>
 8004bd6:	2320      	movs	r3, #32
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	6022      	str	r2, [r4, #0]
 8004bdc:	2710      	movs	r7, #16
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d103      	bne.n	8004bea <_printf_i+0xf6>
 8004be2:	2320      	movs	r3, #32
 8004be4:	6822      	ldr	r2, [r4, #0]
 8004be6:	439a      	bics	r2, r3
 8004be8:	6022      	str	r2, [r4, #0]
 8004bea:	0023      	movs	r3, r4
 8004bec:	2200      	movs	r2, #0
 8004bee:	3343      	adds	r3, #67	; 0x43
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	6863      	ldr	r3, [r4, #4]
 8004bf4:	60a3      	str	r3, [r4, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	db58      	blt.n	8004cac <_printf_i+0x1b8>
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	6821      	ldr	r1, [r4, #0]
 8004bfe:	4391      	bics	r1, r2
 8004c00:	6021      	str	r1, [r4, #0]
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d154      	bne.n	8004cb0 <_printf_i+0x1bc>
 8004c06:	9d02      	ldr	r5, [sp, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d05a      	beq.n	8004cc2 <_printf_i+0x1ce>
 8004c0c:	0025      	movs	r5, r4
 8004c0e:	7833      	ldrb	r3, [r6, #0]
 8004c10:	3542      	adds	r5, #66	; 0x42
 8004c12:	702b      	strb	r3, [r5, #0]
 8004c14:	e055      	b.n	8004cc2 <_printf_i+0x1ce>
 8004c16:	0655      	lsls	r5, r2, #25
 8004c18:	d5db      	bpl.n	8004bd2 <_printf_i+0xde>
 8004c1a:	b280      	uxth	r0, r0
 8004c1c:	e7d9      	b.n	8004bd2 <_printf_i+0xde>
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	680d      	ldr	r5, [r1, #0]
 8004c22:	1d10      	adds	r0, r2, #4
 8004c24:	6949      	ldr	r1, [r1, #20]
 8004c26:	6018      	str	r0, [r3, #0]
 8004c28:	6813      	ldr	r3, [r2, #0]
 8004c2a:	062e      	lsls	r6, r5, #24
 8004c2c:	d501      	bpl.n	8004c32 <_printf_i+0x13e>
 8004c2e:	6019      	str	r1, [r3, #0]
 8004c30:	e002      	b.n	8004c38 <_printf_i+0x144>
 8004c32:	066d      	lsls	r5, r5, #25
 8004c34:	d5fb      	bpl.n	8004c2e <_printf_i+0x13a>
 8004c36:	8019      	strh	r1, [r3, #0]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	9d02      	ldr	r5, [sp, #8]
 8004c3c:	6123      	str	r3, [r4, #16]
 8004c3e:	e04f      	b.n	8004ce0 <_printf_i+0x1ec>
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	1d11      	adds	r1, r2, #4
 8004c44:	6019      	str	r1, [r3, #0]
 8004c46:	6815      	ldr	r5, [r2, #0]
 8004c48:	2100      	movs	r1, #0
 8004c4a:	6862      	ldr	r2, [r4, #4]
 8004c4c:	0028      	movs	r0, r5
 8004c4e:	f000 f859 	bl	8004d04 <memchr>
 8004c52:	2800      	cmp	r0, #0
 8004c54:	d001      	beq.n	8004c5a <_printf_i+0x166>
 8004c56:	1b40      	subs	r0, r0, r5
 8004c58:	6060      	str	r0, [r4, #4]
 8004c5a:	6863      	ldr	r3, [r4, #4]
 8004c5c:	6123      	str	r3, [r4, #16]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	9a02      	ldr	r2, [sp, #8]
 8004c62:	7013      	strb	r3, [r2, #0]
 8004c64:	e03c      	b.n	8004ce0 <_printf_i+0x1ec>
 8004c66:	6923      	ldr	r3, [r4, #16]
 8004c68:	002a      	movs	r2, r5
 8004c6a:	9904      	ldr	r1, [sp, #16]
 8004c6c:	9803      	ldr	r0, [sp, #12]
 8004c6e:	9d05      	ldr	r5, [sp, #20]
 8004c70:	47a8      	blx	r5
 8004c72:	1c43      	adds	r3, r0, #1
 8004c74:	d03e      	beq.n	8004cf4 <_printf_i+0x200>
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	079b      	lsls	r3, r3, #30
 8004c7a:	d415      	bmi.n	8004ca8 <_printf_i+0x1b4>
 8004c7c:	9b07      	ldr	r3, [sp, #28]
 8004c7e:	68e0      	ldr	r0, [r4, #12]
 8004c80:	4298      	cmp	r0, r3
 8004c82:	da39      	bge.n	8004cf8 <_printf_i+0x204>
 8004c84:	0018      	movs	r0, r3
 8004c86:	e037      	b.n	8004cf8 <_printf_i+0x204>
 8004c88:	0022      	movs	r2, r4
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	3219      	adds	r2, #25
 8004c8e:	9904      	ldr	r1, [sp, #16]
 8004c90:	9803      	ldr	r0, [sp, #12]
 8004c92:	9e05      	ldr	r6, [sp, #20]
 8004c94:	47b0      	blx	r6
 8004c96:	1c43      	adds	r3, r0, #1
 8004c98:	d02c      	beq.n	8004cf4 <_printf_i+0x200>
 8004c9a:	3501      	adds	r5, #1
 8004c9c:	68e3      	ldr	r3, [r4, #12]
 8004c9e:	9a07      	ldr	r2, [sp, #28]
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	42ab      	cmp	r3, r5
 8004ca4:	dcf0      	bgt.n	8004c88 <_printf_i+0x194>
 8004ca6:	e7e9      	b.n	8004c7c <_printf_i+0x188>
 8004ca8:	2500      	movs	r5, #0
 8004caa:	e7f7      	b.n	8004c9c <_printf_i+0x1a8>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d0ad      	beq.n	8004c0c <_printf_i+0x118>
 8004cb0:	9d02      	ldr	r5, [sp, #8]
 8004cb2:	0039      	movs	r1, r7
 8004cb4:	f7fb faae 	bl	8000214 <__aeabi_uidivmod>
 8004cb8:	5c73      	ldrb	r3, [r6, r1]
 8004cba:	3d01      	subs	r5, #1
 8004cbc:	702b      	strb	r3, [r5, #0]
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d1f7      	bne.n	8004cb2 <_printf_i+0x1be>
 8004cc2:	2f08      	cmp	r7, #8
 8004cc4:	d109      	bne.n	8004cda <_printf_i+0x1e6>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	07db      	lsls	r3, r3, #31
 8004cca:	d506      	bpl.n	8004cda <_printf_i+0x1e6>
 8004ccc:	6863      	ldr	r3, [r4, #4]
 8004cce:	6922      	ldr	r2, [r4, #16]
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	dc02      	bgt.n	8004cda <_printf_i+0x1e6>
 8004cd4:	2330      	movs	r3, #48	; 0x30
 8004cd6:	3d01      	subs	r5, #1
 8004cd8:	702b      	strb	r3, [r5, #0]
 8004cda:	9b02      	ldr	r3, [sp, #8]
 8004cdc:	1b5b      	subs	r3, r3, r5
 8004cde:	6123      	str	r3, [r4, #16]
 8004ce0:	9b05      	ldr	r3, [sp, #20]
 8004ce2:	aa07      	add	r2, sp, #28
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	0021      	movs	r1, r4
 8004ce8:	9b04      	ldr	r3, [sp, #16]
 8004cea:	9803      	ldr	r0, [sp, #12]
 8004cec:	f7ff fe94 	bl	8004a18 <_printf_common>
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d1b8      	bne.n	8004c66 <_printf_i+0x172>
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	4240      	negs	r0, r0
 8004cf8:	b009      	add	sp, #36	; 0x24
 8004cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cfc:	080051f9 	.word	0x080051f9
 8004d00:	0800520a 	.word	0x0800520a

08004d04 <memchr>:
 8004d04:	b2c9      	uxtb	r1, r1
 8004d06:	1882      	adds	r2, r0, r2
 8004d08:	4290      	cmp	r0, r2
 8004d0a:	d101      	bne.n	8004d10 <memchr+0xc>
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	4770      	bx	lr
 8004d10:	7803      	ldrb	r3, [r0, #0]
 8004d12:	428b      	cmp	r3, r1
 8004d14:	d0fb      	beq.n	8004d0e <memchr+0xa>
 8004d16:	3001      	adds	r0, #1
 8004d18:	e7f6      	b.n	8004d08 <memchr+0x4>

08004d1a <memcpy>:
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d100      	bne.n	8004d24 <memcpy+0xa>
 8004d22:	bd10      	pop	{r4, pc}
 8004d24:	5ccc      	ldrb	r4, [r1, r3]
 8004d26:	54c4      	strb	r4, [r0, r3]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	e7f8      	b.n	8004d1e <memcpy+0x4>

08004d2c <memmove>:
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	4288      	cmp	r0, r1
 8004d30:	d902      	bls.n	8004d38 <memmove+0xc>
 8004d32:	188b      	adds	r3, r1, r2
 8004d34:	4298      	cmp	r0, r3
 8004d36:	d303      	bcc.n	8004d40 <memmove+0x14>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	e007      	b.n	8004d4c <memmove+0x20>
 8004d3c:	5c8b      	ldrb	r3, [r1, r2]
 8004d3e:	5483      	strb	r3, [r0, r2]
 8004d40:	3a01      	subs	r2, #1
 8004d42:	d2fb      	bcs.n	8004d3c <memmove+0x10>
 8004d44:	bd10      	pop	{r4, pc}
 8004d46:	5ccc      	ldrb	r4, [r1, r3]
 8004d48:	54c4      	strb	r4, [r0, r3]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d1fa      	bne.n	8004d46 <memmove+0x1a>
 8004d50:	e7f8      	b.n	8004d44 <memmove+0x18>
	...

08004d54 <_free_r>:
 8004d54:	b570      	push	{r4, r5, r6, lr}
 8004d56:	0005      	movs	r5, r0
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	d010      	beq.n	8004d7e <_free_r+0x2a>
 8004d5c:	1f0c      	subs	r4, r1, #4
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	da00      	bge.n	8004d66 <_free_r+0x12>
 8004d64:	18e4      	adds	r4, r4, r3
 8004d66:	0028      	movs	r0, r5
 8004d68:	f000 f8d4 	bl	8004f14 <__malloc_lock>
 8004d6c:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <_free_r+0x90>)
 8004d6e:	6813      	ldr	r3, [r2, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d105      	bne.n	8004d80 <_free_r+0x2c>
 8004d74:	6063      	str	r3, [r4, #4]
 8004d76:	6014      	str	r4, [r2, #0]
 8004d78:	0028      	movs	r0, r5
 8004d7a:	f000 f8cc 	bl	8004f16 <__malloc_unlock>
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}
 8004d80:	42a3      	cmp	r3, r4
 8004d82:	d909      	bls.n	8004d98 <_free_r+0x44>
 8004d84:	6821      	ldr	r1, [r4, #0]
 8004d86:	1860      	adds	r0, r4, r1
 8004d88:	4283      	cmp	r3, r0
 8004d8a:	d1f3      	bne.n	8004d74 <_free_r+0x20>
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	1841      	adds	r1, r0, r1
 8004d92:	6021      	str	r1, [r4, #0]
 8004d94:	e7ee      	b.n	8004d74 <_free_r+0x20>
 8004d96:	0013      	movs	r3, r2
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	2a00      	cmp	r2, #0
 8004d9c:	d001      	beq.n	8004da2 <_free_r+0x4e>
 8004d9e:	42a2      	cmp	r2, r4
 8004da0:	d9f9      	bls.n	8004d96 <_free_r+0x42>
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	1858      	adds	r0, r3, r1
 8004da6:	42a0      	cmp	r0, r4
 8004da8:	d10b      	bne.n	8004dc2 <_free_r+0x6e>
 8004daa:	6820      	ldr	r0, [r4, #0]
 8004dac:	1809      	adds	r1, r1, r0
 8004dae:	1858      	adds	r0, r3, r1
 8004db0:	6019      	str	r1, [r3, #0]
 8004db2:	4282      	cmp	r2, r0
 8004db4:	d1e0      	bne.n	8004d78 <_free_r+0x24>
 8004db6:	6810      	ldr	r0, [r2, #0]
 8004db8:	6852      	ldr	r2, [r2, #4]
 8004dba:	1841      	adds	r1, r0, r1
 8004dbc:	6019      	str	r1, [r3, #0]
 8004dbe:	605a      	str	r2, [r3, #4]
 8004dc0:	e7da      	b.n	8004d78 <_free_r+0x24>
 8004dc2:	42a0      	cmp	r0, r4
 8004dc4:	d902      	bls.n	8004dcc <_free_r+0x78>
 8004dc6:	230c      	movs	r3, #12
 8004dc8:	602b      	str	r3, [r5, #0]
 8004dca:	e7d5      	b.n	8004d78 <_free_r+0x24>
 8004dcc:	6821      	ldr	r1, [r4, #0]
 8004dce:	1860      	adds	r0, r4, r1
 8004dd0:	4282      	cmp	r2, r0
 8004dd2:	d103      	bne.n	8004ddc <_free_r+0x88>
 8004dd4:	6810      	ldr	r0, [r2, #0]
 8004dd6:	6852      	ldr	r2, [r2, #4]
 8004dd8:	1841      	adds	r1, r0, r1
 8004dda:	6021      	str	r1, [r4, #0]
 8004ddc:	6062      	str	r2, [r4, #4]
 8004dde:	605c      	str	r4, [r3, #4]
 8004de0:	e7ca      	b.n	8004d78 <_free_r+0x24>
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	2000009c 	.word	0x2000009c

08004de8 <_malloc_r>:
 8004de8:	2303      	movs	r3, #3
 8004dea:	b570      	push	{r4, r5, r6, lr}
 8004dec:	1ccd      	adds	r5, r1, #3
 8004dee:	439d      	bics	r5, r3
 8004df0:	3508      	adds	r5, #8
 8004df2:	0006      	movs	r6, r0
 8004df4:	2d0c      	cmp	r5, #12
 8004df6:	d21e      	bcs.n	8004e36 <_malloc_r+0x4e>
 8004df8:	250c      	movs	r5, #12
 8004dfa:	42a9      	cmp	r1, r5
 8004dfc:	d81d      	bhi.n	8004e3a <_malloc_r+0x52>
 8004dfe:	0030      	movs	r0, r6
 8004e00:	f000 f888 	bl	8004f14 <__malloc_lock>
 8004e04:	4a25      	ldr	r2, [pc, #148]	; (8004e9c <_malloc_r+0xb4>)
 8004e06:	6814      	ldr	r4, [r2, #0]
 8004e08:	0021      	movs	r1, r4
 8004e0a:	2900      	cmp	r1, #0
 8004e0c:	d119      	bne.n	8004e42 <_malloc_r+0x5a>
 8004e0e:	4c24      	ldr	r4, [pc, #144]	; (8004ea0 <_malloc_r+0xb8>)
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d103      	bne.n	8004e1e <_malloc_r+0x36>
 8004e16:	0030      	movs	r0, r6
 8004e18:	f000 f86a 	bl	8004ef0 <_sbrk_r>
 8004e1c:	6020      	str	r0, [r4, #0]
 8004e1e:	0029      	movs	r1, r5
 8004e20:	0030      	movs	r0, r6
 8004e22:	f000 f865 	bl	8004ef0 <_sbrk_r>
 8004e26:	1c43      	adds	r3, r0, #1
 8004e28:	d12b      	bne.n	8004e82 <_malloc_r+0x9a>
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	0030      	movs	r0, r6
 8004e2e:	6033      	str	r3, [r6, #0]
 8004e30:	f000 f871 	bl	8004f16 <__malloc_unlock>
 8004e34:	e003      	b.n	8004e3e <_malloc_r+0x56>
 8004e36:	2d00      	cmp	r5, #0
 8004e38:	dadf      	bge.n	8004dfa <_malloc_r+0x12>
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	6033      	str	r3, [r6, #0]
 8004e3e:	2000      	movs	r0, #0
 8004e40:	bd70      	pop	{r4, r5, r6, pc}
 8004e42:	680b      	ldr	r3, [r1, #0]
 8004e44:	1b5b      	subs	r3, r3, r5
 8004e46:	d419      	bmi.n	8004e7c <_malloc_r+0x94>
 8004e48:	2b0b      	cmp	r3, #11
 8004e4a:	d903      	bls.n	8004e54 <_malloc_r+0x6c>
 8004e4c:	600b      	str	r3, [r1, #0]
 8004e4e:	18cc      	adds	r4, r1, r3
 8004e50:	6025      	str	r5, [r4, #0]
 8004e52:	e003      	b.n	8004e5c <_malloc_r+0x74>
 8004e54:	684b      	ldr	r3, [r1, #4]
 8004e56:	428c      	cmp	r4, r1
 8004e58:	d10d      	bne.n	8004e76 <_malloc_r+0x8e>
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	0030      	movs	r0, r6
 8004e5e:	f000 f85a 	bl	8004f16 <__malloc_unlock>
 8004e62:	0020      	movs	r0, r4
 8004e64:	2207      	movs	r2, #7
 8004e66:	300b      	adds	r0, #11
 8004e68:	1d23      	adds	r3, r4, #4
 8004e6a:	4390      	bics	r0, r2
 8004e6c:	1ac3      	subs	r3, r0, r3
 8004e6e:	d0e7      	beq.n	8004e40 <_malloc_r+0x58>
 8004e70:	425a      	negs	r2, r3
 8004e72:	50e2      	str	r2, [r4, r3]
 8004e74:	e7e4      	b.n	8004e40 <_malloc_r+0x58>
 8004e76:	6063      	str	r3, [r4, #4]
 8004e78:	000c      	movs	r4, r1
 8004e7a:	e7ef      	b.n	8004e5c <_malloc_r+0x74>
 8004e7c:	000c      	movs	r4, r1
 8004e7e:	6849      	ldr	r1, [r1, #4]
 8004e80:	e7c3      	b.n	8004e0a <_malloc_r+0x22>
 8004e82:	2303      	movs	r3, #3
 8004e84:	1cc4      	adds	r4, r0, #3
 8004e86:	439c      	bics	r4, r3
 8004e88:	42a0      	cmp	r0, r4
 8004e8a:	d0e1      	beq.n	8004e50 <_malloc_r+0x68>
 8004e8c:	1a21      	subs	r1, r4, r0
 8004e8e:	0030      	movs	r0, r6
 8004e90:	f000 f82e 	bl	8004ef0 <_sbrk_r>
 8004e94:	1c43      	adds	r3, r0, #1
 8004e96:	d1db      	bne.n	8004e50 <_malloc_r+0x68>
 8004e98:	e7c7      	b.n	8004e2a <_malloc_r+0x42>
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	2000009c 	.word	0x2000009c
 8004ea0:	200000a0 	.word	0x200000a0

08004ea4 <_realloc_r>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	0007      	movs	r7, r0
 8004ea8:	000d      	movs	r5, r1
 8004eaa:	0016      	movs	r6, r2
 8004eac:	2900      	cmp	r1, #0
 8004eae:	d105      	bne.n	8004ebc <_realloc_r+0x18>
 8004eb0:	0011      	movs	r1, r2
 8004eb2:	f7ff ff99 	bl	8004de8 <_malloc_r>
 8004eb6:	0004      	movs	r4, r0
 8004eb8:	0020      	movs	r0, r4
 8004eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ebc:	2a00      	cmp	r2, #0
 8004ebe:	d103      	bne.n	8004ec8 <_realloc_r+0x24>
 8004ec0:	f7ff ff48 	bl	8004d54 <_free_r>
 8004ec4:	0034      	movs	r4, r6
 8004ec6:	e7f7      	b.n	8004eb8 <_realloc_r+0x14>
 8004ec8:	f000 f826 	bl	8004f18 <_malloc_usable_size_r>
 8004ecc:	002c      	movs	r4, r5
 8004ece:	42b0      	cmp	r0, r6
 8004ed0:	d2f2      	bcs.n	8004eb8 <_realloc_r+0x14>
 8004ed2:	0031      	movs	r1, r6
 8004ed4:	0038      	movs	r0, r7
 8004ed6:	f7ff ff87 	bl	8004de8 <_malloc_r>
 8004eda:	1e04      	subs	r4, r0, #0
 8004edc:	d0ec      	beq.n	8004eb8 <_realloc_r+0x14>
 8004ede:	0029      	movs	r1, r5
 8004ee0:	0032      	movs	r2, r6
 8004ee2:	f7ff ff1a 	bl	8004d1a <memcpy>
 8004ee6:	0029      	movs	r1, r5
 8004ee8:	0038      	movs	r0, r7
 8004eea:	f7ff ff33 	bl	8004d54 <_free_r>
 8004eee:	e7e3      	b.n	8004eb8 <_realloc_r+0x14>

08004ef0 <_sbrk_r>:
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	b570      	push	{r4, r5, r6, lr}
 8004ef4:	4c06      	ldr	r4, [pc, #24]	; (8004f10 <_sbrk_r+0x20>)
 8004ef6:	0005      	movs	r5, r0
 8004ef8:	0008      	movs	r0, r1
 8004efa:	6023      	str	r3, [r4, #0]
 8004efc:	f7fb ff84 	bl	8000e08 <_sbrk>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d103      	bne.n	8004f0c <_sbrk_r+0x1c>
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d000      	beq.n	8004f0c <_sbrk_r+0x1c>
 8004f0a:	602b      	str	r3, [r5, #0]
 8004f0c:	bd70      	pop	{r4, r5, r6, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	200002d0 	.word	0x200002d0

08004f14 <__malloc_lock>:
 8004f14:	4770      	bx	lr

08004f16 <__malloc_unlock>:
 8004f16:	4770      	bx	lr

08004f18 <_malloc_usable_size_r>:
 8004f18:	1f0b      	subs	r3, r1, #4
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	1f18      	subs	r0, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	da01      	bge.n	8004f26 <_malloc_usable_size_r+0xe>
 8004f22:	580b      	ldr	r3, [r1, r0]
 8004f24:	18c0      	adds	r0, r0, r3
 8004f26:	4770      	bx	lr

08004f28 <_init>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2e:	bc08      	pop	{r3}
 8004f30:	469e      	mov	lr, r3
 8004f32:	4770      	bx	lr

08004f34 <_fini>:
 8004f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f3a:	bc08      	pop	{r3}
 8004f3c:	469e      	mov	lr, r3
 8004f3e:	4770      	bx	lr
