
UV_LED_DRIVER_SW_STM32L051.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b64  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002c24  08002c24  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c54  08002c54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c54  08002c54  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c54  08002c54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08002c68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002c68  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d75  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aeb  00000000  00000000  00028da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c8  00000000  00000000  0002a898  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  0002b260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000e198  00000000  00000000  0002bb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000087bf  00000000  00000000  00039cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004fe5c  00000000  00000000  00042477  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000922d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000212c  00000000  00000000  00092350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c0c 	.word	0x08002c0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002c0c 	.word	0x08002c0c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <EM_getSystemState>:
 *	@retval UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
										UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef 	EM_getSystemState()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	return eTheSystemState;
 8000224:	4b02      	ldr	r3, [pc, #8]	; (8000230 <EM_getSystemState+0x10>)
 8000226:	781b      	ldrb	r3, [r3, #0]
}
 8000228:	0018      	movs	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	20000028 	.word	0x20000028

08000234 <EM_ProcessEvent>:
											UVBOX_evLidClosed,
 *	@retval None
 *
 */
void EM_ProcessEvent(UVBOX_SystemEventsTypedef newEvent)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	701a      	strb	r2, [r3, #0]
	switch(eTheSystemState)
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <EM_ProcessEvent+0x58>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d002      	beq.n	800024e <EM_ProcessEvent+0x1a>
 8000248:	2b01      	cmp	r3, #1
 800024a:	d00d      	beq.n	8000268 <EM_ProcessEvent+0x34>
					break;
			}

			break;
	}
}
 800024c:	e019      	b.n	8000282 <EM_ProcessEvent+0x4e>
			switch(newEvent)
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b01      	cmp	r3, #1
 8000254:	d000      	beq.n	8000258 <EM_ProcessEvent+0x24>
					break;
 8000256:	e006      	b.n	8000266 <EM_ProcessEvent+0x32>
					eTheSystemState = LM_EnableUVMode();
 8000258:	f000 f81a 	bl	8000290 <LM_EnableUVMode>
 800025c:	0003      	movs	r3, r0
 800025e:	001a      	movs	r2, r3
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <EM_ProcessEvent+0x58>)
 8000262:	701a      	strb	r2, [r3, #0]
					break;
 8000264:	46c0      	nop			; (mov r8, r8)
			break;
 8000266:	e00c      	b.n	8000282 <EM_ProcessEvent+0x4e>
			switch(newEvent)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d000      	beq.n	8000272 <EM_ProcessEvent+0x3e>
					break;
 8000270:	e006      	b.n	8000280 <EM_ProcessEvent+0x4c>
					eTheSystemState = LM_DisableUVMode();
 8000272:	f000 f82f 	bl	80002d4 <LM_DisableUVMode>
 8000276:	0003      	movs	r3, r0
 8000278:	001a      	movs	r2, r3
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <EM_ProcessEvent+0x58>)
 800027c:	701a      	strb	r2, [r3, #0]
					break;
 800027e:	46c0      	nop			; (mov r8, r8)
			break;
 8000280:	46c0      	nop			; (mov r8, r8)
}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	46bd      	mov	sp, r7
 8000286:	b002      	add	sp, #8
 8000288:	bd80      	pop	{r7, pc}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	20000028 	.word	0x20000028

08000290 <LM_EnableUVMode>:
 *	@retval 	UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
											UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef LM_EnableUVMode()
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	LM_SetStatusLed(UVBOX_StatusLedGreen);
 8000294:	2000      	movs	r0, #0
 8000296:	f000 f971 	bl	800057c <LM_SetStatusLed>

	UV_PWM_TIMER.Instance->CCR1 = MAX_UVLED_PWM_PERIOD;
 800029a:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <LM_EnableUVMode+0x3c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	22ff      	movs	r2, #255	; 0xff
 80002a0:	635a      	str	r2, [r3, #52]	; 0x34
	UV_PWM_TIMER.Instance->CCR2 = MAX_UVLED_PWM_PERIOD;
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <LM_EnableUVMode+0x3c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	22ff      	movs	r2, #255	; 0xff
 80002a8:	639a      	str	r2, [r3, #56]	; 0x38
	UV_PWM_TIMER.Instance->CCR3 = MAX_UVLED_PWM_PERIOD;
 80002aa:	4b08      	ldr	r3, [pc, #32]	; (80002cc <LM_EnableUVMode+0x3c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	22ff      	movs	r2, #255	; 0xff
 80002b0:	63da      	str	r2, [r3, #60]	; 0x3c
	UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <LM_EnableUVMode+0x3c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	22ff      	movs	r2, #255	; 0xff
 80002b8:	641a      	str	r2, [r3, #64]	; 0x40
	LED_PWM_TIMER.Instance->CCR1 = 0;
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <LM_EnableUVMode+0x40>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2200      	movs	r2, #0
 80002c0:	635a      	str	r2, [r3, #52]	; 0x34

	return UVBOX_evLidClosed;
 80002c2:	2301      	movs	r3, #1
}
 80002c4:	0018      	movs	r0, r3
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	20000070 	.word	0x20000070
 80002d0:	200000f0 	.word	0x200000f0

080002d4 <LM_DisableUVMode>:
 *	@retval 	UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
											UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef LM_DisableUVMode()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	LM_SetStatusLed(UVBOX_StatusLedRed);
 80002d8:	2001      	movs	r0, #1
 80002da:	f000 f94f 	bl	800057c <LM_SetStatusLed>

	UV_PWM_TIMER.Instance->CCR1 = 0;
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <LM_DisableUVMode+0x3c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2200      	movs	r2, #0
 80002e4:	635a      	str	r2, [r3, #52]	; 0x34
	UV_PWM_TIMER.Instance->CCR2 = 0;
 80002e6:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <LM_DisableUVMode+0x3c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2200      	movs	r2, #0
 80002ec:	639a      	str	r2, [r3, #56]	; 0x38
	UV_PWM_TIMER.Instance->CCR3 = 0;
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <LM_DisableUVMode+0x3c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2200      	movs	r2, #0
 80002f4:	63da      	str	r2, [r3, #60]	; 0x3c
	UV_PWM_TIMER.Instance->CCR4 = 0;
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <LM_DisableUVMode+0x3c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2200      	movs	r2, #0
 80002fc:	641a      	str	r2, [r3, #64]	; 0x40
	LED_PWM_TIMER.Instance->CCR1 = MAX_LED_PWM_PERIOD;
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <LM_DisableUVMode+0x40>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	22ff      	movs	r2, #255	; 0xff
 8000304:	635a      	str	r2, [r3, #52]	; 0x34

	return UVBOX_evLidOpened;
 8000306:	2300      	movs	r3, #0
}
 8000308:	0018      	movs	r0, r3
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	20000070 	.word	0x20000070
 8000314:	200000f0 	.word	0x200000f0

08000318 <_UpdateUvPwm>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void _UpdateUvPwm(UVBOX_EncoderDirTypeDef new_encoder_dir)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	0002      	movs	r2, r0
 8000320:	1dfb      	adds	r3, r7, #7
 8000322:	701a      	strb	r2, [r3, #0]
  	// encoder direction has changed from increasing to decreasing
	if( (RE_getPrevEncoderDir()) && (!new_encoder_dir) )
 8000324:	f000 f996 	bl	8000654 <RE_getPrevEncoderDir>
 8000328:	1e03      	subs	r3, r0, #0
 800032a:	d056      	beq.n	80003da <_UpdateUvPwm+0xc2>
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d152      	bne.n	80003da <_UpdateUvPwm+0xc2>
	{
		UV_PWM_TIMER.Instance->CCR1 -= ENCODER_STEP;
 8000334:	4b54      	ldr	r3, [pc, #336]	; (8000488 <_UpdateUvPwm+0x170>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800033a:	4b53      	ldr	r3, [pc, #332]	; (8000488 <_UpdateUvPwm+0x170>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	3a01      	subs	r2, #1
 8000340:	635a      	str	r2, [r3, #52]	; 0x34
		UV_PWM_TIMER.Instance->CCR2 -= ENCODER_STEP;
 8000342:	4b51      	ldr	r3, [pc, #324]	; (8000488 <_UpdateUvPwm+0x170>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000348:	4b4f      	ldr	r3, [pc, #316]	; (8000488 <_UpdateUvPwm+0x170>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	3a01      	subs	r2, #1
 800034e:	639a      	str	r2, [r3, #56]	; 0x38
		UV_PWM_TIMER.Instance->CCR3 -= ENCODER_STEP;
 8000350:	4b4d      	ldr	r3, [pc, #308]	; (8000488 <_UpdateUvPwm+0x170>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000356:	4b4c      	ldr	r3, [pc, #304]	; (8000488 <_UpdateUvPwm+0x170>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	3a01      	subs	r2, #1
 800035c:	63da      	str	r2, [r3, #60]	; 0x3c
		UV_PWM_TIMER.Instance->CCR4 -= ENCODER_STEP;
 800035e:	4b4a      	ldr	r3, [pc, #296]	; (8000488 <_UpdateUvPwm+0x170>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000364:	4b48      	ldr	r3, [pc, #288]	; (8000488 <_UpdateUvPwm+0x170>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	3a01      	subs	r2, #1
 800036a:	641a      	str	r2, [r3, #64]	; 0x40

		// clamp lower range integer overflow to
		// MAX_UVLED_PWM_PERIOD+1
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD+1) ||
 800036c:	4b46      	ldr	r3, [pc, #280]	; (8000488 <_UpdateUvPwm+0x170>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000372:	2380      	movs	r3, #128	; 0x80
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	429a      	cmp	r2, r3
 8000378:	d814      	bhi.n	80003a4 <_UpdateUvPwm+0x8c>
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD+1)	||
 800037a:	4b43      	ldr	r3, [pc, #268]	; (8000488 <_UpdateUvPwm+0x170>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD+1) ||
 8000380:	2380      	movs	r3, #128	; 0x80
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	429a      	cmp	r2, r3
 8000386:	d80d      	bhi.n	80003a4 <_UpdateUvPwm+0x8c>
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD+1) ||
 8000388:	4b3f      	ldr	r3, [pc, #252]	; (8000488 <_UpdateUvPwm+0x170>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD+1)	||
 800038e:	2380      	movs	r3, #128	; 0x80
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	429a      	cmp	r2, r3
 8000394:	d806      	bhi.n	80003a4 <_UpdateUvPwm+0x8c>
			(UV_PWM_TIMER.Instance->CCR4 > MAX_UVLED_PWM_PERIOD+1)
 8000396:	4b3c      	ldr	r3, [pc, #240]	; (8000488 <_UpdateUvPwm+0x170>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD+1) ||
 800039c:	2380      	movs	r3, #128	; 0x80
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d90f      	bls.n	80003c4 <_UpdateUvPwm+0xac>
			)
		{
			UV_PWM_TIMER.Instance->CCR1 = 0;
 80003a4:	4b38      	ldr	r3, [pc, #224]	; (8000488 <_UpdateUvPwm+0x170>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2200      	movs	r2, #0
 80003aa:	635a      	str	r2, [r3, #52]	; 0x34
			UV_PWM_TIMER.Instance->CCR2 = 0;
 80003ac:	4b36      	ldr	r3, [pc, #216]	; (8000488 <_UpdateUvPwm+0x170>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2200      	movs	r2, #0
 80003b2:	639a      	str	r2, [r3, #56]	; 0x38
			UV_PWM_TIMER.Instance->CCR3 = 0;
 80003b4:	4b34      	ldr	r3, [pc, #208]	; (8000488 <_UpdateUvPwm+0x170>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2200      	movs	r2, #0
 80003ba:	63da      	str	r2, [r3, #60]	; 0x3c
			UV_PWM_TIMER.Instance->CCR4 = 0;
 80003bc:	4b32      	ldr	r3, [pc, #200]	; (8000488 <_UpdateUvPwm+0x170>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2200      	movs	r2, #0
 80003c2:	641a      	str	r2, [r3, #64]	; 0x40
		}

		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
 80003c4:	4b31      	ldr	r3, [pc, #196]	; (800048c <_UpdateUvPwm+0x174>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	2210      	movs	r2, #16
 80003ce:	4013      	ands	r3, r2
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 f948 	bl	8000668 <RE_setPrevEncoderDir>
			UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
		}

		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
	}
}
 80003d8:	e051      	b.n	800047e <_UpdateUvPwm+0x166>
	else if( (!RE_getPrevEncoderDir()) && (new_encoder_dir) )
 80003da:	f000 f93b 	bl	8000654 <RE_getPrevEncoderDir>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d14d      	bne.n	800047e <_UpdateUvPwm+0x166>
 80003e2:	1dfb      	adds	r3, r7, #7
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d049      	beq.n	800047e <_UpdateUvPwm+0x166>
		UV_PWM_TIMER.Instance->CCR1 += ENCODER_STEP;
 80003ea:	4b27      	ldr	r3, [pc, #156]	; (8000488 <_UpdateUvPwm+0x170>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003f0:	4b25      	ldr	r3, [pc, #148]	; (8000488 <_UpdateUvPwm+0x170>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	3201      	adds	r2, #1
 80003f6:	635a      	str	r2, [r3, #52]	; 0x34
		UV_PWM_TIMER.Instance->CCR2 += ENCODER_STEP;
 80003f8:	4b23      	ldr	r3, [pc, #140]	; (8000488 <_UpdateUvPwm+0x170>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80003fe:	4b22      	ldr	r3, [pc, #136]	; (8000488 <_UpdateUvPwm+0x170>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	3201      	adds	r2, #1
 8000404:	639a      	str	r2, [r3, #56]	; 0x38
		UV_PWM_TIMER.Instance->CCR3 += ENCODER_STEP;
 8000406:	4b20      	ldr	r3, [pc, #128]	; (8000488 <_UpdateUvPwm+0x170>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <_UpdateUvPwm+0x170>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	3201      	adds	r2, #1
 8000412:	63da      	str	r2, [r3, #60]	; 0x3c
		UV_PWM_TIMER.Instance->CCR4 += ENCODER_STEP;
 8000414:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <_UpdateUvPwm+0x170>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <_UpdateUvPwm+0x170>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	3201      	adds	r2, #1
 8000420:	641a      	str	r2, [r3, #64]	; 0x40
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD) ||
 8000422:	4b19      	ldr	r3, [pc, #100]	; (8000488 <_UpdateUvPwm+0x170>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000428:	2bff      	cmp	r3, #255	; 0xff
 800042a:	d80e      	bhi.n	800044a <_UpdateUvPwm+0x132>
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD)	||
 800042c:	4b16      	ldr	r3, [pc, #88]	; (8000488 <_UpdateUvPwm+0x170>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD) ||
 8000432:	2bff      	cmp	r3, #255	; 0xff
 8000434:	d809      	bhi.n	800044a <_UpdateUvPwm+0x132>
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD) ||
 8000436:	4b14      	ldr	r3, [pc, #80]	; (8000488 <_UpdateUvPwm+0x170>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD)	||
 800043c:	2bff      	cmp	r3, #255	; 0xff
 800043e:	d804      	bhi.n	800044a <_UpdateUvPwm+0x132>
			(UV_PWM_TIMER.Instance->CCR4 > MAX_UVLED_PWM_PERIOD)
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <_UpdateUvPwm+0x170>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD) ||
 8000446:	2bff      	cmp	r3, #255	; 0xff
 8000448:	d90f      	bls.n	800046a <_UpdateUvPwm+0x152>
			UV_PWM_TIMER.Instance->CCR1 = MAX_UVLED_PWM_PERIOD;
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <_UpdateUvPwm+0x170>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	22ff      	movs	r2, #255	; 0xff
 8000450:	635a      	str	r2, [r3, #52]	; 0x34
			UV_PWM_TIMER.Instance->CCR2 = MAX_UVLED_PWM_PERIOD;
 8000452:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <_UpdateUvPwm+0x170>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	22ff      	movs	r2, #255	; 0xff
 8000458:	639a      	str	r2, [r3, #56]	; 0x38
			UV_PWM_TIMER.Instance->CCR3 = MAX_UVLED_PWM_PERIOD;
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <_UpdateUvPwm+0x170>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	22ff      	movs	r2, #255	; 0xff
 8000460:	63da      	str	r2, [r3, #60]	; 0x3c
			UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <_UpdateUvPwm+0x170>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	22ff      	movs	r2, #255	; 0xff
 8000468:	641a      	str	r2, [r3, #64]	; 0x40
		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <_UpdateUvPwm+0x174>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	b2db      	uxtb	r3, r3
 8000472:	2210      	movs	r2, #16
 8000474:	4013      	ands	r3, r2
 8000476:	b2db      	uxtb	r3, r3
 8000478:	0018      	movs	r0, r3
 800047a:	f000 f8f5 	bl	8000668 <RE_setPrevEncoderDir>
}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b002      	add	sp, #8
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	20000070 	.word	0x20000070
 800048c:	200000b0 	.word	0x200000b0

08000490 <_UpdateLedPwm>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void _UpdateLedPwm(UVBOX_EncoderDirTypeDef new_encoder_dir)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	0002      	movs	r2, r0
 8000498:	1dfb      	adds	r3, r7, #7
 800049a:	701a      	strb	r2, [r3, #0]
  	// encoder direction has changed from increasing to decreasing
	if( (RE_getPrevEncoderDir()) && (!new_encoder_dir) )
 800049c:	f000 f8da 	bl	8000654 <RE_getPrevEncoderDir>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d020      	beq.n	80004e6 <_UpdateLedPwm+0x56>
 80004a4:	1dfb      	adds	r3, r7, #7
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d11c      	bne.n	80004e6 <_UpdateLedPwm+0x56>
	{
		LED_PWM_TIMER.Instance->CCR1 -= ENCODER_STEP;
 80004ac:	4b21      	ldr	r3, [pc, #132]	; (8000534 <_UpdateLedPwm+0xa4>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004b2:	4b20      	ldr	r3, [pc, #128]	; (8000534 <_UpdateLedPwm+0xa4>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	3a01      	subs	r2, #1
 80004b8:	635a      	str	r2, [r3, #52]	; 0x34

		// clamp lower range integer overflow to
		// MAX_UVLED_PWM_PERIOD+1
		if(	(LED_PWM_TIMER.Instance->CCR1 > MAX_LED_PWM_PERIOD+1) )
 80004ba:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <_UpdateLedPwm+0xa4>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d903      	bls.n	80004d0 <_UpdateLedPwm+0x40>
		{
			LED_PWM_TIMER.Instance->CCR1 = 0;
 80004c8:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <_UpdateLedPwm+0xa4>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2200      	movs	r2, #0
 80004ce:	635a      	str	r2, [r3, #52]	; 0x34
		}

		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
 80004d0:	4b19      	ldr	r3, [pc, #100]	; (8000538 <_UpdateLedPwm+0xa8>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	2210      	movs	r2, #16
 80004da:	4013      	ands	r3, r2
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 f8c2 	bl	8000668 <RE_setPrevEncoderDir>
			LED_PWM_TIMER.Instance->CCR1 = MAX_LED_PWM_PERIOD;
		}

		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
	}
}
 80004e4:	e021      	b.n	800052a <_UpdateLedPwm+0x9a>
	else if( (!RE_getPrevEncoderDir()) && (new_encoder_dir) )
 80004e6:	f000 f8b5 	bl	8000654 <RE_getPrevEncoderDir>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d11d      	bne.n	800052a <_UpdateLedPwm+0x9a>
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d019      	beq.n	800052a <_UpdateLedPwm+0x9a>
		LED_PWM_TIMER.Instance->CCR1 += ENCODER_STEP;
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <_UpdateLedPwm+0xa4>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <_UpdateLedPwm+0xa4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3201      	adds	r2, #1
 8000502:	635a      	str	r2, [r3, #52]	; 0x34
		if(	(LED_PWM_TIMER.Instance->CCR1 > MAX_LED_PWM_PERIOD) )
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <_UpdateLedPwm+0xa4>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800050a:	2bff      	cmp	r3, #255	; 0xff
 800050c:	d903      	bls.n	8000516 <_UpdateLedPwm+0x86>
			LED_PWM_TIMER.Instance->CCR1 = MAX_LED_PWM_PERIOD;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <_UpdateLedPwm+0xa4>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	22ff      	movs	r2, #255	; 0xff
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <_UpdateLedPwm+0xa8>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	2210      	movs	r2, #16
 8000520:	4013      	ands	r3, r2
 8000522:	b2db      	uxtb	r3, r3
 8000524:	0018      	movs	r0, r3
 8000526:	f000 f89f 	bl	8000668 <RE_setPrevEncoderDir>
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b002      	add	sp, #8
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	200000f0 	.word	0x200000f0
 8000538:	200000b0 	.word	0x200000b0

0800053c <LM_UpdatePwm>:
 *	@param 		None
 *	@retval 	None
 *
 */
void LM_UpdatePwm()
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	if(EM_getSystemState())
 8000540:	f7ff fe6e 	bl	8000220 <EM_getSystemState>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d00a      	beq.n	800055e <LM_UpdatePwm+0x22>
	{
	  	_UpdateUvPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <LM_UpdatePwm+0x3c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	2210      	movs	r2, #16
 8000552:	4013      	ands	r3, r2
 8000554:	b2db      	uxtb	r3, r3
 8000556:	0018      	movs	r0, r3
 8000558:	f7ff fede 	bl	8000318 <_UpdateUvPwm>
	}
	else
	{
	  	_UpdateLedPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
	}
}
 800055c:	e009      	b.n	8000572 <LM_UpdatePwm+0x36>
	  	_UpdateLedPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <LM_UpdatePwm+0x3c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2210      	movs	r2, #16
 8000568:	4013      	ands	r3, r2
 800056a:	b2db      	uxtb	r3, r3
 800056c:	0018      	movs	r0, r3
 800056e:	f7ff ff8f 	bl	8000490 <_UpdateLedPwm>
}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200000b0 	.word	0x200000b0

0800057c <LM_SetStatusLed>:
											UVBOX_StatusLedBlue
 *	@retval 	None
 *
 */
void LM_SetStatusLed(UVBOX_StatusLedTypeDef new_status)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	0002      	movs	r2, r0
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	701a      	strb	r2, [r3, #0]
	switch(new_status)
 8000588:	1dfb      	adds	r3, r7, #7
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d01a      	beq.n	80005c6 <LM_SetStatusLed+0x4a>
 8000590:	2b02      	cmp	r3, #2
 8000592:	d02e      	beq.n	80005f2 <LM_SetStatusLed+0x76>
 8000594:	2b00      	cmp	r3, #0
 8000596:	d000      	beq.n	800059a <LM_SetStatusLed+0x1e>
		  HAL_GPIO_WritePin(GPIOA, STATUS_GREEN_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, STATUS_RED_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, STATUS_BLUE_Pin, GPIO_PIN_RESET);
		break;
	}
}
 8000598:	e041      	b.n	800061e <LM_SetStatusLed+0xa2>
		  HAL_GPIO_WritePin(GPIOA, STATUS_GREEN_Pin, GPIO_PIN_RESET);
 800059a:	2390      	movs	r3, #144	; 0x90
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	2200      	movs	r2, #0
 80005a0:	2102      	movs	r1, #2
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 ffb8 	bl	8001518 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, STATUS_RED_Pin, GPIO_PIN_SET);
 80005a8:	2390      	movs	r3, #144	; 0x90
 80005aa:	05db      	lsls	r3, r3, #23
 80005ac:	2201      	movs	r2, #1
 80005ae:	2104      	movs	r1, #4
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 ffb1 	bl	8001518 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, STATUS_BLUE_Pin, GPIO_PIN_SET);
 80005b6:	2390      	movs	r3, #144	; 0x90
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	2201      	movs	r2, #1
 80005bc:	2101      	movs	r1, #1
 80005be:	0018      	movs	r0, r3
 80005c0:	f000 ffaa 	bl	8001518 <HAL_GPIO_WritePin>
		break;
 80005c4:	e02b      	b.n	800061e <LM_SetStatusLed+0xa2>
		  HAL_GPIO_WritePin(GPIOA, STATUS_GREEN_Pin, GPIO_PIN_SET);
 80005c6:	2390      	movs	r3, #144	; 0x90
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	2201      	movs	r2, #1
 80005cc:	2102      	movs	r1, #2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 ffa2 	bl	8001518 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, STATUS_RED_Pin, GPIO_PIN_RESET);
 80005d4:	2390      	movs	r3, #144	; 0x90
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	2200      	movs	r2, #0
 80005da:	2104      	movs	r1, #4
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 ff9b 	bl	8001518 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, STATUS_BLUE_Pin, GPIO_PIN_SET);
 80005e2:	2390      	movs	r3, #144	; 0x90
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	2201      	movs	r2, #1
 80005e8:	2101      	movs	r1, #1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 ff94 	bl	8001518 <HAL_GPIO_WritePin>
		break;
 80005f0:	e015      	b.n	800061e <LM_SetStatusLed+0xa2>
		  HAL_GPIO_WritePin(GPIOA, STATUS_GREEN_Pin, GPIO_PIN_SET);
 80005f2:	2390      	movs	r3, #144	; 0x90
 80005f4:	05db      	lsls	r3, r3, #23
 80005f6:	2201      	movs	r2, #1
 80005f8:	2102      	movs	r1, #2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 ff8c 	bl	8001518 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, STATUS_RED_Pin, GPIO_PIN_SET);
 8000600:	2390      	movs	r3, #144	; 0x90
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	2201      	movs	r2, #1
 8000606:	2104      	movs	r1, #4
 8000608:	0018      	movs	r0, r3
 800060a:	f000 ff85 	bl	8001518 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, STATUS_BLUE_Pin, GPIO_PIN_RESET);
 800060e:	2390      	movs	r3, #144	; 0x90
 8000610:	05db      	lsls	r3, r3, #23
 8000612:	2200      	movs	r2, #0
 8000614:	2101      	movs	r1, #1
 8000616:	0018      	movs	r0, r3
 8000618:	f000 ff7e 	bl	8001518 <HAL_GPIO_WritePin>
		break;
 800061c:	46c0      	nop			; (mov r8, r8)
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b002      	add	sp, #8
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <RE_Setup>:
 *	@param 	None
 *	@retval None
 *
 */
void RE_Setup()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&ROTARY_ENCODER);
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <RE_Setup+0x24>)
 800062e:	0018      	movs	r0, r3
 8000630:	f001 fc30 	bl	8001e94 <HAL_TIM_Base_Start>
	previous_encoder_dir = (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR);
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <RE_Setup+0x24>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2210      	movs	r2, #16
 800063e:	4013      	ands	r3, r2
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b03      	ldr	r3, [pc, #12]	; (8000650 <RE_Setup+0x28>)
 8000644:	701a      	strb	r2, [r3, #0]
}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000b0 	.word	0x200000b0
 8000650:	2000002c 	.word	0x2000002c

08000654 <RE_getPrevEncoderDir>:
 *	@retval 	UVBOX_EncoderDirTypeDef - 	UVBOX_ENCODER_DOWN = 0x0,
											UVBOX_ENCODER_UP
 *
 */
UVBOX_EncoderDirTypeDef RE_getPrevEncoderDir()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	return previous_encoder_dir;
 8000658:	4b02      	ldr	r3, [pc, #8]	; (8000664 <RE_getPrevEncoderDir+0x10>)
 800065a:	781b      	ldrb	r3, [r3, #0]
}
 800065c:	0018      	movs	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	2000002c 	.word	0x2000002c

08000668 <RE_setPrevEncoderDir>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void RE_setPrevEncoderDir(UVBOX_EncoderDirTypeDef direction)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	0002      	movs	r2, r0
 8000670:	1dfb      	adds	r3, r7, #7
 8000672:	701a      	strb	r2, [r3, #0]
	previous_encoder_dir = direction;
 8000674:	4b03      	ldr	r3, [pc, #12]	; (8000684 <RE_setPrevEncoderDir+0x1c>)
 8000676:	1dfa      	adds	r2, r7, #7
 8000678:	7812      	ldrb	r2, [r2, #0]
 800067a:	701a      	strb	r2, [r3, #0]
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000002c 	.word	0x2000002c

08000688 <UM_Setup>:
 *	@param None
 *	@retval None
 *
 */
void UM_Setup()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

	  // PWM OUTPUTS

	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_1 );
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <UM_Setup+0x88>)
 800068e:	2100      	movs	r1, #0
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fc4d 	bl	8001f30 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_2 );
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <UM_Setup+0x88>)
 8000698:	2104      	movs	r1, #4
 800069a:	0018      	movs	r0, r3
 800069c:	f001 fc48 	bl	8001f30 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_3 );
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <UM_Setup+0x88>)
 80006a2:	2108      	movs	r1, #8
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fc43 	bl	8001f30 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_4 );
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <UM_Setup+0x88>)
 80006ac:	210c      	movs	r1, #12
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 fc3e 	bl	8001f30 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &LED_PWM_TIMER, TIM_CHANNEL_1 );
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <UM_Setup+0x8c>)
 80006b6:	2100      	movs	r1, #0
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 fc39 	bl	8001f30 <HAL_TIM_PWM_Start>

	  UV_PWM_TIMER.Instance->ARR	= 0xFF;		// 	255
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <UM_Setup+0x88>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	22ff      	movs	r2, #255	; 0xff
 80006c4:	62da      	str	r2, [r3, #44]	; 0x2c
	  UV_PWM_TIMER.Instance->CCR1 	= 0x00;
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <UM_Setup+0x88>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2200      	movs	r2, #0
 80006cc:	635a      	str	r2, [r3, #52]	; 0x34
	  UV_PWM_TIMER.Instance->CCR2 	= 0x00;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <UM_Setup+0x88>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2200      	movs	r2, #0
 80006d4:	639a      	str	r2, [r3, #56]	; 0x38
	  UV_PWM_TIMER.Instance->CCR3 	= 0x00;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <UM_Setup+0x88>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2200      	movs	r2, #0
 80006dc:	63da      	str	r2, [r3, #60]	; 0x3c
	  UV_PWM_TIMER.Instance->CCR4 	= 0x00;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <UM_Setup+0x88>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	641a      	str	r2, [r3, #64]	; 0x40

	  LED_PWM_TIMER.Instance->ARR  	= 0xFF;		// 	255
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <UM_Setup+0x8c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	22ff      	movs	r2, #255	; 0xff
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
	  LED_PWM_TIMER.Instance->CCR1 	= MAX_ENCODER_LIMIT;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <UM_Setup+0x8c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	22ff      	movs	r2, #255	; 0xff
 80006f4:	635a      	str	r2, [r3, #52]	; 0x34

	  // debounce timer
	  HAL_TIM_Base_Start( &DEBOUNCE_TIMER );
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <UM_Setup+0x90>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 fbcb 	bl	8001e94 <HAL_TIM_Base_Start>

	  // status output LED
	  LM_SetStatusLed(UVBOX_StatusLedBlue);
 80006fe:	2002      	movs	r0, #2
 8000700:	f7ff ff3c 	bl	800057c <LM_SetStatusLed>

	  // rotary encoder
	  RE_Setup();
 8000704:	f7ff ff90 	bl	8000628 <RE_Setup>

}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	20000070 	.word	0x20000070
 8000714:	200000f0 	.word	0x200000f0
 8000718:	20000030 	.word	0x20000030

0800071c <UM_EXTI0_1_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void UM_EXTI0_1_IRQHandler()
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
	uint16_t debounce_interrupt_time = DEBOUNCE_TIMER.Instance->CNT;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <UM_EXTI0_1_IRQHandler+0x48>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000728:	1dbb      	adds	r3, r7, #6
 800072a:	801a      	strh	r2, [r3, #0]
	if ((debounce_interrupt_time - UM_getLastDebounceTime()) > MAX_DEBOUNCE_DELAY)
 800072c:	1dbb      	adds	r3, r7, #6
 800072e:	881c      	ldrh	r4, [r3, #0]
 8000730:	f000 f82a 	bl	8000788 <UM_getLastDebounceTime>
 8000734:	0003      	movs	r3, r0
 8000736:	1ae3      	subs	r3, r4, r3
 8000738:	2baf      	cmp	r3, #175	; 0xaf
 800073a:	dd0a      	ble.n	8000752 <UM_EXTI0_1_IRQHandler+0x36>
	{
		if(EM_getSystemState())
 800073c:	f7ff fd70 	bl	8000220 <EM_getSystemState>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d003      	beq.n	800074c <UM_EXTI0_1_IRQHandler+0x30>
			EM_ProcessEvent(UVBOX_evLidOpened);
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff fd75 	bl	8000234 <EM_ProcessEvent>
 800074a:	e002      	b.n	8000752 <UM_EXTI0_1_IRQHandler+0x36>
		else
			EM_ProcessEvent(UVBOX_evLidClosed);
 800074c:	2001      	movs	r0, #1
 800074e:	f7ff fd71 	bl	8000234 <EM_ProcessEvent>
	}
	UM_SetLastDebounceTime(debounce_interrupt_time);
 8000752:	1dbb      	adds	r3, r7, #6
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	0018      	movs	r0, r3
 8000758:	f000 f806 	bl	8000768 <UM_SetLastDebounceTime>
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b003      	add	sp, #12
 8000762:	bd90      	pop	{r4, r7, pc}
 8000764:	20000030 	.word	0x20000030

08000768 <UM_SetLastDebounceTime>:
 *	@param pDebounceTime
 *	@retval None
 *
 */
void UM_SetLastDebounceTime(uint16_t pDebounceTime)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	0002      	movs	r2, r0
 8000770:	1dbb      	adds	r3, r7, #6
 8000772:	801a      	strh	r2, [r3, #0]
	debounce_last_interrupt_time = pDebounceTime;
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <UM_SetLastDebounceTime+0x1c>)
 8000776:	1dba      	adds	r2, r7, #6
 8000778:	8812      	ldrh	r2, [r2, #0]
 800077a:	801a      	strh	r2, [r3, #0]
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b002      	add	sp, #8
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000002a 	.word	0x2000002a

08000788 <UM_getLastDebounceTime>:
 *	@param None
 *	@retval debounce_last_interrupt_time
 *
 */
uint16_t UM_getLastDebounceTime()
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	return debounce_last_interrupt_time;
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <UM_getLastDebounceTime+0x10>)
 800078e:	881b      	ldrh	r3, [r3, #0]
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	2000002a 	.word	0x2000002a

0800079c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	240c      	movs	r4, #12
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	0018      	movs	r0, r3
 80007a8:	2314      	movs	r3, #20
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f002 fa25 	bl	8002bfc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_GPIO_Init+0xb8>)
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <MX_GPIO_Init+0xb8>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0289      	lsls	r1, r1, #10
 80007bc:	430a      	orrs	r2, r1
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MX_GPIO_Init+0xb8>)
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	029b      	lsls	r3, r3, #10
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_GPIO_Init+0xb8>)
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_GPIO_Init+0xb8>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	02c9      	lsls	r1, r1, #11
 80007d8:	430a      	orrs	r2, r1
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_GPIO_Init+0xb8>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	02db      	lsls	r3, r3, #11
 80007e4:	4013      	ands	r3, r2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_BLUE_Pin|STATUS_GREEN_Pin|STATUS_RED_Pin, GPIO_PIN_RESET);
 80007ea:	2390      	movs	r3, #144	; 0x90
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	2200      	movs	r2, #0
 80007f0:	2107      	movs	r1, #7
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 fe90 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STATUS_BLUE_Pin|STATUS_GREEN_Pin|STATUS_RED_Pin;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2207      	movs	r2, #7
 80007fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2201      	movs	r2, #1
 8000802:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	193a      	adds	r2, r7, r4
 8000812:	2390      	movs	r3, #144	; 0x90
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	0011      	movs	r1, r2
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fd0d 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_LED_Pin;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2201      	movs	r2, #1
 8000822:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <MX_GPIO_Init+0xbc>)
 8000828:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082a:	193b      	adds	r3, r7, r4
 800082c:	2201      	movs	r2, #1
 800082e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENABLE_LED_GPIO_Port, &GPIO_InitStruct);
 8000830:	193b      	adds	r3, r7, r4
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <MX_GPIO_Init+0xc0>)
 8000834:	0019      	movs	r1, r3
 8000836:	0010      	movs	r0, r2
 8000838:	f000 fcfe 	bl	8001238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	2005      	movs	r0, #5
 8000842:	f000 fcc7 	bl	80011d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000846:	2005      	movs	r0, #5
 8000848:	f000 fcd9 	bl	80011fe <HAL_NVIC_EnableIRQ>

}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b009      	add	sp, #36	; 0x24
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	40021000 	.word	0x40021000
 8000858:	10210000 	.word	0x10210000
 800085c:	48000400 	.word	0x48000400

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000864:	f000 fba6 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000868:	f000 f80f 	bl	800088a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086c:	f7ff ff96 	bl	800079c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000870:	f000 f8aa 	bl	80009c8 <MX_TIM1_Init>
  MX_TIM17_Init();
 8000874:	f000 fa0e 	bl	8000c94 <MX_TIM17_Init>
  MX_TIM14_Init();
 8000878:	f000 f9be 	bl	8000bf8 <MX_TIM14_Init>
  MX_TIM2_Init();
 800087c:	f000 f95a 	bl	8000b34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  UM_Setup();
 8000880:	f7ff ff02 	bl	8000688 <UM_Setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  LM_UpdatePwm();
 8000884:	f7ff fe5a 	bl	800053c <LM_UpdatePwm>
 8000888:	e7fc      	b.n	8000884 <main+0x24>

0800088a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088a:	b590      	push	{r4, r7, lr}
 800088c:	b091      	sub	sp, #68	; 0x44
 800088e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000890:	2410      	movs	r4, #16
 8000892:	193b      	adds	r3, r7, r4
 8000894:	0018      	movs	r0, r3
 8000896:	2330      	movs	r3, #48	; 0x30
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f002 f9ae 	bl	8002bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	003b      	movs	r3, r7
 80008a2:	0018      	movs	r0, r3
 80008a4:	2310      	movs	r3, #16
 80008a6:	001a      	movs	r2, r3
 80008a8:	2100      	movs	r1, #0
 80008aa:	f002 f9a7 	bl	8002bfc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ae:	0021      	movs	r1, r4
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2202      	movs	r2, #2
 80008b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2210      	movs	r2, #16
 80008c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fe68 	bl	80015a0 <HAL_RCC_OscConfig>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80008d4:	f000 f819 	bl	800090a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d8:	003b      	movs	r3, r7
 80008da:	2207      	movs	r2, #7
 80008dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008de:	003b      	movs	r3, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	003b      	movs	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ea:	003b      	movs	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f0:	003b      	movs	r3, r7
 80008f2:	2100      	movs	r1, #0
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 f96f 	bl	8001bd8 <HAL_RCC_ClockConfig>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008fe:	f000 f804 	bl	800090a <Error_Handler>
  }
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b011      	add	sp, #68	; 0x44
 8000908:	bd90      	pop	{r4, r7, pc}

0800090a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_MspInit+0x44>)
 800091c:	699a      	ldr	r2, [r3, #24]
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_MspInit+0x44>)
 8000920:	2101      	movs	r1, #1
 8000922:	430a      	orrs	r2, r1
 8000924:	619a      	str	r2, [r3, #24]
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_MspInit+0x44>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	2201      	movs	r2, #1
 800092c:	4013      	ands	r3, r2
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_MspInit+0x44>)
 8000934:	69da      	ldr	r2, [r3, #28]
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_MspInit+0x44>)
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	0549      	lsls	r1, r1, #21
 800093c:	430a      	orrs	r2, r1
 800093e:	61da      	str	r2, [r3, #28]
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_MspInit+0x44>)
 8000942:	69da      	ldr	r2, [r3, #28]
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	055b      	lsls	r3, r3, #21
 8000948:	4013      	ands	r3, r2
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	40021000 	.word	0x40021000

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 fb5e 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	UM_EXTI0_1_IRQHandler();
 8000992:	f7ff fec3 	bl	800071c <UM_EXTI0_1_IRQHandler>
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000996:	2001      	movs	r0, #1
 8000998:	f000 fddc 	bl	8001554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <TIM2_IRQHandler+0x14>)
 80009aa:	0018      	movs	r0, r3
 80009ac:	f001 fba0 	bl	80020f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	200000b0 	.word	0x200000b0

080009bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b092      	sub	sp, #72	; 0x48
 80009cc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ce:	2340      	movs	r3, #64	; 0x40
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	0018      	movs	r0, r3
 80009d4:	2308      	movs	r3, #8
 80009d6:	001a      	movs	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f002 f90f 	bl	8002bfc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009de:	2324      	movs	r3, #36	; 0x24
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	0018      	movs	r0, r3
 80009e4:	231c      	movs	r3, #28
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f002 f907 	bl	8002bfc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	0018      	movs	r0, r3
 80009f2:	2320      	movs	r3, #32
 80009f4:	001a      	movs	r2, r3
 80009f6:	2100      	movs	r1, #0
 80009f8:	f002 f900 	bl	8002bfc <memset>

  htim1.Instance = TIM1;
 80009fc:	4b4b      	ldr	r3, [pc, #300]	; (8000b2c <MX_TIM1_Init+0x164>)
 80009fe:	4a4c      	ldr	r2, [pc, #304]	; (8000b30 <MX_TIM1_Init+0x168>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a02:	4b4a      	ldr	r3, [pc, #296]	; (8000b2c <MX_TIM1_Init+0x164>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b48      	ldr	r3, [pc, #288]	; (8000b2c <MX_TIM1_Init+0x164>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64;
 8000a0e:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <MX_TIM1_Init+0x164>)
 8000a10:	2240      	movs	r2, #64	; 0x40
 8000a12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <MX_TIM1_Init+0x164>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a1a:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <MX_TIM1_Init+0x164>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a20:	4b42      	ldr	r3, [pc, #264]	; (8000b2c <MX_TIM1_Init+0x164>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a26:	4b41      	ldr	r3, [pc, #260]	; (8000b2c <MX_TIM1_Init+0x164>)
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f001 fa55 	bl	8001ed8 <HAL_TIM_PWM_Init>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a32:	f7ff ff6a 	bl	800090a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	2140      	movs	r1, #64	; 0x40
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a44:	187a      	adds	r2, r7, r1
 8000a46:	4b39      	ldr	r3, [pc, #228]	; (8000b2c <MX_TIM1_Init+0x164>)
 8000a48:	0011      	movs	r1, r2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 ffe6 	bl	8002a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a54:	f7ff ff59 	bl	800090a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a58:	2124      	movs	r1, #36	; 0x24
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2260      	movs	r2, #96	; 0x60
 8000a5e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a84:	1879      	adds	r1, r7, r1
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <MX_TIM1_Init+0x164>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 fc46 	bl	800231c <HAL_TIM_PWM_ConfigChannel>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000a94:	f7ff ff39 	bl	800090a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a98:	2324      	movs	r3, #36	; 0x24
 8000a9a:	18f9      	adds	r1, r7, r3
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <MX_TIM1_Init+0x164>)
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f001 fc3b 	bl	800231c <HAL_TIM_PWM_ConfigChannel>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8000aaa:	f7ff ff2e 	bl	800090a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aae:	2324      	movs	r3, #36	; 0x24
 8000ab0:	18f9      	adds	r1, r7, r3
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_TIM1_Init+0x164>)
 8000ab4:	2208      	movs	r2, #8
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f001 fc30 	bl	800231c <HAL_TIM_PWM_ConfigChannel>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000ac0:	f7ff ff23 	bl	800090a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ac4:	2324      	movs	r3, #36	; 0x24
 8000ac6:	18f9      	adds	r1, r7, r3
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_TIM1_Init+0x164>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	0018      	movs	r0, r3
 8000ace:	f001 fc25 	bl	800231c <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000ad6:	f7ff ff18 	bl	800090a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	0192      	lsls	r2, r2, #6
 8000afe:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b06:	1d3a      	adds	r2, r7, #4
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_TIM1_Init+0x164>)
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f001 ffe3 	bl	8002ad8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000b16:	f7ff fef8 	bl	800090a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <MX_TIM1_Init+0x164>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f000 f9b1 	bl	8000e84 <HAL_TIM_MspPostInit>

}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b012      	add	sp, #72	; 0x48
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	20000070 	.word	0x20000070
 8000b30:	40012c00 	.word	0x40012c00

08000b34 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b08d      	sub	sp, #52	; 0x34
 8000b38:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b3a:	240c      	movs	r4, #12
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	0018      	movs	r0, r3
 8000b40:	2324      	movs	r3, #36	; 0x24
 8000b42:	001a      	movs	r2, r3
 8000b44:	2100      	movs	r1, #0
 8000b46:	f002 f859 	bl	8002bfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2308      	movs	r3, #8
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f002 f852 	bl	8002bfc <memset>

  htim2.Instance = TIM2;
 8000b58:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <MX_TIM2_Init+0xc0>)
 8000b5a:	2280      	movs	r2, #128	; 0x80
 8000b5c:	05d2      	lsls	r2, r2, #23
 8000b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <MX_TIM2_Init+0xc0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000b66:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <MX_TIM2_Init+0xc0>)
 8000b68:	2260      	movs	r2, #96	; 0x60
 8000b6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 680;
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <MX_TIM2_Init+0xc0>)
 8000b6e:	22aa      	movs	r2, #170	; 0xaa
 8000b70:	0092      	lsls	r2, r2, #2
 8000b72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <MX_TIM2_Init+0xc0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <MX_TIM2_Init+0xc0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b80:	0021      	movs	r1, r4
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2203      	movs	r2, #3
 8000b86:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2201      	movs	r2, #1
 8000b92:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2201      	movs	r2, #1
 8000baa:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000bb8:	187a      	adds	r2, r7, r1
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_TIM2_Init+0xc0>)
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f001 fa02 	bl	8001fc8 <HAL_TIM_Encoder_Init>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000bc8:	f7ff fe9f 	bl	800090a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2220      	movs	r2, #32
 8000bd0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd8:	1d3a      	adds	r2, r7, #4
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_TIM2_Init+0xc0>)
 8000bdc:	0011      	movs	r1, r2
 8000bde:	0018      	movs	r0, r3
 8000be0:	f001 ff1c 	bl	8002a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000be8:	f7ff fe8f 	bl	800090a <Error_Handler>
  }

}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b00d      	add	sp, #52	; 0x34
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	200000b0 	.word	0x200000b0

08000bf8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	0018      	movs	r0, r3
 8000c02:	231c      	movs	r3, #28
 8000c04:	001a      	movs	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	f001 fff8 	bl	8002bfc <memset>

  htim14.Instance = TIM14;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c0e:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <MX_TIM14_Init+0x98>)
 8000c10:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 64;
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c20:	2240      	movs	r2, #64	; 0x40
 8000c22:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f001 f902 	bl	8001e3c <HAL_TIM_Base_Init>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000c3c:	f7ff fe65 	bl	800090a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f001 f948 	bl	8001ed8 <HAL_TIM_PWM_Init>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000c4c:	f7ff fe5d 	bl	800090a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2260      	movs	r2, #96	; 0x60
 8000c54:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c68:	1d39      	adds	r1, r7, #4
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f001 fb54 	bl	800231c <HAL_TIM_PWM_ConfigChannel>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000c78:	f7ff fe47 	bl	800090a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 f900 	bl	8000e84 <HAL_TIM_MspPostInit>

}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b008      	add	sp, #32
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200000f0 	.word	0x200000f0
 8000c90:	40002000 	.word	0x40002000

08000c94 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <MX_TIM17_Init+0x48>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 65535;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000ca0:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <MX_TIM17_Init+0x4c>)
 8000ca2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <MX_TIM17_Init+0x4c>)
 8000cae:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f001 f8b9 	bl	8001e3c <HAL_TIM_Base_Init>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000cce:	f7ff fe1c 	bl	800090a <Error_Handler>
  }

}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000030 	.word	0x20000030
 8000cdc:	40014800 	.word	0x40014800
 8000ce0:	0000ffff 	.word	0x0000ffff

08000ce4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_TIM_PWM_MspInit+0x38>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10d      	bne.n	8000d12 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cf8:	699a      	ldr	r2, [r3, #24]
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	0109      	lsls	r1, r1, #4
 8000d00:	430a      	orrs	r2, r1
 8000d02:	619a      	str	r2, [r3, #24]
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d06:	699a      	ldr	r2, [r3, #24]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b004      	add	sp, #16
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	40012c00 	.word	0x40012c00
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b08b      	sub	sp, #44	; 0x2c
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	2314      	movs	r3, #20
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	0018      	movs	r0, r3
 8000d32:	2314      	movs	r3, #20
 8000d34:	001a      	movs	r2, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	f001 ff60 	bl	8002bfc <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d15e      	bne.n	8000e06 <HAL_TIM_Encoder_MspInit+0xe2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d48:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d4a:	69da      	ldr	r2, [r3, #28]
 8000d4c:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d4e:	2101      	movs	r1, #1
 8000d50:	430a      	orrs	r2, r1
 8000d52:	61da      	str	r2, [r3, #28]
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d62:	695a      	ldr	r2, [r3, #20]
 8000d64:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d66:	2180      	movs	r1, #128	; 0x80
 8000d68:	0289      	lsls	r1, r1, #10
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	029b      	lsls	r3, r3, #10
 8000d76:	4013      	ands	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d7e:	695a      	ldr	r2, [r3, #20]
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	02c9      	lsls	r1, r1, #11
 8000d86:	430a      	orrs	r2, r1
 8000d88:	615a      	str	r2, [r3, #20]
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <HAL_TIM_Encoder_MspInit+0xec>)
 8000d8c:	695a      	ldr	r2, [r3, #20]
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	02db      	lsls	r3, r3, #11
 8000d92:	4013      	ands	r3, r2
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d98:	2114      	movs	r1, #20
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	0212      	lsls	r2, r2, #8
 8000da0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	000c      	movs	r4, r1
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	2202      	movs	r2, #2
 8000da8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	2202      	movs	r2, #2
 8000dba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	193a      	adds	r2, r7, r4
 8000dbe:	2390      	movs	r3, #144	; 0x90
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 fa37 	bl	8001238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dca:	0021      	movs	r1, r4
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2208      	movs	r2, #8
 8000dd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2202      	movs	r2, #2
 8000de8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <HAL_TIM_Encoder_MspInit+0xf0>)
 8000dee:	0019      	movs	r1, r3
 8000df0:	0010      	movs	r0, r2
 8000df2:	f000 fa21 	bl	8001238 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	200f      	movs	r0, #15
 8000dfc:	f000 f9ea 	bl	80011d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e00:	200f      	movs	r0, #15
 8000e02:	f000 f9fc 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b00b      	add	sp, #44	; 0x2c
 8000e0c:	bd90      	pop	{r4, r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48000400 	.word	0x48000400

08000e18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <HAL_TIM_Base_MspInit+0x60>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d10e      	bne.n	8000e48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_TIM_Base_MspInit+0x64>)
 8000e2c:	69da      	ldr	r2, [r3, #28]
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <HAL_TIM_Base_MspInit+0x64>)
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	0049      	lsls	r1, r1, #1
 8000e34:	430a      	orrs	r2, r1
 8000e36:	61da      	str	r2, [r3, #28]
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <HAL_TIM_Base_MspInit+0x64>)
 8000e3a:	69da      	ldr	r2, [r3, #28]
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000e46:	e012      	b.n	8000e6e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM17)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <HAL_TIM_Base_MspInit+0x68>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d10d      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_TIM_Base_MspInit+0x64>)
 8000e54:	699a      	ldr	r2, [r3, #24]
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_TIM_Base_MspInit+0x64>)
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	02c9      	lsls	r1, r1, #11
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	619a      	str	r2, [r3, #24]
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_TIM_Base_MspInit+0x64>)
 8000e62:	699a      	ldr	r2, [r3, #24]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	02db      	lsls	r3, r3, #11
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b004      	add	sp, #16
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	40002000 	.word	0x40002000
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40014800 	.word	0x40014800

08000e84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	2314      	movs	r3, #20
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	0018      	movs	r0, r3
 8000e92:	2314      	movs	r3, #20
 8000e94:	001a      	movs	r2, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	f001 feb0 	bl	8002bfc <memset>
  if(timHandle->Instance==TIM1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a2b      	ldr	r2, [pc, #172]	; (8000f50 <HAL_TIM_MspPostInit+0xcc>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d126      	bne.n	8000ef4 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <HAL_TIM_MspPostInit+0xd0>)
 8000ea8:	695a      	ldr	r2, [r3, #20]
 8000eaa:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <HAL_TIM_MspPostInit+0xd0>)
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	0289      	lsls	r1, r1, #10
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	615a      	str	r2, [r3, #20]
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <HAL_TIM_MspPostInit+0xd0>)
 8000eb6:	695a      	ldr	r2, [r3, #20]
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	029b      	lsls	r3, r3, #10
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000ec2:	2114      	movs	r1, #20
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	22f0      	movs	r2, #240	; 0xf0
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2202      	movs	r2, #2
 8000ed0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	187a      	adds	r2, r7, r1
 8000ee6:	2390      	movs	r3, #144	; 0x90
 8000ee8:	05db      	lsls	r3, r3, #23
 8000eea:	0011      	movs	r1, r2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f000 f9a3 	bl	8001238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000ef2:	e028      	b.n	8000f46 <HAL_TIM_MspPostInit+0xc2>
  else if(timHandle->Instance==TIM14)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <HAL_TIM_MspPostInit+0xd4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d123      	bne.n	8000f46 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_TIM_MspPostInit+0xd0>)
 8000f00:	695a      	ldr	r2, [r3, #20]
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_TIM_MspPostInit+0xd0>)
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	02c9      	lsls	r1, r1, #11
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	615a      	str	r2, [r3, #20]
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_TIM_MspPostInit+0xd0>)
 8000f0e:	695a      	ldr	r2, [r3, #20]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	02db      	lsls	r3, r3, #11
 8000f14:	4013      	ands	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f1a:	2114      	movs	r1, #20
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2202      	movs	r2, #2
 8000f20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2202      	movs	r2, #2
 8000f26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_TIM_MspPostInit+0xd8>)
 8000f3e:	0019      	movs	r1, r3
 8000f40:	0010      	movs	r0, r2
 8000f42:	f000 f979 	bl	8001238 <HAL_GPIO_Init>
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b00a      	add	sp, #40	; 0x28
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	40012c00 	.word	0x40012c00
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40002000 	.word	0x40002000
 8000f5c:	48000400 	.word	0x48000400

08000f60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f66:	490e      	ldr	r1, [pc, #56]	; (8000fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f68:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <LoopForever+0xe>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f7c:	4c0b      	ldr	r4, [pc, #44]	; (8000fac <LoopForever+0x16>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f8a:	f7ff fd17 	bl	80009bc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f8e:	f001 fe11 	bl	8002bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f92:	f7ff fc65 	bl	8000860 <main>

08000f96 <LoopForever>:

LoopForever:
    b LoopForever
 8000f96:	e7fe      	b.n	8000f96 <LoopForever>
  ldr   r0, =_estack
 8000f98:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fa4:	08002c5c 	.word	0x08002c5c
  ldr r2, =_sbss
 8000fa8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fac:	20000134 	.word	0x20000134

08000fb0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC1_COMP_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <HAL_Init+0x24>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_Init+0x24>)
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f000 f809 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fca:	f7ff fca3 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_InitTick+0x5c>)
 8000fe6:	681c      	ldr	r4, [r3, #0]
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_InitTick+0x60>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	0019      	movs	r1, r3
 8000fee:	23fa      	movs	r3, #250	; 0xfa
 8000ff0:	0098      	lsls	r0, r3, #2
 8000ff2:	f7ff f889 	bl	8000108 <__udivsi3>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	0020      	movs	r0, r4
 8000ffc:	f7ff f884 	bl	8000108 <__udivsi3>
 8001000:	0003      	movs	r3, r0
 8001002:	0018      	movs	r0, r3
 8001004:	f000 f90b 	bl	800121e <HAL_SYSTICK_Config>
 8001008:	1e03      	subs	r3, r0, #0
 800100a:	d001      	beq.n	8001010 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e00f      	b.n	8001030 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d80b      	bhi.n	800102e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	2301      	movs	r3, #1
 800101a:	425b      	negs	r3, r3
 800101c:	2200      	movs	r2, #0
 800101e:	0018      	movs	r0, r3
 8001020:	f000 f8d8 	bl	80011d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_InitTick+0x64>)
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b003      	add	sp, #12
 8001036:	bd90      	pop	{r4, r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x1c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	001a      	movs	r2, r3
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x20>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	18d2      	adds	r2, r2, r3
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_IncTick+0x20>)
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	20000008 	.word	0x20000008
 8001064:	20000130 	.word	0x20000130

08001068 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b02      	ldr	r3, [pc, #8]	; (8001078 <HAL_GetTick+0x10>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	0018      	movs	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	20000130 	.word	0x20000130

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	0002      	movs	r2, r0
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b7f      	cmp	r3, #127	; 0x7f
 800108e:	d809      	bhi.n	80010a4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	001a      	movs	r2, r3
 8001096:	231f      	movs	r3, #31
 8001098:	401a      	ands	r2, r3
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_EnableIRQ+0x30>)
 800109c:	2101      	movs	r1, #1
 800109e:	4091      	lsls	r1, r2
 80010a0:	000a      	movs	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
  }
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	0002      	movs	r2, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b7f      	cmp	r3, #127	; 0x7f
 80010c4:	d828      	bhi.n	8001118 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c6:	4a2f      	ldr	r2, [pc, #188]	; (8001184 <__NVIC_SetPriority+0xd4>)
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	33c0      	adds	r3, #192	; 0xc0
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	589b      	ldr	r3, [r3, r2]
 80010d6:	1dfa      	adds	r2, r7, #7
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	0011      	movs	r1, r2
 80010dc:	2203      	movs	r2, #3
 80010de:	400a      	ands	r2, r1
 80010e0:	00d2      	lsls	r2, r2, #3
 80010e2:	21ff      	movs	r1, #255	; 0xff
 80010e4:	4091      	lsls	r1, r2
 80010e6:	000a      	movs	r2, r1
 80010e8:	43d2      	mvns	r2, r2
 80010ea:	401a      	ands	r2, r3
 80010ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	019b      	lsls	r3, r3, #6
 80010f2:	22ff      	movs	r2, #255	; 0xff
 80010f4:	401a      	ands	r2, r3
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	0018      	movs	r0, r3
 80010fc:	2303      	movs	r3, #3
 80010fe:	4003      	ands	r3, r0
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001104:	481f      	ldr	r0, [pc, #124]	; (8001184 <__NVIC_SetPriority+0xd4>)
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b25b      	sxtb	r3, r3
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	430a      	orrs	r2, r1
 8001110:	33c0      	adds	r3, #192	; 0xc0
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001116:	e031      	b.n	800117c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <__NVIC_SetPriority+0xd8>)
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	0019      	movs	r1, r3
 8001120:	230f      	movs	r3, #15
 8001122:	400b      	ands	r3, r1
 8001124:	3b08      	subs	r3, #8
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3306      	adds	r3, #6
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	18d3      	adds	r3, r2, r3
 800112e:	3304      	adds	r3, #4
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	1dfa      	adds	r2, r7, #7
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	0011      	movs	r1, r2
 8001138:	2203      	movs	r2, #3
 800113a:	400a      	ands	r2, r1
 800113c:	00d2      	lsls	r2, r2, #3
 800113e:	21ff      	movs	r1, #255	; 0xff
 8001140:	4091      	lsls	r1, r2
 8001142:	000a      	movs	r2, r1
 8001144:	43d2      	mvns	r2, r2
 8001146:	401a      	ands	r2, r3
 8001148:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	019b      	lsls	r3, r3, #6
 800114e:	22ff      	movs	r2, #255	; 0xff
 8001150:	401a      	ands	r2, r3
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	0018      	movs	r0, r3
 8001158:	2303      	movs	r3, #3
 800115a:	4003      	ands	r3, r0
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <__NVIC_SetPriority+0xd8>)
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	001c      	movs	r4, r3
 8001168:	230f      	movs	r3, #15
 800116a:	4023      	ands	r3, r4
 800116c:	3b08      	subs	r3, #8
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	430a      	orrs	r2, r1
 8001172:	3306      	adds	r3, #6
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	18c3      	adds	r3, r0, r3
 8001178:	3304      	adds	r3, #4
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	b003      	add	sp, #12
 8001182:	bd90      	pop	{r4, r7, pc}
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <SysTick_Config+0x40>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d901      	bls.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e010      	b.n	80011c4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <SysTick_Config+0x44>)
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	3a01      	subs	r2, #1
 80011a8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	2301      	movs	r3, #1
 80011ac:	425b      	negs	r3, r3
 80011ae:	2103      	movs	r1, #3
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff ff7d 	bl	80010b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <SysTick_Config+0x44>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <SysTick_Config+0x44>)
 80011be:	2207      	movs	r2, #7
 80011c0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	0018      	movs	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b002      	add	sp, #8
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	00ffffff 	.word	0x00ffffff
 80011d0:	e000e010 	.word	0xe000e010

080011d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	210f      	movs	r1, #15
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	1c02      	adds	r2, r0, #0
 80011e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	0011      	movs	r1, r2
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff ff5d 	bl	80010b0 <__NVIC_SetPriority>
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b004      	add	sp, #16
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	0002      	movs	r2, r0
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b25b      	sxtb	r3, r3
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff ff33 	bl	800107c <__NVIC_EnableIRQ>
}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b002      	add	sp, #8
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff ffaf 	bl	800118c <SysTick_Config>
 800122e:	0003      	movs	r3, r0
}
 8001230:	0018      	movs	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	b002      	add	sp, #8
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e14f      	b.n	80014e8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4091      	lsls	r1, r2
 8001252:	000a      	movs	r2, r1
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <HAL_GPIO_Init+0x28>
 800125e:	e140      	b.n	80014e2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x38>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b12      	cmp	r3, #18
 800126e:	d123      	bne.n	80012b8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	58d3      	ldr	r3, [r2, r3]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2207      	movs	r2, #7
 8001282:	4013      	ands	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	409a      	lsls	r2, r3
 800128a:	0013      	movs	r3, r2
 800128c:	43da      	mvns	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2107      	movs	r1, #7
 800129c:	400b      	ands	r3, r1
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	409a      	lsls	r2, r3
 80012a2:	0013      	movs	r3, r2
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	08da      	lsrs	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3208      	adds	r2, #8
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	6939      	ldr	r1, [r7, #16]
 80012b6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	409a      	lsls	r2, r3
 80012c6:	0013      	movs	r3, r2
 80012c8:	43da      	mvns	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2203      	movs	r2, #3
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	409a      	lsls	r2, r3
 80012de:	0013      	movs	r3, r2
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d00b      	beq.n	800130c <HAL_GPIO_Init+0xd4>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d007      	beq.n	800130c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001300:	2b11      	cmp	r3, #17
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b12      	cmp	r3, #18
 800130a:	d130      	bne.n	800136e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	409a      	lsls	r2, r3
 800131a:	0013      	movs	r3, r2
 800131c:	43da      	mvns	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	409a      	lsls	r2, r3
 800132e:	0013      	movs	r3, r2
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001342:	2201      	movs	r2, #1
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	43da      	mvns	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	2201      	movs	r2, #1
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
 8001360:	0013      	movs	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	055b      	lsls	r3, r3, #21
 80013a6:	4013      	ands	r3, r2
 80013a8:	d100      	bne.n	80013ac <HAL_GPIO_Init+0x174>
 80013aa:	e09a      	b.n	80014e2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ac:	4b54      	ldr	r3, [pc, #336]	; (8001500 <HAL_GPIO_Init+0x2c8>)
 80013ae:	699a      	ldr	r2, [r3, #24]
 80013b0:	4b53      	ldr	r3, [pc, #332]	; (8001500 <HAL_GPIO_Init+0x2c8>)
 80013b2:	2101      	movs	r1, #1
 80013b4:	430a      	orrs	r2, r1
 80013b6:	619a      	str	r2, [r3, #24]
 80013b8:	4b51      	ldr	r3, [pc, #324]	; (8001500 <HAL_GPIO_Init+0x2c8>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	2201      	movs	r2, #1
 80013be:	4013      	ands	r3, r2
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013c4:	4a4f      	ldr	r2, [pc, #316]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	589b      	ldr	r3, [r3, r2]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2203      	movs	r2, #3
 80013d6:	4013      	ands	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	409a      	lsls	r2, r3
 80013de:	0013      	movs	r3, r2
 80013e0:	43da      	mvns	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	2390      	movs	r3, #144	; 0x90
 80013ec:	05db      	lsls	r3, r3, #23
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x1e2>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a44      	ldr	r2, [pc, #272]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x1de>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a43      	ldr	r2, [pc, #268]	; (800150c <HAL_GPIO_Init+0x2d4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x1da>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a42      	ldr	r2, [pc, #264]	; (8001510 <HAL_GPIO_Init+0x2d8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x1d6>
 800140a:	2303      	movs	r3, #3
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x1e4>
 800140e:	2305      	movs	r3, #5
 8001410:	e004      	b.n	800141c <HAL_GPIO_Init+0x1e4>
 8001412:	2302      	movs	r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x1e4>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_GPIO_Init+0x1e4>
 800141a:	2300      	movs	r3, #0
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	2103      	movs	r1, #3
 8001420:	400a      	ands	r2, r1
 8001422:	0092      	lsls	r2, r2, #2
 8001424:	4093      	lsls	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800142c:	4935      	ldr	r1, [pc, #212]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800143a:	4b36      	ldr	r3, [pc, #216]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43da      	mvns	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	025b      	lsls	r3, r3, #9
 8001452:	4013      	ands	r3, r2
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43da      	mvns	r2, r3
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	029b      	lsls	r3, r3, #10
 800147c:	4013      	ands	r3, r2
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43da      	mvns	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	035b      	lsls	r3, r3, #13
 80014a6:	4013      	ands	r3, r2
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43da      	mvns	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	039b      	lsls	r3, r3, #14
 80014d0:	4013      	ands	r3, r2
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014dc:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	40da      	lsrs	r2, r3
 80014f0:	1e13      	subs	r3, r2, #0
 80014f2:	d000      	beq.n	80014f6 <HAL_GPIO_Init+0x2be>
 80014f4:	e6a8      	b.n	8001248 <HAL_GPIO_Init+0x10>
  } 
}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b006      	add	sp, #24
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	40021000 	.word	0x40021000
 8001504:	40010000 	.word	0x40010000
 8001508:	48000400 	.word	0x48000400
 800150c:	48000800 	.word	0x48000800
 8001510:	48000c00 	.word	0x48000c00
 8001514:	40010400 	.word	0x40010400

08001518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	0008      	movs	r0, r1
 8001522:	0011      	movs	r1, r2
 8001524:	1cbb      	adds	r3, r7, #2
 8001526:	1c02      	adds	r2, r0, #0
 8001528:	801a      	strh	r2, [r3, #0]
 800152a:	1c7b      	adds	r3, r7, #1
 800152c:	1c0a      	adds	r2, r1, #0
 800152e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001530:	1c7b      	adds	r3, r7, #1
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001538:	1cbb      	adds	r3, r7, #2
 800153a:	881a      	ldrh	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001540:	e003      	b.n	800154a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001542:	1cbb      	adds	r3, r7, #2
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b002      	add	sp, #8
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	0002      	movs	r2, r0
 800155c:	1dbb      	adds	r3, r7, #6
 800155e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	1dba      	adds	r2, r7, #6
 8001566:	8812      	ldrh	r2, [r2, #0]
 8001568:	4013      	ands	r3, r2
 800156a:	d008      	beq.n	800157e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800156e:	1dba      	adds	r2, r7, #6
 8001570:	8812      	ldrh	r2, [r2, #0]
 8001572:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001574:	1dbb      	adds	r3, r7, #6
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	0018      	movs	r0, r3
 800157a:	f000 f807 	bl	800158c <HAL_GPIO_EXTI_Callback>
  }
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b002      	add	sp, #8
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	40010400 	.word	0x40010400

0800158c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	0002      	movs	r2, r0
 8001594:	1dbb      	adds	r3, r7, #6
 8001596:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b002      	add	sp, #8
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e303      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	4013      	ands	r3, r2
 80015ba:	d100      	bne.n	80015be <HAL_RCC_OscConfig+0x1e>
 80015bc:	e08d      	b.n	80016da <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015be:	4bc4      	ldr	r3, [pc, #784]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	220c      	movs	r2, #12
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d00e      	beq.n	80015e8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015ca:	4bc1      	ldr	r3, [pc, #772]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	220c      	movs	r2, #12
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d116      	bne.n	8001604 <HAL_RCC_OscConfig+0x64>
 80015d6:	4bbe      	ldr	r3, [pc, #760]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	401a      	ands	r2, r3
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	025b      	lsls	r3, r3, #9
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d10d      	bne.n	8001604 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	4bb9      	ldr	r3, [pc, #740]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	029b      	lsls	r3, r3, #10
 80015f0:	4013      	ands	r3, r2
 80015f2:	d100      	bne.n	80015f6 <HAL_RCC_OscConfig+0x56>
 80015f4:	e070      	b.n	80016d8 <HAL_RCC_OscConfig+0x138>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d000      	beq.n	8001600 <HAL_RCC_OscConfig+0x60>
 80015fe:	e06b      	b.n	80016d8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e2da      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d107      	bne.n	800161c <HAL_RCC_OscConfig+0x7c>
 800160c:	4bb0      	ldr	r3, [pc, #704]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4baf      	ldr	r3, [pc, #700]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001612:	2180      	movs	r1, #128	; 0x80
 8001614:	0249      	lsls	r1, r1, #9
 8001616:	430a      	orrs	r2, r1
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e02f      	b.n	800167c <HAL_RCC_OscConfig+0xdc>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10c      	bne.n	800163e <HAL_RCC_OscConfig+0x9e>
 8001624:	4baa      	ldr	r3, [pc, #680]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4ba9      	ldr	r3, [pc, #676]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 800162a:	49aa      	ldr	r1, [pc, #680]	; (80018d4 <HAL_RCC_OscConfig+0x334>)
 800162c:	400a      	ands	r2, r1
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	4ba7      	ldr	r3, [pc, #668]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4ba6      	ldr	r3, [pc, #664]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001636:	49a8      	ldr	r1, [pc, #672]	; (80018d8 <HAL_RCC_OscConfig+0x338>)
 8001638:	400a      	ands	r2, r1
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e01e      	b.n	800167c <HAL_RCC_OscConfig+0xdc>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b05      	cmp	r3, #5
 8001644:	d10e      	bne.n	8001664 <HAL_RCC_OscConfig+0xc4>
 8001646:	4ba2      	ldr	r3, [pc, #648]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4ba1      	ldr	r3, [pc, #644]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	02c9      	lsls	r1, r1, #11
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	4b9e      	ldr	r3, [pc, #632]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b9d      	ldr	r3, [pc, #628]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	0249      	lsls	r1, r1, #9
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0xdc>
 8001664:	4b9a      	ldr	r3, [pc, #616]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b99      	ldr	r3, [pc, #612]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 800166a:	499a      	ldr	r1, [pc, #616]	; (80018d4 <HAL_RCC_OscConfig+0x334>)
 800166c:	400a      	ands	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	4b97      	ldr	r3, [pc, #604]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b96      	ldr	r3, [pc, #600]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001676:	4998      	ldr	r1, [pc, #608]	; (80018d8 <HAL_RCC_OscConfig+0x338>)
 8001678:	400a      	ands	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d014      	beq.n	80016ae <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fcf0 	bl	8001068 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168e:	f7ff fceb 	bl	8001068 <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b64      	cmp	r3, #100	; 0x64
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e28c      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a0:	4b8b      	ldr	r3, [pc, #556]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	029b      	lsls	r3, r3, #10
 80016a8:	4013      	ands	r3, r2
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0xee>
 80016ac:	e015      	b.n	80016da <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fcdb 	bl	8001068 <HAL_GetTick>
 80016b2:	0003      	movs	r3, r0
 80016b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fcd6 	bl	8001068 <HAL_GetTick>
 80016bc:	0002      	movs	r2, r0
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	; 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e277      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ca:	4b81      	ldr	r3, [pc, #516]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	029b      	lsls	r3, r3, #10
 80016d2:	4013      	ands	r3, r2
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x118>
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2202      	movs	r2, #2
 80016e0:	4013      	ands	r3, r2
 80016e2:	d100      	bne.n	80016e6 <HAL_RCC_OscConfig+0x146>
 80016e4:	e069      	b.n	80017ba <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016e6:	4b7a      	ldr	r3, [pc, #488]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	220c      	movs	r2, #12
 80016ec:	4013      	ands	r3, r2
 80016ee:	d00b      	beq.n	8001708 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016f0:	4b77      	ldr	r3, [pc, #476]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	220c      	movs	r2, #12
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d11c      	bne.n	8001736 <HAL_RCC_OscConfig+0x196>
 80016fc:	4b74      	ldr	r3, [pc, #464]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	025b      	lsls	r3, r3, #9
 8001704:	4013      	ands	r3, r2
 8001706:	d116      	bne.n	8001736 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001708:	4b71      	ldr	r3, [pc, #452]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2202      	movs	r2, #2
 800170e:	4013      	ands	r3, r2
 8001710:	d005      	beq.n	800171e <HAL_RCC_OscConfig+0x17e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e24d      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b6c      	ldr	r3, [pc, #432]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	22f8      	movs	r2, #248	; 0xf8
 8001724:	4393      	bics	r3, r2
 8001726:	0019      	movs	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	00da      	lsls	r2, r3, #3
 800172e:	4b68      	ldr	r3, [pc, #416]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001734:	e041      	b.n	80017ba <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d024      	beq.n	8001788 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173e:	4b64      	ldr	r3, [pc, #400]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b63      	ldr	r3, [pc, #396]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001744:	2101      	movs	r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff fc8d 	bl	8001068 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001754:	f7ff fc88 	bl	8001068 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e229      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001766:	4b5a      	ldr	r3, [pc, #360]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2202      	movs	r2, #2
 800176c:	4013      	ands	r3, r2
 800176e:	d0f1      	beq.n	8001754 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b57      	ldr	r3, [pc, #348]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	22f8      	movs	r2, #248	; 0xf8
 8001776:	4393      	bics	r3, r2
 8001778:	0019      	movs	r1, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	00da      	lsls	r2, r3, #3
 8001780:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001782:	430a      	orrs	r2, r1
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e018      	b.n	80017ba <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001788:	4b51      	ldr	r3, [pc, #324]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 800178e:	2101      	movs	r1, #1
 8001790:	438a      	bics	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fc68 	bl	8001068 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff fc63 	bl	8001068 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e204      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b0:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d1f1      	bne.n	800179e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2208      	movs	r2, #8
 80017c0:	4013      	ands	r3, r2
 80017c2:	d036      	beq.n	8001832 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d019      	beq.n	8001800 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017cc:	4b40      	ldr	r3, [pc, #256]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80017ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d0:	4b3f      	ldr	r3, [pc, #252]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	430a      	orrs	r2, r1
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fc46 	bl	8001068 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e2:	f7ff fc41 	bl	8001068 <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e1e2      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f4:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2202      	movs	r2, #2
 80017fa:	4013      	ands	r3, r2
 80017fc:	d0f1      	beq.n	80017e2 <HAL_RCC_OscConfig+0x242>
 80017fe:	e018      	b.n	8001832 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001804:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001806:	2101      	movs	r1, #1
 8001808:	438a      	bics	r2, r1
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7ff fc2c 	bl	8001068 <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001816:	f7ff fc27 	bl	8001068 <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e1c8      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001828:	4b29      	ldr	r3, [pc, #164]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	2202      	movs	r2, #2
 800182e:	4013      	ands	r3, r2
 8001830:	d1f1      	bne.n	8001816 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2204      	movs	r2, #4
 8001838:	4013      	ands	r3, r2
 800183a:	d100      	bne.n	800183e <HAL_RCC_OscConfig+0x29e>
 800183c:	e0b6      	b.n	80019ac <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183e:	231f      	movs	r3, #31
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001848:	69da      	ldr	r2, [r3, #28]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	055b      	lsls	r3, r3, #21
 800184e:	4013      	ands	r3, r2
 8001850:	d111      	bne.n	8001876 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001854:	69da      	ldr	r2, [r3, #28]
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	0549      	lsls	r1, r1, #21
 800185c:	430a      	orrs	r2, r1
 800185e:	61da      	str	r2, [r3, #28]
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 8001862:	69da      	ldr	r2, [r3, #28]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	055b      	lsls	r3, r3, #21
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800186e:	231f      	movs	r3, #31
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_OscConfig+0x33c>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4013      	ands	r3, r2
 8001880:	d11a      	bne.n	80018b8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_RCC_OscConfig+0x33c>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_RCC_OscConfig+0x33c>)
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	0049      	lsls	r1, r1, #1
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001890:	f7ff fbea 	bl	8001068 <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189a:	f7ff fbe5 	bl	8001068 <HAL_GetTick>
 800189e:	0002      	movs	r2, r0
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b64      	cmp	r3, #100	; 0x64
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e186      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_OscConfig+0x33c>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4013      	ands	r3, r2
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d10f      	bne.n	80018e0 <HAL_RCC_OscConfig+0x340>
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80018c2:	6a1a      	ldr	r2, [r3, #32]
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 80018c6:	2101      	movs	r1, #1
 80018c8:	430a      	orrs	r2, r1
 80018ca:	621a      	str	r2, [r3, #32]
 80018cc:	e036      	b.n	800193c <HAL_RCC_OscConfig+0x39c>
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	40021000 	.word	0x40021000
 80018d4:	fffeffff 	.word	0xfffeffff
 80018d8:	fffbffff 	.word	0xfffbffff
 80018dc:	40007000 	.word	0x40007000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10c      	bne.n	8001902 <HAL_RCC_OscConfig+0x362>
 80018e8:	4bb6      	ldr	r3, [pc, #728]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80018ea:	6a1a      	ldr	r2, [r3, #32]
 80018ec:	4bb5      	ldr	r3, [pc, #724]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80018ee:	2101      	movs	r1, #1
 80018f0:	438a      	bics	r2, r1
 80018f2:	621a      	str	r2, [r3, #32]
 80018f4:	4bb3      	ldr	r3, [pc, #716]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80018f6:	6a1a      	ldr	r2, [r3, #32]
 80018f8:	4bb2      	ldr	r3, [pc, #712]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80018fa:	2104      	movs	r1, #4
 80018fc:	438a      	bics	r2, r1
 80018fe:	621a      	str	r2, [r3, #32]
 8001900:	e01c      	b.n	800193c <HAL_RCC_OscConfig+0x39c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b05      	cmp	r3, #5
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x384>
 800190a:	4bae      	ldr	r3, [pc, #696]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 800190c:	6a1a      	ldr	r2, [r3, #32]
 800190e:	4bad      	ldr	r3, [pc, #692]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001910:	2104      	movs	r1, #4
 8001912:	430a      	orrs	r2, r1
 8001914:	621a      	str	r2, [r3, #32]
 8001916:	4bab      	ldr	r3, [pc, #684]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001918:	6a1a      	ldr	r2, [r3, #32]
 800191a:	4baa      	ldr	r3, [pc, #680]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 800191c:	2101      	movs	r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	621a      	str	r2, [r3, #32]
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0x39c>
 8001924:	4ba7      	ldr	r3, [pc, #668]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001926:	6a1a      	ldr	r2, [r3, #32]
 8001928:	4ba6      	ldr	r3, [pc, #664]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 800192a:	2101      	movs	r1, #1
 800192c:	438a      	bics	r2, r1
 800192e:	621a      	str	r2, [r3, #32]
 8001930:	4ba4      	ldr	r3, [pc, #656]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001932:	6a1a      	ldr	r2, [r3, #32]
 8001934:	4ba3      	ldr	r3, [pc, #652]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001936:	2104      	movs	r1, #4
 8001938:	438a      	bics	r2, r1
 800193a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d014      	beq.n	800196e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001944:	f7ff fb90 	bl	8001068 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194c:	e009      	b.n	8001962 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7ff fb8b 	bl	8001068 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	4a9b      	ldr	r2, [pc, #620]	; (8001bc8 <HAL_RCC_OscConfig+0x628>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e12b      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001962:	4b98      	ldr	r3, [pc, #608]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	2202      	movs	r2, #2
 8001968:	4013      	ands	r3, r2
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x3ae>
 800196c:	e013      	b.n	8001996 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196e:	f7ff fb7b 	bl	8001068 <HAL_GetTick>
 8001972:	0003      	movs	r3, r0
 8001974:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001976:	e009      	b.n	800198c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7ff fb76 	bl	8001068 <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	4a91      	ldr	r2, [pc, #580]	; (8001bc8 <HAL_RCC_OscConfig+0x628>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e116      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	4b8d      	ldr	r3, [pc, #564]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001996:	231f      	movs	r3, #31
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d105      	bne.n	80019ac <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a0:	4b88      	ldr	r3, [pc, #544]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80019a2:	69da      	ldr	r2, [r3, #28]
 80019a4:	4b87      	ldr	r3, [pc, #540]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80019a6:	4989      	ldr	r1, [pc, #548]	; (8001bcc <HAL_RCC_OscConfig+0x62c>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2210      	movs	r2, #16
 80019b2:	4013      	ands	r3, r2
 80019b4:	d063      	beq.n	8001a7e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d12a      	bne.n	8001a14 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019be:	4b81      	ldr	r3, [pc, #516]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80019c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c2:	4b80      	ldr	r3, [pc, #512]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80019c4:	2104      	movs	r1, #4
 80019c6:	430a      	orrs	r2, r1
 80019c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019ca:	4b7e      	ldr	r3, [pc, #504]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80019cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ce:	4b7d      	ldr	r3, [pc, #500]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80019d0:	2101      	movs	r1, #1
 80019d2:	430a      	orrs	r2, r1
 80019d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fb47 	bl	8001068 <HAL_GetTick>
 80019da:	0003      	movs	r3, r0
 80019dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019e0:	f7ff fb42 	bl	8001068 <HAL_GetTick>
 80019e4:	0002      	movs	r2, r0
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e0e3      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019f2:	4b74      	ldr	r3, [pc, #464]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80019f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d0f1      	beq.n	80019e0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019fc:	4b71      	ldr	r3, [pc, #452]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80019fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a00:	22f8      	movs	r2, #248	; 0xf8
 8001a02:	4393      	bics	r3, r2
 8001a04:	0019      	movs	r1, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	00da      	lsls	r2, r3, #3
 8001a0c:	4b6d      	ldr	r3, [pc, #436]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	635a      	str	r2, [r3, #52]	; 0x34
 8001a12:	e034      	b.n	8001a7e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	3305      	adds	r3, #5
 8001a1a:	d111      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a1c:	4b69      	ldr	r3, [pc, #420]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a20:	4b68      	ldr	r3, [pc, #416]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a22:	2104      	movs	r1, #4
 8001a24:	438a      	bics	r2, r1
 8001a26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a28:	4b66      	ldr	r3, [pc, #408]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2c:	22f8      	movs	r2, #248	; 0xf8
 8001a2e:	4393      	bics	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	00da      	lsls	r2, r3, #3
 8001a38:	4b62      	ldr	r3, [pc, #392]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a3e:	e01e      	b.n	8001a7e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a40:	4b60      	ldr	r3, [pc, #384]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a44:	4b5f      	ldr	r3, [pc, #380]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a46:	2104      	movs	r1, #4
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a4c:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a50:	4b5c      	ldr	r3, [pc, #368]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a52:	2101      	movs	r1, #1
 8001a54:	438a      	bics	r2, r1
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a58:	f7ff fb06 	bl	8001068 <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a62:	f7ff fb01 	bl	8001068 <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0a2      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d1f1      	bne.n	8001a62 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d100      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4e8>
 8001a86:	e097      	b.n	8001bb8 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a88:	4b4e      	ldr	r3, [pc, #312]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	220c      	movs	r2, #12
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d100      	bne.n	8001a96 <HAL_RCC_OscConfig+0x4f6>
 8001a94:	e06b      	b.n	8001b6e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d14c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9e:	4b49      	ldr	r3, [pc, #292]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b48      	ldr	r3, [pc, #288]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001aa4:	494a      	ldr	r1, [pc, #296]	; (8001bd0 <HAL_RCC_OscConfig+0x630>)
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff fadd 	bl	8001068 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff fad8 	bl	8001068 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e079      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac6:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	049b      	lsls	r3, r3, #18
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad2:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	4393      	bics	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae0:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ae6:	4b37      	ldr	r3, [pc, #220]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4a3a      	ldr	r2, [pc, #232]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	431a      	orrs	r2, r3
 8001afa:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001afc:	430a      	orrs	r2, r1
 8001afe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b00:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	0449      	lsls	r1, r1, #17
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff faab 	bl	8001068 <HAL_GetTick>
 8001b12:	0003      	movs	r3, r0
 8001b14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff faa6 	bl	8001068 <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e047      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	049b      	lsls	r3, r3, #18
 8001b32:	4013      	ands	r3, r2
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x578>
 8001b36:	e03f      	b.n	8001bb8 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b38:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b3e:	4924      	ldr	r1, [pc, #144]	; (8001bd0 <HAL_RCC_OscConfig+0x630>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fa90 	bl	8001068 <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff fa8b 	bl	8001068 <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e02c      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	049b      	lsls	r3, r3, #18
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5ae>
 8001b6c:	e024      	b.n	8001bb8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e01f      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	025b      	lsls	r3, r3, #9
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d10e      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	220f      	movs	r2, #15
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d107      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	23f0      	movs	r3, #240	; 0xf0
 8001ba8:	039b      	lsls	r3, r3, #14
 8001baa:	401a      	ands	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	0018      	movs	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b008      	add	sp, #32
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	00001388 	.word	0x00001388
 8001bcc:	efffffff 	.word	0xefffffff
 8001bd0:	feffffff 	.word	0xfeffffff
 8001bd4:	ffc2ffff 	.word	0xffc2ffff

08001bd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0b3      	b.n	8001d54 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b5b      	ldr	r3, [pc, #364]	; (8001d5c <HAL_RCC_ClockConfig+0x184>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d911      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b58      	ldr	r3, [pc, #352]	; (8001d5c <HAL_RCC_ClockConfig+0x184>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4393      	bics	r3, r2
 8001c02:	0019      	movs	r1, r3
 8001c04:	4b55      	ldr	r3, [pc, #340]	; (8001d5c <HAL_RCC_ClockConfig+0x184>)
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0c:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <HAL_RCC_ClockConfig+0x184>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2201      	movs	r2, #1
 8001c12:	4013      	ands	r3, r2
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e09a      	b.n	8001d54 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d015      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d006      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c32:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <HAL_RCC_ClockConfig+0x188>)
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4b4a      	ldr	r3, [pc, #296]	; (8001d60 <HAL_RCC_ClockConfig+0x188>)
 8001c38:	21e0      	movs	r1, #224	; 0xe0
 8001c3a:	00c9      	lsls	r1, r1, #3
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <HAL_RCC_ClockConfig+0x188>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	22f0      	movs	r2, #240	; 0xf0
 8001c46:	4393      	bics	r3, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	4b44      	ldr	r3, [pc, #272]	; (8001d60 <HAL_RCC_ClockConfig+0x188>)
 8001c50:	430a      	orrs	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d040      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	4b3e      	ldr	r3, [pc, #248]	; (8001d60 <HAL_RCC_ClockConfig+0x188>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	029b      	lsls	r3, r3, #10
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d114      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e06e      	b.n	8001d54 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_RCC_ClockConfig+0x188>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	049b      	lsls	r3, r3, #18
 8001c86:	4013      	ands	r3, r2
 8001c88:	d108      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e062      	b.n	8001d54 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_RCC_ClockConfig+0x188>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e05b      	b.n	8001d54 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9c:	4b30      	ldr	r3, [pc, #192]	; (8001d60 <HAL_RCC_ClockConfig+0x188>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_RCC_ClockConfig+0x188>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff f9da 	bl	8001068 <HAL_GetTick>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb8:	e009      	b.n	8001cce <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cba:	f7ff f9d5 	bl	8001068 <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	4a27      	ldr	r2, [pc, #156]	; (8001d64 <HAL_RCC_ClockConfig+0x18c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e042      	b.n	8001d54 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_RCC_ClockConfig+0x188>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1ec      	bne.n	8001cba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_RCC_ClockConfig+0x184>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d211      	bcs.n	8001d12 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_RCC_ClockConfig+0x184>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4393      	bics	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <HAL_RCC_ClockConfig+0x184>)
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d00:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <HAL_RCC_ClockConfig+0x184>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2201      	movs	r2, #1
 8001d06:	4013      	ands	r3, r2
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e020      	b.n	8001d54 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2204      	movs	r2, #4
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d009      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d1c:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_RCC_ClockConfig+0x188>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <HAL_RCC_ClockConfig+0x190>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	0019      	movs	r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <HAL_RCC_ClockConfig+0x188>)
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d30:	f000 f820 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 8001d34:	0001      	movs	r1, r0
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_RCC_ClockConfig+0x188>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	091b      	lsrs	r3, r3, #4
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	4013      	ands	r3, r2
 8001d40:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_RCC_ClockConfig+0x194>)
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	000a      	movs	r2, r1
 8001d46:	40da      	lsrs	r2, r3
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_RCC_ClockConfig+0x198>)
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff f945 	bl	8000fdc <HAL_InitTick>
  
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b004      	add	sp, #16
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	00001388 	.word	0x00001388
 8001d68:	fffff8ff 	.word	0xfffff8ff
 8001d6c:	08002c44 	.word	0x08002c44
 8001d70:	20000000 	.word	0x20000000

08001d74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	b08f      	sub	sp, #60	; 0x3c
 8001d78:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d7a:	2314      	movs	r3, #20
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	4a2b      	ldr	r2, [pc, #172]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d80:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d82:	c313      	stmia	r3!, {r0, r1, r4}
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	4a29      	ldr	r2, [pc, #164]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d8e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001da8:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db0:	220c      	movs	r2, #12
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d002      	beq.n	8001dbe <HAL_RCC_GetSysClockFreq+0x4a>
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d003      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x50>
 8001dbc:	e02d      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dc2:	e02d      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	0c9b      	lsrs	r3, r3, #18
 8001dc8:	220f      	movs	r2, #15
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2214      	movs	r2, #20
 8001dce:	18ba      	adds	r2, r7, r2
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	220f      	movs	r2, #15
 8001dda:	4013      	ands	r3, r2
 8001ddc:	1d3a      	adds	r2, r7, #4
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	025b      	lsls	r3, r3, #9
 8001de8:	4013      	ands	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dee:	4812      	ldr	r0, [pc, #72]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001df0:	f7fe f98a 	bl	8000108 <__udivsi3>
 8001df4:	0003      	movs	r3, r0
 8001df6:	001a      	movs	r2, r3
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	4353      	muls	r3, r2
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfe:	e009      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e02:	000a      	movs	r2, r1
 8001e04:	0152      	lsls	r2, r2, #5
 8001e06:	1a52      	subs	r2, r2, r1
 8001e08:	0193      	lsls	r3, r2, #6
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	185b      	adds	r3, r3, r1
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e18:	e002      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e1e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e22:	0018      	movs	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b00f      	add	sp, #60	; 0x3c
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	08002c24 	.word	0x08002c24
 8001e30:	08002c34 	.word	0x08002c34
 8001e34:	40021000 	.word	0x40021000
 8001e38:	007a1200 	.word	0x007a1200

08001e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e01e      	b.n	8001e8c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	223d      	movs	r2, #61	; 0x3d
 8001e52:	5c9b      	ldrb	r3, [r3, r2]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d107      	bne.n	8001e6a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	223c      	movs	r2, #60	; 0x3c
 8001e5e:	2100      	movs	r1, #0
 8001e60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	0018      	movs	r0, r3
 8001e66:	f7fe ffd7 	bl	8000e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	223d      	movs	r2, #61	; 0x3d
 8001e6e:	2102      	movs	r1, #2
 8001e70:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	0010      	movs	r0, r2
 8001e7e:	f000 fb2d 	bl	80024dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	223d      	movs	r2, #61	; 0x3d
 8001e86:	2101      	movs	r1, #1
 8001e88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b002      	add	sp, #8
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	223d      	movs	r2, #61	; 0x3d
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2207      	movs	r2, #7
 8001eac:	4013      	ands	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d007      	beq.n	8001ec6 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	223d      	movs	r2, #61	; 0x3d
 8001eca:	2101      	movs	r1, #1
 8001ecc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b004      	add	sp, #16
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e01e      	b.n	8001f28 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	223d      	movs	r2, #61	; 0x3d
 8001eee:	5c9b      	ldrb	r3, [r3, r2]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d107      	bne.n	8001f06 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	223c      	movs	r2, #60	; 0x3c
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7fe feef 	bl	8000ce4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	223d      	movs	r2, #61	; 0x3d
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3304      	adds	r3, #4
 8001f16:	0019      	movs	r1, r3
 8001f18:	0010      	movs	r0, r2
 8001f1a:	f000 fadf 	bl	80024dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	223d      	movs	r2, #61	; 0x3d
 8001f22:	2101      	movs	r1, #1
 8001f24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6839      	ldr	r1, [r7, #0]
 8001f40:	2201      	movs	r2, #1
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 fd46 	bl	80029d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1a      	ldr	r2, [pc, #104]	; (8001fb8 <HAL_TIM_PWM_Start+0x88>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00e      	beq.n	8001f70 <HAL_TIM_PWM_Start+0x40>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <HAL_TIM_PWM_Start+0x8c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d009      	beq.n	8001f70 <HAL_TIM_PWM_Start+0x40>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_TIM_PWM_Start+0x90>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d004      	beq.n	8001f70 <HAL_TIM_PWM_Start+0x40>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <HAL_TIM_PWM_Start+0x94>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d101      	bne.n	8001f74 <HAL_TIM_PWM_Start+0x44>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <HAL_TIM_PWM_Start+0x46>
 8001f74:	2300      	movs	r3, #0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2180      	movs	r1, #128	; 0x80
 8001f86:	0209      	lsls	r1, r1, #8
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2207      	movs	r2, #7
 8001f94:	4013      	ands	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d007      	beq.n	8001fae <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2101      	movs	r1, #1
 8001faa:	430a      	orrs	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b004      	add	sp, #16
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40012c00 	.word	0x40012c00
 8001fbc:	40014000 	.word	0x40014000
 8001fc0:	40014400 	.word	0x40014400
 8001fc4:	40014800 	.word	0x40014800

08001fc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e07c      	b.n	80020d6 <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	223d      	movs	r2, #61	; 0x3d
 8001fe0:	5c9b      	ldrb	r3, [r3, r2]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d107      	bne.n	8001ff8 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	223c      	movs	r2, #60	; 0x3c
 8001fec:	2100      	movs	r1, #0
 8001fee:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7fe fe96 	bl	8000d24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	223d      	movs	r2, #61	; 0x3d
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4935      	ldr	r1, [pc, #212]	; (80020e0 <HAL_TIM_Encoder_Init+0x118>)
 800200c:	400a      	ands	r2, r1
 800200e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3304      	adds	r3, #4
 8002018:	0019      	movs	r1, r3
 800201a:	0010      	movs	r0, r2
 800201c:	f000 fa5e 	bl	80024dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4313      	orrs	r3, r2
 8002040:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <HAL_TIM_Encoder_Init+0x11c>)
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	4313      	orrs	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4a22      	ldr	r2, [pc, #136]	; (80020e8 <HAL_TIM_Encoder_Init+0x120>)
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4a21      	ldr	r2, [pc, #132]	; (80020ec <HAL_TIM_Encoder_Init+0x124>)
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	4313      	orrs	r3, r2
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	011a      	lsls	r2, r3, #4
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	031b      	lsls	r3, r3, #12
 800208a:	4313      	orrs	r3, r2
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2222      	movs	r2, #34	; 0x22
 8002096:	4393      	bics	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2288      	movs	r2, #136	; 0x88
 800209e:	4393      	bics	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	4313      	orrs	r3, r2
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	223d      	movs	r2, #61	; 0x3d
 80020d0:	2101      	movs	r1, #1
 80020d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b006      	add	sp, #24
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	ffffbff8 	.word	0xffffbff8
 80020e4:	fffffcfc 	.word	0xfffffcfc
 80020e8:	fffff3f3 	.word	0xfffff3f3
 80020ec:	ffff0f0f 	.word	0xffff0f0f

080020f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2202      	movs	r2, #2
 8002100:	4013      	ands	r3, r2
 8002102:	2b02      	cmp	r3, #2
 8002104:	d124      	bne.n	8002150 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2202      	movs	r2, #2
 800210e:	4013      	ands	r3, r2
 8002110:	2b02      	cmp	r3, #2
 8002112:	d11d      	bne.n	8002150 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2203      	movs	r2, #3
 800211a:	4252      	negs	r2, r2
 800211c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2203      	movs	r2, #3
 800212c:	4013      	ands	r3, r2
 800212e:	d004      	beq.n	800213a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0018      	movs	r0, r3
 8002134:	f000 f9ba 	bl	80024ac <HAL_TIM_IC_CaptureCallback>
 8002138:	e007      	b.n	800214a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f000 f9ad 	bl	800249c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0018      	movs	r0, r3
 8002146:	f000 f9b9 	bl	80024bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2204      	movs	r2, #4
 8002158:	4013      	ands	r3, r2
 800215a:	2b04      	cmp	r3, #4
 800215c:	d125      	bne.n	80021aa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2204      	movs	r2, #4
 8002166:	4013      	ands	r3, r2
 8002168:	2b04      	cmp	r3, #4
 800216a:	d11e      	bne.n	80021aa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2205      	movs	r2, #5
 8002172:	4252      	negs	r2, r2
 8002174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	23c0      	movs	r3, #192	; 0xc0
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4013      	ands	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f000 f98d 	bl	80024ac <HAL_TIM_IC_CaptureCallback>
 8002192:	e007      	b.n	80021a4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	0018      	movs	r0, r3
 8002198:	f000 f980 	bl	800249c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 f98c 	bl	80024bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2208      	movs	r2, #8
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d124      	bne.n	8002202 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2208      	movs	r2, #8
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d11d      	bne.n	8002202 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2209      	movs	r2, #9
 80021cc:	4252      	negs	r2, r2
 80021ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2204      	movs	r2, #4
 80021d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	2203      	movs	r2, #3
 80021de:	4013      	ands	r3, r2
 80021e0:	d004      	beq.n	80021ec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 f961 	bl	80024ac <HAL_TIM_IC_CaptureCallback>
 80021ea:	e007      	b.n	80021fc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 f954 	bl	800249c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	0018      	movs	r0, r3
 80021f8:	f000 f960 	bl	80024bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2210      	movs	r2, #16
 800220a:	4013      	ands	r3, r2
 800220c:	2b10      	cmp	r3, #16
 800220e:	d125      	bne.n	800225c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2210      	movs	r2, #16
 8002218:	4013      	ands	r3, r2
 800221a:	2b10      	cmp	r3, #16
 800221c:	d11e      	bne.n	800225c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2211      	movs	r2, #17
 8002224:	4252      	negs	r2, r2
 8002226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2208      	movs	r2, #8
 800222c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	23c0      	movs	r3, #192	; 0xc0
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d004      	beq.n	8002246 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	0018      	movs	r0, r3
 8002240:	f000 f934 	bl	80024ac <HAL_TIM_IC_CaptureCallback>
 8002244:	e007      	b.n	8002256 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	0018      	movs	r0, r3
 800224a:	f000 f927 	bl	800249c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	0018      	movs	r0, r3
 8002252:	f000 f933 	bl	80024bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2201      	movs	r2, #1
 8002264:	4013      	ands	r3, r2
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10f      	bne.n	800228a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	4013      	ands	r3, r2
 8002274:	2b01      	cmp	r3, #1
 8002276:	d108      	bne.n	800228a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2202      	movs	r2, #2
 800227e:	4252      	negs	r2, r2
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	0018      	movs	r0, r3
 8002286:	f000 f901 	bl	800248c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2280      	movs	r2, #128	; 0x80
 8002292:	4013      	ands	r3, r2
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d10f      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2280      	movs	r2, #128	; 0x80
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b80      	cmp	r3, #128	; 0x80
 80022a4:	d108      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2281      	movs	r2, #129	; 0x81
 80022ac:	4252      	negs	r2, r2
 80022ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 fc76 	bl	8002ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2240      	movs	r2, #64	; 0x40
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b40      	cmp	r3, #64	; 0x40
 80022c4:	d10f      	bne.n	80022e6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2240      	movs	r2, #64	; 0x40
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b40      	cmp	r3, #64	; 0x40
 80022d2:	d108      	bne.n	80022e6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2241      	movs	r2, #65	; 0x41
 80022da:	4252      	negs	r2, r2
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 f8f3 	bl	80024cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2220      	movs	r2, #32
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d10f      	bne.n	8002314 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2220      	movs	r2, #32
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b20      	cmp	r3, #32
 8002300:	d108      	bne.n	8002314 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2221      	movs	r2, #33	; 0x21
 8002308:	4252      	negs	r2, r2
 800230a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	0018      	movs	r0, r3
 8002310:	f000 fc40 	bl	8002b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	b002      	add	sp, #8
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	223c      	movs	r2, #60	; 0x3c
 800232c:	5c9b      	ldrb	r3, [r3, r2]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002332:	2302      	movs	r3, #2
 8002334:	e0a4      	b.n	8002480 <HAL_TIM_PWM_ConfigChannel+0x164>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	223c      	movs	r2, #60	; 0x3c
 800233a:	2101      	movs	r1, #1
 800233c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	223d      	movs	r2, #61	; 0x3d
 8002342:	2102      	movs	r1, #2
 8002344:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d029      	beq.n	80023a0 <HAL_TIM_PWM_ConfigChannel+0x84>
 800234c:	d802      	bhi.n	8002354 <HAL_TIM_PWM_ConfigChannel+0x38>
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002352:	e08c      	b.n	800246e <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002354:	2b08      	cmp	r3, #8
 8002356:	d046      	beq.n	80023e6 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002358:	2b0c      	cmp	r3, #12
 800235a:	d065      	beq.n	8002428 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 800235c:	e087      	b.n	800246e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	0011      	movs	r1, r2
 8002366:	0018      	movs	r0, r3
 8002368:	f000 f938 	bl	80025dc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2108      	movs	r1, #8
 8002378:	430a      	orrs	r2, r1
 800237a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2104      	movs	r1, #4
 8002388:	438a      	bics	r2, r1
 800238a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6999      	ldr	r1, [r3, #24]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	619a      	str	r2, [r3, #24]
      break;
 800239e:	e066      	b.n	800246e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	0011      	movs	r1, r2
 80023a8:	0018      	movs	r0, r3
 80023aa:	f000 f99f 	bl	80026ec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699a      	ldr	r2, [r3, #24]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2180      	movs	r1, #128	; 0x80
 80023ba:	0109      	lsls	r1, r1, #4
 80023bc:	430a      	orrs	r2, r1
 80023be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	492f      	ldr	r1, [pc, #188]	; (8002488 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6999      	ldr	r1, [r3, #24]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	021a      	lsls	r2, r3, #8
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	619a      	str	r2, [r3, #24]
      break;
 80023e4:	e043      	b.n	800246e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	0011      	movs	r1, r2
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 fa00 	bl	80027f4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2108      	movs	r1, #8
 8002400:	430a      	orrs	r2, r1
 8002402:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2104      	movs	r1, #4
 8002410:	438a      	bics	r2, r1
 8002412:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69d9      	ldr	r1, [r3, #28]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	61da      	str	r2, [r3, #28]
      break;
 8002426:	e022      	b.n	800246e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	0011      	movs	r1, r2
 8002430:	0018      	movs	r0, r3
 8002432:	f000 fa65 	bl	8002900 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	69da      	ldr	r2, [r3, #28]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	0109      	lsls	r1, r1, #4
 8002444:	430a      	orrs	r2, r1
 8002446:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69da      	ldr	r2, [r3, #28]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	490d      	ldr	r1, [pc, #52]	; (8002488 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002454:	400a      	ands	r2, r1
 8002456:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69d9      	ldr	r1, [r3, #28]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	021a      	lsls	r2, r3, #8
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	61da      	str	r2, [r3, #28]
      break;
 800246c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	223d      	movs	r2, #61	; 0x3d
 8002472:	2101      	movs	r1, #1
 8002474:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	223c      	movs	r2, #60	; 0x3c
 800247a:	2100      	movs	r1, #0
 800247c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	b004      	add	sp, #16
 8002486:	bd80      	pop	{r7, pc}
 8002488:	fffffbff 	.word	0xfffffbff

0800248c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024b4:	46c0      	nop			; (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024c4:	46c0      	nop			; (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}

080024dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a34      	ldr	r2, [pc, #208]	; (80025c0 <TIM_Base_SetConfig+0xe4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d008      	beq.n	8002506 <TIM_Base_SetConfig+0x2a>
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	05db      	lsls	r3, r3, #23
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d003      	beq.n	8002506 <TIM_Base_SetConfig+0x2a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a30      	ldr	r2, [pc, #192]	; (80025c4 <TIM_Base_SetConfig+0xe8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d108      	bne.n	8002518 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2270      	movs	r2, #112	; 0x70
 800250a:	4393      	bics	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a29      	ldr	r2, [pc, #164]	; (80025c0 <TIM_Base_SetConfig+0xe4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d018      	beq.n	8002552 <TIM_Base_SetConfig+0x76>
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	05db      	lsls	r3, r3, #23
 8002526:	429a      	cmp	r2, r3
 8002528:	d013      	beq.n	8002552 <TIM_Base_SetConfig+0x76>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a25      	ldr	r2, [pc, #148]	; (80025c4 <TIM_Base_SetConfig+0xe8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00f      	beq.n	8002552 <TIM_Base_SetConfig+0x76>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a24      	ldr	r2, [pc, #144]	; (80025c8 <TIM_Base_SetConfig+0xec>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00b      	beq.n	8002552 <TIM_Base_SetConfig+0x76>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a23      	ldr	r2, [pc, #140]	; (80025cc <TIM_Base_SetConfig+0xf0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <TIM_Base_SetConfig+0x76>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a22      	ldr	r2, [pc, #136]	; (80025d0 <TIM_Base_SetConfig+0xf4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d003      	beq.n	8002552 <TIM_Base_SetConfig+0x76>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a21      	ldr	r2, [pc, #132]	; (80025d4 <TIM_Base_SetConfig+0xf8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d108      	bne.n	8002564 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4a20      	ldr	r2, [pc, #128]	; (80025d8 <TIM_Base_SetConfig+0xfc>)
 8002556:	4013      	ands	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2280      	movs	r2, #128	; 0x80
 8002568:	4393      	bics	r3, r2
 800256a:	001a      	movs	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a0c      	ldr	r2, [pc, #48]	; (80025c0 <TIM_Base_SetConfig+0xe4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00b      	beq.n	80025aa <TIM_Base_SetConfig+0xce>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <TIM_Base_SetConfig+0xf0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d007      	beq.n	80025aa <TIM_Base_SetConfig+0xce>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <TIM_Base_SetConfig+0xf4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d003      	beq.n	80025aa <TIM_Base_SetConfig+0xce>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <TIM_Base_SetConfig+0xf8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d103      	bne.n	80025b2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	615a      	str	r2, [r3, #20]
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b004      	add	sp, #16
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40012c00 	.word	0x40012c00
 80025c4:	40000400 	.word	0x40000400
 80025c8:	40002000 	.word	0x40002000
 80025cc:	40014000 	.word	0x40014000
 80025d0:	40014400 	.word	0x40014400
 80025d4:	40014800 	.word	0x40014800
 80025d8:	fffffcff 	.word	0xfffffcff

080025dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	2201      	movs	r2, #1
 80025ec:	4393      	bics	r3, r2
 80025ee:	001a      	movs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2270      	movs	r2, #112	; 0x70
 800260a:	4393      	bics	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2203      	movs	r2, #3
 8002612:	4393      	bics	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2202      	movs	r2, #2
 8002624:	4393      	bics	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a27      	ldr	r2, [pc, #156]	; (80026d4 <TIM_OC1_SetConfig+0xf8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00b      	beq.n	8002652 <TIM_OC1_SetConfig+0x76>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a26      	ldr	r2, [pc, #152]	; (80026d8 <TIM_OC1_SetConfig+0xfc>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <TIM_OC1_SetConfig+0x76>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a25      	ldr	r2, [pc, #148]	; (80026dc <TIM_OC1_SetConfig+0x100>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d003      	beq.n	8002652 <TIM_OC1_SetConfig+0x76>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a24      	ldr	r2, [pc, #144]	; (80026e0 <TIM_OC1_SetConfig+0x104>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10c      	bne.n	800266c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2208      	movs	r2, #8
 8002656:	4393      	bics	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2204      	movs	r2, #4
 8002668:	4393      	bics	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <TIM_OC1_SetConfig+0xf8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00b      	beq.n	800268c <TIM_OC1_SetConfig+0xb0>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <TIM_OC1_SetConfig+0xfc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d007      	beq.n	800268c <TIM_OC1_SetConfig+0xb0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a17      	ldr	r2, [pc, #92]	; (80026dc <TIM_OC1_SetConfig+0x100>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d003      	beq.n	800268c <TIM_OC1_SetConfig+0xb0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a16      	ldr	r2, [pc, #88]	; (80026e0 <TIM_OC1_SetConfig+0x104>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d111      	bne.n	80026b0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4a15      	ldr	r2, [pc, #84]	; (80026e4 <TIM_OC1_SetConfig+0x108>)
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <TIM_OC1_SetConfig+0x10c>)
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	621a      	str	r2, [r3, #32]
}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b006      	add	sp, #24
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	40014000 	.word	0x40014000
 80026dc:	40014400 	.word	0x40014400
 80026e0:	40014800 	.word	0x40014800
 80026e4:	fffffeff 	.word	0xfffffeff
 80026e8:	fffffdff 	.word	0xfffffdff

080026ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	2210      	movs	r2, #16
 80026fc:	4393      	bics	r3, r2
 80026fe:	001a      	movs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4a2e      	ldr	r2, [pc, #184]	; (80027d4 <TIM_OC2_SetConfig+0xe8>)
 800271a:	4013      	ands	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4a2d      	ldr	r2, [pc, #180]	; (80027d8 <TIM_OC2_SetConfig+0xec>)
 8002722:	4013      	ands	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2220      	movs	r2, #32
 8002736:	4393      	bics	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a24      	ldr	r2, [pc, #144]	; (80027dc <TIM_OC2_SetConfig+0xf0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d10d      	bne.n	800276a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	4393      	bics	r3, r2
 8002754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2240      	movs	r2, #64	; 0x40
 8002766:	4393      	bics	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a1b      	ldr	r2, [pc, #108]	; (80027dc <TIM_OC2_SetConfig+0xf0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00b      	beq.n	800278a <TIM_OC2_SetConfig+0x9e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <TIM_OC2_SetConfig+0xf4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <TIM_OC2_SetConfig+0x9e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <TIM_OC2_SetConfig+0xf8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d003      	beq.n	800278a <TIM_OC2_SetConfig+0x9e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <TIM_OC2_SetConfig+0xfc>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d113      	bne.n	80027b2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4a17      	ldr	r2, [pc, #92]	; (80027ec <TIM_OC2_SetConfig+0x100>)
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <TIM_OC2_SetConfig+0x104>)
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	621a      	str	r2, [r3, #32]
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b006      	add	sp, #24
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	ffff8fff 	.word	0xffff8fff
 80027d8:	fffffcff 	.word	0xfffffcff
 80027dc:	40012c00 	.word	0x40012c00
 80027e0:	40014000 	.word	0x40014000
 80027e4:	40014400 	.word	0x40014400
 80027e8:	40014800 	.word	0x40014800
 80027ec:	fffffbff 	.word	0xfffffbff
 80027f0:	fffff7ff 	.word	0xfffff7ff

080027f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a35      	ldr	r2, [pc, #212]	; (80028d8 <TIM_OC3_SetConfig+0xe4>)
 8002804:	401a      	ands	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2270      	movs	r2, #112	; 0x70
 8002820:	4393      	bics	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2203      	movs	r2, #3
 8002828:	4393      	bics	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	4a28      	ldr	r2, [pc, #160]	; (80028dc <TIM_OC3_SetConfig+0xe8>)
 800283a:	4013      	ands	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a24      	ldr	r2, [pc, #144]	; (80028e0 <TIM_OC3_SetConfig+0xec>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10d      	bne.n	800286e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	4a23      	ldr	r2, [pc, #140]	; (80028e4 <TIM_OC3_SetConfig+0xf0>)
 8002856:	4013      	ands	r3, r2
 8002858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4313      	orrs	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <TIM_OC3_SetConfig+0xf4>)
 800286a:	4013      	ands	r3, r2
 800286c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a1b      	ldr	r2, [pc, #108]	; (80028e0 <TIM_OC3_SetConfig+0xec>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00b      	beq.n	800288e <TIM_OC3_SetConfig+0x9a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <TIM_OC3_SetConfig+0xf8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d007      	beq.n	800288e <TIM_OC3_SetConfig+0x9a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <TIM_OC3_SetConfig+0xfc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d003      	beq.n	800288e <TIM_OC3_SetConfig+0x9a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a1a      	ldr	r2, [pc, #104]	; (80028f4 <TIM_OC3_SetConfig+0x100>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d113      	bne.n	80028b6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <TIM_OC3_SetConfig+0x104>)
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4a18      	ldr	r2, [pc, #96]	; (80028fc <TIM_OC3_SetConfig+0x108>)
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	621a      	str	r2, [r3, #32]
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b006      	add	sp, #24
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	fffffeff 	.word	0xfffffeff
 80028dc:	fffffdff 	.word	0xfffffdff
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	fffff7ff 	.word	0xfffff7ff
 80028e8:	fffffbff 	.word	0xfffffbff
 80028ec:	40014000 	.word	0x40014000
 80028f0:	40014400 	.word	0x40014400
 80028f4:	40014800 	.word	0x40014800
 80028f8:	ffffefff 	.word	0xffffefff
 80028fc:	ffffdfff 	.word	0xffffdfff

08002900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4a28      	ldr	r2, [pc, #160]	; (80029b0 <TIM_OC4_SetConfig+0xb0>)
 8002910:	401a      	ands	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4a22      	ldr	r2, [pc, #136]	; (80029b4 <TIM_OC4_SetConfig+0xb4>)
 800292c:	4013      	ands	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a21      	ldr	r2, [pc, #132]	; (80029b8 <TIM_OC4_SetConfig+0xb8>)
 8002934:	4013      	ands	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <TIM_OC4_SetConfig+0xbc>)
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	031b      	lsls	r3, r3, #12
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <TIM_OC4_SetConfig+0xc0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00b      	beq.n	8002978 <TIM_OC4_SetConfig+0x78>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a18      	ldr	r2, [pc, #96]	; (80029c4 <TIM_OC4_SetConfig+0xc4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d007      	beq.n	8002978 <TIM_OC4_SetConfig+0x78>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a17      	ldr	r2, [pc, #92]	; (80029c8 <TIM_OC4_SetConfig+0xc8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d003      	beq.n	8002978 <TIM_OC4_SetConfig+0x78>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a16      	ldr	r2, [pc, #88]	; (80029cc <TIM_OC4_SetConfig+0xcc>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d109      	bne.n	800298c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <TIM_OC4_SetConfig+0xd0>)
 800297c:	4013      	ands	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	019b      	lsls	r3, r3, #6
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	621a      	str	r2, [r3, #32]
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b006      	add	sp, #24
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	ffffefff 	.word	0xffffefff
 80029b4:	ffff8fff 	.word	0xffff8fff
 80029b8:	fffffcff 	.word	0xfffffcff
 80029bc:	ffffdfff 	.word	0xffffdfff
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40014000 	.word	0x40014000
 80029c8:	40014400 	.word	0x40014400
 80029cc:	40014800 	.word	0x40014800
 80029d0:	ffffbfff 	.word	0xffffbfff

080029d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	221f      	movs	r2, #31
 80029e4:	4013      	ands	r3, r2
 80029e6:	2201      	movs	r2, #1
 80029e8:	409a      	lsls	r2, r3
 80029ea:	0013      	movs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	43d2      	mvns	r2, r2
 80029f6:	401a      	ands	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a1a      	ldr	r2, [r3, #32]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	211f      	movs	r1, #31
 8002a04:	400b      	ands	r3, r1
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4099      	lsls	r1, r3
 8002a0a:	000b      	movs	r3, r1
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	621a      	str	r2, [r3, #32]
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b006      	add	sp, #24
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	223c      	movs	r2, #60	; 0x3c
 8002a2a:	5c9b      	ldrb	r3, [r3, r2]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e047      	b.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	223c      	movs	r2, #60	; 0x3c
 8002a38:	2101      	movs	r1, #1
 8002a3a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	223d      	movs	r2, #61	; 0x3d
 8002a40:	2102      	movs	r1, #2
 8002a42:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2270      	movs	r2, #112	; 0x70
 8002a58:	4393      	bics	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a16      	ldr	r2, [pc, #88]	; (8002acc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00f      	beq.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	05db      	lsls	r3, r3, #23
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d009      	beq.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a11      	ldr	r2, [pc, #68]	; (8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a10      	ldr	r2, [pc, #64]	; (8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d10c      	bne.n	8002ab2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	4393      	bics	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	223d      	movs	r2, #61	; 0x3d
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	223c      	movs	r2, #60	; 0x3c
 8002abe:	2100      	movs	r1, #0
 8002ac0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b004      	add	sp, #16
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40012c00 	.word	0x40012c00
 8002ad0:	40000400 	.word	0x40000400
 8002ad4:	40014000 	.word	0x40014000

08002ad8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	223c      	movs	r2, #60	; 0x3c
 8002aea:	5c9b      	ldrb	r3, [r3, r2]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e03e      	b.n	8002b72 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	223c      	movs	r2, #60	; 0x3c
 8002af8:	2101      	movs	r1, #1
 8002afa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	22ff      	movs	r2, #255	; 0xff
 8002b00:	4393      	bics	r3, r2
 8002b02:	001a      	movs	r2, r3
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4a1b      	ldr	r2, [pc, #108]	; (8002b7c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002b10:	401a      	ands	r2, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002b1e:	401a      	ands	r2, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a16      	ldr	r2, [pc, #88]	; (8002b84 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002b48:	401a      	ands	r2, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002b56:	401a      	ands	r2, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	223c      	movs	r2, #60	; 0x3c
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b004      	add	sp, #16
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	fffffcff 	.word	0xfffffcff
 8002b80:	fffffbff 	.word	0xfffffbff
 8002b84:	fffff7ff 	.word	0xfffff7ff
 8002b88:	ffffefff 	.word	0xffffefff
 8002b8c:	ffffdfff 	.word	0xffffdfff
 8002b90:	ffffbfff 	.word	0xffffbfff

08002b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <__libc_init_array>:
 8002bb4:	b570      	push	{r4, r5, r6, lr}
 8002bb6:	2600      	movs	r6, #0
 8002bb8:	4d0c      	ldr	r5, [pc, #48]	; (8002bec <__libc_init_array+0x38>)
 8002bba:	4c0d      	ldr	r4, [pc, #52]	; (8002bf0 <__libc_init_array+0x3c>)
 8002bbc:	1b64      	subs	r4, r4, r5
 8002bbe:	10a4      	asrs	r4, r4, #2
 8002bc0:	42a6      	cmp	r6, r4
 8002bc2:	d109      	bne.n	8002bd8 <__libc_init_array+0x24>
 8002bc4:	2600      	movs	r6, #0
 8002bc6:	f000 f821 	bl	8002c0c <_init>
 8002bca:	4d0a      	ldr	r5, [pc, #40]	; (8002bf4 <__libc_init_array+0x40>)
 8002bcc:	4c0a      	ldr	r4, [pc, #40]	; (8002bf8 <__libc_init_array+0x44>)
 8002bce:	1b64      	subs	r4, r4, r5
 8002bd0:	10a4      	asrs	r4, r4, #2
 8002bd2:	42a6      	cmp	r6, r4
 8002bd4:	d105      	bne.n	8002be2 <__libc_init_array+0x2e>
 8002bd6:	bd70      	pop	{r4, r5, r6, pc}
 8002bd8:	00b3      	lsls	r3, r6, #2
 8002bda:	58eb      	ldr	r3, [r5, r3]
 8002bdc:	4798      	blx	r3
 8002bde:	3601      	adds	r6, #1
 8002be0:	e7ee      	b.n	8002bc0 <__libc_init_array+0xc>
 8002be2:	00b3      	lsls	r3, r6, #2
 8002be4:	58eb      	ldr	r3, [r5, r3]
 8002be6:	4798      	blx	r3
 8002be8:	3601      	adds	r6, #1
 8002bea:	e7f2      	b.n	8002bd2 <__libc_init_array+0x1e>
 8002bec:	08002c54 	.word	0x08002c54
 8002bf0:	08002c54 	.word	0x08002c54
 8002bf4:	08002c54 	.word	0x08002c54
 8002bf8:	08002c58 	.word	0x08002c58

08002bfc <memset>:
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	1812      	adds	r2, r2, r0
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d100      	bne.n	8002c06 <memset+0xa>
 8002c04:	4770      	bx	lr
 8002c06:	7019      	strb	r1, [r3, #0]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	e7f9      	b.n	8002c00 <memset+0x4>

08002c0c <_init>:
 8002c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c12:	bc08      	pop	{r3}
 8002c14:	469e      	mov	lr, r3
 8002c16:	4770      	bx	lr

08002c18 <_fini>:
 8002c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1e:	bc08      	pop	{r3}
 8002c20:	469e      	mov	lr, r3
 8002c22:	4770      	bx	lr
