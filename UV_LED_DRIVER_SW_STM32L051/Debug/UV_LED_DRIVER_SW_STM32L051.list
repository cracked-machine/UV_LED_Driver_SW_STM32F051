
UV_LED_DRIVER_SW_STM32L051.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08005010  08005010  00015010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052f4  080052f4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080052f4  080052f4  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052f4  080052f4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052f4  080052f4  000152f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080052fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000007c  08005378  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08005378  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a35  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029d1  00000000  00000000  00031ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da0  00000000  00000000  000344b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  00035250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010f18  00000000  00000000  00035e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dfea  00000000  00000000  00046da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00057b6a  00000000  00000000  00054d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac8f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031ac  00000000  00000000  000ac970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004ff8 	.word	0x08004ff8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08004ff8 	.word	0x08004ff8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <EM_getSystemState>:
 *	@retval UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
										UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef 	EM_getSystemState()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	return eTheSystemState;
 8000224:	4b02      	ldr	r3, [pc, #8]	; (8000230 <EM_getSystemState+0x10>)
 8000226:	781b      	ldrb	r3, [r3, #0]
}
 8000228:	0018      	movs	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	20000000 	.word	0x20000000

08000234 <EM_ProcessEvent>:
											UVBOX_evLidClosed,
 *	@retval None
 *
 */
void EM_ProcessEvent(UVBOX_SystemEventsTypedef newEvent)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	701a      	strb	r2, [r3, #0]
	switch(eTheSystemState)
 8000240:	4b29      	ldr	r3, [pc, #164]	; (80002e8 <EM_ProcessEvent+0xb4>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b01      	cmp	r3, #1
 8000246:	d004      	beq.n	8000252 <EM_ProcessEvent+0x1e>
 8000248:	2b02      	cmp	r3, #2
 800024a:	d01c      	beq.n	8000286 <EM_ProcessEvent+0x52>
 800024c:	2b00      	cmp	r3, #0
 800024e:	d02d      	beq.n	80002ac <EM_ProcessEvent+0x78>

			break;
*/

	}
}
 8000250:	e045      	b.n	80002de <EM_ProcessEvent+0xaa>
			switch(newEvent)
 8000252:	1dfb      	adds	r3, r7, #7
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d002      	beq.n	8000260 <EM_ProcessEvent+0x2c>
 800025a:	2b02      	cmp	r3, #2
 800025c:	d007      	beq.n	800026e <EM_ProcessEvent+0x3a>
					break;
 800025e:	e011      	b.n	8000284 <EM_ProcessEvent+0x50>
					eTheSystemState = LM_DisableUVMode();	//UVBOX_TimerExpired
 8000260:	f000 f86e 	bl	8000340 <LM_DisableUVMode>
 8000264:	0003      	movs	r3, r0
 8000266:	001a      	movs	r2, r3
 8000268:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <EM_ProcessEvent+0xb4>)
 800026a:	701a      	strb	r2, [r3, #0]
					break;
 800026c:	e00a      	b.n	8000284 <EM_ProcessEvent+0x50>
					eTheSystemState = LM_DisableUVMode(0);	//UVBOX_TimerExpired
 800026e:	2000      	movs	r0, #0
 8000270:	f000 f866 	bl	8000340 <LM_DisableUVMode>
 8000274:	0003      	movs	r3, r0
 8000276:	001a      	movs	r2, r3
 8000278:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <EM_ProcessEvent+0xb4>)
 800027a:	701a      	strb	r2, [r3, #0]
					eTheSystemState = UVBOX_TimerReset;	//UVBOX_TimerReset
 800027c:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <EM_ProcessEvent+0xb4>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]
					break;
 8000282:	46c0      	nop			; (mov r8, r8)
		break;
 8000284:	e02b      	b.n	80002de <EM_ProcessEvent+0xaa>
		switch(newEvent)
 8000286:	1dfb      	adds	r3, r7, #7
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d002      	beq.n	8000294 <EM_ProcessEvent+0x60>
 800028e:	2b02      	cmp	r3, #2
 8000290:	d007      	beq.n	80002a2 <EM_ProcessEvent+0x6e>
				break;
 8000292:	e00a      	b.n	80002aa <EM_ProcessEvent+0x76>
				eTheSystemState = LM_DisableUVMode();	//UVBOX_TimerExpired
 8000294:	f000 f854 	bl	8000340 <LM_DisableUVMode>
 8000298:	0003      	movs	r3, r0
 800029a:	001a      	movs	r2, r3
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <EM_ProcessEvent+0xb4>)
 800029e:	701a      	strb	r2, [r3, #0]
				break;
 80002a0:	e003      	b.n	80002aa <EM_ProcessEvent+0x76>
				eTheSystemState = UVBOX_TimerReset;	//UVBOX_TimerReset
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <EM_ProcessEvent+0xb4>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]
				break;
 80002a8:	46c0      	nop			; (mov r8, r8)
		break;
 80002aa:	e018      	b.n	80002de <EM_ProcessEvent+0xaa>
		switch(newEvent)
 80002ac:	1dfb      	adds	r3, r7, #7
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d004      	beq.n	80002be <EM_ProcessEvent+0x8a>
 80002b4:	2b02      	cmp	r3, #2
 80002b6:	d010      	beq.n	80002da <EM_ProcessEvent+0xa6>
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d007      	beq.n	80002cc <EM_ProcessEvent+0x98>
		break;
 80002bc:	e00e      	b.n	80002dc <EM_ProcessEvent+0xa8>
				eTheSystemState = LM_DisableUVMode();	//UVBOX_TimerExpired
 80002be:	f000 f83f 	bl	8000340 <LM_DisableUVMode>
 80002c2:	0003      	movs	r3, r0
 80002c4:	001a      	movs	r2, r3
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <EM_ProcessEvent+0xb4>)
 80002c8:	701a      	strb	r2, [r3, #0]
				break;
 80002ca:	e007      	b.n	80002dc <EM_ProcessEvent+0xa8>
				eTheSystemState = LM_EnableUVMode();	//UVBOX_TimerRunning
 80002cc:	f000 f80e 	bl	80002ec <LM_EnableUVMode>
 80002d0:	0003      	movs	r3, r0
 80002d2:	001a      	movs	r2, r3
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <EM_ProcessEvent+0xb4>)
 80002d6:	701a      	strb	r2, [r3, #0]
				break;
 80002d8:	e000      	b.n	80002dc <EM_ProcessEvent+0xa8>
				break;
 80002da:	46c0      	nop			; (mov r8, r8)
		break;
 80002dc:	46c0      	nop			; (mov r8, r8)
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b002      	add	sp, #8
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	20000000 	.word	0x20000000

080002ec <LM_EnableUVMode>:
 *	@retval 	UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
											UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef LM_EnableUVMode()
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	LM_SetStatusLed(UVBOX_StatusLedGreen);
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 f951 	bl	8000598 <LM_SetStatusLed>

	UV_PWM_TIMER.Instance->CCR1 = MAX_UVLED_PWM_PERIOD;
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <LM_EnableUVMode+0x48>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	22a0      	movs	r2, #160	; 0xa0
 80002fc:	635a      	str	r2, [r3, #52]	; 0x34
	UV_PWM_TIMER.Instance->CCR2 = MAX_UVLED_PWM_PERIOD;
 80002fe:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <LM_EnableUVMode+0x48>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	22a0      	movs	r2, #160	; 0xa0
 8000304:	639a      	str	r2, [r3, #56]	; 0x38
	UV_PWM_TIMER.Instance->CCR3 = MAX_UVLED_PWM_PERIOD;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <LM_EnableUVMode+0x48>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	22a0      	movs	r2, #160	; 0xa0
 800030c:	63da      	str	r2, [r3, #60]	; 0x3c
	UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
 800030e:	4b09      	ldr	r3, [pc, #36]	; (8000334 <LM_EnableUVMode+0x48>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	22a0      	movs	r2, #160	; 0xa0
 8000314:	641a      	str	r2, [r3, #64]	; 0x40

	// save the user LED brightness setting
	previous_encoder_value = LED_PWM_TIMER.Instance->CCR1;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <LM_EnableUVMode+0x4c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <LM_EnableUVMode+0x50>)
 800031e:	601a      	str	r2, [r3, #0]
	LED_PWM_TIMER.Instance->CCR1 = 0;
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <LM_EnableUVMode+0x4c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2200      	movs	r2, #0
 8000326:	635a      	str	r2, [r3, #52]	; 0x34


	TM_StartTimer();
 8000328:	f000 f9ca 	bl	80006c0 <TM_StartTimer>

	return UVBOX_TimerRunning;
 800032c:	2301      	movs	r3, #1
}
 800032e:	0018      	movs	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	200001d4 	.word	0x200001d4
 8000338:	20000254 	.word	0x20000254
 800033c:	20000098 	.word	0x20000098

08000340 <LM_DisableUVMode>:
 *	@retval 	UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
											UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef LM_DisableUVMode()
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	//LM_SetStatusLed(UVBOX_StatusLedRed);  // not implemented in HW

	UV_PWM_TIMER.Instance->CCR1 = 0;
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <LM_DisableUVMode+0x48>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2200      	movs	r2, #0
 800034a:	635a      	str	r2, [r3, #52]	; 0x34
	UV_PWM_TIMER.Instance->CCR2 = 0;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <LM_DisableUVMode+0x48>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2200      	movs	r2, #0
 8000352:	639a      	str	r2, [r3, #56]	; 0x38
	UV_PWM_TIMER.Instance->CCR3 = 0;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <LM_DisableUVMode+0x48>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2200      	movs	r2, #0
 800035a:	63da      	str	r2, [r3, #60]	; 0x3c
	UV_PWM_TIMER.Instance->CCR4 = 0;
 800035c:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <LM_DisableUVMode+0x48>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2200      	movs	r2, #0
 8000362:	641a      	str	r2, [r3, #64]	; 0x40

	// restore the user LED brightness setting
	if(previous_encoder_value != 0)
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <LM_DisableUVMode+0x4c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d004      	beq.n	8000376 <LM_DisableUVMode+0x36>
		LED_PWM_TIMER.Instance->CCR1 = previous_encoder_value;
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <LM_DisableUVMode+0x50>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a06      	ldr	r2, [pc, #24]	; (800038c <LM_DisableUVMode+0x4c>)
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	635a      	str	r2, [r3, #52]	; 0x34

	TM_StopTimer();
 8000376:	f000 f9b9 	bl	80006ec <TM_StopTimer>
	TM_ResetTimer();
 800037a:	f000 f943 	bl	8000604 <TM_ResetTimer>

		return UVBOX_TimerExpired;
 800037e:	2302      	movs	r3, #2
}
 8000380:	0018      	movs	r0, r3
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	200001d4 	.word	0x200001d4
 800038c:	20000098 	.word	0x20000098
 8000390:	20000254 	.word	0x20000254

08000394 <_UpdateUvPwm>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void _UpdateUvPwm(UVBOX_EncoderDirTypeDef new_encoder_dir)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	0002      	movs	r2, r0
 800039c:	1dfb      	adds	r3, r7, #7
 800039e:	701a      	strb	r2, [r3, #0]
  	// encoder direction has changed from increasing to decreasing
	if( (RE_getPrevEncoderDir()) && (!new_encoder_dir) )
 80003a0:	f000 f916 	bl	80005d0 <RE_getPrevEncoderDir>
 80003a4:	1e03      	subs	r3, r0, #0
 80003a6:	d04e      	beq.n	8000446 <_UpdateUvPwm+0xb2>
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d14a      	bne.n	8000446 <_UpdateUvPwm+0xb2>
	{
		UV_PWM_TIMER.Instance->CCR1 -= ENCODER_STEP;
 80003b0:	4b50      	ldr	r3, [pc, #320]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003b6:	4b4f      	ldr	r3, [pc, #316]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	3a80      	subs	r2, #128	; 0x80
 80003bc:	635a      	str	r2, [r3, #52]	; 0x34
		UV_PWM_TIMER.Instance->CCR2 -= ENCODER_STEP;
 80003be:	4b4d      	ldr	r3, [pc, #308]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80003c4:	4b4b      	ldr	r3, [pc, #300]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	3a80      	subs	r2, #128	; 0x80
 80003ca:	639a      	str	r2, [r3, #56]	; 0x38
		UV_PWM_TIMER.Instance->CCR3 -= ENCODER_STEP;
 80003cc:	4b49      	ldr	r3, [pc, #292]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003d2:	4b48      	ldr	r3, [pc, #288]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	3a80      	subs	r2, #128	; 0x80
 80003d8:	63da      	str	r2, [r3, #60]	; 0x3c
		UV_PWM_TIMER.Instance->CCR4 -= ENCODER_STEP;
 80003da:	4b46      	ldr	r3, [pc, #280]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003e0:	4b44      	ldr	r3, [pc, #272]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3a80      	subs	r2, #128	; 0x80
 80003e6:	641a      	str	r2, [r3, #64]	; 0x40

		// clamp lower range integer overflow to
		// MAX_UVLED_PWM_PERIOD+1
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD+1) ||
 80003e8:	4b42      	ldr	r3, [pc, #264]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ee:	2ba1      	cmp	r3, #161	; 0xa1
 80003f0:	d80e      	bhi.n	8000410 <_UpdateUvPwm+0x7c>
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD+1)	||
 80003f2:	4b40      	ldr	r3, [pc, #256]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD+1) ||
 80003f8:	2ba1      	cmp	r3, #161	; 0xa1
 80003fa:	d809      	bhi.n	8000410 <_UpdateUvPwm+0x7c>
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD+1) ||
 80003fc:	4b3d      	ldr	r3, [pc, #244]	; (80004f4 <_UpdateUvPwm+0x160>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD+1)	||
 8000402:	2ba1      	cmp	r3, #161	; 0xa1
 8000404:	d804      	bhi.n	8000410 <_UpdateUvPwm+0x7c>
			(UV_PWM_TIMER.Instance->CCR4 > MAX_UVLED_PWM_PERIOD+1)
 8000406:	4b3b      	ldr	r3, [pc, #236]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD+1) ||
 800040c:	2ba1      	cmp	r3, #161	; 0xa1
 800040e:	d90f      	bls.n	8000430 <_UpdateUvPwm+0x9c>
			)
		{
			UV_PWM_TIMER.Instance->CCR1 = 0;
 8000410:	4b38      	ldr	r3, [pc, #224]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2200      	movs	r2, #0
 8000416:	635a      	str	r2, [r3, #52]	; 0x34
			UV_PWM_TIMER.Instance->CCR2 = 0;
 8000418:	4b36      	ldr	r3, [pc, #216]	; (80004f4 <_UpdateUvPwm+0x160>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2200      	movs	r2, #0
 800041e:	639a      	str	r2, [r3, #56]	; 0x38
			UV_PWM_TIMER.Instance->CCR3 = 0;
 8000420:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2200      	movs	r2, #0
 8000426:	63da      	str	r2, [r3, #60]	; 0x3c
			UV_PWM_TIMER.Instance->CCR4 = 0;
 8000428:	4b32      	ldr	r3, [pc, #200]	; (80004f4 <_UpdateUvPwm+0x160>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2200      	movs	r2, #0
 800042e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
 8000430:	4b31      	ldr	r3, [pc, #196]	; (80004f8 <_UpdateUvPwm+0x164>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2210      	movs	r2, #16
 800043a:	4013      	ands	r3, r2
 800043c:	b2db      	uxtb	r3, r3
 800043e:	0018      	movs	r0, r3
 8000440:	f000 f8d0 	bl	80005e4 <RE_setPrevEncoderDir>
			UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
		}

		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
	}
}
 8000444:	e051      	b.n	80004ea <_UpdateUvPwm+0x156>
	else if( (!RE_getPrevEncoderDir()) && (new_encoder_dir) )
 8000446:	f000 f8c3 	bl	80005d0 <RE_getPrevEncoderDir>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d14d      	bne.n	80004ea <_UpdateUvPwm+0x156>
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d049      	beq.n	80004ea <_UpdateUvPwm+0x156>
		UV_PWM_TIMER.Instance->CCR1 += ENCODER_STEP;
 8000456:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800045c:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <_UpdateUvPwm+0x160>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	3280      	adds	r2, #128	; 0x80
 8000462:	635a      	str	r2, [r3, #52]	; 0x34
		UV_PWM_TIMER.Instance->CCR2 += ENCODER_STEP;
 8000464:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800046a:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <_UpdateUvPwm+0x160>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	3280      	adds	r2, #128	; 0x80
 8000470:	639a      	str	r2, [r3, #56]	; 0x38
		UV_PWM_TIMER.Instance->CCR3 += ENCODER_STEP;
 8000472:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <_UpdateUvPwm+0x160>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	3280      	adds	r2, #128	; 0x80
 800047e:	63da      	str	r2, [r3, #60]	; 0x3c
		UV_PWM_TIMER.Instance->CCR4 += ENCODER_STEP;
 8000480:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000486:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	3280      	adds	r2, #128	; 0x80
 800048c:	641a      	str	r2, [r3, #64]	; 0x40
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD) ||
 800048e:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <_UpdateUvPwm+0x160>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000494:	2ba0      	cmp	r3, #160	; 0xa0
 8000496:	d80e      	bhi.n	80004b6 <_UpdateUvPwm+0x122>
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD)	||
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <_UpdateUvPwm+0x160>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD) ||
 800049e:	2ba0      	cmp	r3, #160	; 0xa0
 80004a0:	d809      	bhi.n	80004b6 <_UpdateUvPwm+0x122>
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD) ||
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <_UpdateUvPwm+0x160>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD)	||
 80004a8:	2ba0      	cmp	r3, #160	; 0xa0
 80004aa:	d804      	bhi.n	80004b6 <_UpdateUvPwm+0x122>
			(UV_PWM_TIMER.Instance->CCR4 > MAX_UVLED_PWM_PERIOD)
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <_UpdateUvPwm+0x160>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD) ||
 80004b2:	2ba0      	cmp	r3, #160	; 0xa0
 80004b4:	d90f      	bls.n	80004d6 <_UpdateUvPwm+0x142>
			UV_PWM_TIMER.Instance->CCR1 = MAX_UVLED_PWM_PERIOD;
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <_UpdateUvPwm+0x160>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	22a0      	movs	r2, #160	; 0xa0
 80004bc:	635a      	str	r2, [r3, #52]	; 0x34
			UV_PWM_TIMER.Instance->CCR2 = MAX_UVLED_PWM_PERIOD;
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <_UpdateUvPwm+0x160>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	22a0      	movs	r2, #160	; 0xa0
 80004c4:	639a      	str	r2, [r3, #56]	; 0x38
			UV_PWM_TIMER.Instance->CCR3 = MAX_UVLED_PWM_PERIOD;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <_UpdateUvPwm+0x160>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	22a0      	movs	r2, #160	; 0xa0
 80004cc:	63da      	str	r2, [r3, #60]	; 0x3c
			UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <_UpdateUvPwm+0x160>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	22a0      	movs	r2, #160	; 0xa0
 80004d4:	641a      	str	r2, [r3, #64]	; 0x40
		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <_UpdateUvPwm+0x164>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	2210      	movs	r2, #16
 80004e0:	4013      	ands	r3, r2
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 f87d 	bl	80005e4 <RE_setPrevEncoderDir>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	200001d4 	.word	0x200001d4
 80004f8:	20000214 	.word	0x20000214

080004fc <_UpdateLedPwm>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void _UpdateLedPwm(UVBOX_EncoderDirTypeDef new_encoder_dir)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	0002      	movs	r2, r0
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	701a      	strb	r2, [r3, #0]

	uint8_t encoder_dir = ((ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR);
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <_UpdateLedPwm+0x54>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2210      	movs	r2, #16
 8000510:	4013      	ands	r3, r2
 8000512:	3b10      	subs	r3, #16
 8000514:	425a      	negs	r2, r3
 8000516:	4153      	adcs	r3, r2
 8000518:	b2da      	uxtb	r2, r3
 800051a:	210f      	movs	r1, #15
 800051c:	187b      	adds	r3, r7, r1
 800051e:	701a      	strb	r2, [r3, #0]
	if(encoder_dir)
 8000520:	187b      	adds	r3, r7, r1
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d007      	beq.n	8000538 <_UpdateLedPwm+0x3c>
	{
		LED_PWM_TIMER.Instance->CCR1 -= ENCODER_STEP;
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <_UpdateLedPwm+0x58>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <_UpdateLedPwm+0x58>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3a80      	subs	r2, #128	; 0x80
 8000534:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		LED_PWM_TIMER.Instance->CCR1 += ENCODER_STEP;
	}
}
 8000536:	e006      	b.n	8000546 <_UpdateLedPwm+0x4a>
		LED_PWM_TIMER.Instance->CCR1 += ENCODER_STEP;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <_UpdateLedPwm+0x58>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <_UpdateLedPwm+0x58>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3280      	adds	r2, #128	; 0x80
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b004      	add	sp, #16
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	20000214 	.word	0x20000214
 8000554:	20000254 	.word	0x20000254

08000558 <LM_UpdatePwm>:
 *	@param 		None
 *	@retval 	None
 *
 */
void LM_UpdatePwm()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	if(EM_getSystemState())
 800055c:	f7ff fe60 	bl	8000220 <EM_getSystemState>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d00a      	beq.n	800057a <LM_UpdatePwm+0x22>
	{
	  	_UpdateUvPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <LM_UpdatePwm+0x3c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2210      	movs	r2, #16
 800056e:	4013      	ands	r3, r2
 8000570:	b2db      	uxtb	r3, r3
 8000572:	0018      	movs	r0, r3
 8000574:	f7ff ff0e 	bl	8000394 <_UpdateUvPwm>
	}
	else
	{
		_UpdateLedPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
	}
}
 8000578:	e009      	b.n	800058e <LM_UpdatePwm+0x36>
		_UpdateLedPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <LM_UpdatePwm+0x3c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2210      	movs	r2, #16
 8000584:	4013      	ands	r3, r2
 8000586:	b2db      	uxtb	r3, r3
 8000588:	0018      	movs	r0, r3
 800058a:	f7ff ffb7 	bl	80004fc <_UpdateLedPwm>
}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000214 	.word	0x20000214

08000598 <LM_SetStatusLed>:
											UVBOX_StatusLedBlue
 *	@retval 	None
 *
 */
void LM_SetStatusLed(UVBOX_StatusLedTypeDef new_status)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	0002      	movs	r2, r0
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, STATUS_RED_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, STATUS_BLUE_Pin, GPIO_PIN_RESET);
		break;
	}
*/
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b002      	add	sp, #8
 80005aa:	bd80      	pop	{r7, pc}

080005ac <RE_Setup>:
 *	@param 	None
 *	@retval None
 *
 */
void RE_Setup()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&ROTARY_ENCODER, TIM_CHANNEL_ALL);
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <RE_Setup+0x1c>)
 80005b2:	213c      	movs	r1, #60	; 0x3c
 80005b4:	0018      	movs	r0, r3
 80005b6:	f002 fa93 	bl	8002ae0 <HAL_TIM_Encoder_Start_IT>
	ROTARY_ENCODER.Instance->CNT = 32767;
 80005ba:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <RE_Setup+0x1c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a03      	ldr	r2, [pc, #12]	; (80005cc <RE_Setup+0x20>)
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000214 	.word	0x20000214
 80005cc:	00007fff 	.word	0x00007fff

080005d0 <RE_getPrevEncoderDir>:
 *	@retval 	UVBOX_EncoderDirTypeDef - 	UVBOX_ENCODER_DOWN = 0x0,
											UVBOX_ENCODER_UP
 *
 */
UVBOX_EncoderDirTypeDef RE_getPrevEncoderDir()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	return previous_encoder_dir;
 80005d4:	4b02      	ldr	r3, [pc, #8]	; (80005e0 <RE_getPrevEncoderDir+0x10>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
}
 80005d8:	0018      	movs	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	200000ac 	.word	0x200000ac

080005e4 <RE_setPrevEncoderDir>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void RE_setPrevEncoderDir(UVBOX_EncoderDirTypeDef direction)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	0002      	movs	r2, r0
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	701a      	strb	r2, [r3, #0]
	previous_encoder_dir = direction;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <RE_setPrevEncoderDir+0x1c>)
 80005f2:	1dfa      	adds	r2, r7, #7
 80005f4:	7812      	ldrb	r2, [r2, #0]
 80005f6:	701a      	strb	r2, [r3, #0]
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000ac 	.word	0x200000ac

08000604 <TM_ResetTimer>:
#define DEFAULT_TIMEOUT 10
uint16_t user_defined_timeout = DEFAULT_TIMEOUT;		// seconds
uint16_t timer_count = DEFAULT_TIMEOUT;

void TM_ResetTimer()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	timer_count = DEFAULT_TIMEOUT;
 8000608:	4b02      	ldr	r3, [pc, #8]	; (8000614 <TM_ResetTimer+0x10>)
 800060a:	220a      	movs	r2, #10
 800060c:	801a      	strh	r2, [r3, #0]
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000004 	.word	0x20000004

08000618 <TM_UserIncrementTimer>:

void TM_UserIncrementTimer()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	user_defined_timeout += 10;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <TM_UserIncrementTimer+0x24>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	330a      	adds	r3, #10
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <TM_UserIncrementTimer+0x24>)
 8000626:	801a      	strh	r2, [r3, #0]
	timer_count += 10;
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <TM_UserIncrementTimer+0x28>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	330a      	adds	r3, #10
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <TM_UserIncrementTimer+0x28>)
 8000632:	801a      	strh	r2, [r3, #0]
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	20000002 	.word	0x20000002
 8000640:	20000004 	.word	0x20000004

08000644 <TM_UserDecrementTimer>:

void TM_UserDecrementTimer()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	user_defined_timeout -= 10;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <TM_UserDecrementTimer+0x24>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	3b0a      	subs	r3, #10
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <TM_UserDecrementTimer+0x24>)
 8000652:	801a      	strh	r2, [r3, #0]
	timer_count -= 10;
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <TM_UserDecrementTimer+0x28>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	3b0a      	subs	r3, #10
 800065a:	b29a      	uxth	r2, r3
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <TM_UserDecrementTimer+0x28>)
 800065e:	801a      	strh	r2, [r3, #0]
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	20000002 	.word	0x20000002
 800066c:	20000004 	.word	0x20000004

08000670 <TM_DecrementTimer>:


void TM_DecrementTimer()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	timer_count--;
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <TM_DecrementTimer+0x1c>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	3b01      	subs	r3, #1
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <TM_DecrementTimer+0x1c>)
 800067e:	801a      	strh	r2, [r3, #0]

	TM_CheckTimer();
 8000680:	f000 f810 	bl	80006a4 <TM_CheckTimer>
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	20000004 	.word	0x20000004

08000690 <TM_GetTimerCount>:

uint16_t TM_GetTimerCount()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	return timer_count;
 8000694:	4b02      	ldr	r3, [pc, #8]	; (80006a0 <TM_GetTimerCount+0x10>)
 8000696:	881b      	ldrh	r3, [r3, #0]
}
 8000698:	0018      	movs	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	20000004 	.word	0x20000004

080006a4 <TM_CheckTimer>:

void TM_CheckTimer()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	if(timer_count == 0)
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <TM_CheckTimer+0x18>)
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d102      	bne.n	80006b6 <TM_CheckTimer+0x12>
	{
		EM_ProcessEvent(UVBOX_evStopTimer);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff fdbf 	bl	8000234 <EM_ProcessEvent>





}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000004 	.word	0x20000004

080006c0 <TM_StartTimer>:

void TM_StartTimer()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	EXPOSE_TIMER.Instance->SR &= ~(TIM_SR_UIF);	// reset
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <TM_StartTimer+0x28>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	691a      	ldr	r2, [r3, #16]
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <TM_StartTimer+0x28>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2101      	movs	r1, #1
 80006d0:	438a      	bics	r2, r1
 80006d2:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&EXPOSE_TIMER);
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <TM_StartTimer+0x28>)
 80006d6:	0018      	movs	r0, r3
 80006d8:	f002 f8aa 	bl	8002830 <HAL_TIM_Base_Start_IT>
	UM_DisplayRunningMsg();
 80006dc:	f000 f814 	bl	8000708 <UM_DisplayRunningMsg>
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	20000194 	.word	0x20000194

080006ec <TM_StopTimer>:

void TM_StopTimer()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&EXPOSE_TIMER);
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <TM_StopTimer+0x18>)
 80006f2:	0018      	movs	r0, r3
 80006f4:	f002 f8be 	bl	8002874 <HAL_TIM_Base_Stop_IT>
	UM_DisplayExpiredMsg();
 80006f8:	f000 f82c 	bl	8000754 <UM_DisplayExpiredMsg>
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000194 	.word	0x20000194

08000708 <UM_DisplayRunningMsg>:
//UVBOX_LidStatusTypedef eLidStatus = UVBOX_LIDOPEN;
uint16_t debounce_last_interrupt_time = 0;


void UM_DisplayRunningMsg()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 800070e:	2000      	movs	r0, #0
 8000710:	f003 fb22 	bl	8003d58 <ILI9341_Fill_Screen>
	ILI9341_Draw_Text("RUNNING", 10, 120, GREY, 7, BGCOLOUR);
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <UM_DisplayRunningMsg+0x3c>)
 8000716:	480c      	ldr	r0, [pc, #48]	; (8000748 <UM_DisplayRunningMsg+0x40>)
 8000718:	2300      	movs	r3, #0
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	2307      	movs	r3, #7
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	0013      	movs	r3, r2
 8000722:	2278      	movs	r2, #120	; 0x78
 8000724:	210a      	movs	r1, #10
 8000726:	f003 f89d 	bl	8003864 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("UV", 250, 200, BLACK, 5, DANGERBGCOLOUR);
 800072a:	4808      	ldr	r0, [pc, #32]	; (800074c <UM_DisplayRunningMsg+0x44>)
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <UM_DisplayRunningMsg+0x48>)
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	2305      	movs	r3, #5
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2300      	movs	r3, #0
 8000736:	22c8      	movs	r2, #200	; 0xc8
 8000738:	21fa      	movs	r1, #250	; 0xfa
 800073a:	f003 f893 	bl	8003864 <ILI9341_Draw_Text>
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	0000b5d0 	.word	0x0000b5d0
 8000748:	08005010 	.word	0x08005010
 800074c:	08005018 	.word	0x08005018
 8000750:	0000d8c3 	.word	0x0000d8c3

08000754 <UM_DisplayExpiredMsg>:

void UM_DisplayExpiredMsg()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 800075a:	2000      	movs	r0, #0
 800075c:	f003 fafc 	bl	8003d58 <ILI9341_Fill_Screen>
	ILI9341_Draw_Text("STOPPED", 10, 120, GREY, 7, BGCOLOUR);
 8000760:	4a16      	ldr	r2, [pc, #88]	; (80007bc <UM_DisplayExpiredMsg+0x68>)
 8000762:	4817      	ldr	r0, [pc, #92]	; (80007c0 <UM_DisplayExpiredMsg+0x6c>)
 8000764:	2300      	movs	r3, #0
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	2307      	movs	r3, #7
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	0013      	movs	r3, r2
 800076e:	2278      	movs	r2, #120	; 0x78
 8000770:	210a      	movs	r1, #10
 8000772:	f003 f877 	bl	8003864 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LED", 150, 200, BLACK, 5, SAFEBGCOLOUR);
 8000776:	4813      	ldr	r0, [pc, #76]	; (80007c4 <UM_DisplayExpiredMsg+0x70>)
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <UM_DisplayExpiredMsg+0x74>)
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	2305      	movs	r3, #5
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2300      	movs	r3, #0
 8000782:	22c8      	movs	r2, #200	; 0xc8
 8000784:	2196      	movs	r1, #150	; 0x96
 8000786:	f003 f86d 	bl	8003864 <ILI9341_Draw_Text>
	BUZZER_PWM.Instance->CCR1 = 127;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <UM_DisplayExpiredMsg+0x78>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	227f      	movs	r2, #127	; 0x7f
 8000790:	635a      	str	r2, [r3, #52]	; 0x34
	BUZZER_PWM.Instance->PSC = 32768;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <UM_DisplayExpiredMsg+0x78>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	0212      	lsls	r2, r2, #8
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(3000);
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <UM_DisplayExpiredMsg+0x7c>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 f840 	bl	8001824 <HAL_Delay>
	BUZZER_PWM.Instance->CCR1 = 0;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <UM_DisplayExpiredMsg+0x78>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2200      	movs	r2, #0
 80007aa:	635a      	str	r2, [r3, #52]	; 0x34
	BUZZER_PWM.Instance->PSC = 0;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <UM_DisplayExpiredMsg+0x78>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2200      	movs	r2, #0
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	0000b5d0 	.word	0x0000b5d0
 80007c0:	0800501c 	.word	0x0800501c
 80007c4:	08005024 	.word	0x08005024
 80007c8:	000014a2 	.word	0x000014a2
 80007cc:	20000154 	.word	0x20000154
 80007d0:	00000bb8 	.word	0x00000bb8

080007d4 <UM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void UM_UpdateDisplay()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af02      	add	r7, sp, #8
	UM_DisplayAsMinutesAndSeconds(TM_GetTimerCount());
 80007da:	f7ff ff59 	bl	8000690 <TM_GetTimerCount>
 80007de:	0003      	movs	r3, r0
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 f81d 	bl	8000820 <UM_DisplayAsMinutesAndSeconds>

	char enc_cnt[20];
	snprintf(enc_cnt, sizeof(enc_cnt), "%lu", LED_PWM_TIMER.Instance->CCR1);
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <UM_UpdateDisplay+0x40>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ec:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <UM_UpdateDisplay+0x44>)
 80007ee:	1d38      	adds	r0, r7, #4
 80007f0:	2114      	movs	r1, #20
 80007f2:	f003 ffe7 	bl	80047c4 <sniprintf>
	ILI9341_Draw_Text(enc_cnt, 10, 200, WHITE, 2, BLACK);
 80007f6:	4a09      	ldr	r2, [pc, #36]	; (800081c <UM_UpdateDisplay+0x48>)
 80007f8:	1d38      	adds	r0, r7, #4
 80007fa:	2300      	movs	r3, #0
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	2302      	movs	r3, #2
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	0013      	movs	r3, r2
 8000804:	22c8      	movs	r2, #200	; 0xc8
 8000806:	210a      	movs	r1, #10
 8000808:	f003 f82c 	bl	8003864 <ILI9341_Draw_Text>


}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b006      	add	sp, #24
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000254 	.word	0x20000254
 8000818:	08005028 	.word	0x08005028
 800081c:	0000ffff 	.word	0x0000ffff

08000820 <UM_DisplayAsMinutesAndSeconds>:
 *	@param pSeconds
 *	@retval None
 *
 */
void UM_DisplayAsMinutesAndSeconds(uint16_t pSeconds)
{
 8000820:	b5b0      	push	{r4, r5, r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af02      	add	r7, sp, #8
 8000826:	0002      	movs	r2, r0
 8000828:	1dbb      	adds	r3, r7, #6
 800082a:	801a      	strh	r2, [r3, #0]
	uint8_t minutes = 0;
 800082c:	2427      	movs	r4, #39	; 0x27
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
	uint8_t seconds = 0;
 8000834:	2526      	movs	r5, #38	; 0x26
 8000836:	197b      	adds	r3, r7, r5
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]

	minutes = pSeconds / 60;
 800083c:	1dbb      	adds	r3, r7, #6
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	213c      	movs	r1, #60	; 0x3c
 8000842:	0018      	movs	r0, r3
 8000844:	f7ff fc60 	bl	8000108 <__udivsi3>
 8000848:	0003      	movs	r3, r0
 800084a:	b29a      	uxth	r2, r3
 800084c:	193b      	adds	r3, r7, r4
 800084e:	701a      	strb	r2, [r3, #0]
	seconds = pSeconds % 60;
 8000850:	1dbb      	adds	r3, r7, #6
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	213c      	movs	r1, #60	; 0x3c
 8000856:	0018      	movs	r0, r3
 8000858:	f7ff fcdc 	bl	8000214 <__aeabi_uidivmod>
 800085c:	000b      	movs	r3, r1
 800085e:	b29a      	uxth	r2, r3
 8000860:	197b      	adds	r3, r7, r5
 8000862:	701a      	strb	r2, [r3, #0]

	char timer_count[30];
	snprintf(timer_count, sizeof(timer_count), "%02d:%02d", minutes, seconds);
 8000864:	193b      	adds	r3, r7, r4
 8000866:	7819      	ldrb	r1, [r3, #0]
 8000868:	197b      	adds	r3, r7, r5
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4a0b      	ldr	r2, [pc, #44]	; (800089c <UM_DisplayAsMinutesAndSeconds+0x7c>)
 800086e:	2408      	movs	r4, #8
 8000870:	1938      	adds	r0, r7, r4
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	000b      	movs	r3, r1
 8000876:	211e      	movs	r1, #30
 8000878:	f003 ffa4 	bl	80047c4 <sniprintf>
	ILI9341_Draw_Text(timer_count, 30, 50, TIMETEXT, 9, BGCOLOUR);
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <UM_DisplayAsMinutesAndSeconds+0x80>)
 800087e:	1938      	adds	r0, r7, r4
 8000880:	2300      	movs	r3, #0
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	2309      	movs	r3, #9
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	0013      	movs	r3, r2
 800088a:	2232      	movs	r2, #50	; 0x32
 800088c:	211e      	movs	r1, #30
 800088e:	f002 ffe9 	bl	8003864 <ILI9341_Draw_Text>
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b00a      	add	sp, #40	; 0x28
 8000898:	bdb0      	pop	{r4, r5, r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	0800502c 	.word	0x0800502c
 80008a0:	000002fd 	.word	0x000002fd

080008a4 <UM_Setup>:
 *	@param None
 *	@retval None
 *
 */
void UM_Setup()
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af02      	add	r7, sp, #8
	  // enable TFT ILI9341 driver
	  ILI9341_Init();
 80008aa:	f003 f84c 	bl	8003946 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f003 fcee 	bl	8004290 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(BLACK);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f003 fa4f 	bl	8003d58 <ILI9341_Fill_Screen>
	  ILI9341_Draw_Text("INITIALISING...", 10, 10, SYSTEXT, 1, BGCOLOUR);
 80008ba:	4a3a      	ldr	r2, [pc, #232]	; (80009a4 <UM_Setup+0x100>)
 80008bc:	483a      	ldr	r0, [pc, #232]	; (80009a8 <UM_Setup+0x104>)
 80008be:	2300      	movs	r3, #0
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	2301      	movs	r3, #1
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	0013      	movs	r3, r2
 80008c8:	220a      	movs	r2, #10
 80008ca:	210a      	movs	r1, #10
 80008cc:	f002 ffca 	bl	8003864 <ILI9341_Draw_Text>

	  // PWM OUTPUTS

	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_1 );
 80008d0:	4b36      	ldr	r3, [pc, #216]	; (80009ac <UM_Setup+0x108>)
 80008d2:	2100      	movs	r1, #0
 80008d4:	0018      	movs	r0, r3
 80008d6:	f002 f823 	bl	8002920 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_2 );
 80008da:	4b34      	ldr	r3, [pc, #208]	; (80009ac <UM_Setup+0x108>)
 80008dc:	2104      	movs	r1, #4
 80008de:	0018      	movs	r0, r3
 80008e0:	f002 f81e 	bl	8002920 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_3 );
 80008e4:	4b31      	ldr	r3, [pc, #196]	; (80009ac <UM_Setup+0x108>)
 80008e6:	2108      	movs	r1, #8
 80008e8:	0018      	movs	r0, r3
 80008ea:	f002 f819 	bl	8002920 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_4 );
 80008ee:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <UM_Setup+0x108>)
 80008f0:	210c      	movs	r1, #12
 80008f2:	0018      	movs	r0, r3
 80008f4:	f002 f814 	bl	8002920 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &LED_PWM_TIMER, TIM_CHANNEL_1 );
 80008f8:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <UM_Setup+0x10c>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	0018      	movs	r0, r3
 80008fe:	f002 f80f 	bl	8002920 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &BUZZER_PWM, TIM_CHANNEL_1);
 8000902:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <UM_Setup+0x110>)
 8000904:	2100      	movs	r1, #0
 8000906:	0018      	movs	r0, r3
 8000908:	f002 f80a 	bl	8002920 <HAL_TIM_PWM_Start>

	  UV_PWM_TIMER.Instance->ARR	= 0xFF;		// 	255
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <UM_Setup+0x108>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	22ff      	movs	r2, #255	; 0xff
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
	  UV_PWM_TIMER.Instance->CCR1 	= 0x00;
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <UM_Setup+0x108>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2200      	movs	r2, #0
 800091a:	635a      	str	r2, [r3, #52]	; 0x34
	  UV_PWM_TIMER.Instance->CCR2 	= 0x00;
 800091c:	4b23      	ldr	r3, [pc, #140]	; (80009ac <UM_Setup+0x108>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2200      	movs	r2, #0
 8000922:	639a      	str	r2, [r3, #56]	; 0x38
	  UV_PWM_TIMER.Instance->CCR3 	= 0x00;
 8000924:	4b21      	ldr	r3, [pc, #132]	; (80009ac <UM_Setup+0x108>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2200      	movs	r2, #0
 800092a:	63da      	str	r2, [r3, #60]	; 0x3c
	  UV_PWM_TIMER.Instance->CCR4 	= 0x00;
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <UM_Setup+0x108>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	641a      	str	r2, [r3, #64]	; 0x40

	  LED_PWM_TIMER.Instance->ARR  	= 0xFFFF;	// Set to full scale resolution
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <UM_Setup+0x10c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a1a      	ldr	r2, [pc, #104]	; (80009a4 <UM_Setup+0x100>)
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
	  LED_PWM_TIMER.Instance->CCR1 	= 0x80FF;	// Set PWM to ~50%
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <UM_Setup+0x10c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <UM_Setup+0x114>)
 8000942:	635a      	str	r2, [r3, #52]	; 0x34

	  BUZZER_PWM.Instance->ARR = 0xFF;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <UM_Setup+0x110>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	22ff      	movs	r2, #255	; 0xff
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
	  BUZZER_PWM.Instance->CCR1 = 0;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <UM_Setup+0x110>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2200      	movs	r2, #0
 8000952:	635a      	str	r2, [r3, #52]	; 0x34
	  BUZZER_PWM.Instance->PSC = 0;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <UM_Setup+0x110>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2200      	movs	r2, #0
 800095a:	629a      	str	r2, [r3, #40]	; 0x28

	  // debounce timer
	  HAL_TIM_Base_Start( &DEBOUNCE_TIMER );
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <UM_Setup+0x118>)
 800095e:	0018      	movs	r0, r3
 8000960:	f001 ff44 	bl	80027ec <HAL_TIM_Base_Start>

	  // status output LED
	  LM_SetStatusLed(UVBOX_StatusLedBlue);
 8000964:	2002      	movs	r0, #2
 8000966:	f7ff fe17 	bl	8000598 <LM_SetStatusLed>

	  // rotary encoder
	  RE_Setup();
 800096a:	f7ff fe1f 	bl	80005ac <RE_Setup>


	  HAL_Delay(100);
 800096e:	2064      	movs	r0, #100	; 0x64
 8000970:	f000 ff58 	bl	8001824 <HAL_Delay>
	  ILI9341_Draw_Text("READY!", 100, 10, SYSTEXT, 1, BGCOLOUR);
 8000974:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <UM_Setup+0x100>)
 8000976:	4812      	ldr	r0, [pc, #72]	; (80009c0 <UM_Setup+0x11c>)
 8000978:	2300      	movs	r3, #0
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	2301      	movs	r3, #1
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	0013      	movs	r3, r2
 8000982:	220a      	movs	r2, #10
 8000984:	2164      	movs	r1, #100	; 0x64
 8000986:	f002 ff6d 	bl	8003864 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("LED", 150, 200, BLACK, 5, SAFEBGCOLOUR);
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <UM_Setup+0x120>)
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <UM_Setup+0x124>)
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	2305      	movs	r3, #5
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2300      	movs	r3, #0
 8000996:	22c8      	movs	r2, #200	; 0xc8
 8000998:	2196      	movs	r1, #150	; 0x96
 800099a:	f002 ff63 	bl	8003864 <ILI9341_Draw_Text>


}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	0000ffff 	.word	0x0000ffff
 80009a8:	08005038 	.word	0x08005038
 80009ac:	200001d4 	.word	0x200001d4
 80009b0:	20000254 	.word	0x20000254
 80009b4:	20000154 	.word	0x20000154
 80009b8:	000080ff 	.word	0x000080ff
 80009bc:	20000114 	.word	0x20000114
 80009c0:	08005048 	.word	0x08005048
 80009c4:	08005024 	.word	0x08005024
 80009c8:	000014a2 	.word	0x000014a2

080009cc <UM_EXTI0_1_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void UM_EXTI0_1_IRQHandler()
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
	uint16_t debounce_interrupt_time = DEBOUNCE_TIMER.Instance->CNT;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <UM_EXTI0_1_IRQHandler+0x5c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009d8:	1dbb      	adds	r3, r7, #6
 80009da:	801a      	strh	r2, [r3, #0]
	if ((debounce_interrupt_time - UM_getLastDebounceTime()) > MAX_DEBOUNCE_DELAY)
 80009dc:	1dbb      	adds	r3, r7, #6
 80009de:	881c      	ldrh	r4, [r3, #0]
 80009e0:	f000 f836 	bl	8000a50 <UM_getLastDebounceTime>
 80009e4:	0003      	movs	r3, r0
 80009e6:	1ae3      	subs	r3, r4, r3
 80009e8:	2baf      	cmp	r3, #175	; 0xaf
 80009ea:	dd14      	ble.n	8000a16 <UM_EXTI0_1_IRQHandler+0x4a>
	{
		if(EM_getSystemState())	// LID CLOSED
 80009ec:	f7ff fc18 	bl	8000220 <EM_getSystemState>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d110      	bne.n	8000a16 <UM_EXTI0_1_IRQHandler+0x4a>
			//EM_ProcessEvent(UVBOX_evLidOpened);
		}
		else
		{

			if( (EXTI->PR & EXTI_PR_PR0) == EXTI_PR_PR0)
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <UM_EXTI0_1_IRQHandler+0x60>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	2201      	movs	r2, #1
 80009fa:	4013      	ands	r3, r2
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d102      	bne.n	8000a06 <UM_EXTI0_1_IRQHandler+0x3a>
			{
				TM_UserDecrementTimer();
 8000a00:	f7ff fe20 	bl	8000644 <TM_UserDecrementTimer>
 8000a04:	e007      	b.n	8000a16 <UM_EXTI0_1_IRQHandler+0x4a>
			}
			else if( (EXTI->PR & EXTI_PR_PR1) == EXTI_PR_PR1)
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <UM_EXTI0_1_IRQHandler+0x60>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d101      	bne.n	8000a16 <UM_EXTI0_1_IRQHandler+0x4a>
			{
				TM_UserIncrementTimer();
 8000a12:	f7ff fe01 	bl	8000618 <TM_UserIncrementTimer>
			}

		}
	}
	UM_SetLastDebounceTime(debounce_interrupt_time);
 8000a16:	1dbb      	adds	r3, r7, #6
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 f808 	bl	8000a30 <UM_SetLastDebounceTime>


}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b003      	add	sp, #12
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	20000114 	.word	0x20000114
 8000a2c:	40010400 	.word	0x40010400

08000a30 <UM_SetLastDebounceTime>:
 *	@param pDebounceTime
 *	@retval None
 *
 */
void UM_SetLastDebounceTime(uint16_t pDebounceTime)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	0002      	movs	r2, r0
 8000a38:	1dbb      	adds	r3, r7, #6
 8000a3a:	801a      	strh	r2, [r3, #0]
	debounce_last_interrupt_time = pDebounceTime;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <UM_SetLastDebounceTime+0x1c>)
 8000a3e:	1dba      	adds	r2, r7, #6
 8000a40:	8812      	ldrh	r2, [r2, #0]
 8000a42:	801a      	strh	r2, [r3, #0]
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b002      	add	sp, #8
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000009c 	.word	0x2000009c

08000a50 <UM_getLastDebounceTime>:
 *	@param None
 *	@retval debounce_last_interrupt_time
 *
 */
uint16_t UM_getLastDebounceTime()
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	return debounce_last_interrupt_time;
 8000a54:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <UM_getLastDebounceTime+0x10>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
}
 8000a58:	0018      	movs	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	2000009c 	.word	0x2000009c

08000a64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	240c      	movs	r4, #12
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	0018      	movs	r0, r3
 8000a70:	2314      	movs	r3, #20
 8000a72:	001a      	movs	r2, r3
 8000a74:	2100      	movs	r1, #0
 8000a76:	f003 fe9d 	bl	80047b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a7a:	4b4c      	ldr	r3, [pc, #304]	; (8000bac <MX_GPIO_Init+0x148>)
 8000a7c:	695a      	ldr	r2, [r3, #20]
 8000a7e:	4b4b      	ldr	r3, [pc, #300]	; (8000bac <MX_GPIO_Init+0x148>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	03c9      	lsls	r1, r1, #15
 8000a84:	430a      	orrs	r2, r1
 8000a86:	615a      	str	r2, [r3, #20]
 8000a88:	4b48      	ldr	r3, [pc, #288]	; (8000bac <MX_GPIO_Init+0x148>)
 8000a8a:	695a      	ldr	r2, [r3, #20]
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	03db      	lsls	r3, r3, #15
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b45      	ldr	r3, [pc, #276]	; (8000bac <MX_GPIO_Init+0x148>)
 8000a98:	695a      	ldr	r2, [r3, #20]
 8000a9a:	4b44      	ldr	r3, [pc, #272]	; (8000bac <MX_GPIO_Init+0x148>)
 8000a9c:	2180      	movs	r1, #128	; 0x80
 8000a9e:	0289      	lsls	r1, r1, #10
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	615a      	str	r2, [r3, #20]
 8000aa4:	4b41      	ldr	r3, [pc, #260]	; (8000bac <MX_GPIO_Init+0x148>)
 8000aa6:	695a      	ldr	r2, [r3, #20]
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	029b      	lsls	r3, r3, #10
 8000aac:	4013      	ands	r3, r2
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <MX_GPIO_Init+0x148>)
 8000ab4:	695a      	ldr	r2, [r3, #20]
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	; (8000bac <MX_GPIO_Init+0x148>)
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	02c9      	lsls	r1, r1, #11
 8000abc:	430a      	orrs	r2, r1
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	4b3a      	ldr	r3, [pc, #232]	; (8000bac <MX_GPIO_Init+0x148>)
 8000ac2:	695a      	ldr	r2, [r3, #20]
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	02db      	lsls	r3, r3, #11
 8000ac8:	4013      	ands	r3, r2
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|DC_Pin, GPIO_PIN_RESET);
 8000ace:	2390      	movs	r3, #144	; 0x90
 8000ad0:	05db      	lsls	r3, r3, #23
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2118      	movs	r1, #24
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f001 f931 	bl	8001d3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000adc:	4b34      	ldr	r3, [pc, #208]	; (8000bb0 <MX_GPIO_Init+0x14c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f001 f92b 	bl	8001d3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2201      	movs	r2, #1
 8000aec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	4a30      	ldr	r2, [pc, #192]	; (8000bb4 <MX_GPIO_Init+0x150>)
 8000af2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2202      	movs	r2, #2
 8000af8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <MX_GPIO_Init+0x154>)
 8000afe:	0019      	movs	r1, r3
 8000b00:	0010      	movs	r0, r2
 8000b02:	f000 ff8f 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	2202      	movs	r2, #2
 8000b0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	4a29      	ldr	r2, [pc, #164]	; (8000bb4 <MX_GPIO_Init+0x150>)
 8000b10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2202      	movs	r2, #2
 8000b16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	193a      	adds	r2, r7, r4
 8000b1a:	2390      	movs	r3, #144	; 0x90
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 ff7f 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LID_CLOSED_Pin;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2204      	movs	r2, #4
 8000b2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	2202      	movs	r2, #2
 8000b36:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LID_CLOSED_GPIO_Port, &GPIO_InitStruct);
 8000b38:	193a      	adds	r2, r7, r4
 8000b3a:	2390      	movs	r3, #144	; 0x90
 8000b3c:	05db      	lsls	r3, r3, #23
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f000 ff6f 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	2218      	movs	r2, #24
 8000b4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	2201      	movs	r2, #1
 8000b50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	193a      	adds	r2, r7, r4
 8000b60:	2390      	movs	r3, #144	; 0x90
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 ff5c 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000b6c:	0021      	movs	r1, r4
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2201      	movs	r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2201      	movs	r2, #1
 8000b78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <MX_GPIO_Init+0x14c>)
 8000b8a:	0019      	movs	r1, r3
 8000b8c:	0010      	movs	r0, r2
 8000b8e:	f000 ff49 	bl	8001a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2101      	movs	r1, #1
 8000b96:	2005      	movs	r0, #5
 8000b98:	f000 ff12 	bl	80019c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000b9c:	2005      	movs	r0, #5
 8000b9e:	f000 ff24 	bl	80019ea <HAL_NVIC_EnableIRQ>

}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b009      	add	sp, #36	; 0x24
 8000ba8:	bd90      	pop	{r4, r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	48000400 	.word	0x48000400
 8000bb4:	10110000 	.word	0x10110000
 8000bb8:	48001400 	.word	0x48001400

08000bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc0:	f000 fdcc 	bl	800175c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc4:	f000 f82c 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc8:	f7ff ff4c 	bl	8000a64 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000bcc:	f000 f99a 	bl	8000f04 <MX_TIM1_Init>
  MX_TIM17_Init();
 8000bd0:	f000 fbc2 	bl	8001358 <MX_TIM17_Init>
  MX_TIM14_Init();
 8000bd4:	f000 fb4c 	bl	8001270 <MX_TIM14_Init>
  MX_SPI1_Init();
 8000bd8:	f000 f872 	bl	8000cc0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000bdc:	f000 fa48 	bl	8001070 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000be0:	f000 faaa 	bl	8001138 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000be4:	f000 fb92 	bl	800130c <MX_TIM16_Init>
  MX_TIM6_Init();
 8000be8:	f000 fb06 	bl	80011f8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  UM_Setup();
 8000bec:	f7ff fe5a 	bl	80008a4 <UM_Setup>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 // LM_UpdatePwm();
	  UM_UpdateDisplay();
 8000bf0:	f7ff fdf0 	bl	80007d4 <UM_UpdateDisplay>
		// monitor the lid gpio - PA2 - if lid is held closed
		if(HAL_GPIO_ReadPin(LID_CLOSED_GPIO_Port, LID_CLOSED_Pin) == GPIO_PIN_SET)
 8000bf4:	2390      	movs	r3, #144	; 0x90
 8000bf6:	05db      	lsls	r3, r3, #23
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f001 f882 	bl	8001d04 <HAL_GPIO_ReadPin>
 8000c00:	0003      	movs	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d108      	bne.n	8000c18 <main+0x5c>
		{
			// if timer_expired_state == false
			if(EM_getSystemState() != UVBOX_TimerExpired)
 8000c06:	f7ff fb0b 	bl	8000220 <EM_getSystemState>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d0ef      	beq.n	8000bf0 <main+0x34>
				EM_ProcessEvent(UVBOX_evStartTimer);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff fb0f 	bl	8000234 <EM_ProcessEvent>
 8000c16:	e7eb      	b.n	8000bf0 <main+0x34>
		}
		else
		{
			// Timer is only reset if you lift the lid
			EM_ProcessEvent(UVBOX_evResetTimer);
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f7ff fb0b 	bl	8000234 <EM_ProcessEvent>
	  UM_UpdateDisplay();
 8000c1e:	e7e7      	b.n	8000bf0 <main+0x34>

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b091      	sub	sp, #68	; 0x44
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	2410      	movs	r4, #16
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2330      	movs	r3, #48	; 0x30
 8000c2e:	001a      	movs	r2, r3
 8000c30:	2100      	movs	r1, #0
 8000c32:	f003 fdbf 	bl	80047b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c36:	003b      	movs	r3, r7
 8000c38:	0018      	movs	r0, r3
 8000c3a:	2310      	movs	r3, #16
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f003 fdb8 	bl	80047b4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c44:	0021      	movs	r1, r4
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2202      	movs	r2, #2
 8000c4a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2201      	movs	r2, #1
 8000c50:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2210      	movs	r2, #16
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	22a0      	movs	r2, #160	; 0xa0
 8000c68:	0392      	lsls	r2, r2, #14
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2200      	movs	r2, #0
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 f8a5 	bl	8001dc4 <HAL_RCC_OscConfig>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c7e:	f000 f819 	bl	8000cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	003b      	movs	r3, r7
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c88:	003b      	movs	r3, r7
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8e:	003b      	movs	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c94:	003b      	movs	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c9a:	003b      	movs	r3, r7
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f001 fbac 	bl	80023fc <HAL_RCC_ClockConfig>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ca8:	f000 f804 	bl	8000cb4 <Error_Handler>
  }
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b011      	add	sp, #68	; 0x44
 8000cb2:	bd90      	pop	{r4, r7, pc}

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <MX_SPI1_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000ccc:	2282      	movs	r2, #130	; 0x82
 8000cce:	0052      	lsls	r2, r2, #1
 8000cd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cda:	22e0      	movs	r2, #224	; 0xe0
 8000cdc:	00d2      	lsls	r2, r2, #3
 8000cde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cee:	2280      	movs	r2, #128	; 0x80
 8000cf0:	0092      	lsls	r2, r2, #2
 8000cf2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d0e:	2207      	movs	r2, #7
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d20:	0018      	movs	r0, r3
 8000d22:	f001 fc9d 	bl	8002660 <HAL_SPI_Init>
 8000d26:	1e03      	subs	r3, r0, #0
 8000d28:	d001      	beq.n	8000d2e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f7ff ffc3 	bl	8000cb4 <Error_Handler>
  }

}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200000b0 	.word	0x200000b0
 8000d38:	40013000 	.word	0x40013000

08000d3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	2314      	movs	r3, #20
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2314      	movs	r3, #20
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f003 fd30 	bl	80047b4 <memset>
  if(spiHandle->Instance==SPI1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <HAL_SPI_MspInit+0x90>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d132      	bne.n	8000dc4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_SPI_MspInit+0x94>)
 8000d60:	699a      	ldr	r2, [r3, #24]
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_SPI_MspInit+0x94>)
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	0149      	lsls	r1, r1, #5
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	619a      	str	r2, [r3, #24]
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_SPI_MspInit+0x94>)
 8000d6e:	699a      	ldr	r2, [r3, #24]
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	015b      	lsls	r3, r3, #5
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_SPI_MspInit+0x94>)
 8000d7c:	695a      	ldr	r2, [r3, #20]
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_SPI_MspInit+0x94>)
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	0289      	lsls	r1, r1, #10
 8000d84:	430a      	orrs	r2, r1
 8000d86:	615a      	str	r2, [r3, #20]
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_SPI_MspInit+0x94>)
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	029b      	lsls	r3, r3, #10
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d96:	2114      	movs	r1, #20
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	22e0      	movs	r2, #224	; 0xe0
 8000d9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2202      	movs	r2, #2
 8000da2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2203      	movs	r2, #3
 8000dae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	187a      	adds	r2, r7, r1
 8000db8:	2390      	movs	r3, #144	; 0x90
 8000dba:	05db      	lsls	r3, r3, #23
 8000dbc:	0011      	movs	r1, r2
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 fe30 	bl	8001a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b00a      	add	sp, #40	; 0x28
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40013000 	.word	0x40013000
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_MspInit+0x44>)
 8000ddc:	699a      	ldr	r2, [r3, #24]
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_MspInit+0x44>)
 8000de0:	2101      	movs	r1, #1
 8000de2:	430a      	orrs	r2, r1
 8000de4:	619a      	str	r2, [r3, #24]
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_MspInit+0x44>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	2201      	movs	r2, #1
 8000dec:	4013      	ands	r3, r2
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_MspInit+0x44>)
 8000df4:	69da      	ldr	r2, [r3, #28]
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_MspInit+0x44>)
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	0549      	lsls	r1, r1, #21
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	61da      	str	r2, [r3, #28]
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <HAL_MspInit+0x44>)
 8000e02:	69da      	ldr	r2, [r3, #28]
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	055b      	lsls	r3, r3, #21
 8000e08:	4013      	ands	r3, r2
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b002      	add	sp, #8
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	40021000 	.word	0x40021000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <HardFault_Handler+0x4>

08000e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e44:	f000 fcd2 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	UM_EXTI0_1_IRQHandler();
 8000e52:	f7ff fdbb 	bl	80009cc <UM_EXTI0_1_IRQHandler>
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f000 ff8e 	bl	8001d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f000 ff8b 	bl	8001d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	LM_UpdatePwm();
 8000e6c:	f7ff fb74 	bl	8000558 <LM_UpdatePwm>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <TIM2_IRQHandler+0x18>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f001 fe8b 	bl	8002b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	20000214 	.word	0x20000214

08000e84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	TM_DecrementTimer();
 8000e88:	f7ff fbf2 	bl	8000670 <TM_DecrementTimer>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <TIM6_DAC_IRQHandler+0x18>)
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f001 fe7d 	bl	8002b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	20000194 	.word	0x20000194

08000ea0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x50>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x16>
		heap_end = &end;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <_sbrk+0x50>)
 8000eb2:	4a10      	ldr	r2, [pc, #64]	; (8000ef4 <_sbrk+0x54>)
 8000eb4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <_sbrk+0x50>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <_sbrk+0x50>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	18d3      	adds	r3, r2, r3
 8000ec4:	466a      	mov	r2, sp
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d907      	bls.n	8000eda <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000eca:	f003 fc49 	bl	8004760 <__errno>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	220c      	movs	r2, #12
 8000ed2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	425b      	negs	r3, r3
 8000ed8:	e006      	b.n	8000ee8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <_sbrk+0x50>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	18d2      	adds	r2, r2, r3
 8000ee2:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <_sbrk+0x50>)
 8000ee4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b004      	add	sp, #16
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200000a0 	.word	0x200000a0
 8000ef4:	200002e0 	.word	0x200002e0

08000ef8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b092      	sub	sp, #72	; 0x48
 8000f08:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0a:	2340      	movs	r3, #64	; 0x40
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	0018      	movs	r0, r3
 8000f10:	2308      	movs	r3, #8
 8000f12:	001a      	movs	r2, r3
 8000f14:	2100      	movs	r1, #0
 8000f16:	f003 fc4d 	bl	80047b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1a:	2324      	movs	r3, #36	; 0x24
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	0018      	movs	r0, r3
 8000f20:	231c      	movs	r3, #28
 8000f22:	001a      	movs	r2, r3
 8000f24:	2100      	movs	r1, #0
 8000f26:	f003 fc45 	bl	80047b4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	2320      	movs	r3, #32
 8000f30:	001a      	movs	r2, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	f003 fc3e 	bl	80047b4 <memset>

  htim1.Instance = TIM1;
 8000f38:	4b4b      	ldr	r3, [pc, #300]	; (8001068 <MX_TIM1_Init+0x164>)
 8000f3a:	4a4c      	ldr	r2, [pc, #304]	; (800106c <MX_TIM1_Init+0x168>)
 8000f3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f3e:	4b4a      	ldr	r3, [pc, #296]	; (8001068 <MX_TIM1_Init+0x164>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b48      	ldr	r3, [pc, #288]	; (8001068 <MX_TIM1_Init+0x164>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64;
 8000f4a:	4b47      	ldr	r3, [pc, #284]	; (8001068 <MX_TIM1_Init+0x164>)
 8000f4c:	2240      	movs	r2, #64	; 0x40
 8000f4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f50:	4b45      	ldr	r3, [pc, #276]	; (8001068 <MX_TIM1_Init+0x164>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f56:	4b44      	ldr	r3, [pc, #272]	; (8001068 <MX_TIM1_Init+0x164>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b42      	ldr	r3, [pc, #264]	; (8001068 <MX_TIM1_Init+0x164>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f62:	4b41      	ldr	r3, [pc, #260]	; (8001068 <MX_TIM1_Init+0x164>)
 8000f64:	0018      	movs	r0, r3
 8000f66:	f001 fcaf 	bl	80028c8 <HAL_TIM_PWM_Init>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f6e:	f7ff fea1 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f72:	2140      	movs	r1, #64	; 0x40
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f80:	187a      	adds	r2, r7, r1
 8000f82:	4b39      	ldr	r3, [pc, #228]	; (8001068 <MX_TIM1_Init+0x164>)
 8000f84:	0011      	movs	r1, r2
 8000f86:	0018      	movs	r0, r3
 8000f88:	f002 fa98 	bl	80034bc <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	1e03      	subs	r3, r0, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f90:	f7ff fe90 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f94:	2124      	movs	r1, #36	; 0x24
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	2260      	movs	r2, #96	; 0x60
 8000f9a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc0:	1879      	adds	r1, r7, r1
 8000fc2:	4b29      	ldr	r3, [pc, #164]	; (8001068 <MX_TIM1_Init+0x164>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f001 fef8 	bl	8002dbc <HAL_TIM_PWM_ConfigChannel>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000fd0:	f7ff fe70 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fd4:	2324      	movs	r3, #36	; 0x24
 8000fd6:	18f9      	adds	r1, r7, r3
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <MX_TIM1_Init+0x164>)
 8000fda:	2204      	movs	r2, #4
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f001 feed 	bl	8002dbc <HAL_TIM_PWM_ConfigChannel>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8000fe6:	f7ff fe65 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fea:	2324      	movs	r3, #36	; 0x24
 8000fec:	18f9      	adds	r1, r7, r3
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_TIM1_Init+0x164>)
 8000ff0:	2208      	movs	r2, #8
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f001 fee2 	bl	8002dbc <HAL_TIM_PWM_ConfigChannel>
 8000ff8:	1e03      	subs	r3, r0, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000ffc:	f7ff fe5a 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001000:	2324      	movs	r3, #36	; 0x24
 8001002:	18f9      	adds	r1, r7, r3
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_TIM1_Init+0x164>)
 8001006:	220c      	movs	r2, #12
 8001008:	0018      	movs	r0, r3
 800100a:	f001 fed7 	bl	8002dbc <HAL_TIM_PWM_ConfigChannel>
 800100e:	1e03      	subs	r3, r0, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001012:	f7ff fe4f 	bl	8000cb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	0192      	lsls	r2, r2, #6
 800103a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001042:	1d3a      	adds	r2, r7, #4
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_TIM1_Init+0x164>)
 8001046:	0011      	movs	r1, r2
 8001048:	0018      	movs	r0, r3
 800104a:	f002 fa95 	bl	8003578 <HAL_TIMEx_ConfigBreakDeadTime>
 800104e:	1e03      	subs	r3, r0, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8001052:	f7ff fe2f 	bl	8000cb4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <MX_TIM1_Init+0x164>)
 8001058:	0018      	movs	r0, r3
 800105a:	f000 fabb 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b012      	add	sp, #72	; 0x48
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	200001d4 	.word	0x200001d4
 800106c:	40012c00 	.word	0x40012c00

08001070 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b08d      	sub	sp, #52	; 0x34
 8001074:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001076:	240c      	movs	r4, #12
 8001078:	193b      	adds	r3, r7, r4
 800107a:	0018      	movs	r0, r3
 800107c:	2324      	movs	r3, #36	; 0x24
 800107e:	001a      	movs	r2, r3
 8001080:	2100      	movs	r1, #0
 8001082:	f003 fb97 	bl	80047b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	0018      	movs	r0, r3
 800108a:	2308      	movs	r3, #8
 800108c:	001a      	movs	r2, r3
 800108e:	2100      	movs	r1, #0
 8001090:	f003 fb90 	bl	80047b4 <memset>

  htim2.Instance = TIM2;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_TIM2_Init+0xc0>)
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	05d2      	lsls	r2, r2, #23
 800109a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <MX_TIM2_Init+0xc0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <MX_TIM2_Init+0xc0>)
 80010a4:	2240      	movs	r2, #64	; 0x40
 80010a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_TIM2_Init+0xc0>)
 80010aa:	4a22      	ldr	r2, [pc, #136]	; (8001134 <MX_TIM2_Init+0xc4>)
 80010ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <MX_TIM2_Init+0xc0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_TIM2_Init+0xc0>)
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010ba:	0021      	movs	r1, r4
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2203      	movs	r2, #3
 80010c0:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2201      	movs	r2, #1
 80010cc:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 4;
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	2204      	movs	r2, #4
 80010d8:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	2201      	movs	r2, #1
 80010e4:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	2200      	movs	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 4;
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	2204      	movs	r2, #4
 80010f0:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010f2:	187a      	adds	r2, r7, r1
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_TIM2_Init+0xc0>)
 80010f6:	0011      	movs	r1, r2
 80010f8:	0018      	movs	r0, r3
 80010fa:	f001 fc5d 	bl	80029b8 <HAL_TIM_Encoder_Init>
 80010fe:	1e03      	subs	r3, r0, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001102:	f7ff fdd7 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2220      	movs	r2, #32
 800110a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001112:	1d3a      	adds	r2, r7, #4
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_TIM2_Init+0xc0>)
 8001116:	0011      	movs	r1, r2
 8001118:	0018      	movs	r0, r3
 800111a:	f002 f9cf 	bl	80034bc <HAL_TIMEx_MasterConfigSynchronization>
 800111e:	1e03      	subs	r3, r0, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001122:	f7ff fdc7 	bl	8000cb4 <Error_Handler>
  }

}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b00d      	add	sp, #52	; 0x34
 800112c:	bd90      	pop	{r4, r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	20000214 	.word	0x20000214
 8001134:	0000ffff 	.word	0x0000ffff

08001138 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113e:	2320      	movs	r3, #32
 8001140:	18fb      	adds	r3, r7, r3
 8001142:	0018      	movs	r0, r3
 8001144:	2308      	movs	r3, #8
 8001146:	001a      	movs	r2, r3
 8001148:	2100      	movs	r1, #0
 800114a:	f003 fb33 	bl	80047b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	0018      	movs	r0, r3
 8001152:	231c      	movs	r3, #28
 8001154:	001a      	movs	r2, r3
 8001156:	2100      	movs	r1, #0
 8001158:	f003 fb2c 	bl	80047b4 <memset>

  htim3.Instance = TIM3;
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <MX_TIM3_Init+0xb8>)
 800115e:	4a25      	ldr	r2, [pc, #148]	; (80011f4 <MX_TIM3_Init+0xbc>)
 8001160:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <MX_TIM3_Init+0xb8>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <MX_TIM3_Init+0xb8>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <MX_TIM3_Init+0xb8>)
 8001170:	2201      	movs	r2, #1
 8001172:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_TIM3_Init+0xb8>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <MX_TIM3_Init+0xb8>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_TIM3_Init+0xb8>)
 8001182:	0018      	movs	r0, r3
 8001184:	f001 fba0 	bl	80028c8 <HAL_TIM_PWM_Init>
 8001188:	1e03      	subs	r3, r0, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800118c:	f7ff fd92 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2120      	movs	r1, #32
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800119e:	187a      	adds	r2, r7, r1
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_TIM3_Init+0xb8>)
 80011a2:	0011      	movs	r1, r2
 80011a4:	0018      	movs	r0, r3
 80011a6:	f002 f989 	bl	80034bc <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80011ae:	f7ff fd81 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2260      	movs	r2, #96	; 0x60
 80011b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ca:	1d39      	adds	r1, r7, #4
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_TIM3_Init+0xb8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	0018      	movs	r0, r3
 80011d2:	f001 fdf3 	bl	8002dbc <HAL_TIM_PWM_ConfigChannel>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80011da:	f7ff fd6b 	bl	8000cb4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <MX_TIM3_Init+0xb8>)
 80011e0:	0018      	movs	r0, r3
 80011e2:	f000 f9f7 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b00a      	add	sp, #40	; 0x28
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	20000154 	.word	0x20000154
 80011f4:	40000400 	.word	0x40000400

080011f8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fe:	003b      	movs	r3, r7
 8001200:	0018      	movs	r0, r3
 8001202:	2308      	movs	r3, #8
 8001204:	001a      	movs	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	f003 fad4 	bl	80047b4 <memset>

  htim6.Instance = TIM6;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_TIM6_Init+0x6c>)
 800120e:	4a16      	ldr	r2, [pc, #88]	; (8001268 <MX_TIM6_Init+0x70>)
 8001210:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 366;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_TIM6_Init+0x6c>)
 8001214:	22b7      	movs	r2, #183	; 0xb7
 8001216:	0052      	lsls	r2, r2, #1
 8001218:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_TIM6_Init+0x6c>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <MX_TIM6_Init+0x6c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_TIM6_Init+0x74>)
 8001224:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_TIM6_Init+0x6c>)
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <MX_TIM6_Init+0x6c>)
 800122e:	0018      	movs	r0, r3
 8001230:	f001 fab0 	bl	8002794 <HAL_TIM_Base_Init>
 8001234:	1e03      	subs	r3, r0, #0
 8001236:	d001      	beq.n	800123c <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8001238:	f7ff fd3c 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123c:	003b      	movs	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001242:	003b      	movs	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001248:	003a      	movs	r2, r7
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_TIM6_Init+0x6c>)
 800124c:	0011      	movs	r1, r2
 800124e:	0018      	movs	r0, r3
 8001250:	f002 f934 	bl	80034bc <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8001258:	f7ff fd2c 	bl	8000cb4 <Error_Handler>
  }

}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b002      	add	sp, #8
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000194 	.word	0x20000194
 8001268:	40001000 	.word	0x40001000
 800126c:	0000ffff 	.word	0x0000ffff

08001270 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	0018      	movs	r0, r3
 800127a:	231c      	movs	r3, #28
 800127c:	001a      	movs	r2, r3
 800127e:	2100      	movs	r1, #0
 8001280:	f003 fa98 	bl	80047b4 <memset>

  htim14.Instance = TIM14;
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_TIM14_Init+0x94>)
 8001286:	4a20      	ldr	r2, [pc, #128]	; (8001308 <MX_TIM14_Init+0x98>)
 8001288:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_TIM14_Init+0x94>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_TIM14_Init+0x94>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 64;
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_TIM14_Init+0x94>)
 8001298:	2240      	movs	r2, #64	; 0x40
 800129a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_TIM14_Init+0x94>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_TIM14_Init+0x94>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_TIM14_Init+0x94>)
 80012aa:	0018      	movs	r0, r3
 80012ac:	f001 fa72 	bl	8002794 <HAL_TIM_Base_Init>
 80012b0:	1e03      	subs	r3, r0, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80012b4:	f7ff fcfe 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_TIM14_Init+0x94>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f001 fb04 	bl	80028c8 <HAL_TIM_PWM_Init>
 80012c0:	1e03      	subs	r3, r0, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80012c4:	f7ff fcf6 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2260      	movs	r2, #96	; 0x60
 80012cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e0:	1d39      	adds	r1, r7, #4
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_TIM14_Init+0x94>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	0018      	movs	r0, r3
 80012e8:	f001 fd68 	bl	8002dbc <HAL_TIM_PWM_ConfigChannel>
 80012ec:	1e03      	subs	r3, r0, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80012f0:	f7ff fce0 	bl	8000cb4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <MX_TIM14_Init+0x94>)
 80012f6:	0018      	movs	r0, r3
 80012f8:	f000 f96c 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b008      	add	sp, #32
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000254 	.word	0x20000254
 8001308:	40002000 	.word	0x40002000

0800130c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_TIM16_Init+0x44>)
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <MX_TIM16_Init+0x48>)
 8001314:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_TIM16_Init+0x44>)
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_TIM16_Init+0x44>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_TIM16_Init+0x44>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_TIM16_Init+0x44>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_TIM16_Init+0x44>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_TIM16_Init+0x44>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <MX_TIM16_Init+0x44>)
 800133c:	0018      	movs	r0, r3
 800133e:	f001 fa29 	bl	8002794 <HAL_TIM_Base_Init>
 8001342:	1e03      	subs	r3, r0, #0
 8001344:	d001      	beq.n	800134a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001346:	f7ff fcb5 	bl	8000cb4 <Error_Handler>
  }

}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000294 	.word	0x20000294
 8001354:	40014400 	.word	0x40014400

08001358 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_TIM17_Init+0x44>)
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <MX_TIM17_Init+0x48>)
 8001360:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 65535;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_TIM17_Init+0x44>)
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <MX_TIM17_Init+0x4c>)
 8001366:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_TIM17_Init+0x44>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_TIM17_Init+0x44>)
 8001370:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <MX_TIM17_Init+0x4c>)
 8001372:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_TIM17_Init+0x44>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_TIM17_Init+0x44>)
 800137c:	2200      	movs	r2, #0
 800137e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_TIM17_Init+0x44>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <MX_TIM17_Init+0x44>)
 8001388:	0018      	movs	r0, r3
 800138a:	f001 fa03 	bl	8002794 <HAL_TIM_Base_Init>
 800138e:	1e03      	subs	r3, r0, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8001392:	f7ff fc8f 	bl	8000cb4 <Error_Handler>
  }

}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000114 	.word	0x20000114
 80013a0:	40014800 	.word	0x40014800
 80013a4:	0000ffff 	.word	0x0000ffff

080013a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <HAL_TIM_PWM_MspInit+0x5c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10e      	bne.n	80013d8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_TIM_PWM_MspInit+0x60>)
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_TIM_PWM_MspInit+0x60>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	0109      	lsls	r1, r1, #4
 80013c4:	430a      	orrs	r2, r1
 80013c6:	619a      	str	r2, [r3, #24]
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_TIM_PWM_MspInit+0x60>)
 80013ca:	699a      	ldr	r2, [r3, #24]
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80013d6:	e010      	b.n	80013fa <HAL_TIM_PWM_MspInit+0x52>
  else if(tim_pwmHandle->Instance==TIM3)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_TIM_PWM_MspInit+0x64>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10b      	bne.n	80013fa <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_TIM_PWM_MspInit+0x60>)
 80013e4:	69da      	ldr	r2, [r3, #28]
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_TIM_PWM_MspInit+0x60>)
 80013e8:	2102      	movs	r1, #2
 80013ea:	430a      	orrs	r2, r1
 80013ec:	61da      	str	r2, [r3, #28]
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_TIM_PWM_MspInit+0x60>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	2202      	movs	r2, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b004      	add	sp, #16
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	40012c00 	.word	0x40012c00
 8001408:	40021000 	.word	0x40021000
 800140c:	40000400 	.word	0x40000400

08001410 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b08b      	sub	sp, #44	; 0x2c
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	2314      	movs	r3, #20
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	0018      	movs	r0, r3
 800141e:	2314      	movs	r3, #20
 8001420:	001a      	movs	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	f003 f9c6 	bl	80047b4 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	05db      	lsls	r3, r3, #23
 8001430:	429a      	cmp	r2, r3
 8001432:	d15e      	bne.n	80014f2 <HAL_TIM_Encoder_MspInit+0xe2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001434:	4b31      	ldr	r3, [pc, #196]	; (80014fc <HAL_TIM_Encoder_MspInit+0xec>)
 8001436:	69da      	ldr	r2, [r3, #28]
 8001438:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_TIM_Encoder_MspInit+0xec>)
 800143a:	2101      	movs	r1, #1
 800143c:	430a      	orrs	r2, r1
 800143e:	61da      	str	r2, [r3, #28]
 8001440:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <HAL_TIM_Encoder_MspInit+0xec>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	2201      	movs	r2, #1
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <HAL_TIM_Encoder_MspInit+0xec>)
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <HAL_TIM_Encoder_MspInit+0xec>)
 8001452:	2180      	movs	r1, #128	; 0x80
 8001454:	0289      	lsls	r1, r1, #10
 8001456:	430a      	orrs	r2, r1
 8001458:	615a      	str	r2, [r3, #20]
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_TIM_Encoder_MspInit+0xec>)
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	029b      	lsls	r3, r3, #10
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <HAL_TIM_Encoder_MspInit+0xec>)
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <HAL_TIM_Encoder_MspInit+0xec>)
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	02c9      	lsls	r1, r1, #11
 8001472:	430a      	orrs	r2, r1
 8001474:	615a      	str	r2, [r3, #20]
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <HAL_TIM_Encoder_MspInit+0xec>)
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	02db      	lsls	r3, r3, #11
 800147e:	4013      	ands	r3, r2
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001484:	2114      	movs	r1, #20
 8001486:	187b      	adds	r3, r7, r1
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	0212      	lsls	r2, r2, #8
 800148c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	000c      	movs	r4, r1
 8001490:	193b      	adds	r3, r7, r4
 8001492:	2202      	movs	r2, #2
 8001494:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	193b      	adds	r3, r7, r4
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	193b      	adds	r3, r7, r4
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80014a2:	193b      	adds	r3, r7, r4
 80014a4:	2202      	movs	r2, #2
 80014a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	193a      	adds	r2, r7, r4
 80014aa:	2390      	movs	r3, #144	; 0x90
 80014ac:	05db      	lsls	r3, r3, #23
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f000 fab7 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014b6:	0021      	movs	r1, r4
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2208      	movs	r2, #8
 80014bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2202      	movs	r2, #2
 80014c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	2202      	movs	r2, #2
 80014d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	4a09      	ldr	r2, [pc, #36]	; (8001500 <HAL_TIM_Encoder_MspInit+0xf0>)
 80014da:	0019      	movs	r1, r3
 80014dc:	0010      	movs	r0, r2
 80014de:	f000 faa1 	bl	8001a24 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2101      	movs	r1, #1
 80014e6:	200f      	movs	r0, #15
 80014e8:	f000 fa6a 	bl	80019c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014ec:	200f      	movs	r0, #15
 80014ee:	f000 fa7c 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b00b      	add	sp, #44	; 0x2c
 80014f8:	bd90      	pop	{r4, r7, pc}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	40021000 	.word	0x40021000
 8001500:	48000400 	.word	0x48000400

08001504 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a2b      	ldr	r2, [pc, #172]	; (80015c0 <HAL_TIM_Base_MspInit+0xbc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d114      	bne.n	8001540 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001516:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 8001518:	69da      	ldr	r2, [r3, #28]
 800151a:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 800151c:	2110      	movs	r1, #16
 800151e:	430a      	orrs	r2, r1
 8001520:	61da      	str	r2, [r3, #28]
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	2210      	movs	r2, #16
 8001528:	4013      	ands	r3, r2
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2101      	movs	r1, #1
 8001532:	2011      	movs	r0, #17
 8001534:	f000 fa44 	bl	80019c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001538:	2011      	movs	r0, #17
 800153a:	f000 fa56 	bl	80019ea <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800153e:	e03a      	b.n	80015b6 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM14)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a20      	ldr	r2, [pc, #128]	; (80015c8 <HAL_TIM_Base_MspInit+0xc4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10e      	bne.n	8001568 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 800154c:	69da      	ldr	r2, [r3, #28]
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	0049      	lsls	r1, r1, #1
 8001554:	430a      	orrs	r2, r1
 8001556:	61da      	str	r2, [r3, #28]
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 800155a:	69da      	ldr	r2, [r3, #28]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
}
 8001566:	e026      	b.n	80015b6 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM16)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a17      	ldr	r2, [pc, #92]	; (80015cc <HAL_TIM_Base_MspInit+0xc8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d10e      	bne.n	8001590 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 8001574:	699a      	ldr	r2, [r3, #24]
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	0289      	lsls	r1, r1, #10
 800157c:	430a      	orrs	r2, r1
 800157e:	619a      	str	r2, [r3, #24]
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 8001582:	699a      	ldr	r2, [r3, #24]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	029b      	lsls	r3, r3, #10
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
}
 800158e:	e012      	b.n	80015b6 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM17)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_TIM_Base_MspInit+0xcc>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d10d      	bne.n	80015b6 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 800159c:	699a      	ldr	r2, [r3, #24]
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	02c9      	lsls	r1, r1, #11
 80015a4:	430a      	orrs	r2, r1
 80015a6:	619a      	str	r2, [r3, #24]
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_TIM_Base_MspInit+0xc0>)
 80015aa:	699a      	ldr	r2, [r3, #24]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	02db      	lsls	r3, r3, #11
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b006      	add	sp, #24
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	40001000 	.word	0x40001000
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40002000 	.word	0x40002000
 80015cc:	40014400 	.word	0x40014400
 80015d0:	40014800 	.word	0x40014800

080015d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	2314      	movs	r3, #20
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	0018      	movs	r0, r3
 80015e2:	2314      	movs	r3, #20
 80015e4:	001a      	movs	r2, r3
 80015e6:	2100      	movs	r1, #0
 80015e8:	f003 f8e4 	bl	80047b4 <memset>
  if(timHandle->Instance==TIM1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a40      	ldr	r2, [pc, #256]	; (80016f4 <HAL_TIM_MspPostInit+0x120>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d126      	bne.n	8001644 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <HAL_TIM_MspPostInit+0x124>)
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	4b3f      	ldr	r3, [pc, #252]	; (80016f8 <HAL_TIM_MspPostInit+0x124>)
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	0289      	lsls	r1, r1, #10
 8001600:	430a      	orrs	r2, r1
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <HAL_TIM_MspPostInit+0x124>)
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	029b      	lsls	r3, r3, #10
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001612:	2114      	movs	r1, #20
 8001614:	187b      	adds	r3, r7, r1
 8001616:	22f0      	movs	r2, #240	; 0xf0
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	187b      	adds	r3, r7, r1
 800161e:	2202      	movs	r2, #2
 8001620:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2202      	movs	r2, #2
 8001632:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	187a      	adds	r2, r7, r1
 8001636:	2390      	movs	r3, #144	; 0x90
 8001638:	05db      	lsls	r3, r3, #23
 800163a:	0011      	movs	r1, r2
 800163c:	0018      	movs	r0, r3
 800163e:	f000 f9f1 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001642:	e052      	b.n	80016ea <HAL_TIM_MspPostInit+0x116>
  else if(timHandle->Instance==TIM3)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a2c      	ldr	r2, [pc, #176]	; (80016fc <HAL_TIM_MspPostInit+0x128>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d124      	bne.n	8001698 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <HAL_TIM_MspPostInit+0x124>)
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HAL_TIM_MspPostInit+0x124>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	02c9      	lsls	r1, r1, #11
 8001658:	430a      	orrs	r2, r1
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <HAL_TIM_MspPostInit+0x124>)
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	02db      	lsls	r3, r3, #11
 8001664:	4013      	ands	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800166a:	2114      	movs	r1, #20
 800166c:	187b      	adds	r3, r7, r1
 800166e:	2210      	movs	r2, #16
 8001670:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	187b      	adds	r3, r7, r1
 8001674:	2202      	movs	r2, #2
 8001676:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001678:	187b      	adds	r3, r7, r1
 800167a:	2202      	movs	r2, #2
 800167c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001684:	187b      	adds	r3, r7, r1
 8001686:	2201      	movs	r2, #1
 8001688:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	187b      	adds	r3, r7, r1
 800168c:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <HAL_TIM_MspPostInit+0x12c>)
 800168e:	0019      	movs	r1, r3
 8001690:	0010      	movs	r0, r2
 8001692:	f000 f9c7 	bl	8001a24 <HAL_GPIO_Init>
}
 8001696:	e028      	b.n	80016ea <HAL_TIM_MspPostInit+0x116>
  else if(timHandle->Instance==TIM14)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a19      	ldr	r2, [pc, #100]	; (8001704 <HAL_TIM_MspPostInit+0x130>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d123      	bne.n	80016ea <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_TIM_MspPostInit+0x124>)
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_TIM_MspPostInit+0x124>)
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	02c9      	lsls	r1, r1, #11
 80016ac:	430a      	orrs	r2, r1
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_TIM_MspPostInit+0x124>)
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	02db      	lsls	r3, r3, #11
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016be:	2114      	movs	r1, #20
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	2202      	movs	r2, #2
 80016c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	187b      	adds	r3, r7, r1
 80016c8:	2202      	movs	r2, #2
 80016ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	187b      	adds	r3, r7, r1
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	187b      	adds	r3, r7, r1
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	187b      	adds	r3, r7, r1
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_TIM_MspPostInit+0x12c>)
 80016e2:	0019      	movs	r1, r3
 80016e4:	0010      	movs	r0, r2
 80016e6:	f000 f99d 	bl	8001a24 <HAL_GPIO_Init>
}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b00a      	add	sp, #40	; 0x28
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	40012c00 	.word	0x40012c00
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40000400 	.word	0x40000400
 8001700:	48000400 	.word	0x48000400
 8001704:	40002000 	.word	0x40002000

08001708 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001708:	480d      	ldr	r0, [pc, #52]	; (8001740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800170a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800170c:	480d      	ldr	r0, [pc, #52]	; (8001744 <LoopForever+0x6>)
  ldr r1, =_edata
 800170e:	490e      	ldr	r1, [pc, #56]	; (8001748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <LoopForever+0xe>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001714:	e002      	b.n	800171c <LoopCopyDataInit>

08001716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171a:	3304      	adds	r3, #4

0800171c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800171c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001720:	d3f9      	bcc.n	8001716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001724:	4c0b      	ldr	r4, [pc, #44]	; (8001754 <LoopForever+0x16>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001728:	e001      	b.n	800172e <LoopFillZerobss>

0800172a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800172c:	3204      	adds	r2, #4

0800172e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001730:	d3fb      	bcc.n	800172a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001732:	f7ff fbe1 	bl	8000ef8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001736:	f003 f819 	bl	800476c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800173a:	f7ff fa3f 	bl	8000bbc <main>

0800173e <LoopForever>:

LoopForever:
    b LoopForever
 800173e:	e7fe      	b.n	800173e <LoopForever>
  ldr   r0, =_estack
 8001740:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800174c:	080052fc 	.word	0x080052fc
  ldr r2, =_sbss
 8001750:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001754:	200002dc 	.word	0x200002dc

08001758 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC1_COMP_IRQHandler>
	...

0800175c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <HAL_Init+0x24>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_Init+0x24>)
 8001766:	2110      	movs	r1, #16
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800176c:	2000      	movs	r0, #0
 800176e:	f000 f809 	bl	8001784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001772:	f7ff fb2f 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	40022000 	.word	0x40022000

08001784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_InitTick+0x5c>)
 800178e:	681c      	ldr	r4, [r3, #0]
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_InitTick+0x60>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	0019      	movs	r1, r3
 8001796:	23fa      	movs	r3, #250	; 0xfa
 8001798:	0098      	lsls	r0, r3, #2
 800179a:	f7fe fcb5 	bl	8000108 <__udivsi3>
 800179e:	0003      	movs	r3, r0
 80017a0:	0019      	movs	r1, r3
 80017a2:	0020      	movs	r0, r4
 80017a4:	f7fe fcb0 	bl	8000108 <__udivsi3>
 80017a8:	0003      	movs	r3, r0
 80017aa:	0018      	movs	r0, r3
 80017ac:	f000 f92d 	bl	8001a0a <HAL_SYSTICK_Config>
 80017b0:	1e03      	subs	r3, r0, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e00f      	b.n	80017d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d80b      	bhi.n	80017d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	2301      	movs	r3, #1
 80017c2:	425b      	negs	r3, r3
 80017c4:	2200      	movs	r2, #0
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 f8fa 	bl	80019c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_InitTick+0x64>)
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b003      	add	sp, #12
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	20000008 	.word	0x20000008
 80017e4:	20000010 	.word	0x20000010
 80017e8:	2000000c 	.word	0x2000000c

080017ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_IncTick+0x1c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	001a      	movs	r2, r3
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_IncTick+0x20>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	18d2      	adds	r2, r2, r3
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_IncTick+0x20>)
 80017fe:	601a      	str	r2, [r3, #0]
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	20000010 	.word	0x20000010
 800180c:	200002d4 	.word	0x200002d4

08001810 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b02      	ldr	r3, [pc, #8]	; (8001820 <HAL_GetTick+0x10>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	0018      	movs	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	200002d4 	.word	0x200002d4

08001824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff fff0 	bl	8001810 <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3301      	adds	r3, #1
 800183c:	d005      	beq.n	800184a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_Delay+0x40>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	001a      	movs	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	189b      	adds	r3, r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	f7ff ffe0 	bl	8001810 <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	429a      	cmp	r2, r3
 800185a:	d8f7      	bhi.n	800184c <HAL_Delay+0x28>
  {
  }
}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b004      	add	sp, #16
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000010 	.word	0x20000010

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	0002      	movs	r2, r0
 8001870:	1dfb      	adds	r3, r7, #7
 8001872:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001874:	1dfb      	adds	r3, r7, #7
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b7f      	cmp	r3, #127	; 0x7f
 800187a:	d809      	bhi.n	8001890 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187c:	1dfb      	adds	r3, r7, #7
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	001a      	movs	r2, r3
 8001882:	231f      	movs	r3, #31
 8001884:	401a      	ands	r2, r3
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <__NVIC_EnableIRQ+0x30>)
 8001888:	2101      	movs	r1, #1
 800188a:	4091      	lsls	r1, r2
 800188c:	000a      	movs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
  }
}
 8001890:	46c0      	nop			; (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	b002      	add	sp, #8
 8001896:	bd80      	pop	{r7, pc}
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	0002      	movs	r2, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	1dfb      	adds	r3, r7, #7
 80018a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b7f      	cmp	r3, #127	; 0x7f
 80018b0:	d828      	bhi.n	8001904 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b2:	4a2f      	ldr	r2, [pc, #188]	; (8001970 <__NVIC_SetPriority+0xd4>)
 80018b4:	1dfb      	adds	r3, r7, #7
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	33c0      	adds	r3, #192	; 0xc0
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	589b      	ldr	r3, [r3, r2]
 80018c2:	1dfa      	adds	r2, r7, #7
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	0011      	movs	r1, r2
 80018c8:	2203      	movs	r2, #3
 80018ca:	400a      	ands	r2, r1
 80018cc:	00d2      	lsls	r2, r2, #3
 80018ce:	21ff      	movs	r1, #255	; 0xff
 80018d0:	4091      	lsls	r1, r2
 80018d2:	000a      	movs	r2, r1
 80018d4:	43d2      	mvns	r2, r2
 80018d6:	401a      	ands	r2, r3
 80018d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	019b      	lsls	r3, r3, #6
 80018de:	22ff      	movs	r2, #255	; 0xff
 80018e0:	401a      	ands	r2, r3
 80018e2:	1dfb      	adds	r3, r7, #7
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	0018      	movs	r0, r3
 80018e8:	2303      	movs	r3, #3
 80018ea:	4003      	ands	r3, r0
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f0:	481f      	ldr	r0, [pc, #124]	; (8001970 <__NVIC_SetPriority+0xd4>)
 80018f2:	1dfb      	adds	r3, r7, #7
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b25b      	sxtb	r3, r3
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	430a      	orrs	r2, r1
 80018fc:	33c0      	adds	r3, #192	; 0xc0
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001902:	e031      	b.n	8001968 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <__NVIC_SetPriority+0xd8>)
 8001906:	1dfb      	adds	r3, r7, #7
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	0019      	movs	r1, r3
 800190c:	230f      	movs	r3, #15
 800190e:	400b      	ands	r3, r1
 8001910:	3b08      	subs	r3, #8
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	3306      	adds	r3, #6
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	18d3      	adds	r3, r2, r3
 800191a:	3304      	adds	r3, #4
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	1dfa      	adds	r2, r7, #7
 8001920:	7812      	ldrb	r2, [r2, #0]
 8001922:	0011      	movs	r1, r2
 8001924:	2203      	movs	r2, #3
 8001926:	400a      	ands	r2, r1
 8001928:	00d2      	lsls	r2, r2, #3
 800192a:	21ff      	movs	r1, #255	; 0xff
 800192c:	4091      	lsls	r1, r2
 800192e:	000a      	movs	r2, r1
 8001930:	43d2      	mvns	r2, r2
 8001932:	401a      	ands	r2, r3
 8001934:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	019b      	lsls	r3, r3, #6
 800193a:	22ff      	movs	r2, #255	; 0xff
 800193c:	401a      	ands	r2, r3
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	0018      	movs	r0, r3
 8001944:	2303      	movs	r3, #3
 8001946:	4003      	ands	r3, r0
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800194c:	4809      	ldr	r0, [pc, #36]	; (8001974 <__NVIC_SetPriority+0xd8>)
 800194e:	1dfb      	adds	r3, r7, #7
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	001c      	movs	r4, r3
 8001954:	230f      	movs	r3, #15
 8001956:	4023      	ands	r3, r4
 8001958:	3b08      	subs	r3, #8
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	430a      	orrs	r2, r1
 800195e:	3306      	adds	r3, #6
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	18c3      	adds	r3, r0, r3
 8001964:	3304      	adds	r3, #4
 8001966:	601a      	str	r2, [r3, #0]
}
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b003      	add	sp, #12
 800196e:	bd90      	pop	{r4, r7, pc}
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <SysTick_Config+0x40>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e010      	b.n	80019b0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <SysTick_Config+0x44>)
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	3a01      	subs	r2, #1
 8001994:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	2301      	movs	r3, #1
 8001998:	425b      	negs	r3, r3
 800199a:	2103      	movs	r1, #3
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff ff7d 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <SysTick_Config+0x44>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x44>)
 80019aa:	2207      	movs	r2, #7
 80019ac:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b002      	add	sp, #8
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	00ffffff 	.word	0x00ffffff
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	210f      	movs	r1, #15
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	1c02      	adds	r2, r0, #0
 80019d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	187b      	adds	r3, r7, r1
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	0011      	movs	r1, r2
 80019dc:	0018      	movs	r0, r3
 80019de:	f7ff ff5d 	bl	800189c <__NVIC_SetPriority>
}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b004      	add	sp, #16
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	0002      	movs	r2, r0
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f6:	1dfb      	adds	r3, r7, #7
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	b25b      	sxtb	r3, r3
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff ff33 	bl	8001868 <__NVIC_EnableIRQ>
}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b002      	add	sp, #8
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7ff ffaf 	bl	8001978 <SysTick_Config>
 8001a1a:	0003      	movs	r3, r0
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b002      	add	sp, #8
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a32:	e14f      	b.n	8001cd4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4091      	lsls	r1, r2
 8001a3e:	000a      	movs	r2, r1
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d100      	bne.n	8001a4c <HAL_GPIO_Init+0x28>
 8001a4a:	e140      	b.n	8001cce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x38>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b12      	cmp	r3, #18
 8001a5a:	d123      	bne.n	8001aa4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	08da      	lsrs	r2, r3, #3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3208      	adds	r2, #8
 8001a64:	0092      	lsls	r2, r2, #2
 8001a66:	58d3      	ldr	r3, [r2, r3]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	4013      	ands	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	220f      	movs	r2, #15
 8001a74:	409a      	lsls	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	43da      	mvns	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2107      	movs	r1, #7
 8001a88:	400b      	ands	r3, r1
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	0013      	movs	r3, r2
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	08da      	lsrs	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3208      	adds	r2, #8
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	6939      	ldr	r1, [r7, #16]
 8001aa2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	0013      	movs	r3, r2
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	0013      	movs	r3, r2
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d00b      	beq.n	8001af8 <HAL_GPIO_Init+0xd4>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d007      	beq.n	8001af8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aec:	2b11      	cmp	r3, #17
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b12      	cmp	r3, #18
 8001af6:	d130      	bne.n	8001b5a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	409a      	lsls	r2, r3
 8001b06:	0013      	movs	r3, r2
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	0013      	movs	r3, r2
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2e:	2201      	movs	r2, #1
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	409a      	lsls	r2, r3
 8001b34:	0013      	movs	r3, r2
 8001b36:	43da      	mvns	r2, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	091b      	lsrs	r3, r3, #4
 8001b44:	2201      	movs	r2, #1
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	409a      	lsls	r2, r3
 8001b68:	0013      	movs	r3, r2
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	055b      	lsls	r3, r3, #21
 8001b92:	4013      	ands	r3, r2
 8001b94:	d100      	bne.n	8001b98 <HAL_GPIO_Init+0x174>
 8001b96:	e09a      	b.n	8001cce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b98:	4b54      	ldr	r3, [pc, #336]	; (8001cec <HAL_GPIO_Init+0x2c8>)
 8001b9a:	699a      	ldr	r2, [r3, #24]
 8001b9c:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_GPIO_Init+0x2c8>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	619a      	str	r2, [r3, #24]
 8001ba4:	4b51      	ldr	r3, [pc, #324]	; (8001cec <HAL_GPIO_Init+0x2c8>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4013      	ands	r3, r2
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb0:	4a4f      	ldr	r2, [pc, #316]	; (8001cf0 <HAL_GPIO_Init+0x2cc>)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	589b      	ldr	r3, [r3, r2]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	0013      	movs	r3, r2
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	2390      	movs	r3, #144	; 0x90
 8001bd8:	05db      	lsls	r3, r3, #23
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d013      	beq.n	8001c06 <HAL_GPIO_Init+0x1e2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a44      	ldr	r2, [pc, #272]	; (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00d      	beq.n	8001c02 <HAL_GPIO_Init+0x1de>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a43      	ldr	r2, [pc, #268]	; (8001cf8 <HAL_GPIO_Init+0x2d4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d007      	beq.n	8001bfe <HAL_GPIO_Init+0x1da>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a42      	ldr	r2, [pc, #264]	; (8001cfc <HAL_GPIO_Init+0x2d8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d101      	bne.n	8001bfa <HAL_GPIO_Init+0x1d6>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x1e4>
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	e004      	b.n	8001c08 <HAL_GPIO_Init+0x1e4>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e002      	b.n	8001c08 <HAL_GPIO_Init+0x1e4>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_GPIO_Init+0x1e4>
 8001c06:	2300      	movs	r3, #0
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	2103      	movs	r1, #3
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	0092      	lsls	r2, r2, #2
 8001c10:	4093      	lsls	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c18:	4935      	ldr	r1, [pc, #212]	; (8001cf0 <HAL_GPIO_Init+0x2cc>)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3302      	adds	r3, #2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c26:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <HAL_GPIO_Init+0x2dc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	025b      	lsls	r3, r3, #9
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <HAL_GPIO_Init+0x2dc>)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <HAL_GPIO_Init+0x2dc>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	43da      	mvns	r2, r3
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	029b      	lsls	r3, r3, #10
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_GPIO_Init+0x2dc>)
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <HAL_GPIO_Init+0x2dc>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	43da      	mvns	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	035b      	lsls	r3, r3, #13
 8001c92:	4013      	ands	r3, r2
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_GPIO_Init+0x2dc>)
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_GPIO_Init+0x2dc>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	43da      	mvns	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	039b      	lsls	r3, r3, #14
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_GPIO_Init+0x2dc>)
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	40da      	lsrs	r2, r3
 8001cdc:	1e13      	subs	r3, r2, #0
 8001cde:	d000      	beq.n	8001ce2 <HAL_GPIO_Init+0x2be>
 8001ce0:	e6a8      	b.n	8001a34 <HAL_GPIO_Init+0x10>
  } 
}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b006      	add	sp, #24
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	48000800 	.word	0x48000800
 8001cfc:	48000c00 	.word	0x48000c00
 8001d00:	40010400 	.word	0x40010400

08001d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	000a      	movs	r2, r1
 8001d0e:	1cbb      	adds	r3, r7, #2
 8001d10:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	1cba      	adds	r2, r7, #2
 8001d18:	8812      	ldrh	r2, [r2, #0]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d004      	beq.n	8001d28 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001d1e:	230f      	movs	r3, #15
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e003      	b.n	8001d30 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d28:	230f      	movs	r3, #15
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d30:	230f      	movs	r3, #15
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	781b      	ldrb	r3, [r3, #0]
  }
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b004      	add	sp, #16
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	0008      	movs	r0, r1
 8001d48:	0011      	movs	r1, r2
 8001d4a:	1cbb      	adds	r3, r7, #2
 8001d4c:	1c02      	adds	r2, r0, #0
 8001d4e:	801a      	strh	r2, [r3, #0]
 8001d50:	1c7b      	adds	r3, r7, #1
 8001d52:	1c0a      	adds	r2, r1, #0
 8001d54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d56:	1c7b      	adds	r3, r7, #1
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d5e:	1cbb      	adds	r3, r7, #2
 8001d60:	881a      	ldrh	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d66:	e003      	b.n	8001d70 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d68:	1cbb      	adds	r3, r7, #2
 8001d6a:	881a      	ldrh	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b002      	add	sp, #8
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	0002      	movs	r2, r0
 8001d80:	1dbb      	adds	r3, r7, #6
 8001d82:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	1dba      	adds	r2, r7, #6
 8001d8a:	8812      	ldrh	r2, [r2, #0]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d008      	beq.n	8001da2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d92:	1dba      	adds	r2, r7, #6
 8001d94:	8812      	ldrh	r2, [r2, #0]
 8001d96:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d98:	1dbb      	adds	r3, r7, #6
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f000 f807 	bl	8001db0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b002      	add	sp, #8
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	40010400 	.word	0x40010400

08001db0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	0002      	movs	r2, r0
 8001db8:	1dbb      	adds	r3, r7, #6
 8001dba:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e303      	b.n	80023de <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d100      	bne.n	8001de2 <HAL_RCC_OscConfig+0x1e>
 8001de0:	e08d      	b.n	8001efe <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001de2:	4bc4      	ldr	r3, [pc, #784]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	220c      	movs	r2, #12
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d00e      	beq.n	8001e0c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dee:	4bc1      	ldr	r3, [pc, #772]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	220c      	movs	r2, #12
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d116      	bne.n	8001e28 <HAL_RCC_OscConfig+0x64>
 8001dfa:	4bbe      	ldr	r3, [pc, #760]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	025b      	lsls	r3, r3, #9
 8001e02:	401a      	ands	r2, r3
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	025b      	lsls	r3, r3, #9
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d10d      	bne.n	8001e28 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	4bb9      	ldr	r3, [pc, #740]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	029b      	lsls	r3, r3, #10
 8001e14:	4013      	ands	r3, r2
 8001e16:	d100      	bne.n	8001e1a <HAL_RCC_OscConfig+0x56>
 8001e18:	e070      	b.n	8001efc <HAL_RCC_OscConfig+0x138>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d000      	beq.n	8001e24 <HAL_RCC_OscConfig+0x60>
 8001e22:	e06b      	b.n	8001efc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e2da      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_OscConfig+0x7c>
 8001e30:	4bb0      	ldr	r3, [pc, #704]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4baf      	ldr	r3, [pc, #700]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	0249      	lsls	r1, r1, #9
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e02f      	b.n	8001ea0 <HAL_RCC_OscConfig+0xdc>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10c      	bne.n	8001e62 <HAL_RCC_OscConfig+0x9e>
 8001e48:	4baa      	ldr	r3, [pc, #680]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4ba9      	ldr	r3, [pc, #676]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e4e:	49aa      	ldr	r1, [pc, #680]	; (80020f8 <HAL_RCC_OscConfig+0x334>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	4ba7      	ldr	r3, [pc, #668]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4ba6      	ldr	r3, [pc, #664]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e5a:	49a8      	ldr	r1, [pc, #672]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	e01e      	b.n	8001ea0 <HAL_RCC_OscConfig+0xdc>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b05      	cmp	r3, #5
 8001e68:	d10e      	bne.n	8001e88 <HAL_RCC_OscConfig+0xc4>
 8001e6a:	4ba2      	ldr	r3, [pc, #648]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4ba1      	ldr	r3, [pc, #644]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e70:	2180      	movs	r1, #128	; 0x80
 8001e72:	02c9      	lsls	r1, r1, #11
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	4b9e      	ldr	r3, [pc, #632]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b9d      	ldr	r3, [pc, #628]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e7e:	2180      	movs	r1, #128	; 0x80
 8001e80:	0249      	lsls	r1, r1, #9
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0xdc>
 8001e88:	4b9a      	ldr	r3, [pc, #616]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b99      	ldr	r3, [pc, #612]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e8e:	499a      	ldr	r1, [pc, #616]	; (80020f8 <HAL_RCC_OscConfig+0x334>)
 8001e90:	400a      	ands	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	4b97      	ldr	r3, [pc, #604]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b96      	ldr	r3, [pc, #600]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e9a:	4998      	ldr	r1, [pc, #608]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d014      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fcb2 	bl	8001810 <HAL_GetTick>
 8001eac:	0003      	movs	r3, r0
 8001eae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb2:	f7ff fcad 	bl	8001810 <HAL_GetTick>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b64      	cmp	r3, #100	; 0x64
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e28c      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec4:	4b8b      	ldr	r3, [pc, #556]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	029b      	lsls	r3, r3, #10
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0xee>
 8001ed0:	e015      	b.n	8001efe <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7ff fc9d 	bl	8001810 <HAL_GetTick>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff fc98 	bl	8001810 <HAL_GetTick>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e277      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	4b81      	ldr	r3, [pc, #516]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	029b      	lsls	r3, r3, #10
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x118>
 8001efa:	e000      	b.n	8001efe <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2202      	movs	r2, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	d100      	bne.n	8001f0a <HAL_RCC_OscConfig+0x146>
 8001f08:	e069      	b.n	8001fde <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f0a:	4b7a      	ldr	r3, [pc, #488]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	220c      	movs	r2, #12
 8001f10:	4013      	ands	r3, r2
 8001f12:	d00b      	beq.n	8001f2c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f14:	4b77      	ldr	r3, [pc, #476]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	220c      	movs	r2, #12
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d11c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x196>
 8001f20:	4b74      	ldr	r3, [pc, #464]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	025b      	lsls	r3, r3, #9
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d116      	bne.n	8001f5a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2c:	4b71      	ldr	r3, [pc, #452]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2202      	movs	r2, #2
 8001f32:	4013      	ands	r3, r2
 8001f34:	d005      	beq.n	8001f42 <HAL_RCC_OscConfig+0x17e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e24d      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	4b6c      	ldr	r3, [pc, #432]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	22f8      	movs	r2, #248	; 0xf8
 8001f48:	4393      	bics	r3, r2
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	00da      	lsls	r2, r3, #3
 8001f52:	4b68      	ldr	r3, [pc, #416]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f58:	e041      	b.n	8001fde <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d024      	beq.n	8001fac <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f62:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4b63      	ldr	r3, [pc, #396]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001f68:	2101      	movs	r1, #1
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7ff fc4f 	bl	8001810 <HAL_GetTick>
 8001f72:	0003      	movs	r3, r0
 8001f74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f78:	f7ff fc4a 	bl	8001810 <HAL_GetTick>
 8001f7c:	0002      	movs	r2, r0
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e229      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8a:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	4013      	ands	r3, r2
 8001f92:	d0f1      	beq.n	8001f78 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b57      	ldr	r3, [pc, #348]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	22f8      	movs	r2, #248	; 0xf8
 8001f9a:	4393      	bics	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	00da      	lsls	r2, r3, #3
 8001fa4:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e018      	b.n	8001fde <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fac:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fc2a 	bl	8001810 <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fc25 	bl	8001810 <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e204      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd4:	4b47      	ldr	r3, [pc, #284]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d1f1      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d036      	beq.n	8002056 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d019      	beq.n	8002024 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff0:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff4:	4b3f      	ldr	r3, [pc, #252]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffc:	f7ff fc08 	bl	8001810 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002006:	f7ff fc03 	bl	8001810 <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e1e2      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	2202      	movs	r2, #2
 800201e:	4013      	ands	r3, r2
 8002020:	d0f1      	beq.n	8002006 <HAL_RCC_OscConfig+0x242>
 8002022:	e018      	b.n	8002056 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8002026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002028:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 800202a:	2101      	movs	r1, #1
 800202c:	438a      	bics	r2, r1
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7ff fbee 	bl	8001810 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203a:	f7ff fbe9 	bl	8001810 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e1c8      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	2202      	movs	r2, #2
 8002052:	4013      	ands	r3, r2
 8002054:	d1f1      	bne.n	800203a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2204      	movs	r2, #4
 800205c:	4013      	ands	r3, r2
 800205e:	d100      	bne.n	8002062 <HAL_RCC_OscConfig+0x29e>
 8002060:	e0b6      	b.n	80021d0 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002062:	231f      	movs	r3, #31
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	055b      	lsls	r3, r3, #21
 8002072:	4013      	ands	r3, r2
 8002074:	d111      	bne.n	800209a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8002078:	69da      	ldr	r2, [r3, #28]
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	0549      	lsls	r1, r1, #21
 8002080:	430a      	orrs	r2, r1
 8002082:	61da      	str	r2, [r3, #28]
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8002086:	69da      	ldr	r2, [r3, #28]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	055b      	lsls	r3, r3, #21
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002092:	231f      	movs	r3, #31
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_OscConfig+0x33c>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4013      	ands	r3, r2
 80020a4:	d11a      	bne.n	80020dc <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <HAL_RCC_OscConfig+0x33c>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_RCC_OscConfig+0x33c>)
 80020ac:	2180      	movs	r1, #128	; 0x80
 80020ae:	0049      	lsls	r1, r1, #1
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b4:	f7ff fbac 	bl	8001810 <HAL_GetTick>
 80020b8:	0003      	movs	r3, r0
 80020ba:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020be:	f7ff fba7 	bl	8001810 <HAL_GetTick>
 80020c2:	0002      	movs	r2, r0
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b64      	cmp	r3, #100	; 0x64
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e186      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_OscConfig+0x33c>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10f      	bne.n	8002104 <HAL_RCC_OscConfig+0x340>
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	4b02      	ldr	r3, [pc, #8]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 80020ea:	2101      	movs	r1, #1
 80020ec:	430a      	orrs	r2, r1
 80020ee:	621a      	str	r2, [r3, #32]
 80020f0:	e036      	b.n	8002160 <HAL_RCC_OscConfig+0x39c>
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000
 80020f8:	fffeffff 	.word	0xfffeffff
 80020fc:	fffbffff 	.word	0xfffbffff
 8002100:	40007000 	.word	0x40007000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10c      	bne.n	8002126 <HAL_RCC_OscConfig+0x362>
 800210c:	4bb6      	ldr	r3, [pc, #728]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800210e:	6a1a      	ldr	r2, [r3, #32]
 8002110:	4bb5      	ldr	r3, [pc, #724]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002112:	2101      	movs	r1, #1
 8002114:	438a      	bics	r2, r1
 8002116:	621a      	str	r2, [r3, #32]
 8002118:	4bb3      	ldr	r3, [pc, #716]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800211a:	6a1a      	ldr	r2, [r3, #32]
 800211c:	4bb2      	ldr	r3, [pc, #712]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800211e:	2104      	movs	r1, #4
 8002120:	438a      	bics	r2, r1
 8002122:	621a      	str	r2, [r3, #32]
 8002124:	e01c      	b.n	8002160 <HAL_RCC_OscConfig+0x39c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b05      	cmp	r3, #5
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x384>
 800212e:	4bae      	ldr	r3, [pc, #696]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002130:	6a1a      	ldr	r2, [r3, #32]
 8002132:	4bad      	ldr	r3, [pc, #692]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002134:	2104      	movs	r1, #4
 8002136:	430a      	orrs	r2, r1
 8002138:	621a      	str	r2, [r3, #32]
 800213a:	4bab      	ldr	r3, [pc, #684]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800213c:	6a1a      	ldr	r2, [r3, #32]
 800213e:	4baa      	ldr	r3, [pc, #680]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002140:	2101      	movs	r1, #1
 8002142:	430a      	orrs	r2, r1
 8002144:	621a      	str	r2, [r3, #32]
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0x39c>
 8002148:	4ba7      	ldr	r3, [pc, #668]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800214a:	6a1a      	ldr	r2, [r3, #32]
 800214c:	4ba6      	ldr	r3, [pc, #664]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800214e:	2101      	movs	r1, #1
 8002150:	438a      	bics	r2, r1
 8002152:	621a      	str	r2, [r3, #32]
 8002154:	4ba4      	ldr	r3, [pc, #656]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002156:	6a1a      	ldr	r2, [r3, #32]
 8002158:	4ba3      	ldr	r3, [pc, #652]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800215a:	2104      	movs	r1, #4
 800215c:	438a      	bics	r2, r1
 800215e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d014      	beq.n	8002192 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7ff fb52 	bl	8001810 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	e009      	b.n	8002186 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7ff fb4d 	bl	8001810 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	4a9b      	ldr	r2, [pc, #620]	; (80023ec <HAL_RCC_OscConfig+0x628>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e12b      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	4b98      	ldr	r3, [pc, #608]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x3ae>
 8002190:	e013      	b.n	80021ba <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7ff fb3d 	bl	8001810 <HAL_GetTick>
 8002196:	0003      	movs	r3, r0
 8002198:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219a:	e009      	b.n	80021b0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff fb38 	bl	8001810 <HAL_GetTick>
 80021a0:	0002      	movs	r2, r0
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	4a91      	ldr	r2, [pc, #580]	; (80023ec <HAL_RCC_OscConfig+0x628>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e116      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b0:	4b8d      	ldr	r3, [pc, #564]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	2202      	movs	r2, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021ba:	231f      	movs	r3, #31
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d105      	bne.n	80021d0 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c4:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	4b87      	ldr	r3, [pc, #540]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80021ca:	4989      	ldr	r1, [pc, #548]	; (80023f0 <HAL_RCC_OscConfig+0x62c>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2210      	movs	r2, #16
 80021d6:	4013      	ands	r3, r2
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d12a      	bne.n	8002238 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021e2:	4b81      	ldr	r3, [pc, #516]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80021e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e6:	4b80      	ldr	r3, [pc, #512]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80021e8:	2104      	movs	r1, #4
 80021ea:	430a      	orrs	r2, r1
 80021ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80021ee:	4b7e      	ldr	r3, [pc, #504]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80021f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f2:	4b7d      	ldr	r3, [pc, #500]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80021f4:	2101      	movs	r1, #1
 80021f6:	430a      	orrs	r2, r1
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7ff fb09 	bl	8001810 <HAL_GetTick>
 80021fe:	0003      	movs	r3, r0
 8002200:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002204:	f7ff fb04 	bl	8001810 <HAL_GetTick>
 8002208:	0002      	movs	r2, r0
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e0e3      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002216:	4b74      	ldr	r3, [pc, #464]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221a:	2202      	movs	r2, #2
 800221c:	4013      	ands	r3, r2
 800221e:	d0f1      	beq.n	8002204 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002220:	4b71      	ldr	r3, [pc, #452]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002224:	22f8      	movs	r2, #248	; 0xf8
 8002226:	4393      	bics	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	00da      	lsls	r2, r3, #3
 8002230:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002232:	430a      	orrs	r2, r1
 8002234:	635a      	str	r2, [r3, #52]	; 0x34
 8002236:	e034      	b.n	80022a2 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	3305      	adds	r3, #5
 800223e:	d111      	bne.n	8002264 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002240:	4b69      	ldr	r3, [pc, #420]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002244:	4b68      	ldr	r3, [pc, #416]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002246:	2104      	movs	r1, #4
 8002248:	438a      	bics	r2, r1
 800224a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800224c:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	22f8      	movs	r2, #248	; 0xf8
 8002252:	4393      	bics	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	00da      	lsls	r2, r3, #3
 800225c:	4b62      	ldr	r3, [pc, #392]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800225e:	430a      	orrs	r2, r1
 8002260:	635a      	str	r2, [r3, #52]	; 0x34
 8002262:	e01e      	b.n	80022a2 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002264:	4b60      	ldr	r3, [pc, #384]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002268:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800226a:	2104      	movs	r1, #4
 800226c:	430a      	orrs	r2, r1
 800226e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002270:	4b5d      	ldr	r3, [pc, #372]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002274:	4b5c      	ldr	r3, [pc, #368]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002276:	2101      	movs	r1, #1
 8002278:	438a      	bics	r2, r1
 800227a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7ff fac8 	bl	8001810 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002286:	f7ff fac3 	bl	8001810 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e0a2      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229c:	2202      	movs	r2, #2
 800229e:	4013      	ands	r3, r2
 80022a0:	d1f1      	bne.n	8002286 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d100      	bne.n	80022ac <HAL_RCC_OscConfig+0x4e8>
 80022aa:	e097      	b.n	80023dc <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ac:	4b4e      	ldr	r3, [pc, #312]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	220c      	movs	r2, #12
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d100      	bne.n	80022ba <HAL_RCC_OscConfig+0x4f6>
 80022b8:	e06b      	b.n	8002392 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d14c      	bne.n	800235c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b49      	ldr	r3, [pc, #292]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b48      	ldr	r3, [pc, #288]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80022c8:	494a      	ldr	r1, [pc, #296]	; (80023f4 <HAL_RCC_OscConfig+0x630>)
 80022ca:	400a      	ands	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7ff fa9f 	bl	8001810 <HAL_GetTick>
 80022d2:	0003      	movs	r3, r0
 80022d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d8:	f7ff fa9a 	bl	8001810 <HAL_GetTick>
 80022dc:	0002      	movs	r2, r0
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e079      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ea:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	049b      	lsls	r3, r3, #18
 80022f2:	4013      	ands	r3, r2
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f6:	4b3c      	ldr	r3, [pc, #240]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	220f      	movs	r2, #15
 80022fc:	4393      	bics	r3, r2
 80022fe:	0019      	movs	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002304:	4b38      	ldr	r3, [pc, #224]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002306:	430a      	orrs	r2, r1
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
 800230a:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4a3a      	ldr	r2, [pc, #232]	; (80023f8 <HAL_RCC_OscConfig+0x634>)
 8002310:	4013      	ands	r3, r2
 8002312:	0019      	movs	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	431a      	orrs	r2, r3
 800231e:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002320:	430a      	orrs	r2, r1
 8002322:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002324:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800232a:	2180      	movs	r1, #128	; 0x80
 800232c:	0449      	lsls	r1, r1, #17
 800232e:	430a      	orrs	r2, r1
 8002330:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7ff fa6d 	bl	8001810 <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233c:	f7ff fa68 	bl	8001810 <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e047      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	049b      	lsls	r3, r3, #18
 8002356:	4013      	ands	r3, r2
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x578>
 800235a:	e03f      	b.n	80023dc <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002362:	4924      	ldr	r1, [pc, #144]	; (80023f4 <HAL_RCC_OscConfig+0x630>)
 8002364:	400a      	ands	r2, r1
 8002366:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7ff fa52 	bl	8001810 <HAL_GetTick>
 800236c:	0003      	movs	r3, r0
 800236e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002372:	f7ff fa4d 	bl	8001810 <HAL_GetTick>
 8002376:	0002      	movs	r2, r0
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e02c      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	049b      	lsls	r3, r3, #18
 800238c:	4013      	ands	r3, r2
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x5ae>
 8002390:	e024      	b.n	80023dc <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e01f      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80023a4:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	025b      	lsls	r3, r3, #9
 80023b0:	401a      	ands	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d10e      	bne.n	80023d8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	220f      	movs	r2, #15
 80023be:	401a      	ands	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	23f0      	movs	r3, #240	; 0xf0
 80023cc:	039b      	lsls	r3, r3, #14
 80023ce:	401a      	ands	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	0018      	movs	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b008      	add	sp, #32
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	40021000 	.word	0x40021000
 80023ec:	00001388 	.word	0x00001388
 80023f0:	efffffff 	.word	0xefffffff
 80023f4:	feffffff 	.word	0xfeffffff
 80023f8:	ffc2ffff 	.word	0xffc2ffff

080023fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0b3      	b.n	8002578 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002410:	4b5b      	ldr	r3, [pc, #364]	; (8002580 <HAL_RCC_ClockConfig+0x184>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2201      	movs	r2, #1
 8002416:	4013      	ands	r3, r2
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d911      	bls.n	8002442 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b58      	ldr	r3, [pc, #352]	; (8002580 <HAL_RCC_ClockConfig+0x184>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2201      	movs	r2, #1
 8002424:	4393      	bics	r3, r2
 8002426:	0019      	movs	r1, r3
 8002428:	4b55      	ldr	r3, [pc, #340]	; (8002580 <HAL_RCC_ClockConfig+0x184>)
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002430:	4b53      	ldr	r3, [pc, #332]	; (8002580 <HAL_RCC_ClockConfig+0x184>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2201      	movs	r2, #1
 8002436:	4013      	ands	r3, r2
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d001      	beq.n	8002442 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e09a      	b.n	8002578 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2202      	movs	r2, #2
 8002448:	4013      	ands	r3, r2
 800244a:	d015      	beq.n	8002478 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2204      	movs	r2, #4
 8002452:	4013      	ands	r3, r2
 8002454:	d006      	beq.n	8002464 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002456:	4b4b      	ldr	r3, [pc, #300]	; (8002584 <HAL_RCC_ClockConfig+0x188>)
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <HAL_RCC_ClockConfig+0x188>)
 800245c:	21e0      	movs	r1, #224	; 0xe0
 800245e:	00c9      	lsls	r1, r1, #3
 8002460:	430a      	orrs	r2, r1
 8002462:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b47      	ldr	r3, [pc, #284]	; (8002584 <HAL_RCC_ClockConfig+0x188>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	22f0      	movs	r2, #240	; 0xf0
 800246a:	4393      	bics	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	4b44      	ldr	r3, [pc, #272]	; (8002584 <HAL_RCC_ClockConfig+0x188>)
 8002474:	430a      	orrs	r2, r1
 8002476:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2201      	movs	r2, #1
 800247e:	4013      	ands	r3, r2
 8002480:	d040      	beq.n	8002504 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b3e      	ldr	r3, [pc, #248]	; (8002584 <HAL_RCC_ClockConfig+0x188>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	029b      	lsls	r3, r3, #10
 8002492:	4013      	ands	r3, r2
 8002494:	d114      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e06e      	b.n	8002578 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <HAL_RCC_ClockConfig+0x188>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	049b      	lsls	r3, r3, #18
 80024aa:	4013      	ands	r3, r2
 80024ac:	d108      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e062      	b.n	8002578 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b2:	4b34      	ldr	r3, [pc, #208]	; (8002584 <HAL_RCC_ClockConfig+0x188>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e05b      	b.n	8002578 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c0:	4b30      	ldr	r3, [pc, #192]	; (8002584 <HAL_RCC_ClockConfig+0x188>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2203      	movs	r2, #3
 80024c6:	4393      	bics	r3, r2
 80024c8:	0019      	movs	r1, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <HAL_RCC_ClockConfig+0x188>)
 80024d0:	430a      	orrs	r2, r1
 80024d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d4:	f7ff f99c 	bl	8001810 <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024dc:	e009      	b.n	80024f2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024de:	f7ff f997 	bl	8001810 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	4a27      	ldr	r2, [pc, #156]	; (8002588 <HAL_RCC_ClockConfig+0x18c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e042      	b.n	8002578 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_ClockConfig+0x188>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	220c      	movs	r2, #12
 80024f8:	401a      	ands	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d1ec      	bne.n	80024de <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002504:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <HAL_RCC_ClockConfig+0x184>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	4013      	ands	r3, r2
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d211      	bcs.n	8002536 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_RCC_ClockConfig+0x184>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2201      	movs	r2, #1
 8002518:	4393      	bics	r3, r2
 800251a:	0019      	movs	r1, r3
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_RCC_ClockConfig+0x184>)
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002524:	4b16      	ldr	r3, [pc, #88]	; (8002580 <HAL_RCC_ClockConfig+0x184>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2201      	movs	r2, #1
 800252a:	4013      	ands	r3, r2
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d001      	beq.n	8002536 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e020      	b.n	8002578 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2204      	movs	r2, #4
 800253c:	4013      	ands	r3, r2
 800253e:	d009      	beq.n	8002554 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_RCC_ClockConfig+0x188>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4a11      	ldr	r2, [pc, #68]	; (800258c <HAL_RCC_ClockConfig+0x190>)
 8002546:	4013      	ands	r3, r2
 8002548:	0019      	movs	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <HAL_RCC_ClockConfig+0x188>)
 8002550:	430a      	orrs	r2, r1
 8002552:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002554:	f000 f820 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8002558:	0001      	movs	r1, r0
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCC_ClockConfig+0x188>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	220f      	movs	r2, #15
 8002562:	4013      	ands	r3, r2
 8002564:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <HAL_RCC_ClockConfig+0x194>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	000a      	movs	r2, r1
 800256a:	40da      	lsrs	r2, r3
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_RCC_ClockConfig+0x198>)
 800256e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002570:	2000      	movs	r0, #0
 8002572:	f7ff f907 	bl	8001784 <HAL_InitTick>
  
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b004      	add	sp, #16
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40022000 	.word	0x40022000
 8002584:	40021000 	.word	0x40021000
 8002588:	00001388 	.word	0x00001388
 800258c:	fffff8ff 	.word	0xfffff8ff
 8002590:	08005070 	.word	0x08005070
 8002594:	20000008 	.word	0x20000008

08002598 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b08f      	sub	sp, #60	; 0x3c
 800259c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800259e:	2314      	movs	r3, #20
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	4a2b      	ldr	r2, [pc, #172]	; (8002650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025a6:	c313      	stmia	r3!, {r0, r1, r4}
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	4a29      	ldr	r2, [pc, #164]	; (8002654 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025b2:	c313      	stmia	r3!, {r0, r1, r4}
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025bc:	2300      	movs	r3, #0
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c0:	2300      	movs	r3, #0
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80025cc:	4b22      	ldr	r3, [pc, #136]	; (8002658 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	220c      	movs	r2, #12
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d002      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x4a>
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d003      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x50>
 80025e0:	e02d      	b.n	800263e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e2:	4b1e      	ldr	r3, [pc, #120]	; (800265c <HAL_RCC_GetSysClockFreq+0xc4>)
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025e6:	e02d      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ea:	0c9b      	lsrs	r3, r3, #18
 80025ec:	220f      	movs	r2, #15
 80025ee:	4013      	ands	r3, r2
 80025f0:	2214      	movs	r2, #20
 80025f2:	18ba      	adds	r2, r7, r2
 80025f4:	5cd3      	ldrb	r3, [r2, r3]
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025f8:	4b17      	ldr	r3, [pc, #92]	; (8002658 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	220f      	movs	r2, #15
 80025fe:	4013      	ands	r3, r2
 8002600:	1d3a      	adds	r2, r7, #4
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	025b      	lsls	r3, r3, #9
 800260c:	4013      	ands	r3, r2
 800260e:	d009      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002612:	4812      	ldr	r0, [pc, #72]	; (800265c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002614:	f7fd fd78 	bl	8000108 <__udivsi3>
 8002618:	0003      	movs	r3, r0
 800261a:	001a      	movs	r2, r3
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	4353      	muls	r3, r2
 8002620:	637b      	str	r3, [r7, #52]	; 0x34
 8002622:	e009      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002626:	000a      	movs	r2, r1
 8002628:	0152      	lsls	r2, r2, #5
 800262a:	1a52      	subs	r2, r2, r1
 800262c:	0193      	lsls	r3, r2, #6
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	185b      	adds	r3, r3, r1
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800263c:	e002      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002642:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002646:	0018      	movs	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	b00f      	add	sp, #60	; 0x3c
 800264c:	bd90      	pop	{r4, r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	08005050 	.word	0x08005050
 8002654:	08005060 	.word	0x08005060
 8002658:	40021000 	.word	0x40021000
 800265c:	007a1200 	.word	0x007a1200

08002660 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e08a      	b.n	8002788 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	225d      	movs	r2, #93	; 0x5d
 800267c:	5c9b      	ldrb	r3, [r3, r2]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	225c      	movs	r2, #92	; 0x5c
 8002688:	2100      	movs	r1, #0
 800268a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	0018      	movs	r0, r3
 8002690:	f7fe fb54 	bl	8000d3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	225d      	movs	r2, #93	; 0x5d
 8002698:	2102      	movs	r1, #2
 800269a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2140      	movs	r1, #64	; 0x40
 80026a8:	438a      	bics	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	23e0      	movs	r3, #224	; 0xe0
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d902      	bls.n	80026be <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e002      	b.n	80026c4 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	015b      	lsls	r3, r3, #5
 80026c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	23f0      	movs	r3, #240	; 0xf0
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d008      	beq.n	80026e2 <HAL_SPI_Init+0x82>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	23e0      	movs	r3, #224	; 0xe0
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	429a      	cmp	r2, r3
 80026da:	d002      	beq.n	80026e2 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	23e0      	movs	r3, #224	; 0xe0
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d903      	bls.n	80026fe <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2202      	movs	r2, #2
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
 80026fc:	e002      	b.n	8002704 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6999      	ldr	r1, [r3, #24]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	400b      	ands	r3, r1
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	431a      	orrs	r2, r3
 8002732:	0011      	movs	r1, r2
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	2204      	movs	r2, #4
 8002748:	401a      	ands	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	431a      	orrs	r2, r3
 800275c:	0011      	movs	r1, r2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	430a      	orrs	r2, r1
 8002766:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4907      	ldr	r1, [pc, #28]	; (8002790 <HAL_SPI_Init+0x130>)
 8002774:	400a      	ands	r2, r1
 8002776:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	225d      	movs	r2, #93	; 0x5d
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b004      	add	sp, #16
 800278e:	bd80      	pop	{r7, pc}
 8002790:	fffff7ff 	.word	0xfffff7ff

08002794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e01e      	b.n	80027e4 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	223d      	movs	r2, #61	; 0x3d
 80027aa:	5c9b      	ldrb	r3, [r3, r2]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d107      	bne.n	80027c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	223c      	movs	r2, #60	; 0x3c
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f7fe fea1 	bl	8001504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	223d      	movs	r2, #61	; 0x3d
 80027c6:	2102      	movs	r1, #2
 80027c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	0019      	movs	r1, r3
 80027d4:	0010      	movs	r0, r2
 80027d6:	f000 fbd1 	bl	8002f7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	223d      	movs	r2, #61	; 0x3d
 80027de:	2101      	movs	r1, #1
 80027e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b002      	add	sp, #8
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	223d      	movs	r2, #61	; 0x3d
 80027f8:	2102      	movs	r1, #2
 80027fa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2207      	movs	r2, #7
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b06      	cmp	r3, #6
 800280c:	d007      	beq.n	800281e <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	223d      	movs	r2, #61	; 0x3d
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	b004      	add	sp, #16
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2101      	movs	r1, #1
 8002844:	430a      	orrs	r2, r1
 8002846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2207      	movs	r2, #7
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b06      	cmp	r3, #6
 8002858:	d007      	beq.n	800286a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2101      	movs	r1, #1
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	0018      	movs	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	b004      	add	sp, #16
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2101      	movs	r1, #1
 8002888:	438a      	bics	r2, r1
 800288a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <HAL_TIM_Base_Stop_IT+0x4c>)
 8002894:	4013      	ands	r3, r2
 8002896:	d10d      	bne.n	80028b4 <HAL_TIM_Base_Stop_IT+0x40>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <HAL_TIM_Base_Stop_IT+0x50>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	d107      	bne.n	80028b4 <HAL_TIM_Base_Stop_IT+0x40>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2101      	movs	r1, #1
 80028b0:	438a      	bics	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b002      	add	sp, #8
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	00001111 	.word	0x00001111
 80028c4:	00000444 	.word	0x00000444

080028c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e01e      	b.n	8002918 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	223d      	movs	r2, #61	; 0x3d
 80028de:	5c9b      	ldrb	r3, [r3, r2]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d107      	bne.n	80028f6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	223c      	movs	r2, #60	; 0x3c
 80028ea:	2100      	movs	r1, #0
 80028ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7fe fd59 	bl	80013a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	223d      	movs	r2, #61	; 0x3d
 80028fa:	2102      	movs	r1, #2
 80028fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3304      	adds	r3, #4
 8002906:	0019      	movs	r1, r3
 8002908:	0010      	movs	r0, r2
 800290a:	f000 fb37 	bl	8002f7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	223d      	movs	r2, #61	; 0x3d
 8002912:	2101      	movs	r1, #1
 8002914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b002      	add	sp, #8
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6839      	ldr	r1, [r7, #0]
 8002930:	2201      	movs	r2, #1
 8002932:	0018      	movs	r0, r3
 8002934:	f000 fd9e 	bl	8003474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1a      	ldr	r2, [pc, #104]	; (80029a8 <HAL_TIM_PWM_Start+0x88>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00e      	beq.n	8002960 <HAL_TIM_PWM_Start+0x40>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a19      	ldr	r2, [pc, #100]	; (80029ac <HAL_TIM_PWM_Start+0x8c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_TIM_PWM_Start+0x40>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a17      	ldr	r2, [pc, #92]	; (80029b0 <HAL_TIM_PWM_Start+0x90>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_TIM_PWM_Start+0x40>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a16      	ldr	r2, [pc, #88]	; (80029b4 <HAL_TIM_PWM_Start+0x94>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_TIM_PWM_Start+0x44>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_TIM_PWM_Start+0x46>
 8002964:	2300      	movs	r3, #0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2180      	movs	r1, #128	; 0x80
 8002976:	0209      	lsls	r1, r1, #8
 8002978:	430a      	orrs	r2, r1
 800297a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2207      	movs	r2, #7
 8002984:	4013      	ands	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b06      	cmp	r3, #6
 800298c:	d007      	beq.n	800299e <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2101      	movs	r1, #1
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b004      	add	sp, #16
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40014000 	.word	0x40014000
 80029b0:	40014400 	.word	0x40014400
 80029b4:	40014800 	.word	0x40014800

080029b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e07c      	b.n	8002ac6 <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	223d      	movs	r2, #61	; 0x3d
 80029d0:	5c9b      	ldrb	r3, [r3, r2]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d107      	bne.n	80029e8 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	223c      	movs	r2, #60	; 0x3c
 80029dc:	2100      	movs	r1, #0
 80029de:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7fe fd14 	bl	8001410 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	223d      	movs	r2, #61	; 0x3d
 80029ec:	2102      	movs	r1, #2
 80029ee:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4935      	ldr	r1, [pc, #212]	; (8002ad0 <HAL_TIM_Encoder_Init+0x118>)
 80029fc:	400a      	ands	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	0019      	movs	r1, r3
 8002a0a:	0010      	movs	r0, r2
 8002a0c:	f000 fab6 	bl	8002f7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4a27      	ldr	r2, [pc, #156]	; (8002ad4 <HAL_TIM_Encoder_Init+0x11c>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	4313      	orrs	r3, r2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <HAL_TIM_Encoder_Init+0x120>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4a21      	ldr	r2, [pc, #132]	; (8002adc <HAL_TIM_Encoder_Init+0x124>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	4313      	orrs	r3, r2
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	011a      	lsls	r2, r3, #4
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	031b      	lsls	r3, r3, #12
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2222      	movs	r2, #34	; 0x22
 8002a86:	4393      	bics	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2288      	movs	r2, #136	; 0x88
 8002a8e:	4393      	bics	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	223d      	movs	r2, #61	; 0x3d
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b006      	add	sp, #24
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	ffffbff8 	.word	0xffffbff8
 8002ad4:	fffffcfc 	.word	0xfffffcfc
 8002ad8:	fffff3f3 	.word	0xfffff3f3
 8002adc:	ffff0f0f 	.word	0xffff0f0f

08002ae0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_TIM_Encoder_Start_IT+0x16>
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d010      	beq.n	8002b16 <HAL_TIM_Encoder_Start_IT+0x36>
 8002af4:	e01f      	b.n	8002b36 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2201      	movs	r2, #1
 8002afc:	2100      	movs	r1, #0
 8002afe:	0018      	movs	r0, r3
 8002b00:	f000 fcb8 	bl	8003474 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2102      	movs	r1, #2
 8002b10:	430a      	orrs	r2, r1
 8002b12:	60da      	str	r2, [r3, #12]
      break;
 8002b14:	e02e      	b.n	8002b74 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	2104      	movs	r1, #4
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f000 fca8 	bl	8003474 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2104      	movs	r1, #4
 8002b30:	430a      	orrs	r2, r1
 8002b32:	60da      	str	r2, [r3, #12]
      break;
 8002b34:	e01e      	b.n	8002b74 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 fc98 	bl	8003474 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	2104      	movs	r1, #4
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 fc91 	bl	8003474 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2104      	movs	r1, #4
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	60da      	str	r2, [r3, #12]
      break;
 8002b72:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2101      	movs	r1, #1
 8002b80:	430a      	orrs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b002      	add	sp, #8
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d124      	bne.n	8002bee <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2202      	movs	r2, #2
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d11d      	bne.n	8002bee <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	4252      	negs	r2, r2
 8002bba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	2203      	movs	r2, #3
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 f9bb 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002bd6:	e007      	b.n	8002be8 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 f9ae 	bl	8002f3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 f9ba 	bl	8002f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d125      	bne.n	8002c48 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2204      	movs	r2, #4
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d11e      	bne.n	8002c48 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2205      	movs	r2, #5
 8002c10:	4252      	negs	r2, r2
 8002c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	23c0      	movs	r3, #192	; 0xc0
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4013      	ands	r3, r2
 8002c26:	d004      	beq.n	8002c32 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f000 f98e 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002c30:	e007      	b.n	8002c42 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f000 f981 	bl	8002f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 f98d 	bl	8002f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	2208      	movs	r2, #8
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d124      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d11d      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2209      	movs	r2, #9
 8002c6a:	4252      	negs	r2, r2
 8002c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2204      	movs	r2, #4
 8002c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f000 f962 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002c88:	e007      	b.n	8002c9a <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f000 f955 	bl	8002f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	0018      	movs	r0, r3
 8002c96:	f000 f961 	bl	8002f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d125      	bne.n	8002cfa <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d11e      	bne.n	8002cfa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2211      	movs	r2, #17
 8002cc2:	4252      	negs	r2, r2
 8002cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2208      	movs	r2, #8
 8002cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69da      	ldr	r2, [r3, #28]
 8002cd2:	23c0      	movs	r3, #192	; 0xc0
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f000 f935 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002ce2:	e007      	b.n	8002cf4 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 f928 	bl	8002f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f000 f934 	bl	8002f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2201      	movs	r2, #1
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d10f      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d108      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	4252      	negs	r2, r2
 8002d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	0018      	movs	r0, r3
 8002d24:	f000 f902 	bl	8002f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2280      	movs	r2, #128	; 0x80
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b80      	cmp	r3, #128	; 0x80
 8002d34:	d10f      	bne.n	8002d56 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2280      	movs	r2, #128	; 0x80
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d108      	bne.n	8002d56 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2281      	movs	r2, #129	; 0x81
 8002d4a:	4252      	negs	r2, r2
 8002d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 fc77 	bl	8003644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2240      	movs	r2, #64	; 0x40
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b40      	cmp	r3, #64	; 0x40
 8002d62:	d10f      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2240      	movs	r2, #64	; 0x40
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b40      	cmp	r3, #64	; 0x40
 8002d70:	d108      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2241      	movs	r2, #65	; 0x41
 8002d78:	4252      	negs	r2, r2
 8002d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 f8f4 	bl	8002f6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	d10f      	bne.n	8002db2 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d108      	bne.n	8002db2 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2221      	movs	r2, #33	; 0x21
 8002da6:	4252      	negs	r2, r2
 8002da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 fc41 	bl	8003634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b002      	add	sp, #8
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	223c      	movs	r2, #60	; 0x3c
 8002dcc:	5c9b      	ldrb	r3, [r3, r2]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e0a4      	b.n	8002f20 <HAL_TIM_PWM_ConfigChannel+0x164>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	223c      	movs	r2, #60	; 0x3c
 8002dda:	2101      	movs	r1, #1
 8002ddc:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	223d      	movs	r2, #61	; 0x3d
 8002de2:	2102      	movs	r1, #2
 8002de4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d029      	beq.n	8002e40 <HAL_TIM_PWM_ConfigChannel+0x84>
 8002dec:	d802      	bhi.n	8002df4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002df2:	e08c      	b.n	8002f0e <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d046      	beq.n	8002e86 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002df8:	2b0c      	cmp	r3, #12
 8002dfa:	d065      	beq.n	8002ec8 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002dfc:	e087      	b.n	8002f0e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	0011      	movs	r1, r2
 8002e06:	0018      	movs	r0, r3
 8002e08:	f000 f938 	bl	800307c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2108      	movs	r1, #8
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2104      	movs	r1, #4
 8002e28:	438a      	bics	r2, r1
 8002e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6999      	ldr	r1, [r3, #24]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	619a      	str	r2, [r3, #24]
      break;
 8002e3e:	e066      	b.n	8002f0e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	0011      	movs	r1, r2
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f000 f99f 	bl	800318c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	0109      	lsls	r1, r1, #4
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	492f      	ldr	r1, [pc, #188]	; (8002f28 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6999      	ldr	r1, [r3, #24]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	021a      	lsls	r2, r3, #8
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	619a      	str	r2, [r3, #24]
      break;
 8002e84:	e043      	b.n	8002f0e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	0011      	movs	r1, r2
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 fa00 	bl	8003294 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2108      	movs	r1, #8
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2104      	movs	r1, #4
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69d9      	ldr	r1, [r3, #28]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	61da      	str	r2, [r3, #28]
      break;
 8002ec6:	e022      	b.n	8002f0e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	0011      	movs	r1, r2
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f000 fa65 	bl	80033a0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	0109      	lsls	r1, r1, #4
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69da      	ldr	r2, [r3, #28]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	490d      	ldr	r1, [pc, #52]	; (8002f28 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69d9      	ldr	r1, [r3, #28]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	021a      	lsls	r2, r3, #8
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	61da      	str	r2, [r3, #28]
      break;
 8002f0c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	223d      	movs	r2, #61	; 0x3d
 8002f12:	2101      	movs	r1, #1
 8002f14:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	223c      	movs	r2, #60	; 0x3c
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b004      	add	sp, #16
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	fffffbff 	.word	0xfffffbff

08002f2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b002      	add	sp, #8
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b002      	add	sp, #8
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a34      	ldr	r2, [pc, #208]	; (8003060 <TIM_Base_SetConfig+0xe4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d008      	beq.n	8002fa6 <TIM_Base_SetConfig+0x2a>
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	05db      	lsls	r3, r3, #23
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d003      	beq.n	8002fa6 <TIM_Base_SetConfig+0x2a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a30      	ldr	r2, [pc, #192]	; (8003064 <TIM_Base_SetConfig+0xe8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d108      	bne.n	8002fb8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2270      	movs	r2, #112	; 0x70
 8002faa:	4393      	bics	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a29      	ldr	r2, [pc, #164]	; (8003060 <TIM_Base_SetConfig+0xe4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d018      	beq.n	8002ff2 <TIM_Base_SetConfig+0x76>
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	05db      	lsls	r3, r3, #23
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d013      	beq.n	8002ff2 <TIM_Base_SetConfig+0x76>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a25      	ldr	r2, [pc, #148]	; (8003064 <TIM_Base_SetConfig+0xe8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00f      	beq.n	8002ff2 <TIM_Base_SetConfig+0x76>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a24      	ldr	r2, [pc, #144]	; (8003068 <TIM_Base_SetConfig+0xec>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00b      	beq.n	8002ff2 <TIM_Base_SetConfig+0x76>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a23      	ldr	r2, [pc, #140]	; (800306c <TIM_Base_SetConfig+0xf0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d007      	beq.n	8002ff2 <TIM_Base_SetConfig+0x76>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a22      	ldr	r2, [pc, #136]	; (8003070 <TIM_Base_SetConfig+0xf4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <TIM_Base_SetConfig+0x76>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a21      	ldr	r2, [pc, #132]	; (8003074 <TIM_Base_SetConfig+0xf8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d108      	bne.n	8003004 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4a20      	ldr	r2, [pc, #128]	; (8003078 <TIM_Base_SetConfig+0xfc>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2280      	movs	r2, #128	; 0x80
 8003008:	4393      	bics	r3, r2
 800300a:	001a      	movs	r2, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a0c      	ldr	r2, [pc, #48]	; (8003060 <TIM_Base_SetConfig+0xe4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00b      	beq.n	800304a <TIM_Base_SetConfig+0xce>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a0d      	ldr	r2, [pc, #52]	; (800306c <TIM_Base_SetConfig+0xf0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d007      	beq.n	800304a <TIM_Base_SetConfig+0xce>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <TIM_Base_SetConfig+0xf4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d003      	beq.n	800304a <TIM_Base_SetConfig+0xce>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <TIM_Base_SetConfig+0xf8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d103      	bne.n	8003052 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	615a      	str	r2, [r3, #20]
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b004      	add	sp, #16
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40012c00 	.word	0x40012c00
 8003064:	40000400 	.word	0x40000400
 8003068:	40002000 	.word	0x40002000
 800306c:	40014000 	.word	0x40014000
 8003070:	40014400 	.word	0x40014400
 8003074:	40014800 	.word	0x40014800
 8003078:	fffffcff 	.word	0xfffffcff

0800307c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	2201      	movs	r2, #1
 800308c:	4393      	bics	r3, r2
 800308e:	001a      	movs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2270      	movs	r2, #112	; 0x70
 80030aa:	4393      	bics	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2203      	movs	r2, #3
 80030b2:	4393      	bics	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2202      	movs	r2, #2
 80030c4:	4393      	bics	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a27      	ldr	r2, [pc, #156]	; (8003174 <TIM_OC1_SetConfig+0xf8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00b      	beq.n	80030f2 <TIM_OC1_SetConfig+0x76>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a26      	ldr	r2, [pc, #152]	; (8003178 <TIM_OC1_SetConfig+0xfc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <TIM_OC1_SetConfig+0x76>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a25      	ldr	r2, [pc, #148]	; (800317c <TIM_OC1_SetConfig+0x100>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d003      	beq.n	80030f2 <TIM_OC1_SetConfig+0x76>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a24      	ldr	r2, [pc, #144]	; (8003180 <TIM_OC1_SetConfig+0x104>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10c      	bne.n	800310c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2208      	movs	r2, #8
 80030f6:	4393      	bics	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2204      	movs	r2, #4
 8003108:	4393      	bics	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a19      	ldr	r2, [pc, #100]	; (8003174 <TIM_OC1_SetConfig+0xf8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00b      	beq.n	800312c <TIM_OC1_SetConfig+0xb0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a18      	ldr	r2, [pc, #96]	; (8003178 <TIM_OC1_SetConfig+0xfc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d007      	beq.n	800312c <TIM_OC1_SetConfig+0xb0>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a17      	ldr	r2, [pc, #92]	; (800317c <TIM_OC1_SetConfig+0x100>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d003      	beq.n	800312c <TIM_OC1_SetConfig+0xb0>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a16      	ldr	r2, [pc, #88]	; (8003180 <TIM_OC1_SetConfig+0x104>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d111      	bne.n	8003150 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4a15      	ldr	r2, [pc, #84]	; (8003184 <TIM_OC1_SetConfig+0x108>)
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4a14      	ldr	r2, [pc, #80]	; (8003188 <TIM_OC1_SetConfig+0x10c>)
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	621a      	str	r2, [r3, #32]
}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	46bd      	mov	sp, r7
 800316e:	b006      	add	sp, #24
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40014000 	.word	0x40014000
 800317c:	40014400 	.word	0x40014400
 8003180:	40014800 	.word	0x40014800
 8003184:	fffffeff 	.word	0xfffffeff
 8003188:	fffffdff 	.word	0xfffffdff

0800318c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	2210      	movs	r2, #16
 800319c:	4393      	bics	r3, r2
 800319e:	001a      	movs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4a2e      	ldr	r2, [pc, #184]	; (8003274 <TIM_OC2_SetConfig+0xe8>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4a2d      	ldr	r2, [pc, #180]	; (8003278 <TIM_OC2_SetConfig+0xec>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2220      	movs	r2, #32
 80031d6:	4393      	bics	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a24      	ldr	r2, [pc, #144]	; (800327c <TIM_OC2_SetConfig+0xf0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d10d      	bne.n	800320a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	4393      	bics	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2240      	movs	r2, #64	; 0x40
 8003206:	4393      	bics	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a1b      	ldr	r2, [pc, #108]	; (800327c <TIM_OC2_SetConfig+0xf0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00b      	beq.n	800322a <TIM_OC2_SetConfig+0x9e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <TIM_OC2_SetConfig+0xf4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d007      	beq.n	800322a <TIM_OC2_SetConfig+0x9e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a19      	ldr	r2, [pc, #100]	; (8003284 <TIM_OC2_SetConfig+0xf8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_OC2_SetConfig+0x9e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a18      	ldr	r2, [pc, #96]	; (8003288 <TIM_OC2_SetConfig+0xfc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d113      	bne.n	8003252 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4a17      	ldr	r2, [pc, #92]	; (800328c <TIM_OC2_SetConfig+0x100>)
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4a16      	ldr	r2, [pc, #88]	; (8003290 <TIM_OC2_SetConfig+0x104>)
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	621a      	str	r2, [r3, #32]
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b006      	add	sp, #24
 8003272:	bd80      	pop	{r7, pc}
 8003274:	ffff8fff 	.word	0xffff8fff
 8003278:	fffffcff 	.word	0xfffffcff
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40014000 	.word	0x40014000
 8003284:	40014400 	.word	0x40014400
 8003288:	40014800 	.word	0x40014800
 800328c:	fffffbff 	.word	0xfffffbff
 8003290:	fffff7ff 	.word	0xfffff7ff

08003294 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	4a35      	ldr	r2, [pc, #212]	; (8003378 <TIM_OC3_SetConfig+0xe4>)
 80032a4:	401a      	ands	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2270      	movs	r2, #112	; 0x70
 80032c0:	4393      	bics	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2203      	movs	r2, #3
 80032c8:	4393      	bics	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	4a28      	ldr	r2, [pc, #160]	; (800337c <TIM_OC3_SetConfig+0xe8>)
 80032da:	4013      	ands	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a24      	ldr	r2, [pc, #144]	; (8003380 <TIM_OC3_SetConfig+0xec>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d10d      	bne.n	800330e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	4a23      	ldr	r2, [pc, #140]	; (8003384 <TIM_OC3_SetConfig+0xf0>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <TIM_OC3_SetConfig+0xf4>)
 800330a:	4013      	ands	r3, r2
 800330c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <TIM_OC3_SetConfig+0xec>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00b      	beq.n	800332e <TIM_OC3_SetConfig+0x9a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1c      	ldr	r2, [pc, #112]	; (800338c <TIM_OC3_SetConfig+0xf8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <TIM_OC3_SetConfig+0x9a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a1b      	ldr	r2, [pc, #108]	; (8003390 <TIM_OC3_SetConfig+0xfc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <TIM_OC3_SetConfig+0x9a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a1a      	ldr	r2, [pc, #104]	; (8003394 <TIM_OC3_SetConfig+0x100>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d113      	bne.n	8003356 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4a19      	ldr	r2, [pc, #100]	; (8003398 <TIM_OC3_SetConfig+0x104>)
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4a18      	ldr	r2, [pc, #96]	; (800339c <TIM_OC3_SetConfig+0x108>)
 800333a:	4013      	ands	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	621a      	str	r2, [r3, #32]
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	b006      	add	sp, #24
 8003376:	bd80      	pop	{r7, pc}
 8003378:	fffffeff 	.word	0xfffffeff
 800337c:	fffffdff 	.word	0xfffffdff
 8003380:	40012c00 	.word	0x40012c00
 8003384:	fffff7ff 	.word	0xfffff7ff
 8003388:	fffffbff 	.word	0xfffffbff
 800338c:	40014000 	.word	0x40014000
 8003390:	40014400 	.word	0x40014400
 8003394:	40014800 	.word	0x40014800
 8003398:	ffffefff 	.word	0xffffefff
 800339c:	ffffdfff 	.word	0xffffdfff

080033a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4a28      	ldr	r2, [pc, #160]	; (8003450 <TIM_OC4_SetConfig+0xb0>)
 80033b0:	401a      	ands	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a22      	ldr	r2, [pc, #136]	; (8003454 <TIM_OC4_SetConfig+0xb4>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a21      	ldr	r2, [pc, #132]	; (8003458 <TIM_OC4_SetConfig+0xb8>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	021b      	lsls	r3, r3, #8
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4a1d      	ldr	r2, [pc, #116]	; (800345c <TIM_OC4_SetConfig+0xbc>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	031b      	lsls	r3, r3, #12
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a19      	ldr	r2, [pc, #100]	; (8003460 <TIM_OC4_SetConfig+0xc0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00b      	beq.n	8003418 <TIM_OC4_SetConfig+0x78>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a18      	ldr	r2, [pc, #96]	; (8003464 <TIM_OC4_SetConfig+0xc4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d007      	beq.n	8003418 <TIM_OC4_SetConfig+0x78>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a17      	ldr	r2, [pc, #92]	; (8003468 <TIM_OC4_SetConfig+0xc8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <TIM_OC4_SetConfig+0x78>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a16      	ldr	r2, [pc, #88]	; (800346c <TIM_OC4_SetConfig+0xcc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d109      	bne.n	800342c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	4a15      	ldr	r2, [pc, #84]	; (8003470 <TIM_OC4_SetConfig+0xd0>)
 800341c:	4013      	ands	r3, r2
 800341e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	019b      	lsls	r3, r3, #6
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	621a      	str	r2, [r3, #32]
}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	b006      	add	sp, #24
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	ffffefff 	.word	0xffffefff
 8003454:	ffff8fff 	.word	0xffff8fff
 8003458:	fffffcff 	.word	0xfffffcff
 800345c:	ffffdfff 	.word	0xffffdfff
 8003460:	40012c00 	.word	0x40012c00
 8003464:	40014000 	.word	0x40014000
 8003468:	40014400 	.word	0x40014400
 800346c:	40014800 	.word	0x40014800
 8003470:	ffffbfff 	.word	0xffffbfff

08003474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	221f      	movs	r2, #31
 8003484:	4013      	ands	r3, r2
 8003486:	2201      	movs	r2, #1
 8003488:	409a      	lsls	r2, r3
 800348a:	0013      	movs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	43d2      	mvns	r2, r2
 8003496:	401a      	ands	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1a      	ldr	r2, [r3, #32]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	211f      	movs	r1, #31
 80034a4:	400b      	ands	r3, r1
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4099      	lsls	r1, r3
 80034aa:	000b      	movs	r3, r1
 80034ac:	431a      	orrs	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	621a      	str	r2, [r3, #32]
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b006      	add	sp, #24
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	223c      	movs	r2, #60	; 0x3c
 80034ca:	5c9b      	ldrb	r3, [r3, r2]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e047      	b.n	8003564 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	223c      	movs	r2, #60	; 0x3c
 80034d8:	2101      	movs	r1, #1
 80034da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	223d      	movs	r2, #61	; 0x3d
 80034e0:	2102      	movs	r1, #2
 80034e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2270      	movs	r2, #112	; 0x70
 80034f8:	4393      	bics	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a16      	ldr	r2, [pc, #88]	; (800356c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00f      	beq.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	05db      	lsls	r3, r3, #23
 8003520:	429a      	cmp	r2, r3
 8003522:	d009      	beq.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a11      	ldr	r2, [pc, #68]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a10      	ldr	r2, [pc, #64]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d10c      	bne.n	8003552 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	4393      	bics	r3, r2
 800353e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	4313      	orrs	r3, r2
 8003548:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	223d      	movs	r2, #61	; 0x3d
 8003556:	2101      	movs	r1, #1
 8003558:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	223c      	movs	r2, #60	; 0x3c
 800355e:	2100      	movs	r1, #0
 8003560:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	0018      	movs	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	b004      	add	sp, #16
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40012c00 	.word	0x40012c00
 8003570:	40000400 	.word	0x40000400
 8003574:	40014000 	.word	0x40014000

08003578 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	223c      	movs	r2, #60	; 0x3c
 800358a:	5c9b      	ldrb	r3, [r3, r2]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003590:	2302      	movs	r3, #2
 8003592:	e03e      	b.n	8003612 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	223c      	movs	r2, #60	; 0x3c
 8003598:	2101      	movs	r1, #1
 800359a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	22ff      	movs	r2, #255	; 0xff
 80035a0:	4393      	bics	r3, r2
 80035a2:	001a      	movs	r2, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a1b      	ldr	r2, [pc, #108]	; (800361c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80035b0:	401a      	ands	r2, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80035be:	401a      	ands	r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4a16      	ldr	r2, [pc, #88]	; (8003624 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80035cc:	401a      	ands	r2, r3
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a13      	ldr	r2, [pc, #76]	; (8003628 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80035da:	401a      	ands	r2, r3
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a11      	ldr	r2, [pc, #68]	; (800362c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80035e8:	401a      	ands	r2, r3
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80035f6:	401a      	ands	r2, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	223c      	movs	r2, #60	; 0x3c
 800360c:	2100      	movs	r1, #0
 800360e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	0018      	movs	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	b004      	add	sp, #16
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	fffffcff 	.word	0xfffffcff
 8003620:	fffffbff 	.word	0xfffffbff
 8003624:	fffff7ff 	.word	0xfffff7ff
 8003628:	ffffefff 	.word	0xffffefff
 800362c:	ffffdfff 	.word	0xffffdfff
 8003630:	ffffbfff 	.word	0xffffbfff

08003634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b002      	add	sp, #8
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	b002      	add	sp, #8
 8003652:	bd80      	pop	{r7, pc}

08003654 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8003654:	b5b0      	push	{r4, r5, r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af02      	add	r7, sp, #8
 800365a:	0005      	movs	r5, r0
 800365c:	000c      	movs	r4, r1
 800365e:	0010      	movs	r0, r2
 8003660:	0019      	movs	r1, r3
 8003662:	1dfb      	adds	r3, r7, #7
 8003664:	1c2a      	adds	r2, r5, #0
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	1d3b      	adds	r3, r7, #4
 800366a:	1c22      	adds	r2, r4, #0
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	1cbb      	adds	r3, r7, #2
 8003670:	1c02      	adds	r2, r0, #0
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	003b      	movs	r3, r7
 8003676:	1c0a      	adds	r2, r1, #0
 8003678:	801a      	strh	r2, [r3, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800367a:	2117      	movs	r1, #23
 800367c:	187b      	adds	r3, r7, r1
 800367e:	1dfa      	adds	r2, r7, #7
 8003680:	7812      	ldrb	r2, [r2, #0]
 8003682:	701a      	strb	r2, [r3, #0]
		
    if (function_char < ' ')
 8003684:	187b      	adds	r3, r7, r1
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b1f      	cmp	r3, #31
 800368a:	d803      	bhi.n	8003694 <ILI9341_Draw_Char+0x40>
    {
        character = 0;
 800368c:	1dfb      	adds	r3, r7, #7
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e005      	b.n	80036a0 <ILI9341_Draw_Char+0x4c>
    }
    else
    {
    	function_char -= 32;
 8003694:	2217      	movs	r2, #23
 8003696:	18bb      	adds	r3, r7, r2
 8003698:	18ba      	adds	r2, r7, r2
 800369a:	7812      	ldrb	r2, [r2, #0]
 800369c:	3a20      	subs	r2, #32
 800369e:	701a      	strb	r2, [r3, #0]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80036a0:	2314      	movs	r3, #20
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	e016      	b.n	80036d8 <ILI9341_Draw_Char+0x84>
	{
		temp[k] = font[function_char][k];
 80036aa:	2317      	movs	r3, #23
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	781a      	ldrb	r2, [r3, #0]
 80036b0:	2514      	movs	r5, #20
 80036b2:	197b      	adds	r3, r7, r5
 80036b4:	7818      	ldrb	r0, [r3, #0]
 80036b6:	197b      	adds	r3, r7, r5
 80036b8:	7819      	ldrb	r1, [r3, #0]
 80036ba:	4c69      	ldr	r4, [pc, #420]	; (8003860 <ILI9341_Draw_Char+0x20c>)
 80036bc:	0013      	movs	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	189b      	adds	r3, r3, r2
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	18e3      	adds	r3, r4, r3
 80036c6:	5c1a      	ldrb	r2, [r3, r0]
 80036c8:	230c      	movs	r3, #12
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	545a      	strb	r2, [r3, r1]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80036ce:	197b      	adds	r3, r7, r5
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	197b      	adds	r3, r7, r5
 80036d4:	3201      	adds	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	2314      	movs	r3, #20
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b05      	cmp	r3, #5
 80036e0:	d9e3      	bls.n	80036aa <ILI9341_Draw_Char+0x56>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 80036e2:	2315      	movs	r3, #21
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e0ae      	b.n	800384a <ILI9341_Draw_Char+0x1f6>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 80036ec:	2316      	movs	r3, #22
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
 80036f4:	e09d      	b.n	8003832 <ILI9341_Draw_Char+0x1de>
        {
            if (temp[j] & (1<<i))
 80036f6:	2315      	movs	r3, #21
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	220c      	movs	r2, #12
 80036fe:	18ba      	adds	r2, r7, r2
 8003700:	5cd3      	ldrb	r3, [r2, r3]
 8003702:	001a      	movs	r2, r3
 8003704:	2316      	movs	r3, #22
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	411a      	asrs	r2, r3
 800370c:	0013      	movs	r3, r2
 800370e:	2201      	movs	r2, #1
 8003710:	4013      	ands	r3, r2
 8003712:	d043      	beq.n	800379c <ILI9341_Draw_Char+0x148>
            {
            	if(size == 1)
 8003714:	2328      	movs	r3, #40	; 0x28
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d115      	bne.n	800374a <ILI9341_Draw_Char+0xf6>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800371e:	2315      	movs	r3, #21
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	b29a      	uxth	r2, r3
 8003726:	1d3b      	adds	r3, r7, #4
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	18d3      	adds	r3, r2, r3
 800372c:	b298      	uxth	r0, r3
 800372e:	2316      	movs	r3, #22
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	b29a      	uxth	r2, r3
 8003736:	1cbb      	adds	r3, r7, #2
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	18d3      	adds	r3, r2, r3
 800373c:	b299      	uxth	r1, r3
 800373e:	003b      	movs	r3, r7
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	001a      	movs	r2, r3
 8003744:	f000 fb32 	bl	8003dac <ILI9341_Draw_Pixel>
 8003748:	e06d      	b.n	8003826 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800374a:	2315      	movs	r3, #21
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	b29b      	uxth	r3, r3
 8003752:	2128      	movs	r1, #40	; 0x28
 8003754:	187a      	adds	r2, r7, r1
 8003756:	8812      	ldrh	r2, [r2, #0]
 8003758:	4353      	muls	r3, r2
 800375a:	b29a      	uxth	r2, r3
 800375c:	1d3b      	adds	r3, r7, #4
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	18d3      	adds	r3, r2, r3
 8003762:	b298      	uxth	r0, r3
 8003764:	2316      	movs	r3, #22
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	b29b      	uxth	r3, r3
 800376c:	000c      	movs	r4, r1
 800376e:	187a      	adds	r2, r7, r1
 8003770:	8812      	ldrh	r2, [r2, #0]
 8003772:	4353      	muls	r3, r2
 8003774:	b29a      	uxth	r2, r3
 8003776:	1cbb      	adds	r3, r7, #2
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	18d3      	adds	r3, r2, r3
 800377c:	b299      	uxth	r1, r3
 800377e:	0022      	movs	r2, r4
 8003780:	193b      	adds	r3, r7, r4
 8003782:	881c      	ldrh	r4, [r3, #0]
 8003784:	0013      	movs	r3, r2
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	881a      	ldrh	r2, [r3, #0]
 800378a:	2301      	movs	r3, #1
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	003b      	movs	r3, r7
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	0023      	movs	r3, r4
 8003796:	f000 fcad 	bl	80040f4 <ILI9341_Draw_Rectangle>
 800379a:	e044      	b.n	8003826 <ILI9341_Draw_Char+0x1d2>
				}
            }
            else
            {
               	if(size == 1)
 800379c:	2328      	movs	r3, #40	; 0x28
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d116      	bne.n	80037d4 <ILI9341_Draw_Char+0x180>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 80037a6:	2315      	movs	r3, #21
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	1d3b      	adds	r3, r7, #4
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	18d3      	adds	r3, r2, r3
 80037b4:	b298      	uxth	r0, r3
 80037b6:	2316      	movs	r3, #22
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b29a      	uxth	r2, r3
 80037be:	1cbb      	adds	r3, r7, #2
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	18d3      	adds	r3, r2, r3
 80037c4:	b299      	uxth	r1, r3
 80037c6:	232c      	movs	r3, #44	; 0x2c
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	001a      	movs	r2, r3
 80037ce:	f000 faed 	bl	8003dac <ILI9341_Draw_Pixel>
 80037d2:	e028      	b.n	8003826 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 80037d4:	2315      	movs	r3, #21
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2128      	movs	r1, #40	; 0x28
 80037de:	187a      	adds	r2, r7, r1
 80037e0:	8812      	ldrh	r2, [r2, #0]
 80037e2:	4353      	muls	r3, r2
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	18d3      	adds	r3, r2, r3
 80037ec:	b298      	uxth	r0, r3
 80037ee:	2316      	movs	r3, #22
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	000c      	movs	r4, r1
 80037f8:	187a      	adds	r2, r7, r1
 80037fa:	8812      	ldrh	r2, [r2, #0]
 80037fc:	4353      	muls	r3, r2
 80037fe:	b29a      	uxth	r2, r3
 8003800:	1cbb      	adds	r3, r7, #2
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	18d3      	adds	r3, r2, r3
 8003806:	b299      	uxth	r1, r3
 8003808:	0022      	movs	r2, r4
 800380a:	193b      	adds	r3, r7, r4
 800380c:	881c      	ldrh	r4, [r3, #0]
 800380e:	0013      	movs	r3, r2
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	881a      	ldrh	r2, [r3, #0]
 8003814:	2301      	movs	r3, #1
 8003816:	9301      	str	r3, [sp, #4]
 8003818:	232c      	movs	r3, #44	; 0x2c
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	0023      	movs	r3, r4
 8003822:	f000 fc67 	bl	80040f4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8003826:	2116      	movs	r1, #22
 8003828:	187b      	adds	r3, r7, r1
 800382a:	781a      	ldrb	r2, [r3, #0]
 800382c:	187b      	adds	r3, r7, r1
 800382e:	3201      	adds	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	2316      	movs	r3, #22
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b07      	cmp	r3, #7
 800383a:	d800      	bhi.n	800383e <ILI9341_Draw_Char+0x1ea>
 800383c:	e75b      	b.n	80036f6 <ILI9341_Draw_Char+0xa2>
    for (j=0; j<CHAR_WIDTH; j++)
 800383e:	2115      	movs	r1, #21
 8003840:	187b      	adds	r3, r7, r1
 8003842:	781a      	ldrb	r2, [r3, #0]
 8003844:	187b      	adds	r3, r7, r1
 8003846:	3201      	adds	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	2315      	movs	r3, #21
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b05      	cmp	r3, #5
 8003852:	d800      	bhi.n	8003856 <ILI9341_Draw_Char+0x202>
 8003854:	e74a      	b.n	80036ec <ILI9341_Draw_Char+0x98>
				}
            }
        }
    }
}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	46bd      	mov	sp, r7
 800385a:	b006      	add	sp, #24
 800385c:	bdb0      	pop	{r4, r5, r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	08005080 	.word	0x08005080

08003864 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8003864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003866:	b087      	sub	sp, #28
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	000c      	movs	r4, r1
 800386e:	0010      	movs	r0, r2
 8003870:	0019      	movs	r1, r3
 8003872:	250a      	movs	r5, #10
 8003874:	197b      	adds	r3, r7, r5
 8003876:	1c22      	adds	r2, r4, #0
 8003878:	801a      	strh	r2, [r3, #0]
 800387a:	2608      	movs	r6, #8
 800387c:	19bb      	adds	r3, r7, r6
 800387e:	1c02      	adds	r2, r0, #0
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	1dbb      	adds	r3, r7, #6
 8003884:	1c0a      	adds	r2, r1, #0
 8003886:	801a      	strh	r2, [r3, #0]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 8003888:	197b      	adds	r3, r7, r5
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	3b01      	subs	r3, #1
 800388e:	b298      	uxth	r0, r3
 8003890:	2320      	movs	r3, #32
 8003892:	2208      	movs	r2, #8
 8003894:	4694      	mov	ip, r2
 8003896:	44bc      	add	ip, r7
 8003898:	4463      	add	r3, ip
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	b29a      	uxth	r2, r3
 80038a0:	2124      	movs	r1, #36	; 0x24
 80038a2:	2308      	movs	r3, #8
 80038a4:	18fc      	adds	r4, r7, r3
 80038a6:	1863      	adds	r3, r4, r1
 80038a8:	881c      	ldrh	r4, [r3, #0]
 80038aa:	19bb      	adds	r3, r7, r6
 80038ac:	8819      	ldrh	r1, [r3, #0]
 80038ae:	0023      	movs	r3, r4
 80038b0:	f000 f974 	bl	8003b9c <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 80038b4:	197b      	adds	r3, r7, r5
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	3b02      	subs	r3, #2
 80038ba:	b298      	uxth	r0, r3
 80038bc:	2320      	movs	r3, #32
 80038be:	2208      	movs	r2, #8
 80038c0:	4694      	mov	ip, r2
 80038c2:	44bc      	add	ip, r7
 80038c4:	4463      	add	r3, ip
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	2124      	movs	r1, #36	; 0x24
 80038ce:	2308      	movs	r3, #8
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	185b      	adds	r3, r3, r1
 80038d4:	881c      	ldrh	r4, [r3, #0]
 80038d6:	19bb      	adds	r3, r7, r6
 80038d8:	8819      	ldrh	r1, [r3, #0]
 80038da:	0023      	movs	r3, r4
 80038dc:	f000 f95e 	bl	8003b9c <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 80038e0:	e029      	b.n	8003936 <ILI9341_Draw_Text+0xd2>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	60fa      	str	r2, [r7, #12]
 80038e8:	7818      	ldrb	r0, [r3, #0]
 80038ea:	1dbb      	adds	r3, r7, #6
 80038ec:	881c      	ldrh	r4, [r3, #0]
 80038ee:	2308      	movs	r3, #8
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	881a      	ldrh	r2, [r3, #0]
 80038f4:	250a      	movs	r5, #10
 80038f6:	197b      	adds	r3, r7, r5
 80038f8:	8819      	ldrh	r1, [r3, #0]
 80038fa:	2324      	movs	r3, #36	; 0x24
 80038fc:	2608      	movs	r6, #8
 80038fe:	46b4      	mov	ip, r6
 8003900:	44bc      	add	ip, r7
 8003902:	4463      	add	r3, ip
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	9301      	str	r3, [sp, #4]
 8003908:	2620      	movs	r6, #32
 800390a:	2308      	movs	r3, #8
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	199b      	adds	r3, r3, r6
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	0023      	movs	r3, r4
 8003916:	f7ff fe9d 	bl	8003654 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800391a:	2308      	movs	r3, #8
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	199b      	adds	r3, r3, r6
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	1c1a      	adds	r2, r3, #0
 8003924:	1892      	adds	r2, r2, r2
 8003926:	18d3      	adds	r3, r2, r3
 8003928:	18db      	adds	r3, r3, r3
 800392a:	b299      	uxth	r1, r3
 800392c:	197b      	adds	r3, r7, r5
 800392e:	197a      	adds	r2, r7, r5
 8003930:	8812      	ldrh	r2, [r2, #0]
 8003932:	188a      	adds	r2, r1, r2
 8003934:	801a      	strh	r2, [r3, #0]
    while (*Text) {
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1d1      	bne.n	80038e2 <ILI9341_Draw_Text+0x7e>
    }


}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	46bd      	mov	sp, r7
 8003942:	b005      	add	sp, #20
 8003944:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003946 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800394a:	f000 fcf1 	bl	8004330 <_LCD_Enable>
	ILI9341_SPI_Init();
 800394e:	f000 f909 	bl	8003b64 <ILI9341_SPI_Init>
	_LCD_Reset();
 8003952:	f000 fcfb 	bl	800434c <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 8003956:	2001      	movs	r0, #1
 8003958:	f000 fdfe 	bl	8004558 <_LCD_SendCommand>
	HAL_Delay(2000);
 800395c:	23fa      	movs	r3, #250	; 0xfa
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	0018      	movs	r0, r3
 8003962:	f7fd ff5f 	bl	8001824 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 8003966:	20cb      	movs	r0, #203	; 0xcb
 8003968:	f000 fdf6 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800396c:	2039      	movs	r0, #57	; 0x39
 800396e:	f000 fe2d 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x2C);
 8003972:	202c      	movs	r0, #44	; 0x2c
 8003974:	f000 fe2a 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x00);
 8003978:	2000      	movs	r0, #0
 800397a:	f000 fe27 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x34);
 800397e:	2034      	movs	r0, #52	; 0x34
 8003980:	f000 fe24 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x02);
 8003984:	2002      	movs	r0, #2
 8003986:	f000 fe21 	bl	80045cc <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800398a:	20cf      	movs	r0, #207	; 0xcf
 800398c:	f000 fde4 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8003990:	2000      	movs	r0, #0
 8003992:	f000 fe1b 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0xC1);
 8003996:	20c1      	movs	r0, #193	; 0xc1
 8003998:	f000 fe18 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x30);
 800399c:	2030      	movs	r0, #48	; 0x30
 800399e:	f000 fe15 	bl	80045cc <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 80039a2:	20e8      	movs	r0, #232	; 0xe8
 80039a4:	f000 fdd8 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 80039a8:	2085      	movs	r0, #133	; 0x85
 80039aa:	f000 fe0f 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x00);
 80039ae:	2000      	movs	r0, #0
 80039b0:	f000 fe0c 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x78);
 80039b4:	2078      	movs	r0, #120	; 0x78
 80039b6:	f000 fe09 	bl	80045cc <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 80039ba:	20ea      	movs	r0, #234	; 0xea
 80039bc:	f000 fdcc 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80039c0:	2000      	movs	r0, #0
 80039c2:	f000 fe03 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x00);
 80039c6:	2000      	movs	r0, #0
 80039c8:	f000 fe00 	bl	80045cc <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 80039cc:	20ed      	movs	r0, #237	; 0xed
 80039ce:	f000 fdc3 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 80039d2:	2064      	movs	r0, #100	; 0x64
 80039d4:	f000 fdfa 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x03);
 80039d8:	2003      	movs	r0, #3
 80039da:	f000 fdf7 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x12);
 80039de:	2012      	movs	r0, #18
 80039e0:	f000 fdf4 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x81);
 80039e4:	2081      	movs	r0, #129	; 0x81
 80039e6:	f000 fdf1 	bl	80045cc <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 80039ea:	20f7      	movs	r0, #247	; 0xf7
 80039ec:	f000 fdb4 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 80039f0:	2020      	movs	r0, #32
 80039f2:	f000 fdeb 	bl	80045cc <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 80039f6:	20c0      	movs	r0, #192	; 0xc0
 80039f8:	f000 fdae 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 80039fc:	2023      	movs	r0, #35	; 0x23
 80039fe:	f000 fde5 	bl	80045cc <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 8003a02:	20c1      	movs	r0, #193	; 0xc1
 8003a04:	f000 fda8 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8003a08:	2010      	movs	r0, #16
 8003a0a:	f000 fddf 	bl	80045cc <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 8003a0e:	20c5      	movs	r0, #197	; 0xc5
 8003a10:	f000 fda2 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 8003a14:	203e      	movs	r0, #62	; 0x3e
 8003a16:	f000 fdd9 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x28);
 8003a1a:	2028      	movs	r0, #40	; 0x28
 8003a1c:	f000 fdd6 	bl	80045cc <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 8003a20:	20c7      	movs	r0, #199	; 0xc7
 8003a22:	f000 fd99 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 8003a26:	2086      	movs	r0, #134	; 0x86
 8003a28:	f000 fdd0 	bl	80045cc <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 8003a2c:	2036      	movs	r0, #54	; 0x36
 8003a2e:	f000 fd93 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 8003a32:	2048      	movs	r0, #72	; 0x48
 8003a34:	f000 fdca 	bl	80045cc <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 8003a38:	203a      	movs	r0, #58	; 0x3a
 8003a3a:	f000 fd8d 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 8003a3e:	2055      	movs	r0, #85	; 0x55
 8003a40:	f000 fdc4 	bl	80045cc <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 8003a44:	20b1      	movs	r0, #177	; 0xb1
 8003a46:	f000 fd87 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	f000 fdbe 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x18);
 8003a50:	2018      	movs	r0, #24
 8003a52:	f000 fdbb 	bl	80045cc <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 8003a56:	20b6      	movs	r0, #182	; 0xb6
 8003a58:	f000 fd7e 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 8003a5c:	2008      	movs	r0, #8
 8003a5e:	f000 fdb5 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x82);
 8003a62:	2082      	movs	r0, #130	; 0x82
 8003a64:	f000 fdb2 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x27);
 8003a68:	2027      	movs	r0, #39	; 0x27
 8003a6a:	f000 fdaf 	bl	80045cc <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 8003a6e:	20f2      	movs	r0, #242	; 0xf2
 8003a70:	f000 fd72 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8003a74:	2000      	movs	r0, #0
 8003a76:	f000 fda9 	bl	80045cc <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 8003a7a:	2026      	movs	r0, #38	; 0x26
 8003a7c:	f000 fd6c 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 8003a80:	2001      	movs	r0, #1
 8003a82:	f000 fda3 	bl	80045cc <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8003a86:	20e0      	movs	r0, #224	; 0xe0
 8003a88:	f000 fd66 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 8003a8c:	200f      	movs	r0, #15
 8003a8e:	f000 fd9d 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x31);
 8003a92:	2031      	movs	r0, #49	; 0x31
 8003a94:	f000 fd9a 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x2B);
 8003a98:	202b      	movs	r0, #43	; 0x2b
 8003a9a:	f000 fd97 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x0C);
 8003a9e:	200c      	movs	r0, #12
 8003aa0:	f000 fd94 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x0E);
 8003aa4:	200e      	movs	r0, #14
 8003aa6:	f000 fd91 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x08);
 8003aaa:	2008      	movs	r0, #8
 8003aac:	f000 fd8e 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x4E);
 8003ab0:	204e      	movs	r0, #78	; 0x4e
 8003ab2:	f000 fd8b 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0xF1);
 8003ab6:	20f1      	movs	r0, #241	; 0xf1
 8003ab8:	f000 fd88 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x37);
 8003abc:	2037      	movs	r0, #55	; 0x37
 8003abe:	f000 fd85 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x07);
 8003ac2:	2007      	movs	r0, #7
 8003ac4:	f000 fd82 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x10);
 8003ac8:	2010      	movs	r0, #16
 8003aca:	f000 fd7f 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x03);
 8003ace:	2003      	movs	r0, #3
 8003ad0:	f000 fd7c 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x0E);
 8003ad4:	200e      	movs	r0, #14
 8003ad6:	f000 fd79 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x09);
 8003ada:	2009      	movs	r0, #9
 8003adc:	f000 fd76 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x00);
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f000 fd73 	bl	80045cc <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8003ae6:	20e1      	movs	r0, #225	; 0xe1
 8003ae8:	f000 fd36 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8003aec:	2000      	movs	r0, #0
 8003aee:	f000 fd6d 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x0E);
 8003af2:	200e      	movs	r0, #14
 8003af4:	f000 fd6a 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x14);
 8003af8:	2014      	movs	r0, #20
 8003afa:	f000 fd67 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x03);
 8003afe:	2003      	movs	r0, #3
 8003b00:	f000 fd64 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x11);
 8003b04:	2011      	movs	r0, #17
 8003b06:	f000 fd61 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x07);
 8003b0a:	2007      	movs	r0, #7
 8003b0c:	f000 fd5e 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x31);
 8003b10:	2031      	movs	r0, #49	; 0x31
 8003b12:	f000 fd5b 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0xC1);
 8003b16:	20c1      	movs	r0, #193	; 0xc1
 8003b18:	f000 fd58 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x48);
 8003b1c:	2048      	movs	r0, #72	; 0x48
 8003b1e:	f000 fd55 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x08);
 8003b22:	2008      	movs	r0, #8
 8003b24:	f000 fd52 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x0F);
 8003b28:	200f      	movs	r0, #15
 8003b2a:	f000 fd4f 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x0C);
 8003b2e:	200c      	movs	r0, #12
 8003b30:	f000 fd4c 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x31);
 8003b34:	2031      	movs	r0, #49	; 0x31
 8003b36:	f000 fd49 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x36);
 8003b3a:	2036      	movs	r0, #54	; 0x36
 8003b3c:	f000 fd46 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(0x0F);
 8003b40:	200f      	movs	r0, #15
 8003b42:	f000 fd43 	bl	80045cc <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 8003b46:	2011      	movs	r0, #17
 8003b48:	f000 fd06 	bl	8004558 <_LCD_SendCommand>
	HAL_Delay(240);
 8003b4c:	20f0      	movs	r0, #240	; 0xf0
 8003b4e:	f7fd fe69 	bl	8001824 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 8003b52:	2029      	movs	r0, #41	; 0x29
 8003b54:	f000 fd00 	bl	8004558 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8003b58:	2000      	movs	r0, #0
 8003b5a:	f000 fb99 	bl	8004290 <ILI9341_Set_Rotation>
}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <ILI9341_SPI_Init+0x34>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2240      	movs	r2, #64	; 0x40
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d005      	beq.n	8003b80 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <ILI9341_SPI_Init+0x34>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <ILI9341_SPI_Init+0x34>)
 8003b7a:	2140      	movs	r1, #64	; 0x40
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003b80:	2390      	movs	r3, #144	; 0x90
 8003b82:	05db      	lsls	r3, r3, #23
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	2390      	movs	r3, #144	; 0x90
 8003b88:	05db      	lsls	r3, r3, #23
 8003b8a:	2108      	movs	r1, #8
 8003b8c:	438a      	bics	r2, r1
 8003b8e:	615a      	str	r2, [r3, #20]
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	40013000 	.word	0x40013000

08003b9c <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8003b9c:	b5b0      	push	{r4, r5, r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	0005      	movs	r5, r0
 8003ba4:	000c      	movs	r4, r1
 8003ba6:	0010      	movs	r0, r2
 8003ba8:	0019      	movs	r1, r3
 8003baa:	1dbb      	adds	r3, r7, #6
 8003bac:	1c2a      	adds	r2, r5, #0
 8003bae:	801a      	strh	r2, [r3, #0]
 8003bb0:	1d3b      	adds	r3, r7, #4
 8003bb2:	1c22      	adds	r2, r4, #0
 8003bb4:	801a      	strh	r2, [r3, #0]
 8003bb6:	1cbb      	adds	r3, r7, #2
 8003bb8:	1c02      	adds	r2, r0, #0
 8003bba:	801a      	strh	r2, [r3, #0]
 8003bbc:	003b      	movs	r3, r7
 8003bbe:	1c0a      	adds	r2, r1, #0
 8003bc0:	801a      	strh	r2, [r3, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8003bc2:	4b37      	ldr	r3, [pc, #220]	; (8003ca0 <ILI9341_Draw_Vertical_Line+0x104>)
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	1dba      	adds	r2, r7, #6
 8003bca:	8812      	ldrh	r2, [r2, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d300      	bcc.n	8003bd2 <ILI9341_Draw_Vertical_Line+0x36>
 8003bd0:	e062      	b.n	8003c98 <ILI9341_Draw_Vertical_Line+0xfc>
 8003bd2:	4b34      	ldr	r3, [pc, #208]	; (8003ca4 <ILI9341_Draw_Vertical_Line+0x108>)
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	1d3a      	adds	r2, r7, #4
 8003bda:	8812      	ldrh	r2, [r2, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d25b      	bcs.n	8003c98 <ILI9341_Draw_Vertical_Line+0xfc>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8003be0:	1d3b      	adds	r3, r7, #4
 8003be2:	881a      	ldrh	r2, [r3, #0]
 8003be4:	1cbb      	adds	r3, r7, #2
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	18d3      	adds	r3, r2, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <ILI9341_Draw_Vertical_Line+0x108>)
 8003bee:	8812      	ldrh	r2, [r2, #0]
 8003bf0:	b292      	uxth	r2, r2
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	db07      	blt.n	8003c06 <ILI9341_Draw_Vertical_Line+0x6a>
	{
		height= LCD_HEIGHT - ypos;
 8003bf6:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <ILI9341_Draw_Vertical_Line+0x108>)
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b299      	uxth	r1, r3
 8003bfc:	1cbb      	adds	r3, r7, #2
 8003bfe:	1d3a      	adds	r2, r7, #4
 8003c00:	8812      	ldrh	r2, [r2, #0]
 8003c02:	1a8a      	subs	r2, r1, r2
 8003c04:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8003c06:	1d3a      	adds	r2, r7, #4
 8003c08:	1cbb      	adds	r3, r7, #2
 8003c0a:	8812      	ldrh	r2, [r2, #0]
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	18d3      	adds	r3, r2, r3
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29c      	uxth	r4, r3
 8003c16:	1dbb      	adds	r3, r7, #6
 8003c18:	881a      	ldrh	r2, [r3, #0]
 8003c1a:	1d3b      	adds	r3, r7, #4
 8003c1c:	8819      	ldrh	r1, [r3, #0]
 8003c1e:	1dbb      	adds	r3, r7, #6
 8003c20:	8818      	ldrh	r0, [r3, #0]
 8003c22:	0023      	movs	r3, r4
 8003c24:	f000 f840 	bl	8003ca8 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8003c28:	230f      	movs	r3, #15
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8003c30:	1cbb      	adds	r3, r7, #2
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	2201      	movs	r2, #1
 8003c36:	4013      	ands	r3, r2
 8003c38:	d00e      	beq.n	8003c58 <ILI9341_Draw_Vertical_Line+0xbc>
 8003c3a:	1cbb      	adds	r3, r7, #2
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d90a      	bls.n	8003c58 <ILI9341_Draw_Vertical_Line+0xbc>
	{
		truncated = 1;
 8003c42:	230f      	movs	r3, #15
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	2201      	movs	r2, #1
 8003c48:	701a      	strb	r2, [r3, #0]
		height = ((height >> 1) * 2);
 8003c4a:	1cbb      	adds	r3, r7, #2
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	1cba      	adds	r2, r7, #2
 8003c54:	18db      	adds	r3, r3, r3
 8003c56:	8013      	strh	r3, [r2, #0]
//TODO


	//

	if(truncated)
 8003c58:	230f      	movs	r3, #15
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00c      	beq.n	8003c7c <ILI9341_Draw_Vertical_Line+0xe0>
	{
		ILI9341_Draw_Pixel(	(xpos),
 8003c62:	1d3a      	adds	r2, r7, #4
 8003c64:	1cbb      	adds	r3, r7, #2
 8003c66:	8812      	ldrh	r2, [r2, #0]
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	18d3      	adds	r3, r2, r3
 8003c6c:	b299      	uxth	r1, r3
 8003c6e:	003b      	movs	r3, r7
 8003c70:	881a      	ldrh	r2, [r3, #0]
 8003c72:	1dbb      	adds	r3, r7, #6
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	0018      	movs	r0, r3
 8003c78:	f000 f898 	bl	8003dac <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8003c7c:	1cbb      	adds	r3, r7, #2
 8003c7e:	881c      	ldrh	r4, [r3, #0]
 8003c80:	003b      	movs	r3, r7
 8003c82:	881a      	ldrh	r2, [r3, #0]
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	8819      	ldrh	r1, [r3, #0]
 8003c88:	1dbb      	adds	r3, r7, #6
 8003c8a:	8818      	ldrh	r0, [r3, #0]
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	0023      	movs	r3, r4
 8003c92:	f000 fb7d 	bl	8004390 <_LCD_Write_Frame>
 8003c96:	e000      	b.n	8003c9a <ILI9341_Draw_Vertical_Line+0xfe>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8003c98:	46c0      	nop			; (mov r8, r8)
}
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b004      	add	sp, #16
 8003c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ca0:	20000014 	.word	0x20000014
 8003ca4:	20000012 	.word	0x20000012

08003ca8 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8003ca8:	b5b0      	push	{r4, r5, r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	0005      	movs	r5, r0
 8003cb0:	000c      	movs	r4, r1
 8003cb2:	0010      	movs	r0, r2
 8003cb4:	0019      	movs	r1, r3
 8003cb6:	1dbb      	adds	r3, r7, #6
 8003cb8:	1c2a      	adds	r2, r5, #0
 8003cba:	801a      	strh	r2, [r3, #0]
 8003cbc:	1d3b      	adds	r3, r7, #4
 8003cbe:	1c22      	adds	r2, r4, #0
 8003cc0:	801a      	strh	r2, [r3, #0]
 8003cc2:	1cbb      	adds	r3, r7, #2
 8003cc4:	1c02      	adds	r2, r0, #0
 8003cc6:	801a      	strh	r2, [r3, #0]
 8003cc8:	003b      	movs	r3, r7
 8003cca:	1c0a      	adds	r2, r1, #0
 8003ccc:	801a      	strh	r2, [r3, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 8003cce:	202a      	movs	r0, #42	; 0x2a
 8003cd0:	f000 fc42 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8003cd4:	1dbb      	adds	r3, r7, #6
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f000 fc74 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(sc);
 8003ce4:	1dbb      	adds	r3, r7, #6
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	0018      	movs	r0, r3
 8003cec:	f000 fc6e 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8003cf0:	1cbb      	adds	r3, r7, #2
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f000 fc66 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(ec);
 8003d00:	1cbb      	adds	r3, r7, #2
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	0018      	movs	r0, r3
 8003d08:	f000 fc60 	bl	80045cc <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 8003d0c:	202b      	movs	r0, #43	; 0x2b
 8003d0e:	f000 fc23 	bl	8004558 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 8003d12:	1d3b      	adds	r3, r7, #4
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f000 fc55 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(sp);
 8003d22:	1d3b      	adds	r3, r7, #4
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f000 fc4f 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 8003d2e:	003b      	movs	r3, r7
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f000 fc47 	bl	80045cc <_LCD_SendData>
	_LCD_SendData(ep);
 8003d3e:	003b      	movs	r3, r7
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	0018      	movs	r0, r3
 8003d46:	f000 fc41 	bl	80045cc <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 8003d4a:	202c      	movs	r0, #44	; 0x2c
 8003d4c:	f000 fc04 	bl	8004558 <_LCD_SendCommand>
}
 8003d50:	46c0      	nop			; (mov r8, r8)
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b002      	add	sp, #8
 8003d56:	bdb0      	pop	{r4, r5, r7, pc}

08003d58 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	0002      	movs	r2, r0
 8003d60:	1dbb      	adds	r3, r7, #6
 8003d62:	801a      	strh	r2, [r3, #0]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <ILI9341_Fill_Screen+0x4c>)
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <ILI9341_Fill_Screen+0x50>)
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2100      	movs	r1, #0
 8003d72:	2000      	movs	r0, #0
 8003d74:	f7ff ff98 	bl	8003ca8 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <ILI9341_Fill_Screen+0x4c>)
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	001a      	movs	r2, r3
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <ILI9341_Fill_Screen+0x50>)
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	4353      	muls	r3, r2
 8003d88:	0019      	movs	r1, r3
 8003d8a:	1dbb      	adds	r3, r7, #6
 8003d8c:	881a      	ldrh	r2, [r3, #0]
 8003d8e:	2304      	movs	r3, #4
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	000b      	movs	r3, r1
 8003d94:	2100      	movs	r1, #0
 8003d96:	2000      	movs	r0, #0
 8003d98:	f000 fafa 	bl	8004390 <_LCD_Write_Frame>
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b002      	add	sp, #8
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20000014 	.word	0x20000014
 8003da8:	20000012 	.word	0x20000012

08003dac <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b08f      	sub	sp, #60	; 0x3c
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	0004      	movs	r4, r0
 8003db4:	0008      	movs	r0, r1
 8003db6:	0011      	movs	r1, r2
 8003db8:	1dbb      	adds	r3, r7, #6
 8003dba:	1c22      	adds	r2, r4, #0
 8003dbc:	801a      	strh	r2, [r3, #0]
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	1c02      	adds	r2, r0, #0
 8003dc2:	801a      	strh	r2, [r3, #0]
 8003dc4:	1cbb      	adds	r3, r7, #2
 8003dc6:	1c0a      	adds	r2, r1, #0
 8003dc8:	801a      	strh	r2, [r3, #0]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003dca:	4bc8      	ldr	r3, [pc, #800]	; (80040ec <ILI9341_Draw_Pixel+0x340>)
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	1dba      	adds	r2, r7, #6
 8003dd2:	8812      	ldrh	r2, [r2, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d300      	bcc.n	8003dda <ILI9341_Draw_Pixel+0x2e>
 8003dd8:	e184      	b.n	80040e4 <ILI9341_Draw_Pixel+0x338>
 8003dda:	4bc5      	ldr	r3, [pc, #788]	; (80040f0 <ILI9341_Draw_Pixel+0x344>)
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	1d3a      	adds	r2, r7, #4
 8003de2:	8812      	ldrh	r2, [r2, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d300      	bcc.n	8003dea <ILI9341_Draw_Pixel+0x3e>
 8003de8:	e17c      	b.n	80040e4 <ILI9341_Draw_Pixel+0x338>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8003dea:	2390      	movs	r3, #144	; 0x90
 8003dec:	05db      	lsls	r3, r3, #23
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	2390      	movs	r3, #144	; 0x90
 8003df2:	05db      	lsls	r3, r3, #23
 8003df4:	2110      	movs	r1, #16
 8003df6:	438a      	bics	r2, r1
 8003df8:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003dfa:	2390      	movs	r3, #144	; 0x90
 8003dfc:	05db      	lsls	r3, r3, #23
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	2390      	movs	r3, #144	; 0x90
 8003e02:	05db      	lsls	r3, r3, #23
 8003e04:	2108      	movs	r1, #8
 8003e06:	438a      	bics	r2, r1
 8003e08:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8003e0a:	220a      	movs	r2, #10
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	202a      	movs	r0, #42	; 0x2a
 8003e10:	f000 fc16 	bl	8004640 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003e14:	2300      	movs	r3, #0
 8003e16:	637b      	str	r3, [r7, #52]	; 0x34
 8003e18:	e00a      	b.n	8003e30 <ILI9341_Draw_Pixel+0x84>
 8003e1a:	2390      	movs	r3, #144	; 0x90
 8003e1c:	05db      	lsls	r3, r3, #23
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	2390      	movs	r3, #144	; 0x90
 8003e22:	05db      	lsls	r3, r3, #23
 8003e24:	2108      	movs	r1, #8
 8003e26:	438a      	bics	r2, r1
 8003e28:	615a      	str	r2, [r3, #20]
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	ddf1      	ble.n	8003e1a <ILI9341_Draw_Pixel+0x6e>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8003e36:	2390      	movs	r3, #144	; 0x90
 8003e38:	05db      	lsls	r3, r3, #23
 8003e3a:	695a      	ldr	r2, [r3, #20]
 8003e3c:	2390      	movs	r3, #144	; 0x90
 8003e3e:	05db      	lsls	r3, r3, #23
 8003e40:	2110      	movs	r1, #16
 8003e42:	430a      	orrs	r2, r1
 8003e44:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003e46:	2390      	movs	r3, #144	; 0x90
 8003e48:	05db      	lsls	r3, r3, #23
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	2390      	movs	r3, #144	; 0x90
 8003e4e:	05db      	lsls	r3, r3, #23
 8003e50:	2108      	movs	r1, #8
 8003e52:	430a      	orrs	r2, r1
 8003e54:	615a      	str	r2, [r3, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003e56:	2390      	movs	r3, #144	; 0x90
 8003e58:	05db      	lsls	r3, r3, #23
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	2390      	movs	r3, #144	; 0x90
 8003e5e:	05db      	lsls	r3, r3, #23
 8003e60:	2108      	movs	r1, #8
 8003e62:	438a      	bics	r2, r1
 8003e64:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 8003e66:	1dbb      	adds	r3, r7, #6
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	0a1b      	lsrs	r3, r3, #8
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	2114      	movs	r1, #20
 8003e72:	187b      	adds	r3, r7, r1
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	1dbb      	adds	r3, r7, #6
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	187b      	adds	r3, r7, r1
 8003e7e:	705a      	strb	r2, [r3, #1]
 8003e80:	1dbb      	adds	r3, r7, #6
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	3301      	adds	r3, #1
 8003e86:	121b      	asrs	r3, r3, #8
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	709a      	strb	r2, [r3, #2]
 8003e8e:	1dbb      	adds	r3, r7, #6
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	3301      	adds	r3, #1
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	187b      	adds	r3, r7, r1
 8003e9a:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 8003e9c:	1878      	adds	r0, r7, r1
 8003e9e:	230a      	movs	r3, #10
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	f000 fc06 	bl	80046b4 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8003eac:	e00a      	b.n	8003ec4 <ILI9341_Draw_Pixel+0x118>
 8003eae:	2390      	movs	r3, #144	; 0x90
 8003eb0:	05db      	lsls	r3, r3, #23
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	2390      	movs	r3, #144	; 0x90
 8003eb6:	05db      	lsls	r3, r3, #23
 8003eb8:	2108      	movs	r1, #8
 8003eba:	438a      	bics	r2, r1
 8003ebc:	615a      	str	r2, [r3, #20]
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	ddf1      	ble.n	8003eae <ILI9341_Draw_Pixel+0x102>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003eca:	2390      	movs	r3, #144	; 0x90
 8003ecc:	05db      	lsls	r3, r3, #23
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	2390      	movs	r3, #144	; 0x90
 8003ed2:	05db      	lsls	r3, r3, #23
 8003ed4:	2108      	movs	r1, #8
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8003eda:	2390      	movs	r3, #144	; 0x90
 8003edc:	05db      	lsls	r3, r3, #23
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	2390      	movs	r3, #144	; 0x90
 8003ee2:	05db      	lsls	r3, r3, #23
 8003ee4:	2110      	movs	r1, #16
 8003ee6:	438a      	bics	r2, r1
 8003ee8:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003eea:	2390      	movs	r3, #144	; 0x90
 8003eec:	05db      	lsls	r3, r3, #23
 8003eee:	695a      	ldr	r2, [r3, #20]
 8003ef0:	2390      	movs	r3, #144	; 0x90
 8003ef2:	05db      	lsls	r3, r3, #23
 8003ef4:	2108      	movs	r1, #8
 8003ef6:	438a      	bics	r2, r1
 8003ef8:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8003efa:	220a      	movs	r2, #10
 8003efc:	2100      	movs	r1, #0
 8003efe:	202b      	movs	r0, #43	; 0x2b
 8003f00:	f000 fb9e 	bl	8004640 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003f04:	2300      	movs	r3, #0
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f08:	e00a      	b.n	8003f20 <ILI9341_Draw_Pixel+0x174>
 8003f0a:	2390      	movs	r3, #144	; 0x90
 8003f0c:	05db      	lsls	r3, r3, #23
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	2390      	movs	r3, #144	; 0x90
 8003f12:	05db      	lsls	r3, r3, #23
 8003f14:	2108      	movs	r1, #8
 8003f16:	438a      	bics	r2, r1
 8003f18:	615a      	str	r2, [r3, #20]
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	ddf1      	ble.n	8003f0a <ILI9341_Draw_Pixel+0x15e>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8003f26:	2390      	movs	r3, #144	; 0x90
 8003f28:	05db      	lsls	r3, r3, #23
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	2390      	movs	r3, #144	; 0x90
 8003f2e:	05db      	lsls	r3, r3, #23
 8003f30:	2110      	movs	r1, #16
 8003f32:	430a      	orrs	r2, r1
 8003f34:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003f36:	2390      	movs	r3, #144	; 0x90
 8003f38:	05db      	lsls	r3, r3, #23
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	2390      	movs	r3, #144	; 0x90
 8003f3e:	05db      	lsls	r3, r3, #23
 8003f40:	2108      	movs	r1, #8
 8003f42:	430a      	orrs	r2, r1
 8003f44:	615a      	str	r2, [r3, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003f46:	2390      	movs	r3, #144	; 0x90
 8003f48:	05db      	lsls	r3, r3, #23
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	2390      	movs	r3, #144	; 0x90
 8003f4e:	05db      	lsls	r3, r3, #23
 8003f50:	2108      	movs	r1, #8
 8003f52:	438a      	bics	r2, r1
 8003f54:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	0a1b      	lsrs	r3, r3, #8
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	2110      	movs	r1, #16
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	187b      	adds	r3, r7, r1
 8003f6e:	705a      	strb	r2, [r3, #1]
 8003f70:	1d3b      	adds	r3, r7, #4
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	121b      	asrs	r3, r3, #8
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	709a      	strb	r2, [r3, #2]
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	3301      	adds	r3, #1
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	187b      	adds	r3, r7, r1
 8003f8a:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 8003f8c:	1878      	adds	r0, r7, r1
 8003f8e:	230a      	movs	r3, #10
 8003f90:	2200      	movs	r2, #0
 8003f92:	2104      	movs	r1, #4
 8003f94:	f000 fb8e 	bl	80046b4 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f9c:	e00a      	b.n	8003fb4 <ILI9341_Draw_Pixel+0x208>
 8003f9e:	2390      	movs	r3, #144	; 0x90
 8003fa0:	05db      	lsls	r3, r3, #23
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	2390      	movs	r3, #144	; 0x90
 8003fa6:	05db      	lsls	r3, r3, #23
 8003fa8:	2108      	movs	r1, #8
 8003faa:	438a      	bics	r2, r1
 8003fac:	615a      	str	r2, [r3, #20]
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	ddf1      	ble.n	8003f9e <ILI9341_Draw_Pixel+0x1f2>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003fba:	2390      	movs	r3, #144	; 0x90
 8003fbc:	05db      	lsls	r3, r3, #23
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	2390      	movs	r3, #144	; 0x90
 8003fc2:	05db      	lsls	r3, r3, #23
 8003fc4:	2108      	movs	r1, #8
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8003fca:	2390      	movs	r3, #144	; 0x90
 8003fcc:	05db      	lsls	r3, r3, #23
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	2390      	movs	r3, #144	; 0x90
 8003fd2:	05db      	lsls	r3, r3, #23
 8003fd4:	2110      	movs	r1, #16
 8003fd6:	438a      	bics	r2, r1
 8003fd8:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003fda:	2390      	movs	r3, #144	; 0x90
 8003fdc:	05db      	lsls	r3, r3, #23
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	2390      	movs	r3, #144	; 0x90
 8003fe2:	05db      	lsls	r3, r3, #23
 8003fe4:	2108      	movs	r1, #8
 8003fe6:	438a      	bics	r2, r1
 8003fe8:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2C, 0, 10);
 8003fea:	220a      	movs	r2, #10
 8003fec:	2100      	movs	r1, #0
 8003fee:	202c      	movs	r0, #44	; 0x2c
 8003ff0:	f000 fb26 	bl	8004640 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff8:	e00a      	b.n	8004010 <ILI9341_Draw_Pixel+0x264>
 8003ffa:	2390      	movs	r3, #144	; 0x90
 8003ffc:	05db      	lsls	r3, r3, #23
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	2390      	movs	r3, #144	; 0x90
 8004002:	05db      	lsls	r3, r3, #23
 8004004:	2108      	movs	r1, #8
 8004006:	438a      	bics	r2, r1
 8004008:	615a      	str	r2, [r3, #20]
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	3301      	adds	r3, #1
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	2b02      	cmp	r3, #2
 8004014:	ddf1      	ble.n	8003ffa <ILI9341_Draw_Pixel+0x24e>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8004016:	2390      	movs	r3, #144	; 0x90
 8004018:	05db      	lsls	r3, r3, #23
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	2390      	movs	r3, #144	; 0x90
 800401e:	05db      	lsls	r3, r3, #23
 8004020:	2110      	movs	r1, #16
 8004022:	430a      	orrs	r2, r1
 8004024:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8004026:	2390      	movs	r3, #144	; 0x90
 8004028:	05db      	lsls	r3, r3, #23
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	2390      	movs	r3, #144	; 0x90
 800402e:	05db      	lsls	r3, r3, #23
 8004030:	2108      	movs	r1, #8
 8004032:	430a      	orrs	r2, r1
 8004034:	615a      	str	r2, [r3, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004036:	2390      	movs	r3, #144	; 0x90
 8004038:	05db      	lsls	r3, r3, #23
 800403a:	695a      	ldr	r2, [r3, #20]
 800403c:	2390      	movs	r3, #144	; 0x90
 800403e:	05db      	lsls	r3, r3, #23
 8004040:	2108      	movs	r1, #8
 8004042:	438a      	bics	r2, r1
 8004044:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8004046:	1cbb      	adds	r3, r7, #2
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	b29b      	uxth	r3, r3
 800404e:	b2da      	uxtb	r2, r3
 8004050:	210c      	movs	r1, #12
 8004052:	187b      	adds	r3, r7, r1
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	1cbb      	adds	r3, r7, #2
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b2da      	uxtb	r2, r3
 800405c:	187b      	adds	r3, r7, r1
 800405e:	705a      	strb	r2, [r3, #1]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 8004060:	1878      	adds	r0, r7, r1
 8004062:	2301      	movs	r3, #1
 8004064:	2200      	movs	r2, #0
 8004066:	2102      	movs	r1, #2
 8004068:	f000 fb24 	bl	80046b4 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800406c:	2300      	movs	r3, #0
 800406e:	623b      	str	r3, [r7, #32]
 8004070:	e00a      	b.n	8004088 <ILI9341_Draw_Pixel+0x2dc>
 8004072:	2390      	movs	r3, #144	; 0x90
 8004074:	05db      	lsls	r3, r3, #23
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	2390      	movs	r3, #144	; 0x90
 800407a:	05db      	lsls	r3, r3, #23
 800407c:	2108      	movs	r1, #8
 800407e:	438a      	bics	r2, r1
 8004080:	615a      	str	r2, [r3, #20]
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	3301      	adds	r3, #1
 8004086:	623b      	str	r3, [r7, #32]
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	2b02      	cmp	r3, #2
 800408c:	ddf1      	ble.n	8004072 <ILI9341_Draw_Pixel+0x2c6>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	e00a      	b.n	80040aa <ILI9341_Draw_Pixel+0x2fe>
 8004094:	2390      	movs	r3, #144	; 0x90
 8004096:	05db      	lsls	r3, r3, #23
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	2390      	movs	r3, #144	; 0x90
 800409c:	05db      	lsls	r3, r3, #23
 800409e:	2108      	movs	r1, #8
 80040a0:	438a      	bics	r2, r1
 80040a2:	615a      	str	r2, [r3, #20]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	3301      	adds	r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	ddf1      	ble.n	8004094 <ILI9341_Draw_Pixel+0x2e8>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80040b0:	2300      	movs	r3, #0
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	e00a      	b.n	80040cc <ILI9341_Draw_Pixel+0x320>
 80040b6:	2390      	movs	r3, #144	; 0x90
 80040b8:	05db      	lsls	r3, r3, #23
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	2390      	movs	r3, #144	; 0x90
 80040be:	05db      	lsls	r3, r3, #23
 80040c0:	2108      	movs	r1, #8
 80040c2:	438a      	bics	r2, r1
 80040c4:	615a      	str	r2, [r3, #20]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	3301      	adds	r3, #1
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	ddf1      	ble.n	80040b6 <ILI9341_Draw_Pixel+0x30a>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80040d2:	2390      	movs	r3, #144	; 0x90
 80040d4:	05db      	lsls	r3, r3, #23
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	2390      	movs	r3, #144	; 0x90
 80040da:	05db      	lsls	r3, r3, #23
 80040dc:	2108      	movs	r1, #8
 80040de:	430a      	orrs	r2, r1
 80040e0:	615a      	str	r2, [r3, #20]
 80040e2:	e000      	b.n	80040e6 <ILI9341_Draw_Pixel+0x33a>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80040e4:	46c0      	nop			; (mov r8, r8)


}
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b00f      	add	sp, #60	; 0x3c
 80040ea:	bd90      	pop	{r4, r7, pc}
 80040ec:	20000014 	.word	0x20000014
 80040f0:	20000012 	.word	0x20000012

080040f4 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 80040f4:	b5b0      	push	{r4, r5, r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	0005      	movs	r5, r0
 80040fc:	000c      	movs	r4, r1
 80040fe:	0010      	movs	r0, r2
 8004100:	0019      	movs	r1, r3
 8004102:	1dbb      	adds	r3, r7, #6
 8004104:	1c2a      	adds	r2, r5, #0
 8004106:	801a      	strh	r2, [r3, #0]
 8004108:	1d3b      	adds	r3, r7, #4
 800410a:	1c22      	adds	r2, r4, #0
 800410c:	801a      	strh	r2, [r3, #0]
 800410e:	1cbb      	adds	r3, r7, #2
 8004110:	1c02      	adds	r2, r0, #0
 8004112:	801a      	strh	r2, [r3, #0]
 8004114:	003b      	movs	r3, r7
 8004116:	1c0a      	adds	r2, r1, #0
 8004118:	801a      	strh	r2, [r3, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800411a:	4b5b      	ldr	r3, [pc, #364]	; (8004288 <ILI9341_Draw_Rectangle+0x194>)
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	1dba      	adds	r2, r7, #6
 8004122:	8812      	ldrh	r2, [r2, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d300      	bcc.n	800412a <ILI9341_Draw_Rectangle+0x36>
 8004128:	e0a9      	b.n	800427e <ILI9341_Draw_Rectangle+0x18a>
 800412a:	4b58      	ldr	r3, [pc, #352]	; (800428c <ILI9341_Draw_Rectangle+0x198>)
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	b29b      	uxth	r3, r3
 8004130:	1d3a      	adds	r2, r7, #4
 8004132:	8812      	ldrh	r2, [r2, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d300      	bcc.n	800413a <ILI9341_Draw_Rectangle+0x46>
 8004138:	e0a1      	b.n	800427e <ILI9341_Draw_Rectangle+0x18a>
	if((xpos+width-1)>=LCD_WIDTH)
 800413a:	1dbb      	adds	r3, r7, #6
 800413c:	881a      	ldrh	r2, [r3, #0]
 800413e:	1cbb      	adds	r3, r7, #2
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	18d3      	adds	r3, r2, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	4a50      	ldr	r2, [pc, #320]	; (8004288 <ILI9341_Draw_Rectangle+0x194>)
 8004148:	8812      	ldrh	r2, [r2, #0]
 800414a:	b292      	uxth	r2, r2
 800414c:	4293      	cmp	r3, r2
 800414e:	db07      	blt.n	8004160 <ILI9341_Draw_Rectangle+0x6c>
		{
			width=LCD_WIDTH-xpos;
 8004150:	4b4d      	ldr	r3, [pc, #308]	; (8004288 <ILI9341_Draw_Rectangle+0x194>)
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b299      	uxth	r1, r3
 8004156:	1cbb      	adds	r3, r7, #2
 8004158:	1dba      	adds	r2, r7, #6
 800415a:	8812      	ldrh	r2, [r2, #0]
 800415c:	1a8a      	subs	r2, r1, r2
 800415e:	801a      	strh	r2, [r3, #0]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8004160:	1d3b      	adds	r3, r7, #4
 8004162:	881a      	ldrh	r2, [r3, #0]
 8004164:	003b      	movs	r3, r7
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	18d3      	adds	r3, r2, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	4a47      	ldr	r2, [pc, #284]	; (800428c <ILI9341_Draw_Rectangle+0x198>)
 800416e:	8812      	ldrh	r2, [r2, #0]
 8004170:	b292      	uxth	r2, r2
 8004172:	4293      	cmp	r3, r2
 8004174:	db07      	blt.n	8004186 <ILI9341_Draw_Rectangle+0x92>
		{
			height=LCD_HEIGHT-ypos;
 8004176:	4b45      	ldr	r3, [pc, #276]	; (800428c <ILI9341_Draw_Rectangle+0x198>)
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b299      	uxth	r1, r3
 800417c:	003b      	movs	r3, r7
 800417e:	1d3a      	adds	r2, r7, #4
 8004180:	8812      	ldrh	r2, [r2, #0]
 8004182:	1a8a      	subs	r2, r1, r2
 8004184:	801a      	strh	r2, [r3, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 8004186:	1dba      	adds	r2, r7, #6
 8004188:	1cbb      	adds	r3, r7, #2
 800418a:	8812      	ldrh	r2, [r2, #0]
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	18d3      	adds	r3, r2, r3
 8004190:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8004192:	3b01      	subs	r3, #1
 8004194:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8004196:	1d3a      	adds	r2, r7, #4
 8004198:	003b      	movs	r3, r7
 800419a:	8812      	ldrh	r2, [r2, #0]
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	18d3      	adds	r3, r2, r3
 80041a0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	1d3b      	adds	r3, r7, #4
 80041a8:	8819      	ldrh	r1, [r3, #0]
 80041aa:	1dbb      	adds	r3, r7, #6
 80041ac:	8818      	ldrh	r0, [r3, #0]
 80041ae:	0013      	movs	r3, r2
 80041b0:	0022      	movs	r2, r4
 80041b2:	f7ff fd79 	bl	8003ca8 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 80041b6:	200e      	movs	r0, #14
 80041b8:	183b      	adds	r3, r7, r0
 80041ba:	003a      	movs	r2, r7
 80041bc:	1cb9      	adds	r1, r7, #2
 80041be:	8812      	ldrh	r2, [r2, #0]
 80041c0:	8809      	ldrh	r1, [r1, #0]
 80041c2:	434a      	muls	r2, r1
 80041c4:	801a      	strh	r2, [r3, #0]
	uint8_t truncated = 0;
 80041c6:	230d      	movs	r3, #13
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]

	if((size & 1) && (size > 1))		// don't round down to zero!
 80041ce:	183b      	adds	r3, r7, r0
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	4013      	ands	r3, r2
 80041d6:	d010      	beq.n	80041fa <ILI9341_Draw_Rectangle+0x106>
 80041d8:	230e      	movs	r3, #14
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d90b      	bls.n	80041fa <ILI9341_Draw_Rectangle+0x106>
	{
		truncated = 1;
 80041e2:	230d      	movs	r3, #13
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	2201      	movs	r2, #1
 80041e8:	701a      	strb	r2, [r3, #0]
	 	size = ((size >> 1) * 2);
 80041ea:	220e      	movs	r2, #14
 80041ec:	18bb      	adds	r3, r7, r2
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	085b      	lsrs	r3, r3, #1
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	18ba      	adds	r2, r7, r2
 80041f6:	18db      	adds	r3, r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]
	}

	_LCD_Write_Frame(	xpos,
 80041fa:	230e      	movs	r3, #14
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	881c      	ldrh	r4, [r3, #0]
 8004200:	2320      	movs	r3, #32
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	881a      	ldrh	r2, [r3, #0]
 8004206:	1d3b      	adds	r3, r7, #4
 8004208:	8819      	ldrh	r1, [r3, #0]
 800420a:	1dbb      	adds	r3, r7, #6
 800420c:	8818      	ldrh	r0, [r3, #0]
 800420e:	2324      	movs	r3, #36	; 0x24
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	0023      	movs	r3, r4
 8004218:	f000 f8ba 	bl	8004390 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800421c:	230d      	movs	r3, #13
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d02c      	beq.n	8004280 <ILI9341_Draw_Rectangle+0x18c>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8004226:	1dba      	adds	r2, r7, #6
 8004228:	1cbb      	adds	r3, r7, #2
 800422a:	8812      	ldrh	r2, [r2, #0]
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	18d3      	adds	r3, r2, r3
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b02      	subs	r3, #2
 8004234:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8004236:	1d3a      	adds	r2, r7, #4
 8004238:	003b      	movs	r3, r7
 800423a:	8812      	ldrh	r2, [r2, #0]
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	18d3      	adds	r3, r2, r3
 8004240:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8004242:	3b01      	subs	r3, #1
 8004244:	b29b      	uxth	r3, r3
 8004246:	2420      	movs	r4, #32
 8004248:	193a      	adds	r2, r7, r4
 800424a:	8812      	ldrh	r2, [r2, #0]
 800424c:	0019      	movs	r1, r3
 800424e:	f7ff fdad 	bl	8003dac <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8004252:	1dba      	adds	r2, r7, #6
 8004254:	1cbb      	adds	r3, r7, #2
 8004256:	8812      	ldrh	r2, [r2, #0]
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	18d3      	adds	r3, r2, r3
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8004262:	1d3a      	adds	r2, r7, #4
 8004264:	003b      	movs	r3, r7
 8004266:	8812      	ldrh	r2, [r2, #0]
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	18d3      	adds	r3, r2, r3
 800426c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800426e:	3b01      	subs	r3, #1
 8004270:	b29b      	uxth	r3, r3
 8004272:	193a      	adds	r2, r7, r4
 8004274:	8812      	ldrh	r2, [r2, #0]
 8004276:	0019      	movs	r1, r3
 8004278:	f7ff fd98 	bl	8003dac <ILI9341_Draw_Pixel>
 800427c:	e000      	b.n	8004280 <ILI9341_Draw_Rectangle+0x18c>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800427e:	46c0      	nop			; (mov r8, r8)
							colour);
	}
}
 8004280:	46bd      	mov	sp, r7
 8004282:	b004      	add	sp, #16
 8004284:	bdb0      	pop	{r4, r5, r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	20000014 	.word	0x20000014
 800428c:	20000012 	.word	0x20000012

08004290 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8004290:	b590      	push	{r4, r7, lr}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	0002      	movs	r2, r0
 8004298:	1dfb      	adds	r3, r7, #7
 800429a:	701a      	strb	r2, [r3, #0]

	uint8_t screen_rotation = rotation;
 800429c:	240f      	movs	r4, #15
 800429e:	193b      	adds	r3, r7, r4
 80042a0:	1dfa      	adds	r2, r7, #7
 80042a2:	7812      	ldrb	r2, [r2, #0]
 80042a4:	701a      	strb	r2, [r3, #0]

	_LCD_SendCommand(0x36);
 80042a6:	2036      	movs	r0, #54	; 0x36
 80042a8:	f000 f956 	bl	8004558 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 80042ac:	193b      	adds	r3, r7, r4
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d013      	beq.n	80042dc <ILI9341_Set_Rotation+0x4c>
 80042b4:	dc02      	bgt.n	80042bc <ILI9341_Set_Rotation+0x2c>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <ILI9341_Set_Rotation+0x36>
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80042ba:	e030      	b.n	800431e <ILI9341_Set_Rotation+0x8e>
	switch(screen_rotation)
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d018      	beq.n	80042f2 <ILI9341_Set_Rotation+0x62>
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d021      	beq.n	8004308 <ILI9341_Set_Rotation+0x78>
			break;
 80042c4:	e02b      	b.n	800431e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x08);
 80042c6:	2048      	movs	r0, #72	; 0x48
 80042c8:	f000 f980 	bl	80045cc <_LCD_SendData>
			LCD_WIDTH = 240;
 80042cc:	4b16      	ldr	r3, [pc, #88]	; (8004328 <ILI9341_Set_Rotation+0x98>)
 80042ce:	22f0      	movs	r2, #240	; 0xf0
 80042d0:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80042d2:	4b16      	ldr	r3, [pc, #88]	; (800432c <ILI9341_Set_Rotation+0x9c>)
 80042d4:	22a0      	movs	r2, #160	; 0xa0
 80042d6:	0052      	lsls	r2, r2, #1
 80042d8:	801a      	strh	r2, [r3, #0]
			break;
 80042da:	e020      	b.n	800431e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x20|0x08);
 80042dc:	2028      	movs	r0, #40	; 0x28
 80042de:	f000 f975 	bl	80045cc <_LCD_SendData>
			LCD_WIDTH  = 320;
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <ILI9341_Set_Rotation+0x98>)
 80042e4:	22a0      	movs	r2, #160	; 0xa0
 80042e6:	0052      	lsls	r2, r2, #1
 80042e8:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <ILI9341_Set_Rotation+0x9c>)
 80042ec:	22f0      	movs	r2, #240	; 0xf0
 80042ee:	801a      	strh	r2, [r3, #0]
			break;
 80042f0:	e015      	b.n	800431e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x80|0x08);
 80042f2:	2088      	movs	r0, #136	; 0x88
 80042f4:	f000 f96a 	bl	80045cc <_LCD_SendData>
			LCD_WIDTH  = 240;
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <ILI9341_Set_Rotation+0x98>)
 80042fa:	22f0      	movs	r2, #240	; 0xf0
 80042fc:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80042fe:	4b0b      	ldr	r3, [pc, #44]	; (800432c <ILI9341_Set_Rotation+0x9c>)
 8004300:	22a0      	movs	r2, #160	; 0xa0
 8004302:	0052      	lsls	r2, r2, #1
 8004304:	801a      	strh	r2, [r3, #0]
			break;
 8004306:	e00a      	b.n	800431e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x80|0x20|0x08);
 8004308:	20e8      	movs	r0, #232	; 0xe8
 800430a:	f000 f95f 	bl	80045cc <_LCD_SendData>
			LCD_WIDTH  = 320;
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <ILI9341_Set_Rotation+0x98>)
 8004310:	22a0      	movs	r2, #160	; 0xa0
 8004312:	0052      	lsls	r2, r2, #1
 8004314:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <ILI9341_Set_Rotation+0x9c>)
 8004318:	22f0      	movs	r2, #240	; 0xf0
 800431a:	801a      	strh	r2, [r3, #0]
			break;
 800431c:	46c0      	nop			; (mov r8, r8)
	}
}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	46bd      	mov	sp, r7
 8004322:	b005      	add	sp, #20
 8004324:	bd90      	pop	{r4, r7, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	20000014 	.word	0x20000014
 800432c:	20000012 	.word	0x20000012

08004330 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <_LCD_Enable+0x18>)
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	4b03      	ldr	r3, [pc, #12]	; (8004348 <_LCD_Enable+0x18>)
 800433a:	2101      	movs	r1, #1
 800433c:	430a      	orrs	r2, r1
 800433e:	615a      	str	r2, [r3, #20]
}
 8004340:	46c0      	nop			; (mov r8, r8)
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	48000400 	.word	0x48000400

0800434c <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8004350:	4b0e      	ldr	r3, [pc, #56]	; (800438c <_LCD_Reset+0x40>)
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	4b0d      	ldr	r3, [pc, #52]	; (800438c <_LCD_Reset+0x40>)
 8004356:	2101      	movs	r1, #1
 8004358:	438a      	bics	r2, r1
 800435a:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 800435c:	20c8      	movs	r0, #200	; 0xc8
 800435e:	f7fd fa61 	bl	8001824 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004362:	2390      	movs	r3, #144	; 0x90
 8004364:	05db      	lsls	r3, r3, #23
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	2390      	movs	r3, #144	; 0x90
 800436a:	05db      	lsls	r3, r3, #23
 800436c:	2108      	movs	r1, #8
 800436e:	438a      	bics	r2, r1
 8004370:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 8004372:	20c8      	movs	r0, #200	; 0xc8
 8004374:	f7fd fa56 	bl	8001824 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8004378:	4b04      	ldr	r3, [pc, #16]	; (800438c <_LCD_Reset+0x40>)
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	4b03      	ldr	r3, [pc, #12]	; (800438c <_LCD_Reset+0x40>)
 800437e:	2101      	movs	r1, #1
 8004380:	430a      	orrs	r2, r1
 8004382:	615a      	str	r2, [r3, #20]
}
 8004384:	46c0      	nop			; (mov r8, r8)
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	48000400 	.word	0x48000400

08004390 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8004390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004392:	b095      	sub	sp, #84	; 0x54
 8004394:	af00      	add	r7, sp, #0
 8004396:	0006      	movs	r6, r0
 8004398:	0008      	movs	r0, r1
 800439a:	0011      	movs	r1, r2
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	230e      	movs	r3, #14
 80043a0:	2218      	movs	r2, #24
 80043a2:	4694      	mov	ip, r2
 80043a4:	44bc      	add	ip, r7
 80043a6:	4463      	add	r3, ip
 80043a8:	1c32      	adds	r2, r6, #0
 80043aa:	801a      	strh	r2, [r3, #0]
 80043ac:	230c      	movs	r3, #12
 80043ae:	2218      	movs	r2, #24
 80043b0:	4694      	mov	ip, r2
 80043b2:	44bc      	add	ip, r7
 80043b4:	4463      	add	r3, ip
 80043b6:	1c02      	adds	r2, r0, #0
 80043b8:	801a      	strh	r2, [r3, #0]
 80043ba:	230a      	movs	r3, #10
 80043bc:	2218      	movs	r2, #24
 80043be:	4694      	mov	ip, r2
 80043c0:	44bc      	add	ip, r7
 80043c2:	4463      	add	r3, ip
 80043c4:	1c0a      	adds	r2, r1, #0
 80043c6:	801a      	strh	r2, [r3, #0]
 80043c8:	466b      	mov	r3, sp
 80043ca:	61bb      	str	r3, [r7, #24]

	uint32_t buffer_size = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	647b      	str	r3, [r7, #68]	; 0x44
	if((chunk_size*2) < BURST_MAX_SIZE)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	4a5f      	ldr	r2, [pc, #380]	; (8004554 <_LCD_Write_Frame+0x1c4>)
 80043d6:	8812      	ldrh	r2, [r2, #0]
 80043d8:	4293      	cmp	r3, r2
 80043da:	d202      	bcs.n	80043e2 <_LCD_Write_Frame+0x52>
	{
		buffer_size = chunk_size;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	647b      	str	r3, [r7, #68]	; 0x44
 80043e0:	e002      	b.n	80043e8 <_LCD_Write_Frame+0x58>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 80043e2:	4b5c      	ldr	r3, [pc, #368]	; (8004554 <_LCD_Write_Frame+0x1c4>)
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	647b      	str	r3, [r7, #68]	; 0x44
	}

	unsigned char chifted = 	colour>>8;;
 80043e8:	230a      	movs	r3, #10
 80043ea:	2218      	movs	r2, #24
 80043ec:	4694      	mov	ip, r2
 80043ee:	44bc      	add	ip, r7
 80043f0:	4463      	add	r3, ip
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	0a1b      	lsrs	r3, r3, #8
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	231f      	movs	r3, #31
 80043fa:	2118      	movs	r1, #24
 80043fc:	468c      	mov	ip, r1
 80043fe:	44bc      	add	ip, r7
 8004400:	4463      	add	r3, ip
 8004402:	701a      	strb	r2, [r3, #0]
	unsigned char burst_buffer[buffer_size];
 8004404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004406:	001a      	movs	r2, r3
 8004408:	3a01      	subs	r2, #1
 800440a:	633a      	str	r2, [r7, #48]	; 0x30
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	2200      	movs	r2, #0
 8004410:	60fa      	str	r2, [r7, #12]
 8004412:	68b8      	ldr	r0, [r7, #8]
 8004414:	68f9      	ldr	r1, [r7, #12]
 8004416:	0002      	movs	r2, r0
 8004418:	0f52      	lsrs	r2, r2, #29
 800441a:	000e      	movs	r6, r1
 800441c:	00f6      	lsls	r6, r6, #3
 800441e:	617e      	str	r6, [r7, #20]
 8004420:	697e      	ldr	r6, [r7, #20]
 8004422:	4316      	orrs	r6, r2
 8004424:	617e      	str	r6, [r7, #20]
 8004426:	0002      	movs	r2, r0
 8004428:	00d2      	lsls	r2, r2, #3
 800442a:	613a      	str	r2, [r7, #16]
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	2200      	movs	r2, #0
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	6838      	ldr	r0, [r7, #0]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	0002      	movs	r2, r0
 8004438:	0f52      	lsrs	r2, r2, #29
 800443a:	000e      	movs	r6, r1
 800443c:	00f5      	lsls	r5, r6, #3
 800443e:	4315      	orrs	r5, r2
 8004440:	0002      	movs	r2, r0
 8004442:	00d4      	lsls	r4, r2, #3
 8004444:	3307      	adds	r3, #7
 8004446:	08db      	lsrs	r3, r3, #3
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	466a      	mov	r2, sp
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	469d      	mov	sp, r3
 8004450:	466b      	mov	r3, sp
 8004452:	3300      	adds	r3, #0
 8004454:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8004456:	2300      	movs	r3, #0
 8004458:	64bb      	str	r3, [r7, #72]	; 0x48
 800445a:	e017      	b.n	800448c <_LCD_Write_Frame+0xfc>
	{
			burst_buffer[j] = 	chifted;
 800445c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800445e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004460:	18d3      	adds	r3, r2, r3
 8004462:	221f      	movs	r2, #31
 8004464:	2118      	movs	r1, #24
 8004466:	468c      	mov	ip, r1
 8004468:	44bc      	add	ip, r7
 800446a:	4462      	add	r2, ip
 800446c:	7812      	ldrb	r2, [r2, #0]
 800446e:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 8004470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004472:	3301      	adds	r3, #1
 8004474:	220a      	movs	r2, #10
 8004476:	2118      	movs	r1, #24
 8004478:	468c      	mov	ip, r1
 800447a:	44bc      	add	ip, r7
 800447c:	4462      	add	r2, ip
 800447e:	8812      	ldrh	r2, [r2, #0]
 8004480:	b2d1      	uxtb	r1, r2
 8004482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004484:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8004486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004488:	3302      	adds	r3, #2
 800448a:	64bb      	str	r3, [r7, #72]	; 0x48
 800448c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800448e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004490:	429a      	cmp	r2, r3
 8004492:	d3e3      	bcc.n	800445c <_LCD_Write_Frame+0xcc>
	}
	
	uint32_t Sending_size = chunk_size*2;
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800449a:	2301      	movs	r3, #1
 800449c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Remainder_from_block = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	643b      	str	r3, [r7, #64]	; 0x40
	if(chunk_size > 0)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00c      	beq.n	80044c2 <_LCD_Write_Frame+0x132>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 80044a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ac:	f7fb fe2c 	bl	8000108 <__udivsi3>
 80044b0:	0003      	movs	r3, r0
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
			Remainder_from_block 	= Sending_size%buffer_size;
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044b8:	0018      	movs	r0, r3
 80044ba:	f7fb feab 	bl	8000214 <__aeabi_uidivmod>
 80044be:	000b      	movs	r3, r1
 80044c0:	643b      	str	r3, [r7, #64]	; 0x40
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80044c2:	2390      	movs	r3, #144	; 0x90
 80044c4:	05db      	lsls	r3, r3, #23
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	2390      	movs	r3, #144	; 0x90
 80044ca:	05db      	lsls	r3, r3, #23
 80044cc:	2110      	movs	r1, #16
 80044ce:	430a      	orrs	r2, r1
 80044d0:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80044d2:	2390      	movs	r3, #144	; 0x90
 80044d4:	05db      	lsls	r3, r3, #23
 80044d6:	695a      	ldr	r2, [r3, #20]
 80044d8:	2390      	movs	r3, #144	; 0x90
 80044da:	05db      	lsls	r3, r3, #23
 80044dc:	2108      	movs	r1, #8
 80044de:	438a      	bics	r2, r1
 80044e0:	615a      	str	r2, [r3, #20]
//TODO
	if(Sending_in_Block != 0)
 80044e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00f      	beq.n	8004508 <_LCD_Write_Frame+0x178>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80044e8:	2300      	movs	r3, #0
 80044ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ec:	e008      	b.n	8004500 <_LCD_Write_Frame+0x170>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 80044ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044f2:	230a      	movs	r3, #10
 80044f4:	2200      	movs	r2, #0
 80044f6:	f000 f8dd 	bl	80046b4 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80044fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fc:	3301      	adds	r3, #1
 80044fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004500:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004504:	429a      	cmp	r2, r3
 8004506:	d3f2      	bcc.n	80044ee <_LCD_Write_Frame+0x15e>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8004508:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800450a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800450c:	230a      	movs	r3, #10
 800450e:	2200      	movs	r2, #0
 8004510:	f000 f8d0 	bl	80046b4 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004514:	2300      	movs	r3, #0
 8004516:	63bb      	str	r3, [r7, #56]	; 0x38
 8004518:	e00a      	b.n	8004530 <_LCD_Write_Frame+0x1a0>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800451a:	2390      	movs	r3, #144	; 0x90
 800451c:	05db      	lsls	r3, r3, #23
 800451e:	695a      	ldr	r2, [r3, #20]
 8004520:	2390      	movs	r3, #144	; 0x90
 8004522:	05db      	lsls	r3, r3, #23
 8004524:	2108      	movs	r1, #8
 8004526:	438a      	bics	r2, r1
 8004528:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452c:	3301      	adds	r3, #1
 800452e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004532:	2b02      	cmp	r3, #2
 8004534:	ddf1      	ble.n	800451a <_LCD_Write_Frame+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8004536:	2390      	movs	r3, #144	; 0x90
 8004538:	05db      	lsls	r3, r3, #23
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	2390      	movs	r3, #144	; 0x90
 800453e:	05db      	lsls	r3, r3, #23
 8004540:	2108      	movs	r1, #8
 8004542:	430a      	orrs	r2, r1
 8004544:	615a      	str	r2, [r3, #20]
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	469d      	mov	sp, r3

}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	46bd      	mov	sp, r7
 800454e:	b015      	add	sp, #84	; 0x54
 8004550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	20000016 	.word	0x20000016

08004558 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	0002      	movs	r2, r0
 8004560:	1dfb      	adds	r3, r7, #7
 8004562:	701a      	strb	r2, [r3, #0]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004564:	2390      	movs	r3, #144	; 0x90
 8004566:	05db      	lsls	r3, r3, #23
 8004568:	695a      	ldr	r2, [r3, #20]
 800456a:	2390      	movs	r3, #144	; 0x90
 800456c:	05db      	lsls	r3, r3, #23
 800456e:	2108      	movs	r1, #8
 8004570:	438a      	bics	r2, r1
 8004572:	615a      	str	r2, [r3, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8004574:	2390      	movs	r3, #144	; 0x90
 8004576:	05db      	lsls	r3, r3, #23
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	2390      	movs	r3, #144	; 0x90
 800457c:	05db      	lsls	r3, r3, #23
 800457e:	2110      	movs	r1, #16
 8004580:	438a      	bics	r2, r1
 8004582:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(command, 0 , 0);
 8004584:	1dfb      	adds	r3, r7, #7
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2200      	movs	r2, #0
 800458a:	2100      	movs	r1, #0
 800458c:	0018      	movs	r0, r3
 800458e:	f000 f857 	bl	8004640 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	e00a      	b.n	80045ae <_LCD_SendCommand+0x56>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004598:	2390      	movs	r3, #144	; 0x90
 800459a:	05db      	lsls	r3, r3, #23
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	2390      	movs	r3, #144	; 0x90
 80045a0:	05db      	lsls	r3, r3, #23
 80045a2:	2108      	movs	r1, #8
 80045a4:	438a      	bics	r2, r1
 80045a6:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3301      	adds	r3, #1
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	ddf1      	ble.n	8004598 <_LCD_SendCommand+0x40>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80045b4:	2390      	movs	r3, #144	; 0x90
 80045b6:	05db      	lsls	r3, r3, #23
 80045b8:	695a      	ldr	r2, [r3, #20]
 80045ba:	2390      	movs	r3, #144	; 0x90
 80045bc:	05db      	lsls	r3, r3, #23
 80045be:	2108      	movs	r1, #8
 80045c0:	430a      	orrs	r2, r1
 80045c2:	615a      	str	r2, [r3, #20]
}
 80045c4:	46c0      	nop			; (mov r8, r8)
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b004      	add	sp, #16
 80045ca:	bd80      	pop	{r7, pc}

080045cc <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	0002      	movs	r2, r0
 80045d4:	1dfb      	adds	r3, r7, #7
 80045d6:	701a      	strb	r2, [r3, #0]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80045d8:	2390      	movs	r3, #144	; 0x90
 80045da:	05db      	lsls	r3, r3, #23
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	2390      	movs	r3, #144	; 0x90
 80045e0:	05db      	lsls	r3, r3, #23
 80045e2:	2110      	movs	r1, #16
 80045e4:	430a      	orrs	r2, r1
 80045e6:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80045e8:	2390      	movs	r3, #144	; 0x90
 80045ea:	05db      	lsls	r3, r3, #23
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	2390      	movs	r3, #144	; 0x90
 80045f0:	05db      	lsls	r3, r3, #23
 80045f2:	2108      	movs	r1, #8
 80045f4:	438a      	bics	r2, r1
 80045f6:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(data, 0 , 0);
 80045f8:	1dfb      	adds	r3, r7, #7
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2200      	movs	r2, #0
 80045fe:	2100      	movs	r1, #0
 8004600:	0018      	movs	r0, r3
 8004602:	f000 f81d 	bl	8004640 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	e00a      	b.n	8004622 <_LCD_SendData+0x56>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800460c:	2390      	movs	r3, #144	; 0x90
 800460e:	05db      	lsls	r3, r3, #23
 8004610:	695a      	ldr	r2, [r3, #20]
 8004612:	2390      	movs	r3, #144	; 0x90
 8004614:	05db      	lsls	r3, r3, #23
 8004616:	2108      	movs	r1, #8
 8004618:	438a      	bics	r2, r1
 800461a:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	3301      	adds	r3, #1
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b02      	cmp	r3, #2
 8004626:	ddf1      	ble.n	800460c <_LCD_SendData+0x40>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004628:	2390      	movs	r3, #144	; 0x90
 800462a:	05db      	lsls	r3, r3, #23
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	2390      	movs	r3, #144	; 0x90
 8004630:	05db      	lsls	r3, r3, #23
 8004632:	2108      	movs	r1, #8
 8004634:	438a      	bics	r2, r1
 8004636:	615a      	str	r2, [r3, #20]
}
 8004638:	46c0      	nop			; (mov r8, r8)
 800463a:	46bd      	mov	sp, r7
 800463c:	b004      	add	sp, #16
 800463e:	bd80      	pop	{r7, pc}

08004640 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8004640:	b590      	push	{r4, r7, lr}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	0004      	movs	r4, r0
 8004648:	0008      	movs	r0, r1
 800464a:	0011      	movs	r1, r2
 800464c:	1dfb      	adds	r3, r7, #7
 800464e:	1c22      	adds	r2, r4, #0
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	1dbb      	adds	r3, r7, #6
 8004654:	1c02      	adds	r2, r0, #0
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	1d7b      	adds	r3, r7, #5
 800465a:	1c0a      	adds	r2, r1, #0
 800465c:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	e003      	b.n	800466c <_SPI_SendByte+0x2c>
   		asm("nop");
 8004664:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3301      	adds	r3, #1
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	1dbb      	adds	r3, r7, #6
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	429a      	cmp	r2, r3
 8004674:	dbf6      	blt.n	8004664 <_SPI_SendByte+0x24>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <_SPI_SendByte+0x6c>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2202      	movs	r2, #2
 800467c:	4013      	ands	r3, r2
 800467e:	2b02      	cmp	r3, #2
 8004680:	d103      	bne.n	800468a <_SPI_SendByte+0x4a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 8004682:	4a0b      	ldr	r2, [pc, #44]	; (80046b0 <_SPI_SendByte+0x70>)
 8004684:	1dfb      	adds	r3, r7, #7
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	e003      	b.n	8004698 <_SPI_SendByte+0x58>
   		asm("nop");
 8004690:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	3301      	adds	r3, #1
 8004696:	60bb      	str	r3, [r7, #8]
 8004698:	1d7b      	adds	r3, r7, #5
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	429a      	cmp	r2, r3
 80046a0:	dbf6      	blt.n	8004690 <_SPI_SendByte+0x50>

#endif

}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b005      	add	sp, #20
 80046a8:	bd90      	pop	{r4, r7, pc}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	40013000 	.word	0x40013000
 80046b0:	4001300c 	.word	0x4001300c

080046b4 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	0019      	movs	r1, r3
 80046c0:	1dfb      	adds	r3, r7, #7
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	1dbb      	adds	r3, r7, #6
 80046c6:	1c0a      	adds	r2, r1, #0
 80046c8:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 80046ca:	2300      	movs	r3, #0
 80046cc:	61fb      	str	r3, [r7, #28]
 80046ce:	e003      	b.n	80046d8 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 80046d0:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	3301      	adds	r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	1dfb      	adds	r3, r7, #7
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	429a      	cmp	r2, r3
 80046e0:	dbf6      	blt.n	80046d0 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 80046e6:	e01d      	b.n	8004724 <_SPI_SendByteMultiByte+0x70>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80046e8:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <_SPI_SendByteMultiByte+0xa4>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2202      	movs	r2, #2
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d117      	bne.n	8004724 <_SPI_SendByteMultiByte+0x70>
		{
			if (buffer_size > 1U)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d90a      	bls.n	8004710 <_SPI_SendByteMultiByte+0x5c>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	881a      	ldrh	r2, [r3, #0]
 80046fe:	4b16      	ldr	r3, [pc, #88]	; (8004758 <_SPI_SendByteMultiByte+0xa4>)
 8004700:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	3302      	adds	r3, #2
 8004706:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	3b02      	subs	r3, #2
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	e009      	b.n	8004724 <_SPI_SendByteMultiByte+0x70>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 8004710:	4a12      	ldr	r2, [pc, #72]	; (800475c <_SPI_SendByteMultiByte+0xa8>)
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	3301      	adds	r3, #1
 800471c:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	3b01      	subs	r3, #1
 8004722:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1de      	bne.n	80046e8 <_SPI_SendByteMultiByte+0x34>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800472a:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <_SPI_SendByteMultiByte+0xa4>)
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <_SPI_SendByteMultiByte+0xa4>)
 8004730:	2140      	movs	r1, #64	; 0x40
 8004732:	438a      	bics	r2, r1
 8004734:	609a      	str	r2, [r3, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e003      	b.n	8004744 <_SPI_SendByteMultiByte+0x90>
   		asm("nop");
 800473c:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	3301      	adds	r3, #1
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	1dbb      	adds	r3, r7, #6
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	429a      	cmp	r2, r3
 800474c:	dbf6      	blt.n	800473c <_SPI_SendByteMultiByte+0x88>

#endif

}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	46bd      	mov	sp, r7
 8004752:	b008      	add	sp, #32
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	40013000 	.word	0x40013000
 800475c:	4001300c 	.word	0x4001300c

08004760 <__errno>:
 8004760:	4b01      	ldr	r3, [pc, #4]	; (8004768 <__errno+0x8>)
 8004762:	6818      	ldr	r0, [r3, #0]
 8004764:	4770      	bx	lr
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	20000018 	.word	0x20000018

0800476c <__libc_init_array>:
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	2600      	movs	r6, #0
 8004770:	4d0c      	ldr	r5, [pc, #48]	; (80047a4 <__libc_init_array+0x38>)
 8004772:	4c0d      	ldr	r4, [pc, #52]	; (80047a8 <__libc_init_array+0x3c>)
 8004774:	1b64      	subs	r4, r4, r5
 8004776:	10a4      	asrs	r4, r4, #2
 8004778:	42a6      	cmp	r6, r4
 800477a:	d109      	bne.n	8004790 <__libc_init_array+0x24>
 800477c:	2600      	movs	r6, #0
 800477e:	f000 fc3b 	bl	8004ff8 <_init>
 8004782:	4d0a      	ldr	r5, [pc, #40]	; (80047ac <__libc_init_array+0x40>)
 8004784:	4c0a      	ldr	r4, [pc, #40]	; (80047b0 <__libc_init_array+0x44>)
 8004786:	1b64      	subs	r4, r4, r5
 8004788:	10a4      	asrs	r4, r4, #2
 800478a:	42a6      	cmp	r6, r4
 800478c:	d105      	bne.n	800479a <__libc_init_array+0x2e>
 800478e:	bd70      	pop	{r4, r5, r6, pc}
 8004790:	00b3      	lsls	r3, r6, #2
 8004792:	58eb      	ldr	r3, [r5, r3]
 8004794:	4798      	blx	r3
 8004796:	3601      	adds	r6, #1
 8004798:	e7ee      	b.n	8004778 <__libc_init_array+0xc>
 800479a:	00b3      	lsls	r3, r6, #2
 800479c:	58eb      	ldr	r3, [r5, r3]
 800479e:	4798      	blx	r3
 80047a0:	3601      	adds	r6, #1
 80047a2:	e7f2      	b.n	800478a <__libc_init_array+0x1e>
 80047a4:	080052f4 	.word	0x080052f4
 80047a8:	080052f4 	.word	0x080052f4
 80047ac:	080052f4 	.word	0x080052f4
 80047b0:	080052f8 	.word	0x080052f8

080047b4 <memset>:
 80047b4:	0003      	movs	r3, r0
 80047b6:	1812      	adds	r2, r2, r0
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d100      	bne.n	80047be <memset+0xa>
 80047bc:	4770      	bx	lr
 80047be:	7019      	strb	r1, [r3, #0]
 80047c0:	3301      	adds	r3, #1
 80047c2:	e7f9      	b.n	80047b8 <memset+0x4>

080047c4 <sniprintf>:
 80047c4:	b40c      	push	{r2, r3}
 80047c6:	b530      	push	{r4, r5, lr}
 80047c8:	4b16      	ldr	r3, [pc, #88]	; (8004824 <sniprintf+0x60>)
 80047ca:	b09d      	sub	sp, #116	; 0x74
 80047cc:	1e0c      	subs	r4, r1, #0
 80047ce:	681d      	ldr	r5, [r3, #0]
 80047d0:	da08      	bge.n	80047e4 <sniprintf+0x20>
 80047d2:	238b      	movs	r3, #139	; 0x8b
 80047d4:	2001      	movs	r0, #1
 80047d6:	602b      	str	r3, [r5, #0]
 80047d8:	4240      	negs	r0, r0
 80047da:	b01d      	add	sp, #116	; 0x74
 80047dc:	bc30      	pop	{r4, r5}
 80047de:	bc08      	pop	{r3}
 80047e0:	b002      	add	sp, #8
 80047e2:	4718      	bx	r3
 80047e4:	2382      	movs	r3, #130	; 0x82
 80047e6:	a902      	add	r1, sp, #8
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	818b      	strh	r3, [r1, #12]
 80047ec:	2300      	movs	r3, #0
 80047ee:	9002      	str	r0, [sp, #8]
 80047f0:	6108      	str	r0, [r1, #16]
 80047f2:	429c      	cmp	r4, r3
 80047f4:	d000      	beq.n	80047f8 <sniprintf+0x34>
 80047f6:	1e63      	subs	r3, r4, #1
 80047f8:	608b      	str	r3, [r1, #8]
 80047fa:	614b      	str	r3, [r1, #20]
 80047fc:	2301      	movs	r3, #1
 80047fe:	425b      	negs	r3, r3
 8004800:	81cb      	strh	r3, [r1, #14]
 8004802:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004804:	ab21      	add	r3, sp, #132	; 0x84
 8004806:	0028      	movs	r0, r5
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	f000 f86f 	bl	80048ec <_svfiprintf_r>
 800480e:	1c43      	adds	r3, r0, #1
 8004810:	da01      	bge.n	8004816 <sniprintf+0x52>
 8004812:	238b      	movs	r3, #139	; 0x8b
 8004814:	602b      	str	r3, [r5, #0]
 8004816:	2c00      	cmp	r4, #0
 8004818:	d0df      	beq.n	80047da <sniprintf+0x16>
 800481a:	2300      	movs	r3, #0
 800481c:	9a02      	ldr	r2, [sp, #8]
 800481e:	7013      	strb	r3, [r2, #0]
 8004820:	e7db      	b.n	80047da <sniprintf+0x16>
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	20000018 	.word	0x20000018

08004828 <__ssputs_r>:
 8004828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800482a:	688e      	ldr	r6, [r1, #8]
 800482c:	b085      	sub	sp, #20
 800482e:	0007      	movs	r7, r0
 8004830:	000c      	movs	r4, r1
 8004832:	9203      	str	r2, [sp, #12]
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	429e      	cmp	r6, r3
 8004838:	d83c      	bhi.n	80048b4 <__ssputs_r+0x8c>
 800483a:	2390      	movs	r3, #144	; 0x90
 800483c:	898a      	ldrh	r2, [r1, #12]
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	421a      	tst	r2, r3
 8004842:	d034      	beq.n	80048ae <__ssputs_r+0x86>
 8004844:	2503      	movs	r5, #3
 8004846:	6909      	ldr	r1, [r1, #16]
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	1a5b      	subs	r3, r3, r1
 800484c:	9302      	str	r3, [sp, #8]
 800484e:	6963      	ldr	r3, [r4, #20]
 8004850:	9802      	ldr	r0, [sp, #8]
 8004852:	435d      	muls	r5, r3
 8004854:	0feb      	lsrs	r3, r5, #31
 8004856:	195d      	adds	r5, r3, r5
 8004858:	9b01      	ldr	r3, [sp, #4]
 800485a:	106d      	asrs	r5, r5, #1
 800485c:	3301      	adds	r3, #1
 800485e:	181b      	adds	r3, r3, r0
 8004860:	42ab      	cmp	r3, r5
 8004862:	d900      	bls.n	8004866 <__ssputs_r+0x3e>
 8004864:	001d      	movs	r5, r3
 8004866:	0553      	lsls	r3, r2, #21
 8004868:	d532      	bpl.n	80048d0 <__ssputs_r+0xa8>
 800486a:	0029      	movs	r1, r5
 800486c:	0038      	movs	r0, r7
 800486e:	f000 fb23 	bl	8004eb8 <_malloc_r>
 8004872:	1e06      	subs	r6, r0, #0
 8004874:	d109      	bne.n	800488a <__ssputs_r+0x62>
 8004876:	230c      	movs	r3, #12
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	2340      	movs	r3, #64	; 0x40
 800487c:	2001      	movs	r0, #1
 800487e:	89a2      	ldrh	r2, [r4, #12]
 8004880:	4240      	negs	r0, r0
 8004882:	4313      	orrs	r3, r2
 8004884:	81a3      	strh	r3, [r4, #12]
 8004886:	b005      	add	sp, #20
 8004888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800488a:	9a02      	ldr	r2, [sp, #8]
 800488c:	6921      	ldr	r1, [r4, #16]
 800488e:	f000 faac 	bl	8004dea <memcpy>
 8004892:	89a3      	ldrh	r3, [r4, #12]
 8004894:	4a14      	ldr	r2, [pc, #80]	; (80048e8 <__ssputs_r+0xc0>)
 8004896:	401a      	ands	r2, r3
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	4313      	orrs	r3, r2
 800489c:	81a3      	strh	r3, [r4, #12]
 800489e:	9b02      	ldr	r3, [sp, #8]
 80048a0:	6126      	str	r6, [r4, #16]
 80048a2:	18f6      	adds	r6, r6, r3
 80048a4:	6026      	str	r6, [r4, #0]
 80048a6:	6165      	str	r5, [r4, #20]
 80048a8:	9e01      	ldr	r6, [sp, #4]
 80048aa:	1aed      	subs	r5, r5, r3
 80048ac:	60a5      	str	r5, [r4, #8]
 80048ae:	9b01      	ldr	r3, [sp, #4]
 80048b0:	429e      	cmp	r6, r3
 80048b2:	d900      	bls.n	80048b6 <__ssputs_r+0x8e>
 80048b4:	9e01      	ldr	r6, [sp, #4]
 80048b6:	0032      	movs	r2, r6
 80048b8:	9903      	ldr	r1, [sp, #12]
 80048ba:	6820      	ldr	r0, [r4, #0]
 80048bc:	f000 fa9e 	bl	8004dfc <memmove>
 80048c0:	68a3      	ldr	r3, [r4, #8]
 80048c2:	2000      	movs	r0, #0
 80048c4:	1b9b      	subs	r3, r3, r6
 80048c6:	60a3      	str	r3, [r4, #8]
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	199e      	adds	r6, r3, r6
 80048cc:	6026      	str	r6, [r4, #0]
 80048ce:	e7da      	b.n	8004886 <__ssputs_r+0x5e>
 80048d0:	002a      	movs	r2, r5
 80048d2:	0038      	movs	r0, r7
 80048d4:	f000 fb4e 	bl	8004f74 <_realloc_r>
 80048d8:	1e06      	subs	r6, r0, #0
 80048da:	d1e0      	bne.n	800489e <__ssputs_r+0x76>
 80048dc:	6921      	ldr	r1, [r4, #16]
 80048de:	0038      	movs	r0, r7
 80048e0:	f000 faa0 	bl	8004e24 <_free_r>
 80048e4:	e7c7      	b.n	8004876 <__ssputs_r+0x4e>
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	fffffb7f 	.word	0xfffffb7f

080048ec <_svfiprintf_r>:
 80048ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ee:	b0a1      	sub	sp, #132	; 0x84
 80048f0:	9003      	str	r0, [sp, #12]
 80048f2:	001d      	movs	r5, r3
 80048f4:	898b      	ldrh	r3, [r1, #12]
 80048f6:	000f      	movs	r7, r1
 80048f8:	0016      	movs	r6, r2
 80048fa:	061b      	lsls	r3, r3, #24
 80048fc:	d511      	bpl.n	8004922 <_svfiprintf_r+0x36>
 80048fe:	690b      	ldr	r3, [r1, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10e      	bne.n	8004922 <_svfiprintf_r+0x36>
 8004904:	2140      	movs	r1, #64	; 0x40
 8004906:	f000 fad7 	bl	8004eb8 <_malloc_r>
 800490a:	6038      	str	r0, [r7, #0]
 800490c:	6138      	str	r0, [r7, #16]
 800490e:	2800      	cmp	r0, #0
 8004910:	d105      	bne.n	800491e <_svfiprintf_r+0x32>
 8004912:	230c      	movs	r3, #12
 8004914:	9a03      	ldr	r2, [sp, #12]
 8004916:	3801      	subs	r0, #1
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	b021      	add	sp, #132	; 0x84
 800491c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800491e:	2340      	movs	r3, #64	; 0x40
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	2300      	movs	r3, #0
 8004924:	ac08      	add	r4, sp, #32
 8004926:	6163      	str	r3, [r4, #20]
 8004928:	3320      	adds	r3, #32
 800492a:	7663      	strb	r3, [r4, #25]
 800492c:	3310      	adds	r3, #16
 800492e:	76a3      	strb	r3, [r4, #26]
 8004930:	9507      	str	r5, [sp, #28]
 8004932:	0035      	movs	r5, r6
 8004934:	782b      	ldrb	r3, [r5, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <_svfiprintf_r+0x52>
 800493a:	2b25      	cmp	r3, #37	; 0x25
 800493c:	d146      	bne.n	80049cc <_svfiprintf_r+0xe0>
 800493e:	1bab      	subs	r3, r5, r6
 8004940:	9305      	str	r3, [sp, #20]
 8004942:	d00c      	beq.n	800495e <_svfiprintf_r+0x72>
 8004944:	0032      	movs	r2, r6
 8004946:	0039      	movs	r1, r7
 8004948:	9803      	ldr	r0, [sp, #12]
 800494a:	f7ff ff6d 	bl	8004828 <__ssputs_r>
 800494e:	1c43      	adds	r3, r0, #1
 8004950:	d100      	bne.n	8004954 <_svfiprintf_r+0x68>
 8004952:	e0ae      	b.n	8004ab2 <_svfiprintf_r+0x1c6>
 8004954:	6962      	ldr	r2, [r4, #20]
 8004956:	9b05      	ldr	r3, [sp, #20]
 8004958:	4694      	mov	ip, r2
 800495a:	4463      	add	r3, ip
 800495c:	6163      	str	r3, [r4, #20]
 800495e:	782b      	ldrb	r3, [r5, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d100      	bne.n	8004966 <_svfiprintf_r+0x7a>
 8004964:	e0a5      	b.n	8004ab2 <_svfiprintf_r+0x1c6>
 8004966:	2201      	movs	r2, #1
 8004968:	2300      	movs	r3, #0
 800496a:	4252      	negs	r2, r2
 800496c:	6062      	str	r2, [r4, #4]
 800496e:	a904      	add	r1, sp, #16
 8004970:	3254      	adds	r2, #84	; 0x54
 8004972:	1852      	adds	r2, r2, r1
 8004974:	1c6e      	adds	r6, r5, #1
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	60e3      	str	r3, [r4, #12]
 800497a:	60a3      	str	r3, [r4, #8]
 800497c:	7013      	strb	r3, [r2, #0]
 800497e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004980:	7831      	ldrb	r1, [r6, #0]
 8004982:	2205      	movs	r2, #5
 8004984:	4853      	ldr	r0, [pc, #332]	; (8004ad4 <_svfiprintf_r+0x1e8>)
 8004986:	f000 fa25 	bl	8004dd4 <memchr>
 800498a:	1c75      	adds	r5, r6, #1
 800498c:	2800      	cmp	r0, #0
 800498e:	d11f      	bne.n	80049d0 <_svfiprintf_r+0xe4>
 8004990:	6822      	ldr	r2, [r4, #0]
 8004992:	06d3      	lsls	r3, r2, #27
 8004994:	d504      	bpl.n	80049a0 <_svfiprintf_r+0xb4>
 8004996:	2353      	movs	r3, #83	; 0x53
 8004998:	a904      	add	r1, sp, #16
 800499a:	185b      	adds	r3, r3, r1
 800499c:	2120      	movs	r1, #32
 800499e:	7019      	strb	r1, [r3, #0]
 80049a0:	0713      	lsls	r3, r2, #28
 80049a2:	d504      	bpl.n	80049ae <_svfiprintf_r+0xc2>
 80049a4:	2353      	movs	r3, #83	; 0x53
 80049a6:	a904      	add	r1, sp, #16
 80049a8:	185b      	adds	r3, r3, r1
 80049aa:	212b      	movs	r1, #43	; 0x2b
 80049ac:	7019      	strb	r1, [r3, #0]
 80049ae:	7833      	ldrb	r3, [r6, #0]
 80049b0:	2b2a      	cmp	r3, #42	; 0x2a
 80049b2:	d016      	beq.n	80049e2 <_svfiprintf_r+0xf6>
 80049b4:	0035      	movs	r5, r6
 80049b6:	2100      	movs	r1, #0
 80049b8:	200a      	movs	r0, #10
 80049ba:	68e3      	ldr	r3, [r4, #12]
 80049bc:	782a      	ldrb	r2, [r5, #0]
 80049be:	1c6e      	adds	r6, r5, #1
 80049c0:	3a30      	subs	r2, #48	; 0x30
 80049c2:	2a09      	cmp	r2, #9
 80049c4:	d94e      	bls.n	8004a64 <_svfiprintf_r+0x178>
 80049c6:	2900      	cmp	r1, #0
 80049c8:	d018      	beq.n	80049fc <_svfiprintf_r+0x110>
 80049ca:	e010      	b.n	80049ee <_svfiprintf_r+0x102>
 80049cc:	3501      	adds	r5, #1
 80049ce:	e7b1      	b.n	8004934 <_svfiprintf_r+0x48>
 80049d0:	4b40      	ldr	r3, [pc, #256]	; (8004ad4 <_svfiprintf_r+0x1e8>)
 80049d2:	6822      	ldr	r2, [r4, #0]
 80049d4:	1ac0      	subs	r0, r0, r3
 80049d6:	2301      	movs	r3, #1
 80049d8:	4083      	lsls	r3, r0
 80049da:	4313      	orrs	r3, r2
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	002e      	movs	r6, r5
 80049e0:	e7ce      	b.n	8004980 <_svfiprintf_r+0x94>
 80049e2:	9b07      	ldr	r3, [sp, #28]
 80049e4:	1d19      	adds	r1, r3, #4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	9107      	str	r1, [sp, #28]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	db01      	blt.n	80049f2 <_svfiprintf_r+0x106>
 80049ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80049f0:	e004      	b.n	80049fc <_svfiprintf_r+0x110>
 80049f2:	425b      	negs	r3, r3
 80049f4:	60e3      	str	r3, [r4, #12]
 80049f6:	2302      	movs	r3, #2
 80049f8:	4313      	orrs	r3, r2
 80049fa:	6023      	str	r3, [r4, #0]
 80049fc:	782b      	ldrb	r3, [r5, #0]
 80049fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004a00:	d10a      	bne.n	8004a18 <_svfiprintf_r+0x12c>
 8004a02:	786b      	ldrb	r3, [r5, #1]
 8004a04:	2b2a      	cmp	r3, #42	; 0x2a
 8004a06:	d135      	bne.n	8004a74 <_svfiprintf_r+0x188>
 8004a08:	9b07      	ldr	r3, [sp, #28]
 8004a0a:	3502      	adds	r5, #2
 8004a0c:	1d1a      	adds	r2, r3, #4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	9207      	str	r2, [sp, #28]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	db2b      	blt.n	8004a6e <_svfiprintf_r+0x182>
 8004a16:	9309      	str	r3, [sp, #36]	; 0x24
 8004a18:	4e2f      	ldr	r6, [pc, #188]	; (8004ad8 <_svfiprintf_r+0x1ec>)
 8004a1a:	7829      	ldrb	r1, [r5, #0]
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	0030      	movs	r0, r6
 8004a20:	f000 f9d8 	bl	8004dd4 <memchr>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d006      	beq.n	8004a36 <_svfiprintf_r+0x14a>
 8004a28:	2340      	movs	r3, #64	; 0x40
 8004a2a:	1b80      	subs	r0, r0, r6
 8004a2c:	4083      	lsls	r3, r0
 8004a2e:	6822      	ldr	r2, [r4, #0]
 8004a30:	3501      	adds	r5, #1
 8004a32:	4313      	orrs	r3, r2
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	7829      	ldrb	r1, [r5, #0]
 8004a38:	2206      	movs	r2, #6
 8004a3a:	4828      	ldr	r0, [pc, #160]	; (8004adc <_svfiprintf_r+0x1f0>)
 8004a3c:	1c6e      	adds	r6, r5, #1
 8004a3e:	7621      	strb	r1, [r4, #24]
 8004a40:	f000 f9c8 	bl	8004dd4 <memchr>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d03c      	beq.n	8004ac2 <_svfiprintf_r+0x1d6>
 8004a48:	4b25      	ldr	r3, [pc, #148]	; (8004ae0 <_svfiprintf_r+0x1f4>)
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d125      	bne.n	8004a9a <_svfiprintf_r+0x1ae>
 8004a4e:	2207      	movs	r2, #7
 8004a50:	9b07      	ldr	r3, [sp, #28]
 8004a52:	3307      	adds	r3, #7
 8004a54:	4393      	bics	r3, r2
 8004a56:	3308      	adds	r3, #8
 8004a58:	9307      	str	r3, [sp, #28]
 8004a5a:	6963      	ldr	r3, [r4, #20]
 8004a5c:	9a04      	ldr	r2, [sp, #16]
 8004a5e:	189b      	adds	r3, r3, r2
 8004a60:	6163      	str	r3, [r4, #20]
 8004a62:	e766      	b.n	8004932 <_svfiprintf_r+0x46>
 8004a64:	4343      	muls	r3, r0
 8004a66:	2101      	movs	r1, #1
 8004a68:	189b      	adds	r3, r3, r2
 8004a6a:	0035      	movs	r5, r6
 8004a6c:	e7a6      	b.n	80049bc <_svfiprintf_r+0xd0>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	425b      	negs	r3, r3
 8004a72:	e7d0      	b.n	8004a16 <_svfiprintf_r+0x12a>
 8004a74:	2300      	movs	r3, #0
 8004a76:	200a      	movs	r0, #10
 8004a78:	001a      	movs	r2, r3
 8004a7a:	3501      	adds	r5, #1
 8004a7c:	6063      	str	r3, [r4, #4]
 8004a7e:	7829      	ldrb	r1, [r5, #0]
 8004a80:	1c6e      	adds	r6, r5, #1
 8004a82:	3930      	subs	r1, #48	; 0x30
 8004a84:	2909      	cmp	r1, #9
 8004a86:	d903      	bls.n	8004a90 <_svfiprintf_r+0x1a4>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0c5      	beq.n	8004a18 <_svfiprintf_r+0x12c>
 8004a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a8e:	e7c3      	b.n	8004a18 <_svfiprintf_r+0x12c>
 8004a90:	4342      	muls	r2, r0
 8004a92:	2301      	movs	r3, #1
 8004a94:	1852      	adds	r2, r2, r1
 8004a96:	0035      	movs	r5, r6
 8004a98:	e7f1      	b.n	8004a7e <_svfiprintf_r+0x192>
 8004a9a:	ab07      	add	r3, sp, #28
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	003a      	movs	r2, r7
 8004aa0:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <_svfiprintf_r+0x1f8>)
 8004aa2:	0021      	movs	r1, r4
 8004aa4:	9803      	ldr	r0, [sp, #12]
 8004aa6:	e000      	b.n	8004aaa <_svfiprintf_r+0x1be>
 8004aa8:	bf00      	nop
 8004aaa:	9004      	str	r0, [sp, #16]
 8004aac:	9b04      	ldr	r3, [sp, #16]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	d1d3      	bne.n	8004a5a <_svfiprintf_r+0x16e>
 8004ab2:	89bb      	ldrh	r3, [r7, #12]
 8004ab4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004ab6:	065b      	lsls	r3, r3, #25
 8004ab8:	d400      	bmi.n	8004abc <_svfiprintf_r+0x1d0>
 8004aba:	e72e      	b.n	800491a <_svfiprintf_r+0x2e>
 8004abc:	2001      	movs	r0, #1
 8004abe:	4240      	negs	r0, r0
 8004ac0:	e72b      	b.n	800491a <_svfiprintf_r+0x2e>
 8004ac2:	ab07      	add	r3, sp, #28
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	003a      	movs	r2, r7
 8004ac8:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <_svfiprintf_r+0x1f8>)
 8004aca:	0021      	movs	r1, r4
 8004acc:	9803      	ldr	r0, [sp, #12]
 8004ace:	f000 f879 	bl	8004bc4 <_printf_i>
 8004ad2:	e7ea      	b.n	8004aaa <_svfiprintf_r+0x1be>
 8004ad4:	080052c0 	.word	0x080052c0
 8004ad8:	080052c6 	.word	0x080052c6
 8004adc:	080052ca 	.word	0x080052ca
 8004ae0:	00000000 	.word	0x00000000
 8004ae4:	08004829 	.word	0x08004829

08004ae8 <_printf_common>:
 8004ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aea:	0015      	movs	r5, r2
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	688a      	ldr	r2, [r1, #8]
 8004af0:	690b      	ldr	r3, [r1, #16]
 8004af2:	9000      	str	r0, [sp, #0]
 8004af4:	000c      	movs	r4, r1
 8004af6:	4293      	cmp	r3, r2
 8004af8:	da00      	bge.n	8004afc <_printf_common+0x14>
 8004afa:	0013      	movs	r3, r2
 8004afc:	0022      	movs	r2, r4
 8004afe:	602b      	str	r3, [r5, #0]
 8004b00:	3243      	adds	r2, #67	; 0x43
 8004b02:	7812      	ldrb	r2, [r2, #0]
 8004b04:	2a00      	cmp	r2, #0
 8004b06:	d001      	beq.n	8004b0c <_printf_common+0x24>
 8004b08:	3301      	adds	r3, #1
 8004b0a:	602b      	str	r3, [r5, #0]
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	069b      	lsls	r3, r3, #26
 8004b10:	d502      	bpl.n	8004b18 <_printf_common+0x30>
 8004b12:	682b      	ldr	r3, [r5, #0]
 8004b14:	3302      	adds	r3, #2
 8004b16:	602b      	str	r3, [r5, #0]
 8004b18:	2706      	movs	r7, #6
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	401f      	ands	r7, r3
 8004b1e:	d027      	beq.n	8004b70 <_printf_common+0x88>
 8004b20:	0023      	movs	r3, r4
 8004b22:	3343      	adds	r3, #67	; 0x43
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	1e5a      	subs	r2, r3, #1
 8004b28:	4193      	sbcs	r3, r2
 8004b2a:	6822      	ldr	r2, [r4, #0]
 8004b2c:	0692      	lsls	r2, r2, #26
 8004b2e:	d430      	bmi.n	8004b92 <_printf_common+0xaa>
 8004b30:	0022      	movs	r2, r4
 8004b32:	9901      	ldr	r1, [sp, #4]
 8004b34:	3243      	adds	r2, #67	; 0x43
 8004b36:	9800      	ldr	r0, [sp, #0]
 8004b38:	9e08      	ldr	r6, [sp, #32]
 8004b3a:	47b0      	blx	r6
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d025      	beq.n	8004b8c <_printf_common+0xa4>
 8004b40:	2306      	movs	r3, #6
 8004b42:	6820      	ldr	r0, [r4, #0]
 8004b44:	682a      	ldr	r2, [r5, #0]
 8004b46:	68e1      	ldr	r1, [r4, #12]
 8004b48:	4003      	ands	r3, r0
 8004b4a:	2500      	movs	r5, #0
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d103      	bne.n	8004b58 <_printf_common+0x70>
 8004b50:	1a8d      	subs	r5, r1, r2
 8004b52:	43eb      	mvns	r3, r5
 8004b54:	17db      	asrs	r3, r3, #31
 8004b56:	401d      	ands	r5, r3
 8004b58:	68a3      	ldr	r3, [r4, #8]
 8004b5a:	6922      	ldr	r2, [r4, #16]
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	dd01      	ble.n	8004b64 <_printf_common+0x7c>
 8004b60:	1a9b      	subs	r3, r3, r2
 8004b62:	18ed      	adds	r5, r5, r3
 8004b64:	2700      	movs	r7, #0
 8004b66:	42bd      	cmp	r5, r7
 8004b68:	d120      	bne.n	8004bac <_printf_common+0xc4>
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	e010      	b.n	8004b90 <_printf_common+0xa8>
 8004b6e:	3701      	adds	r7, #1
 8004b70:	68e3      	ldr	r3, [r4, #12]
 8004b72:	682a      	ldr	r2, [r5, #0]
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	42bb      	cmp	r3, r7
 8004b78:	ddd2      	ble.n	8004b20 <_printf_common+0x38>
 8004b7a:	0022      	movs	r2, r4
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	3219      	adds	r2, #25
 8004b80:	9901      	ldr	r1, [sp, #4]
 8004b82:	9800      	ldr	r0, [sp, #0]
 8004b84:	9e08      	ldr	r6, [sp, #32]
 8004b86:	47b0      	blx	r6
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d1f0      	bne.n	8004b6e <_printf_common+0x86>
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	4240      	negs	r0, r0
 8004b90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b92:	2030      	movs	r0, #48	; 0x30
 8004b94:	18e1      	adds	r1, r4, r3
 8004b96:	3143      	adds	r1, #67	; 0x43
 8004b98:	7008      	strb	r0, [r1, #0]
 8004b9a:	0021      	movs	r1, r4
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	3145      	adds	r1, #69	; 0x45
 8004ba0:	7809      	ldrb	r1, [r1, #0]
 8004ba2:	18a2      	adds	r2, r4, r2
 8004ba4:	3243      	adds	r2, #67	; 0x43
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	7011      	strb	r1, [r2, #0]
 8004baa:	e7c1      	b.n	8004b30 <_printf_common+0x48>
 8004bac:	0022      	movs	r2, r4
 8004bae:	2301      	movs	r3, #1
 8004bb0:	321a      	adds	r2, #26
 8004bb2:	9901      	ldr	r1, [sp, #4]
 8004bb4:	9800      	ldr	r0, [sp, #0]
 8004bb6:	9e08      	ldr	r6, [sp, #32]
 8004bb8:	47b0      	blx	r6
 8004bba:	1c43      	adds	r3, r0, #1
 8004bbc:	d0e6      	beq.n	8004b8c <_printf_common+0xa4>
 8004bbe:	3701      	adds	r7, #1
 8004bc0:	e7d1      	b.n	8004b66 <_printf_common+0x7e>
	...

08004bc4 <_printf_i>:
 8004bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bc6:	b089      	sub	sp, #36	; 0x24
 8004bc8:	9204      	str	r2, [sp, #16]
 8004bca:	000a      	movs	r2, r1
 8004bcc:	3243      	adds	r2, #67	; 0x43
 8004bce:	9305      	str	r3, [sp, #20]
 8004bd0:	9003      	str	r0, [sp, #12]
 8004bd2:	9202      	str	r2, [sp, #8]
 8004bd4:	7e0a      	ldrb	r2, [r1, #24]
 8004bd6:	000c      	movs	r4, r1
 8004bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bda:	2a6e      	cmp	r2, #110	; 0x6e
 8004bdc:	d100      	bne.n	8004be0 <_printf_i+0x1c>
 8004bde:	e086      	b.n	8004cee <_printf_i+0x12a>
 8004be0:	d81f      	bhi.n	8004c22 <_printf_i+0x5e>
 8004be2:	2a63      	cmp	r2, #99	; 0x63
 8004be4:	d033      	beq.n	8004c4e <_printf_i+0x8a>
 8004be6:	d808      	bhi.n	8004bfa <_printf_i+0x36>
 8004be8:	2a00      	cmp	r2, #0
 8004bea:	d100      	bne.n	8004bee <_printf_i+0x2a>
 8004bec:	e08c      	b.n	8004d08 <_printf_i+0x144>
 8004bee:	2a58      	cmp	r2, #88	; 0x58
 8004bf0:	d04d      	beq.n	8004c8e <_printf_i+0xca>
 8004bf2:	0025      	movs	r5, r4
 8004bf4:	3542      	adds	r5, #66	; 0x42
 8004bf6:	702a      	strb	r2, [r5, #0]
 8004bf8:	e030      	b.n	8004c5c <_printf_i+0x98>
 8004bfa:	2a64      	cmp	r2, #100	; 0x64
 8004bfc:	d001      	beq.n	8004c02 <_printf_i+0x3e>
 8004bfe:	2a69      	cmp	r2, #105	; 0x69
 8004c00:	d1f7      	bne.n	8004bf2 <_printf_i+0x2e>
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	6825      	ldr	r5, [r4, #0]
 8004c06:	1d0a      	adds	r2, r1, #4
 8004c08:	0628      	lsls	r0, r5, #24
 8004c0a:	d529      	bpl.n	8004c60 <_printf_i+0x9c>
 8004c0c:	6808      	ldr	r0, [r1, #0]
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	2800      	cmp	r0, #0
 8004c12:	da03      	bge.n	8004c1c <_printf_i+0x58>
 8004c14:	232d      	movs	r3, #45	; 0x2d
 8004c16:	9a02      	ldr	r2, [sp, #8]
 8004c18:	4240      	negs	r0, r0
 8004c1a:	7013      	strb	r3, [r2, #0]
 8004c1c:	4e6b      	ldr	r6, [pc, #428]	; (8004dcc <_printf_i+0x208>)
 8004c1e:	270a      	movs	r7, #10
 8004c20:	e04f      	b.n	8004cc2 <_printf_i+0xfe>
 8004c22:	2a73      	cmp	r2, #115	; 0x73
 8004c24:	d074      	beq.n	8004d10 <_printf_i+0x14c>
 8004c26:	d808      	bhi.n	8004c3a <_printf_i+0x76>
 8004c28:	2a6f      	cmp	r2, #111	; 0x6f
 8004c2a:	d01f      	beq.n	8004c6c <_printf_i+0xa8>
 8004c2c:	2a70      	cmp	r2, #112	; 0x70
 8004c2e:	d1e0      	bne.n	8004bf2 <_printf_i+0x2e>
 8004c30:	2220      	movs	r2, #32
 8004c32:	6809      	ldr	r1, [r1, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	6022      	str	r2, [r4, #0]
 8004c38:	e003      	b.n	8004c42 <_printf_i+0x7e>
 8004c3a:	2a75      	cmp	r2, #117	; 0x75
 8004c3c:	d016      	beq.n	8004c6c <_printf_i+0xa8>
 8004c3e:	2a78      	cmp	r2, #120	; 0x78
 8004c40:	d1d7      	bne.n	8004bf2 <_printf_i+0x2e>
 8004c42:	0022      	movs	r2, r4
 8004c44:	2178      	movs	r1, #120	; 0x78
 8004c46:	3245      	adds	r2, #69	; 0x45
 8004c48:	7011      	strb	r1, [r2, #0]
 8004c4a:	4e61      	ldr	r6, [pc, #388]	; (8004dd0 <_printf_i+0x20c>)
 8004c4c:	e022      	b.n	8004c94 <_printf_i+0xd0>
 8004c4e:	0025      	movs	r5, r4
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	3542      	adds	r5, #66	; 0x42
 8004c54:	1d11      	adds	r1, r2, #4
 8004c56:	6019      	str	r1, [r3, #0]
 8004c58:	6813      	ldr	r3, [r2, #0]
 8004c5a:	702b      	strb	r3, [r5, #0]
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e065      	b.n	8004d2c <_printf_i+0x168>
 8004c60:	6808      	ldr	r0, [r1, #0]
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	0669      	lsls	r1, r5, #25
 8004c66:	d5d3      	bpl.n	8004c10 <_printf_i+0x4c>
 8004c68:	b200      	sxth	r0, r0
 8004c6a:	e7d1      	b.n	8004c10 <_printf_i+0x4c>
 8004c6c:	6819      	ldr	r1, [r3, #0]
 8004c6e:	6825      	ldr	r5, [r4, #0]
 8004c70:	1d08      	adds	r0, r1, #4
 8004c72:	6018      	str	r0, [r3, #0]
 8004c74:	6808      	ldr	r0, [r1, #0]
 8004c76:	062e      	lsls	r6, r5, #24
 8004c78:	d505      	bpl.n	8004c86 <_printf_i+0xc2>
 8004c7a:	4e54      	ldr	r6, [pc, #336]	; (8004dcc <_printf_i+0x208>)
 8004c7c:	2708      	movs	r7, #8
 8004c7e:	2a6f      	cmp	r2, #111	; 0x6f
 8004c80:	d01b      	beq.n	8004cba <_printf_i+0xf6>
 8004c82:	270a      	movs	r7, #10
 8004c84:	e019      	b.n	8004cba <_printf_i+0xf6>
 8004c86:	066d      	lsls	r5, r5, #25
 8004c88:	d5f7      	bpl.n	8004c7a <_printf_i+0xb6>
 8004c8a:	b280      	uxth	r0, r0
 8004c8c:	e7f5      	b.n	8004c7a <_printf_i+0xb6>
 8004c8e:	3145      	adds	r1, #69	; 0x45
 8004c90:	4e4e      	ldr	r6, [pc, #312]	; (8004dcc <_printf_i+0x208>)
 8004c92:	700a      	strb	r2, [r1, #0]
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	6822      	ldr	r2, [r4, #0]
 8004c98:	1d01      	adds	r1, r0, #4
 8004c9a:	6800      	ldr	r0, [r0, #0]
 8004c9c:	6019      	str	r1, [r3, #0]
 8004c9e:	0615      	lsls	r5, r2, #24
 8004ca0:	d521      	bpl.n	8004ce6 <_printf_i+0x122>
 8004ca2:	07d3      	lsls	r3, r2, #31
 8004ca4:	d502      	bpl.n	8004cac <_printf_i+0xe8>
 8004ca6:	2320      	movs	r3, #32
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	6022      	str	r2, [r4, #0]
 8004cac:	2710      	movs	r7, #16
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d103      	bne.n	8004cba <_printf_i+0xf6>
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	6822      	ldr	r2, [r4, #0]
 8004cb6:	439a      	bics	r2, r3
 8004cb8:	6022      	str	r2, [r4, #0]
 8004cba:	0023      	movs	r3, r4
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	3343      	adds	r3, #67	; 0x43
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	6863      	ldr	r3, [r4, #4]
 8004cc4:	60a3      	str	r3, [r4, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	db58      	blt.n	8004d7c <_printf_i+0x1b8>
 8004cca:	2204      	movs	r2, #4
 8004ccc:	6821      	ldr	r1, [r4, #0]
 8004cce:	4391      	bics	r1, r2
 8004cd0:	6021      	str	r1, [r4, #0]
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d154      	bne.n	8004d80 <_printf_i+0x1bc>
 8004cd6:	9d02      	ldr	r5, [sp, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05a      	beq.n	8004d92 <_printf_i+0x1ce>
 8004cdc:	0025      	movs	r5, r4
 8004cde:	7833      	ldrb	r3, [r6, #0]
 8004ce0:	3542      	adds	r5, #66	; 0x42
 8004ce2:	702b      	strb	r3, [r5, #0]
 8004ce4:	e055      	b.n	8004d92 <_printf_i+0x1ce>
 8004ce6:	0655      	lsls	r5, r2, #25
 8004ce8:	d5db      	bpl.n	8004ca2 <_printf_i+0xde>
 8004cea:	b280      	uxth	r0, r0
 8004cec:	e7d9      	b.n	8004ca2 <_printf_i+0xde>
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	680d      	ldr	r5, [r1, #0]
 8004cf2:	1d10      	adds	r0, r2, #4
 8004cf4:	6949      	ldr	r1, [r1, #20]
 8004cf6:	6018      	str	r0, [r3, #0]
 8004cf8:	6813      	ldr	r3, [r2, #0]
 8004cfa:	062e      	lsls	r6, r5, #24
 8004cfc:	d501      	bpl.n	8004d02 <_printf_i+0x13e>
 8004cfe:	6019      	str	r1, [r3, #0]
 8004d00:	e002      	b.n	8004d08 <_printf_i+0x144>
 8004d02:	066d      	lsls	r5, r5, #25
 8004d04:	d5fb      	bpl.n	8004cfe <_printf_i+0x13a>
 8004d06:	8019      	strh	r1, [r3, #0]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9d02      	ldr	r5, [sp, #8]
 8004d0c:	6123      	str	r3, [r4, #16]
 8004d0e:	e04f      	b.n	8004db0 <_printf_i+0x1ec>
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	1d11      	adds	r1, r2, #4
 8004d14:	6019      	str	r1, [r3, #0]
 8004d16:	6815      	ldr	r5, [r2, #0]
 8004d18:	2100      	movs	r1, #0
 8004d1a:	6862      	ldr	r2, [r4, #4]
 8004d1c:	0028      	movs	r0, r5
 8004d1e:	f000 f859 	bl	8004dd4 <memchr>
 8004d22:	2800      	cmp	r0, #0
 8004d24:	d001      	beq.n	8004d2a <_printf_i+0x166>
 8004d26:	1b40      	subs	r0, r0, r5
 8004d28:	6060      	str	r0, [r4, #4]
 8004d2a:	6863      	ldr	r3, [r4, #4]
 8004d2c:	6123      	str	r3, [r4, #16]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9a02      	ldr	r2, [sp, #8]
 8004d32:	7013      	strb	r3, [r2, #0]
 8004d34:	e03c      	b.n	8004db0 <_printf_i+0x1ec>
 8004d36:	6923      	ldr	r3, [r4, #16]
 8004d38:	002a      	movs	r2, r5
 8004d3a:	9904      	ldr	r1, [sp, #16]
 8004d3c:	9803      	ldr	r0, [sp, #12]
 8004d3e:	9d05      	ldr	r5, [sp, #20]
 8004d40:	47a8      	blx	r5
 8004d42:	1c43      	adds	r3, r0, #1
 8004d44:	d03e      	beq.n	8004dc4 <_printf_i+0x200>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	079b      	lsls	r3, r3, #30
 8004d4a:	d415      	bmi.n	8004d78 <_printf_i+0x1b4>
 8004d4c:	9b07      	ldr	r3, [sp, #28]
 8004d4e:	68e0      	ldr	r0, [r4, #12]
 8004d50:	4298      	cmp	r0, r3
 8004d52:	da39      	bge.n	8004dc8 <_printf_i+0x204>
 8004d54:	0018      	movs	r0, r3
 8004d56:	e037      	b.n	8004dc8 <_printf_i+0x204>
 8004d58:	0022      	movs	r2, r4
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	3219      	adds	r2, #25
 8004d5e:	9904      	ldr	r1, [sp, #16]
 8004d60:	9803      	ldr	r0, [sp, #12]
 8004d62:	9e05      	ldr	r6, [sp, #20]
 8004d64:	47b0      	blx	r6
 8004d66:	1c43      	adds	r3, r0, #1
 8004d68:	d02c      	beq.n	8004dc4 <_printf_i+0x200>
 8004d6a:	3501      	adds	r5, #1
 8004d6c:	68e3      	ldr	r3, [r4, #12]
 8004d6e:	9a07      	ldr	r2, [sp, #28]
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	42ab      	cmp	r3, r5
 8004d74:	dcf0      	bgt.n	8004d58 <_printf_i+0x194>
 8004d76:	e7e9      	b.n	8004d4c <_printf_i+0x188>
 8004d78:	2500      	movs	r5, #0
 8004d7a:	e7f7      	b.n	8004d6c <_printf_i+0x1a8>
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d0ad      	beq.n	8004cdc <_printf_i+0x118>
 8004d80:	9d02      	ldr	r5, [sp, #8]
 8004d82:	0039      	movs	r1, r7
 8004d84:	f7fb fa46 	bl	8000214 <__aeabi_uidivmod>
 8004d88:	5c73      	ldrb	r3, [r6, r1]
 8004d8a:	3d01      	subs	r5, #1
 8004d8c:	702b      	strb	r3, [r5, #0]
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d1f7      	bne.n	8004d82 <_printf_i+0x1be>
 8004d92:	2f08      	cmp	r7, #8
 8004d94:	d109      	bne.n	8004daa <_printf_i+0x1e6>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	07db      	lsls	r3, r3, #31
 8004d9a:	d506      	bpl.n	8004daa <_printf_i+0x1e6>
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	6922      	ldr	r2, [r4, #16]
 8004da0:	4293      	cmp	r3, r2
 8004da2:	dc02      	bgt.n	8004daa <_printf_i+0x1e6>
 8004da4:	2330      	movs	r3, #48	; 0x30
 8004da6:	3d01      	subs	r5, #1
 8004da8:	702b      	strb	r3, [r5, #0]
 8004daa:	9b02      	ldr	r3, [sp, #8]
 8004dac:	1b5b      	subs	r3, r3, r5
 8004dae:	6123      	str	r3, [r4, #16]
 8004db0:	9b05      	ldr	r3, [sp, #20]
 8004db2:	aa07      	add	r2, sp, #28
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	0021      	movs	r1, r4
 8004db8:	9b04      	ldr	r3, [sp, #16]
 8004dba:	9803      	ldr	r0, [sp, #12]
 8004dbc:	f7ff fe94 	bl	8004ae8 <_printf_common>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	d1b8      	bne.n	8004d36 <_printf_i+0x172>
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	4240      	negs	r0, r0
 8004dc8:	b009      	add	sp, #36	; 0x24
 8004dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dcc:	080052d1 	.word	0x080052d1
 8004dd0:	080052e2 	.word	0x080052e2

08004dd4 <memchr>:
 8004dd4:	b2c9      	uxtb	r1, r1
 8004dd6:	1882      	adds	r2, r0, r2
 8004dd8:	4290      	cmp	r0, r2
 8004dda:	d101      	bne.n	8004de0 <memchr+0xc>
 8004ddc:	2000      	movs	r0, #0
 8004dde:	4770      	bx	lr
 8004de0:	7803      	ldrb	r3, [r0, #0]
 8004de2:	428b      	cmp	r3, r1
 8004de4:	d0fb      	beq.n	8004dde <memchr+0xa>
 8004de6:	3001      	adds	r0, #1
 8004de8:	e7f6      	b.n	8004dd8 <memchr+0x4>

08004dea <memcpy>:
 8004dea:	2300      	movs	r3, #0
 8004dec:	b510      	push	{r4, lr}
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d100      	bne.n	8004df4 <memcpy+0xa>
 8004df2:	bd10      	pop	{r4, pc}
 8004df4:	5ccc      	ldrb	r4, [r1, r3]
 8004df6:	54c4      	strb	r4, [r0, r3]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	e7f8      	b.n	8004dee <memcpy+0x4>

08004dfc <memmove>:
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	4288      	cmp	r0, r1
 8004e00:	d902      	bls.n	8004e08 <memmove+0xc>
 8004e02:	188b      	adds	r3, r1, r2
 8004e04:	4298      	cmp	r0, r3
 8004e06:	d303      	bcc.n	8004e10 <memmove+0x14>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e007      	b.n	8004e1c <memmove+0x20>
 8004e0c:	5c8b      	ldrb	r3, [r1, r2]
 8004e0e:	5483      	strb	r3, [r0, r2]
 8004e10:	3a01      	subs	r2, #1
 8004e12:	d2fb      	bcs.n	8004e0c <memmove+0x10>
 8004e14:	bd10      	pop	{r4, pc}
 8004e16:	5ccc      	ldrb	r4, [r1, r3]
 8004e18:	54c4      	strb	r4, [r0, r3]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d1fa      	bne.n	8004e16 <memmove+0x1a>
 8004e20:	e7f8      	b.n	8004e14 <memmove+0x18>
	...

08004e24 <_free_r>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	0005      	movs	r5, r0
 8004e28:	2900      	cmp	r1, #0
 8004e2a:	d010      	beq.n	8004e4e <_free_r+0x2a>
 8004e2c:	1f0c      	subs	r4, r1, #4
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	da00      	bge.n	8004e36 <_free_r+0x12>
 8004e34:	18e4      	adds	r4, r4, r3
 8004e36:	0028      	movs	r0, r5
 8004e38:	f000 f8d4 	bl	8004fe4 <__malloc_lock>
 8004e3c:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <_free_r+0x90>)
 8004e3e:	6813      	ldr	r3, [r2, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d105      	bne.n	8004e50 <_free_r+0x2c>
 8004e44:	6063      	str	r3, [r4, #4]
 8004e46:	6014      	str	r4, [r2, #0]
 8004e48:	0028      	movs	r0, r5
 8004e4a:	f000 f8cc 	bl	8004fe6 <__malloc_unlock>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	42a3      	cmp	r3, r4
 8004e52:	d909      	bls.n	8004e68 <_free_r+0x44>
 8004e54:	6821      	ldr	r1, [r4, #0]
 8004e56:	1860      	adds	r0, r4, r1
 8004e58:	4283      	cmp	r3, r0
 8004e5a:	d1f3      	bne.n	8004e44 <_free_r+0x20>
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	1841      	adds	r1, r0, r1
 8004e62:	6021      	str	r1, [r4, #0]
 8004e64:	e7ee      	b.n	8004e44 <_free_r+0x20>
 8004e66:	0013      	movs	r3, r2
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	2a00      	cmp	r2, #0
 8004e6c:	d001      	beq.n	8004e72 <_free_r+0x4e>
 8004e6e:	42a2      	cmp	r2, r4
 8004e70:	d9f9      	bls.n	8004e66 <_free_r+0x42>
 8004e72:	6819      	ldr	r1, [r3, #0]
 8004e74:	1858      	adds	r0, r3, r1
 8004e76:	42a0      	cmp	r0, r4
 8004e78:	d10b      	bne.n	8004e92 <_free_r+0x6e>
 8004e7a:	6820      	ldr	r0, [r4, #0]
 8004e7c:	1809      	adds	r1, r1, r0
 8004e7e:	1858      	adds	r0, r3, r1
 8004e80:	6019      	str	r1, [r3, #0]
 8004e82:	4282      	cmp	r2, r0
 8004e84:	d1e0      	bne.n	8004e48 <_free_r+0x24>
 8004e86:	6810      	ldr	r0, [r2, #0]
 8004e88:	6852      	ldr	r2, [r2, #4]
 8004e8a:	1841      	adds	r1, r0, r1
 8004e8c:	6019      	str	r1, [r3, #0]
 8004e8e:	605a      	str	r2, [r3, #4]
 8004e90:	e7da      	b.n	8004e48 <_free_r+0x24>
 8004e92:	42a0      	cmp	r0, r4
 8004e94:	d902      	bls.n	8004e9c <_free_r+0x78>
 8004e96:	230c      	movs	r3, #12
 8004e98:	602b      	str	r3, [r5, #0]
 8004e9a:	e7d5      	b.n	8004e48 <_free_r+0x24>
 8004e9c:	6821      	ldr	r1, [r4, #0]
 8004e9e:	1860      	adds	r0, r4, r1
 8004ea0:	4282      	cmp	r2, r0
 8004ea2:	d103      	bne.n	8004eac <_free_r+0x88>
 8004ea4:	6810      	ldr	r0, [r2, #0]
 8004ea6:	6852      	ldr	r2, [r2, #4]
 8004ea8:	1841      	adds	r1, r0, r1
 8004eaa:	6021      	str	r1, [r4, #0]
 8004eac:	6062      	str	r2, [r4, #4]
 8004eae:	605c      	str	r4, [r3, #4]
 8004eb0:	e7ca      	b.n	8004e48 <_free_r+0x24>
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	200000a4 	.word	0x200000a4

08004eb8 <_malloc_r>:
 8004eb8:	2303      	movs	r3, #3
 8004eba:	b570      	push	{r4, r5, r6, lr}
 8004ebc:	1ccd      	adds	r5, r1, #3
 8004ebe:	439d      	bics	r5, r3
 8004ec0:	3508      	adds	r5, #8
 8004ec2:	0006      	movs	r6, r0
 8004ec4:	2d0c      	cmp	r5, #12
 8004ec6:	d21e      	bcs.n	8004f06 <_malloc_r+0x4e>
 8004ec8:	250c      	movs	r5, #12
 8004eca:	42a9      	cmp	r1, r5
 8004ecc:	d81d      	bhi.n	8004f0a <_malloc_r+0x52>
 8004ece:	0030      	movs	r0, r6
 8004ed0:	f000 f888 	bl	8004fe4 <__malloc_lock>
 8004ed4:	4a25      	ldr	r2, [pc, #148]	; (8004f6c <_malloc_r+0xb4>)
 8004ed6:	6814      	ldr	r4, [r2, #0]
 8004ed8:	0021      	movs	r1, r4
 8004eda:	2900      	cmp	r1, #0
 8004edc:	d119      	bne.n	8004f12 <_malloc_r+0x5a>
 8004ede:	4c24      	ldr	r4, [pc, #144]	; (8004f70 <_malloc_r+0xb8>)
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <_malloc_r+0x36>
 8004ee6:	0030      	movs	r0, r6
 8004ee8:	f000 f86a 	bl	8004fc0 <_sbrk_r>
 8004eec:	6020      	str	r0, [r4, #0]
 8004eee:	0029      	movs	r1, r5
 8004ef0:	0030      	movs	r0, r6
 8004ef2:	f000 f865 	bl	8004fc0 <_sbrk_r>
 8004ef6:	1c43      	adds	r3, r0, #1
 8004ef8:	d12b      	bne.n	8004f52 <_malloc_r+0x9a>
 8004efa:	230c      	movs	r3, #12
 8004efc:	0030      	movs	r0, r6
 8004efe:	6033      	str	r3, [r6, #0]
 8004f00:	f000 f871 	bl	8004fe6 <__malloc_unlock>
 8004f04:	e003      	b.n	8004f0e <_malloc_r+0x56>
 8004f06:	2d00      	cmp	r5, #0
 8004f08:	dadf      	bge.n	8004eca <_malloc_r+0x12>
 8004f0a:	230c      	movs	r3, #12
 8004f0c:	6033      	str	r3, [r6, #0]
 8004f0e:	2000      	movs	r0, #0
 8004f10:	bd70      	pop	{r4, r5, r6, pc}
 8004f12:	680b      	ldr	r3, [r1, #0]
 8004f14:	1b5b      	subs	r3, r3, r5
 8004f16:	d419      	bmi.n	8004f4c <_malloc_r+0x94>
 8004f18:	2b0b      	cmp	r3, #11
 8004f1a:	d903      	bls.n	8004f24 <_malloc_r+0x6c>
 8004f1c:	600b      	str	r3, [r1, #0]
 8004f1e:	18cc      	adds	r4, r1, r3
 8004f20:	6025      	str	r5, [r4, #0]
 8004f22:	e003      	b.n	8004f2c <_malloc_r+0x74>
 8004f24:	684b      	ldr	r3, [r1, #4]
 8004f26:	428c      	cmp	r4, r1
 8004f28:	d10d      	bne.n	8004f46 <_malloc_r+0x8e>
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	0030      	movs	r0, r6
 8004f2e:	f000 f85a 	bl	8004fe6 <__malloc_unlock>
 8004f32:	0020      	movs	r0, r4
 8004f34:	2207      	movs	r2, #7
 8004f36:	300b      	adds	r0, #11
 8004f38:	1d23      	adds	r3, r4, #4
 8004f3a:	4390      	bics	r0, r2
 8004f3c:	1ac3      	subs	r3, r0, r3
 8004f3e:	d0e7      	beq.n	8004f10 <_malloc_r+0x58>
 8004f40:	425a      	negs	r2, r3
 8004f42:	50e2      	str	r2, [r4, r3]
 8004f44:	e7e4      	b.n	8004f10 <_malloc_r+0x58>
 8004f46:	6063      	str	r3, [r4, #4]
 8004f48:	000c      	movs	r4, r1
 8004f4a:	e7ef      	b.n	8004f2c <_malloc_r+0x74>
 8004f4c:	000c      	movs	r4, r1
 8004f4e:	6849      	ldr	r1, [r1, #4]
 8004f50:	e7c3      	b.n	8004eda <_malloc_r+0x22>
 8004f52:	2303      	movs	r3, #3
 8004f54:	1cc4      	adds	r4, r0, #3
 8004f56:	439c      	bics	r4, r3
 8004f58:	42a0      	cmp	r0, r4
 8004f5a:	d0e1      	beq.n	8004f20 <_malloc_r+0x68>
 8004f5c:	1a21      	subs	r1, r4, r0
 8004f5e:	0030      	movs	r0, r6
 8004f60:	f000 f82e 	bl	8004fc0 <_sbrk_r>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d1db      	bne.n	8004f20 <_malloc_r+0x68>
 8004f68:	e7c7      	b.n	8004efa <_malloc_r+0x42>
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	200000a4 	.word	0x200000a4
 8004f70:	200000a8 	.word	0x200000a8

08004f74 <_realloc_r>:
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f76:	0007      	movs	r7, r0
 8004f78:	000d      	movs	r5, r1
 8004f7a:	0016      	movs	r6, r2
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	d105      	bne.n	8004f8c <_realloc_r+0x18>
 8004f80:	0011      	movs	r1, r2
 8004f82:	f7ff ff99 	bl	8004eb8 <_malloc_r>
 8004f86:	0004      	movs	r4, r0
 8004f88:	0020      	movs	r0, r4
 8004f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f8c:	2a00      	cmp	r2, #0
 8004f8e:	d103      	bne.n	8004f98 <_realloc_r+0x24>
 8004f90:	f7ff ff48 	bl	8004e24 <_free_r>
 8004f94:	0034      	movs	r4, r6
 8004f96:	e7f7      	b.n	8004f88 <_realloc_r+0x14>
 8004f98:	f000 f826 	bl	8004fe8 <_malloc_usable_size_r>
 8004f9c:	002c      	movs	r4, r5
 8004f9e:	42b0      	cmp	r0, r6
 8004fa0:	d2f2      	bcs.n	8004f88 <_realloc_r+0x14>
 8004fa2:	0031      	movs	r1, r6
 8004fa4:	0038      	movs	r0, r7
 8004fa6:	f7ff ff87 	bl	8004eb8 <_malloc_r>
 8004faa:	1e04      	subs	r4, r0, #0
 8004fac:	d0ec      	beq.n	8004f88 <_realloc_r+0x14>
 8004fae:	0029      	movs	r1, r5
 8004fb0:	0032      	movs	r2, r6
 8004fb2:	f7ff ff1a 	bl	8004dea <memcpy>
 8004fb6:	0029      	movs	r1, r5
 8004fb8:	0038      	movs	r0, r7
 8004fba:	f7ff ff33 	bl	8004e24 <_free_r>
 8004fbe:	e7e3      	b.n	8004f88 <_realloc_r+0x14>

08004fc0 <_sbrk_r>:
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	b570      	push	{r4, r5, r6, lr}
 8004fc4:	4c06      	ldr	r4, [pc, #24]	; (8004fe0 <_sbrk_r+0x20>)
 8004fc6:	0005      	movs	r5, r0
 8004fc8:	0008      	movs	r0, r1
 8004fca:	6023      	str	r3, [r4, #0]
 8004fcc:	f7fb ff68 	bl	8000ea0 <_sbrk>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d103      	bne.n	8004fdc <_sbrk_r+0x1c>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d000      	beq.n	8004fdc <_sbrk_r+0x1c>
 8004fda:	602b      	str	r3, [r5, #0]
 8004fdc:	bd70      	pop	{r4, r5, r6, pc}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	200002d8 	.word	0x200002d8

08004fe4 <__malloc_lock>:
 8004fe4:	4770      	bx	lr

08004fe6 <__malloc_unlock>:
 8004fe6:	4770      	bx	lr

08004fe8 <_malloc_usable_size_r>:
 8004fe8:	1f0b      	subs	r3, r1, #4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	1f18      	subs	r0, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	da01      	bge.n	8004ff6 <_malloc_usable_size_r+0xe>
 8004ff2:	580b      	ldr	r3, [r1, r0]
 8004ff4:	18c0      	adds	r0, r0, r3
 8004ff6:	4770      	bx	lr

08004ff8 <_init>:
 8004ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffe:	bc08      	pop	{r3}
 8005000:	469e      	mov	lr, r3
 8005002:	4770      	bx	lr

08005004 <_fini>:
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500a:	bc08      	pop	{r3}
 800500c:	469e      	mov	lr, r3
 800500e:	4770      	bx	lr
