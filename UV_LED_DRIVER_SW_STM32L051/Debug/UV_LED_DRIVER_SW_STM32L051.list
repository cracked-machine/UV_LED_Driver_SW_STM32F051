
UV_LED_DRIVER_SW_STM32L051.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028bc  080028bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028bc  080028bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028bc  080028bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028bc  080028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028c0  080028c0  000128c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  080028d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080028d0  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2c9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d0b  00000000  00000000  0002a2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b30  00000000  00000000  0002c008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a18  00000000  00000000  0002cb38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ec0a  00000000  00000000  0002d550  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009f30  00000000  00000000  0003c15a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00054007  00000000  00000000  0004608a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009a091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b4  00000000  00000000  0009a10c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002874 	.word	0x08002874

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002874 	.word	0x08002874

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f002 fb18 	bl	8002864 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000234:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000236:	4a27      	ldr	r2, [pc, #156]	; (80002d4 <MX_ADC_Init+0xb4>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800023a:	4b25      	ldr	r3, [pc, #148]	; (80002d0 <MX_ADC_Init+0xb0>)
 800023c:	2200      	movs	r2, #0
 800023e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000240:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000246:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800024c:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <MX_ADC_Init+0xb0>)
 800024e:	2201      	movs	r2, #1
 8000250:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000252:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000254:	2204      	movs	r2, #4
 8000256:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000258:	4b1d      	ldr	r3, [pc, #116]	; (80002d0 <MX_ADC_Init+0xb0>)
 800025a:	2200      	movs	r2, #0
 800025c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000260:	2200      	movs	r2, #0
 8000262:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000264:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000266:	2200      	movs	r2, #0
 8000268:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <MX_ADC_Init+0xb0>)
 800026c:	2200      	movs	r2, #0
 800026e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000272:	22c2      	movs	r2, #194	; 0xc2
 8000274:	32ff      	adds	r2, #255	; 0xff
 8000276:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <MX_ADC_Init+0xb0>)
 800027a:	2200      	movs	r2, #0
 800027c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000280:	2224      	movs	r2, #36	; 0x24
 8000282:	2100      	movs	r1, #0
 8000284:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000286:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000288:	2201      	movs	r2, #1
 800028a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800028c:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <MX_ADC_Init+0xb0>)
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fc40 	bl	8000b14 <HAL_ADC_Init>
 8000294:	1e03      	subs	r3, r0, #0
 8000296:	d001      	beq.n	800029c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000298:	f000 f9d4 	bl	8000644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2203      	movs	r2, #3
 80002a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2280      	movs	r2, #128	; 0x80
 80002a6:	0152      	lsls	r2, r2, #5
 80002a8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2280      	movs	r2, #128	; 0x80
 80002ae:	0552      	lsls	r2, r2, #21
 80002b0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002b2:	1d3a      	adds	r2, r7, #4
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <MX_ADC_Init+0xb0>)
 80002b6:	0011      	movs	r1, r2
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 fd6b 	bl	8000d94 <HAL_ADC_ConfigChannel>
 80002be:	1e03      	subs	r3, r0, #0
 80002c0:	d001      	beq.n	80002c6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80002c2:	f000 f9bf 	bl	8000644 <Error_Handler>
  }

}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	46bd      	mov	sp, r7
 80002ca:	b004      	add	sp, #16
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	2000002c 	.word	0x2000002c
 80002d4:	40012400 	.word	0x40012400

080002d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e0:	2314      	movs	r3, #20
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	0018      	movs	r0, r3
 80002e6:	2314      	movs	r3, #20
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f002 faba 	bl	8002864 <memset>
  if(adcHandle->Instance==ADC1)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a19      	ldr	r2, [pc, #100]	; (800035c <HAL_ADC_MspInit+0x84>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d12c      	bne.n	8000354 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002fa:	4b19      	ldr	r3, [pc, #100]	; (8000360 <HAL_ADC_MspInit+0x88>)
 80002fc:	699a      	ldr	r2, [r3, #24]
 80002fe:	4b18      	ldr	r3, [pc, #96]	; (8000360 <HAL_ADC_MspInit+0x88>)
 8000300:	2180      	movs	r1, #128	; 0x80
 8000302:	0089      	lsls	r1, r1, #2
 8000304:	430a      	orrs	r2, r1
 8000306:	619a      	str	r2, [r3, #24]
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <HAL_ADC_MspInit+0x88>)
 800030a:	699a      	ldr	r2, [r3, #24]
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	4013      	ands	r3, r2
 8000312:	613b      	str	r3, [r7, #16]
 8000314:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <HAL_ADC_MspInit+0x88>)
 8000318:	695a      	ldr	r2, [r3, #20]
 800031a:	4b11      	ldr	r3, [pc, #68]	; (8000360 <HAL_ADC_MspInit+0x88>)
 800031c:	2180      	movs	r1, #128	; 0x80
 800031e:	0289      	lsls	r1, r1, #10
 8000320:	430a      	orrs	r2, r1
 8000322:	615a      	str	r2, [r3, #20]
 8000324:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <HAL_ADC_MspInit+0x88>)
 8000326:	695a      	ldr	r2, [r3, #20]
 8000328:	2380      	movs	r3, #128	; 0x80
 800032a:	029b      	lsls	r3, r3, #10
 800032c:	4013      	ands	r3, r2
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000332:	2114      	movs	r1, #20
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2208      	movs	r2, #8
 8000338:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2203      	movs	r2, #3
 800033e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000346:	187a      	adds	r2, r7, r1
 8000348:	2390      	movs	r3, #144	; 0x90
 800034a:	05db      	lsls	r3, r3, #23
 800034c:	0011      	movs	r1, r2
 800034e:	0018      	movs	r0, r3
 8000350:	f000 ff6e 	bl	8001230 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b00a      	add	sp, #40	; 0x28
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40012400 	.word	0x40012400
 8000360:	40021000 	.word	0x40021000

08000364 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800036a:	003b      	movs	r3, r7
 800036c:	0018      	movs	r0, r3
 800036e:	2308      	movs	r3, #8
 8000370:	001a      	movs	r2, r3
 8000372:	2100      	movs	r1, #0
 8000374:	f002 fa76 	bl	8002864 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_DAC1_Init+0x54>)
 800037a:	4a10      	ldr	r2, [pc, #64]	; (80003bc <MX_DAC1_Init+0x58>)
 800037c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_DAC1_Init+0x54>)
 8000380:	0018      	movs	r0, r3
 8000382:	f000 fef3 	bl	800116c <HAL_DAC_Init>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 800038a:	f000 f95b 	bl	8000644 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800038e:	003b      	movs	r3, r7
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000394:	003b      	movs	r3, r7
 8000396:	2200      	movs	r2, #0
 8000398:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800039a:	0039      	movs	r1, r7
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_DAC1_Init+0x54>)
 800039e:	2200      	movs	r2, #0
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 ff06 	bl	80011b2 <HAL_DAC_ConfigChannel>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_DAC1_Init+0x4a>
  {
    Error_Handler();
 80003aa:	f000 f94b 	bl	8000644 <Error_Handler>
  }

}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b002      	add	sp, #8
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	2000006c 	.word	0x2000006c
 80003bc:	40007400 	.word	0x40007400

080003c0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	; 0x28
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c8:	2314      	movs	r3, #20
 80003ca:	18fb      	adds	r3, r7, r3
 80003cc:	0018      	movs	r0, r3
 80003ce:	2314      	movs	r3, #20
 80003d0:	001a      	movs	r2, r3
 80003d2:	2100      	movs	r1, #0
 80003d4:	f002 fa46 	bl	8002864 <memset>
  if(dacHandle->Instance==DAC)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a19      	ldr	r2, [pc, #100]	; (8000444 <HAL_DAC_MspInit+0x84>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d12c      	bne.n	800043c <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80003e2:	4b19      	ldr	r3, [pc, #100]	; (8000448 <HAL_DAC_MspInit+0x88>)
 80003e4:	69da      	ldr	r2, [r3, #28]
 80003e6:	4b18      	ldr	r3, [pc, #96]	; (8000448 <HAL_DAC_MspInit+0x88>)
 80003e8:	2180      	movs	r1, #128	; 0x80
 80003ea:	0589      	lsls	r1, r1, #22
 80003ec:	430a      	orrs	r2, r1
 80003ee:	61da      	str	r2, [r3, #28]
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <HAL_DAC_MspInit+0x88>)
 80003f2:	69da      	ldr	r2, [r3, #28]
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	059b      	lsls	r3, r3, #22
 80003f8:	4013      	ands	r3, r2
 80003fa:	613b      	str	r3, [r7, #16]
 80003fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fe:	4b12      	ldr	r3, [pc, #72]	; (8000448 <HAL_DAC_MspInit+0x88>)
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <HAL_DAC_MspInit+0x88>)
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	0289      	lsls	r1, r1, #10
 8000408:	430a      	orrs	r2, r1
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <HAL_DAC_MspInit+0x88>)
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	2380      	movs	r3, #128	; 0x80
 8000412:	029b      	lsls	r3, r3, #10
 8000414:	4013      	ands	r3, r2
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800041a:	2114      	movs	r1, #20
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2210      	movs	r2, #16
 8000420:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2203      	movs	r2, #3
 8000426:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042e:	187a      	adds	r2, r7, r1
 8000430:	2390      	movs	r3, #144	; 0x90
 8000432:	05db      	lsls	r3, r3, #23
 8000434:	0011      	movs	r1, r2
 8000436:	0018      	movs	r0, r3
 8000438:	f000 fefa 	bl	8001230 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b00a      	add	sp, #40	; 0x28
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40007400 	.word	0x40007400
 8000448:	40021000 	.word	0x40021000

0800044c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800044c:	b590      	push	{r4, r7, lr}
 800044e:	b089      	sub	sp, #36	; 0x24
 8000450:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	240c      	movs	r4, #12
 8000454:	193b      	adds	r3, r7, r4
 8000456:	0018      	movs	r0, r3
 8000458:	2314      	movs	r3, #20
 800045a:	001a      	movs	r2, r3
 800045c:	2100      	movs	r1, #0
 800045e:	f002 fa01 	bl	8002864 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b28      	ldr	r3, [pc, #160]	; (8000504 <MX_GPIO_Init+0xb8>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	4b27      	ldr	r3, [pc, #156]	; (8000504 <MX_GPIO_Init+0xb8>)
 8000468:	2180      	movs	r1, #128	; 0x80
 800046a:	0289      	lsls	r1, r1, #10
 800046c:	430a      	orrs	r2, r1
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	4b24      	ldr	r3, [pc, #144]	; (8000504 <MX_GPIO_Init+0xb8>)
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	029b      	lsls	r3, r3, #10
 8000478:	4013      	ands	r3, r2
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b21      	ldr	r3, [pc, #132]	; (8000504 <MX_GPIO_Init+0xb8>)
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	4b20      	ldr	r3, [pc, #128]	; (8000504 <MX_GPIO_Init+0xb8>)
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	02c9      	lsls	r1, r1, #11
 8000488:	430a      	orrs	r2, r1
 800048a:	615a      	str	r2, [r3, #20]
 800048c:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <MX_GPIO_Init+0xb8>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	02db      	lsls	r3, r3, #11
 8000494:	4013      	ands	r3, r2
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_BLUE_Pin|STATUS_GREEN_Pin|STATUS_RED_Pin, GPIO_PIN_RESET);
 800049a:	2390      	movs	r3, #144	; 0x90
 800049c:	05db      	lsls	r3, r3, #23
 800049e:	2200      	movs	r2, #0
 80004a0:	2107      	movs	r1, #7
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 f834 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STATUS_BLUE_Pin|STATUS_GREEN_Pin|STATUS_RED_Pin;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2207      	movs	r2, #7
 80004ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2201      	movs	r2, #1
 80004b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	2200      	movs	r2, #0
 80004be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	193a      	adds	r2, r7, r4
 80004c2:	2390      	movs	r3, #144	; 0x90
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	0011      	movs	r1, r2
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 feb1 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_LED_Pin;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2202      	movs	r2, #2
 80004d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	4a0c      	ldr	r2, [pc, #48]	; (8000508 <MX_GPIO_Init+0xbc>)
 80004d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2201      	movs	r2, #1
 80004de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENABLE_LED_GPIO_Port, &GPIO_InitStruct);
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <MX_GPIO_Init+0xc0>)
 80004e4:	0019      	movs	r1, r3
 80004e6:	0010      	movs	r0, r2
 80004e8:	f000 fea2 	bl	8001230 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2100      	movs	r1, #0
 80004f0:	2005      	movs	r0, #5
 80004f2:	f000 fe09 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80004f6:	2005      	movs	r0, #5
 80004f8:	f000 fe1b 	bl	8001132 <HAL_NVIC_EnableIRQ>

}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b009      	add	sp, #36	; 0x24
 8000502:	bd90      	pop	{r4, r7, pc}
 8000504:	40021000 	.word	0x40021000
 8000508:	10210000 	.word	0x10210000
 800050c:	48000400 	.word	0x48000400

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 8000514:	f000 fa9a 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f84e 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f7ff ff96 	bl	800044c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000520:	f000 f90c 	bl	800073c <MX_TIM1_Init>
  MX_ADC_Init();
 8000524:	f7ff fe7c 	bl	8000220 <MX_ADC_Init>
  MX_DAC1_Init();
 8000528:	f7ff ff1c 	bl	8000364 <MX_DAC1_Init>
  MX_TIM17_Init();
 800052c:	f000 f9bc 	bl	80008a8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim17);
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <main+0x9c>)
 8000532:	0018      	movs	r0, r3
 8000534:	f001 fcc4 	bl	8001ec0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000538:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <main+0xa0>)
 800053a:	2100      	movs	r1, #0
 800053c:	0018      	movs	r0, r3
 800053e:	f001 fd0d 	bl	8001f5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <main+0xa0>)
 8000544:	2104      	movs	r1, #4
 8000546:	0018      	movs	r0, r3
 8000548:	f001 fd08 	bl	8001f5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <main+0xa0>)
 800054e:	2108      	movs	r1, #8
 8000550:	0018      	movs	r0, r3
 8000552:	f001 fd03 	bl	8001f5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000556:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <main+0xa0>)
 8000558:	210c      	movs	r1, #12
 800055a:	0018      	movs	r0, r3
 800055c:	f001 fcfe 	bl	8001f5c <HAL_TIM_PWM_Start>

  TIM1->ARR = 0x40;
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <main+0xa4>)
 8000562:	2240      	movs	r2, #64	; 0x40
 8000564:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1->CCR1 = 0x00;
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <main+0xa4>)
 8000568:	2200      	movs	r2, #0
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0x00;
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <main+0xa4>)
 800056e:	2200      	movs	r2, #0
 8000570:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0x00;
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <main+0xa4>)
 8000574:	2200      	movs	r2, #0
 8000576:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 0x00;
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <main+0xa4>)
 800057a:	2200      	movs	r2, #0
 800057c:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(GPIOA, STATUS_BLUE_Pin, GPIO_PIN_SET);
 800057e:	2390      	movs	r3, #144	; 0x90
 8000580:	05db      	lsls	r3, r3, #23
 8000582:	2201      	movs	r2, #1
 8000584:	2101      	movs	r1, #1
 8000586:	0018      	movs	r0, r3
 8000588:	f000 ffc2 	bl	8001510 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, STATUS_RED_Pin, GPIO_PIN_RESET);
 800058c:	2390      	movs	r3, #144	; 0x90
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	2200      	movs	r2, #0
 8000592:	2104      	movs	r1, #4
 8000594:	0018      	movs	r0, r3
 8000596:	f000 ffbb 	bl	8001510 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, STATUS_GREEN_Pin, GPIO_PIN_SET);
 800059a:	2390      	movs	r3, #144	; 0x90
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	2201      	movs	r2, #1
 80005a0:	2102      	movs	r1, #2
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 ffb4 	bl	8001510 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x98>
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	20000080 	.word	0x20000080
 80005b0:	200000c0 	.word	0x200000c0
 80005b4:	40012c00 	.word	0x40012c00

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b091      	sub	sp, #68	; 0x44
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	2410      	movs	r4, #16
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	0018      	movs	r0, r3
 80005c4:	2330      	movs	r3, #48	; 0x30
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f002 f94b 	bl	8002864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ce:	003b      	movs	r3, r7
 80005d0:	0018      	movs	r0, r3
 80005d2:	2310      	movs	r3, #16
 80005d4:	001a      	movs	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	f002 f944 	bl	8002864 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80005dc:	0021      	movs	r1, r4
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2212      	movs	r2, #18
 80005e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2201      	movs	r2, #1
 80005e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2201      	movs	r2, #1
 80005ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2210      	movs	r2, #16
 80005f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2210      	movs	r2, #16
 80005fa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	187b      	adds	r3, r7, r1
 8000604:	0018      	movs	r0, r3
 8000606:	f000 ffe1 	bl	80015cc <HAL_RCC_OscConfig>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800060e:	f000 f819 	bl	8000644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	003b      	movs	r3, r7
 8000614:	2207      	movs	r2, #7
 8000616:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000618:	003b      	movs	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	003b      	movs	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	003b      	movs	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062a:	003b      	movs	r3, r7
 800062c:	2100      	movs	r1, #0
 800062e:	0018      	movs	r0, r3
 8000630:	f001 fae8 	bl	8001c04 <HAL_RCC_ClockConfig>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000638:	f000 f804 	bl	8000644 <Error_Handler>
  }
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b011      	add	sp, #68	; 0x44
 8000642:	bd90      	pop	{r4, r7, pc}

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x44>)
 8000658:	699a      	ldr	r2, [r3, #24]
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <HAL_MspInit+0x44>)
 800065c:	2101      	movs	r1, #1
 800065e:	430a      	orrs	r2, r1
 8000660:	619a      	str	r2, [r3, #24]
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_MspInit+0x44>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	2201      	movs	r2, #1
 8000668:	4013      	ands	r3, r2
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_MspInit+0x44>)
 8000670:	69da      	ldr	r2, [r3, #28]
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <HAL_MspInit+0x44>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	0549      	lsls	r1, r1, #21
 8000678:	430a      	orrs	r2, r1
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_MspInit+0x44>)
 800067e:	69da      	ldr	r2, [r3, #28]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	055b      	lsls	r3, r3, #21
 8000684:	4013      	ands	r3, r2
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	40021000 	.word	0x40021000

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <HardFault_Handler+0x4>

080006a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c0:	f000 fa0c 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	uint16_t interrupt_time = TIM17->CNT;
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <EXTI0_1_IRQHandler+0x58>)
 80006d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006d6:	1dbb      	adds	r3, r7, #6
 80006d8:	801a      	strh	r2, [r3, #0]
	if ((interrupt_time - last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80006da:	1dbb      	adds	r3, r7, #6
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <EXTI0_1_IRQHandler+0x5c>)
 80006e0:	8812      	ldrh	r2, [r2, #0]
 80006e2:	1a9b      	subs	r3, r3, r2
 80006e4:	2baf      	cmp	r3, #175	; 0xaf
 80006e6:	dd11      	ble.n	800070c <EXTI0_1_IRQHandler+0x40>
	{
		HAL_GPIO_TogglePin(GPIOA, STATUS_GREEN_Pin);
 80006e8:	2390      	movs	r3, #144	; 0x90
 80006ea:	05db      	lsls	r3, r3, #23
 80006ec:	2102      	movs	r1, #2
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 ff2b 	bl	800154a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, STATUS_RED_Pin);
 80006f4:	2390      	movs	r3, #144	; 0x90
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	2104      	movs	r1, #4
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 ff25 	bl	800154a <HAL_GPIO_TogglePin>
		TIM1->CCR1 ^= 0x40;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <EXTI0_1_IRQHandler+0x60>)
 8000702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <EXTI0_1_IRQHandler+0x60>)
 8000706:	2140      	movs	r1, #64	; 0x40
 8000708:	404a      	eors	r2, r1
 800070a:	635a      	str	r2, [r3, #52]	; 0x34
		//TIM1->CCR2 ^= 0x40;
		//TIM1->CCR3 ^= 0x40;
		//TIM1->CCR4 ^= 0x40;
	}
	last_interrupt_time = interrupt_time;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <EXTI0_1_IRQHandler+0x5c>)
 800070e:	1dba      	adds	r2, r7, #6
 8000710:	8812      	ldrh	r2, [r2, #0]
 8000712:	801a      	strh	r2, [r3, #0]
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000714:	2002      	movs	r0, #2
 8000716:	f000 ff33 	bl	8001580 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b002      	add	sp, #8
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	40014800 	.word	0x40014800
 8000728:	20000028 	.word	0x20000028
 800072c:	40012c00 	.word	0x40012c00

08000730 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b092      	sub	sp, #72	; 0x48
 8000740:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000742:	2340      	movs	r3, #64	; 0x40
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	0018      	movs	r0, r3
 8000748:	2308      	movs	r3, #8
 800074a:	001a      	movs	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	f002 f889 	bl	8002864 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000752:	2324      	movs	r3, #36	; 0x24
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	0018      	movs	r0, r3
 8000758:	231c      	movs	r3, #28
 800075a:	001a      	movs	r2, r3
 800075c:	2100      	movs	r1, #0
 800075e:	f002 f881 	bl	8002864 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	0018      	movs	r0, r3
 8000766:	2320      	movs	r3, #32
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f002 f87a 	bl	8002864 <memset>

  htim1.Instance = TIM1;
 8000770:	4b4b      	ldr	r3, [pc, #300]	; (80008a0 <MX_TIM1_Init+0x164>)
 8000772:	4a4c      	ldr	r2, [pc, #304]	; (80008a4 <MX_TIM1_Init+0x168>)
 8000774:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000776:	4b4a      	ldr	r3, [pc, #296]	; (80008a0 <MX_TIM1_Init+0x164>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <MX_TIM1_Init+0x164>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64;
 8000782:	4b47      	ldr	r3, [pc, #284]	; (80008a0 <MX_TIM1_Init+0x164>)
 8000784:	2240      	movs	r2, #64	; 0x40
 8000786:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <MX_TIM1_Init+0x164>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800078e:	4b44      	ldr	r3, [pc, #272]	; (80008a0 <MX_TIM1_Init+0x164>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b42      	ldr	r3, [pc, #264]	; (80008a0 <MX_TIM1_Init+0x164>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800079a:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <MX_TIM1_Init+0x164>)
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fbb1 	bl	8001f04 <HAL_TIM_PWM_Init>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f7ff ff4d 	bl	8000644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007b8:	187a      	adds	r2, r7, r1
 80007ba:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <MX_TIM1_Init+0x164>)
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 ff70 	bl	80026a4 <HAL_TIMEx_MasterConfigSynchronization>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007c8:	f7ff ff3c 	bl	8000644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007cc:	2124      	movs	r1, #36	; 0x24
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2260      	movs	r2, #96	; 0x60
 80007d2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f8:	1879      	adds	r1, r7, r1
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_TIM1_Init+0x164>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 fbf8 	bl	8001ff4 <HAL_TIM_PWM_ConfigChannel>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000808:	f7ff ff1c 	bl	8000644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800080c:	2324      	movs	r3, #36	; 0x24
 800080e:	18f9      	adds	r1, r7, r3
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_TIM1_Init+0x164>)
 8000812:	2204      	movs	r2, #4
 8000814:	0018      	movs	r0, r3
 8000816:	f001 fbed 	bl	8001ff4 <HAL_TIM_PWM_ConfigChannel>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 800081e:	f7ff ff11 	bl	8000644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000822:	2324      	movs	r3, #36	; 0x24
 8000824:	18f9      	adds	r1, r7, r3
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_TIM1_Init+0x164>)
 8000828:	2208      	movs	r2, #8
 800082a:	0018      	movs	r0, r3
 800082c:	f001 fbe2 	bl	8001ff4 <HAL_TIM_PWM_ConfigChannel>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000834:	f7ff ff06 	bl	8000644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000838:	2324      	movs	r3, #36	; 0x24
 800083a:	18f9      	adds	r1, r7, r3
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_TIM1_Init+0x164>)
 800083e:	220c      	movs	r2, #12
 8000840:	0018      	movs	r0, r3
 8000842:	f001 fbd7 	bl	8001ff4 <HAL_TIM_PWM_ConfigChannel>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800084a:	f7ff fefb 	bl	8000644 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	0192      	lsls	r2, r2, #6
 8000872:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800087a:	1d3a      	adds	r2, r7, #4
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_TIM1_Init+0x164>)
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f001 ff6d 	bl	8002760 <HAL_TIMEx_ConfigBreakDeadTime>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 800088a:	f7ff fedb 	bl	8000644 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <MX_TIM1_Init+0x164>)
 8000890:	0018      	movs	r0, r3
 8000892:	f000 f871 	bl	8000978 <HAL_TIM_MspPostInit>

}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b012      	add	sp, #72	; 0x48
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	200000c0 	.word	0x200000c0
 80008a4:	40012c00 	.word	0x40012c00

080008a8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_TIM17_Init+0x44>)
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <MX_TIM17_Init+0x48>)
 80008b0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 65535;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_TIM17_Init+0x44>)
 80008b4:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <MX_TIM17_Init+0x4c>)
 80008b6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_TIM17_Init+0x44>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_TIM17_Init+0x44>)
 80008c0:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <MX_TIM17_Init+0x4c>)
 80008c2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_TIM17_Init+0x44>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_TIM17_Init+0x44>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_TIM17_Init+0x44>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <MX_TIM17_Init+0x44>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 fac5 	bl	8001e68 <HAL_TIM_Base_Init>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80008e2:	f7ff feaf 	bl	8000644 <Error_Handler>
  }

}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000080 	.word	0x20000080
 80008f0:	40014800 	.word	0x40014800
 80008f4:	0000ffff 	.word	0x0000ffff

080008f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_TIM_PWM_MspInit+0x38>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d10d      	bne.n	8000926 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_TIM_PWM_MspInit+0x3c>)
 800090c:	699a      	ldr	r2, [r3, #24]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_TIM_PWM_MspInit+0x3c>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	0109      	lsls	r1, r1, #4
 8000914:	430a      	orrs	r2, r1
 8000916:	619a      	str	r2, [r3, #24]
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_TIM_PWM_MspInit+0x3c>)
 800091a:	699a      	ldr	r2, [r3, #24]
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	011b      	lsls	r3, r3, #4
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b004      	add	sp, #16
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	40012c00 	.word	0x40012c00
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_TIM_Base_MspInit+0x38>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d10d      	bne.n	8000966 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_TIM_Base_MspInit+0x3c>)
 800094c:	699a      	ldr	r2, [r3, #24]
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_TIM_Base_MspInit+0x3c>)
 8000950:	2180      	movs	r1, #128	; 0x80
 8000952:	02c9      	lsls	r1, r1, #11
 8000954:	430a      	orrs	r2, r1
 8000956:	619a      	str	r2, [r3, #24]
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_TIM_Base_MspInit+0x3c>)
 800095a:	699a      	ldr	r2, [r3, #24]
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	02db      	lsls	r3, r3, #11
 8000960:	4013      	ands	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b004      	add	sp, #16
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	40014800 	.word	0x40014800
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	230c      	movs	r3, #12
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	0018      	movs	r0, r3
 8000986:	2314      	movs	r3, #20
 8000988:	001a      	movs	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f001 ff6a 	bl	8002864 <memset>
  if(timHandle->Instance==TIM1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a16      	ldr	r2, [pc, #88]	; (80009f0 <HAL_TIM_MspPostInit+0x78>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d125      	bne.n	80009e6 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <HAL_TIM_MspPostInit+0x7c>)
 800099c:	695a      	ldr	r2, [r3, #20]
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_TIM_MspPostInit+0x7c>)
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	0289      	lsls	r1, r1, #10
 80009a4:	430a      	orrs	r2, r1
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_TIM_MspPostInit+0x7c>)
 80009aa:	695a      	ldr	r2, [r3, #20]
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	029b      	lsls	r3, r3, #10
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80009b6:	210c      	movs	r1, #12
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	22f0      	movs	r2, #240	; 0xf0
 80009bc:	0112      	lsls	r2, r2, #4
 80009be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2202      	movs	r2, #2
 80009c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2202      	movs	r2, #2
 80009d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	187a      	adds	r2, r7, r1
 80009da:	2390      	movs	r3, #144	; 0x90
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 fc25 	bl	8001230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b008      	add	sp, #32
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	40012c00 	.word	0x40012c00
 80009f4:	40021000 	.word	0x40021000

080009f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <LoopForever+0x6>)
  ldr r1, =_edata
 80009fe:	490e      	ldr	r1, [pc, #56]	; (8000a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <LoopForever+0xe>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a14:	4c0b      	ldr	r4, [pc, #44]	; (8000a44 <LoopForever+0x16>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a22:	f7ff fe85 	bl	8000730 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a26:	f001 fef9 	bl	800281c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2a:	f7ff fd71 	bl	8000510 <main>

08000a2e <LoopForever>:

LoopForever:
    b LoopForever
 8000a2e:	e7fe      	b.n	8000a2e <LoopForever>
  ldr   r0, =_estack
 8000a30:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a3c:	080028c4 	.word	0x080028c4
  ldr r2, =_sbss
 8000a40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a44:	20000104 	.word	0x20000104

08000a48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_COMP_IRQHandler>
	...

08000a4c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <HAL_Init+0x24>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_Init+0x24>)
 8000a56:	2110      	movs	r1, #16
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 f809 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a62:	f7ff fdf5 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	40022000 	.word	0x40022000

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_InitTick+0x5c>)
 8000a7e:	681c      	ldr	r4, [r3, #0]
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_InitTick+0x60>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	0019      	movs	r1, r3
 8000a86:	23fa      	movs	r3, #250	; 0xfa
 8000a88:	0098      	lsls	r0, r3, #2
 8000a8a:	f7ff fb3d 	bl	8000108 <__udivsi3>
 8000a8e:	0003      	movs	r3, r0
 8000a90:	0019      	movs	r1, r3
 8000a92:	0020      	movs	r0, r4
 8000a94:	f7ff fb38 	bl	8000108 <__udivsi3>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 fb59 	bl	8001152 <HAL_SYSTICK_Config>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e00f      	b.n	8000ac8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d80b      	bhi.n	8000ac6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	425b      	negs	r3, r3
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 fb26 	bl	8001108 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_InitTick+0x64>)
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b003      	add	sp, #12
 8000ace:	bd90      	pop	{r4, r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x1c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x20>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	18d2      	adds	r2, r2, r3
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_IncTick+0x20>)
 8000aee:	601a      	str	r2, [r3, #0]
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000100 	.word	0x20000100

08000b00 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <HAL_GetTick+0x10>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	20000100 	.word	0x20000100

08000b14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e125      	b.n	8000d7e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10a      	bne.n	8000b50 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2234      	movs	r2, #52	; 0x34
 8000b44:	2100      	movs	r1, #0
 8000b46:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff fbc4 	bl	80002d8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b54:	2210      	movs	r2, #16
 8000b56:	4013      	ands	r3, r2
 8000b58:	d000      	beq.n	8000b5c <HAL_ADC_Init+0x48>
 8000b5a:	e103      	b.n	8000d64 <HAL_ADC_Init+0x250>
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d000      	beq.n	8000b68 <HAL_ADC_Init+0x54>
 8000b66:	e0fd      	b.n	8000d64 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	2204      	movs	r2, #4
 8000b70:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000b72:	d000      	beq.n	8000b76 <HAL_ADC_Init+0x62>
 8000b74:	e0f6      	b.n	8000d64 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b7a:	4a83      	ldr	r2, [pc, #524]	; (8000d88 <HAL_ADC_Init+0x274>)
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	2202      	movs	r2, #2
 8000b80:	431a      	orrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	4013      	ands	r3, r2
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d112      	bne.n	8000bba <HAL_ADC_Init+0xa6>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d009      	beq.n	8000bb6 <HAL_ADC_Init+0xa2>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	021b      	lsls	r3, r3, #8
 8000bac:	401a      	ands	r2, r3
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d101      	bne.n	8000bba <HAL_ADC_Init+0xa6>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e000      	b.n	8000bbc <HAL_ADC_Init+0xa8>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d116      	bne.n	8000bee <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	2218      	movs	r2, #24
 8000bc8:	4393      	bics	r3, r2
 8000bca:	0019      	movs	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	0899      	lsrs	r1, r3, #2
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4964      	ldr	r1, [pc, #400]	; (8000d8c <HAL_ADC_Init+0x278>)
 8000bfa:	400a      	ands	r2, r1
 8000bfc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7e1b      	ldrb	r3, [r3, #24]
 8000c02:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7e5b      	ldrb	r3, [r3, #25]
 8000c08:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	7e9b      	ldrb	r3, [r3, #26]
 8000c10:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c12:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d002      	beq.n	8000c22 <HAL_ADC_Init+0x10e>
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	015b      	lsls	r3, r3, #5
 8000c20:	e000      	b.n	8000c24 <HAL_ADC_Init+0x110>
 8000c22:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c24:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c2a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d101      	bne.n	8000c38 <HAL_ADC_Init+0x124>
 8000c34:	2304      	movs	r3, #4
 8000c36:	e000      	b.n	8000c3a <HAL_ADC_Init+0x126>
 8000c38:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000c3a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2124      	movs	r1, #36	; 0x24
 8000c40:	5c5b      	ldrb	r3, [r3, r1]
 8000c42:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c44:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7edb      	ldrb	r3, [r3, #27]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d115      	bne.n	8000c80 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7e9b      	ldrb	r3, [r3, #26]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d105      	bne.n	8000c68 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	0252      	lsls	r2, r2, #9
 8000c62:	4313      	orrs	r3, r2
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	e00b      	b.n	8000c80 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c6c:	2220      	movs	r2, #32
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c78:	2201      	movs	r2, #1
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69da      	ldr	r2, [r3, #28]
 8000c84:	23c2      	movs	r3, #194	; 0xc2
 8000c86:	33ff      	adds	r3, #255	; 0xff
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d007      	beq.n	8000c9c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c94:	4313      	orrs	r3, r2
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	68d9      	ldr	r1, [r3, #12]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	055b      	lsls	r3, r3, #21
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d01b      	beq.n	8000cf0 <HAL_ADC_Init+0x1dc>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d017      	beq.n	8000cf0 <HAL_ADC_Init+0x1dc>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d013      	beq.n	8000cf0 <HAL_ADC_Init+0x1dc>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d00f      	beq.n	8000cf0 <HAL_ADC_Init+0x1dc>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d00b      	beq.n	8000cf0 <HAL_ADC_Init+0x1dc>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cdc:	2b05      	cmp	r3, #5
 8000cde:	d007      	beq.n	8000cf0 <HAL_ADC_Init+0x1dc>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce4:	2b06      	cmp	r3, #6
 8000ce6:	d003      	beq.n	8000cf0 <HAL_ADC_Init+0x1dc>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cec:	2b07      	cmp	r3, #7
 8000cee:	d112      	bne.n	8000d16 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	695a      	ldr	r2, [r3, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2107      	movs	r1, #7
 8000cfc:	438a      	bics	r2, r1
 8000cfe:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6959      	ldr	r1, [r3, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	430a      	orrs	r2, r1
 8000d14:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <HAL_ADC_Init+0x27c>)
 8000d1e:	4013      	ands	r3, r2
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d10b      	bne.n	8000d3e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d30:	2203      	movs	r2, #3
 8000d32:	4393      	bics	r3, r2
 8000d34:	2201      	movs	r2, #1
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d3c:	e01c      	b.n	8000d78 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d42:	2212      	movs	r2, #18
 8000d44:	4393      	bics	r3, r2
 8000d46:	2210      	movs	r2, #16
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d52:	2201      	movs	r2, #1
 8000d54:	431a      	orrs	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d62:	e009      	b.n	8000d78 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d68:	2210      	movs	r2, #16
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000d70:	230f      	movs	r3, #15
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d78:	230f      	movs	r3, #15
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	781b      	ldrb	r3, [r3, #0]
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b004      	add	sp, #16
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	fffffefd 	.word	0xfffffefd
 8000d8c:	fffe0219 	.word	0xfffe0219
 8000d90:	833fffe7 	.word	0x833fffe7

08000d94 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d9e:	230f      	movs	r3, #15
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	055b      	lsls	r3, r3, #21
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d011      	beq.n	8000dda <HAL_ADC_ConfigChannel+0x46>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d00d      	beq.n	8000dda <HAL_ADC_ConfigChannel+0x46>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d009      	beq.n	8000dda <HAL_ADC_ConfigChannel+0x46>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d005      	beq.n	8000dda <HAL_ADC_ConfigChannel+0x46>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	d001      	beq.n	8000dda <HAL_ADC_ConfigChannel+0x46>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2234      	movs	r2, #52	; 0x34
 8000dde:	5c9b      	ldrb	r3, [r3, r2]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d101      	bne.n	8000de8 <HAL_ADC_ConfigChannel+0x54>
 8000de4:	2302      	movs	r3, #2
 8000de6:	e0d0      	b.n	8000f8a <HAL_ADC_ConfigChannel+0x1f6>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2234      	movs	r2, #52	; 0x34
 8000dec:	2101      	movs	r1, #1
 8000dee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	2204      	movs	r2, #4
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d000      	beq.n	8000dfe <HAL_ADC_ConfigChannel+0x6a>
 8000dfc:	e0b4      	b.n	8000f68 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	4a64      	ldr	r2, [pc, #400]	; (8000f94 <HAL_ADC_ConfigChannel+0x200>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d100      	bne.n	8000e0a <HAL_ADC_ConfigChannel+0x76>
 8000e08:	e082      	b.n	8000f10 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2201      	movs	r2, #1
 8000e16:	409a      	lsls	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	055b      	lsls	r3, r3, #21
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d037      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d033      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d02f      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d02b      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d027      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e50:	2b05      	cmp	r3, #5
 8000e52:	d023      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e58:	2b06      	cmp	r3, #6
 8000e5a:	d01f      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e60:	2b07      	cmp	r3, #7
 8000e62:	d01b      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	2107      	movs	r1, #7
 8000e70:	400b      	ands	r3, r1
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d012      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2107      	movs	r1, #7
 8000e82:	438a      	bics	r2, r1
 8000e84:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6959      	ldr	r1, [r3, #20]
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2207      	movs	r2, #7
 8000e92:	401a      	ands	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b10      	cmp	r3, #16
 8000ea2:	d007      	beq.n	8000eb4 <HAL_ADC_ConfigChannel+0x120>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b11      	cmp	r3, #17
 8000eaa:	d003      	beq.n	8000eb4 <HAL_ADC_ConfigChannel+0x120>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b12      	cmp	r3, #18
 8000eb2:	d163      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000eb4:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <HAL_ADC_ConfigChannel+0x204>)
 8000eb6:	6819      	ldr	r1, [r3, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b10      	cmp	r3, #16
 8000ebe:	d009      	beq.n	8000ed4 <HAL_ADC_ConfigChannel+0x140>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b11      	cmp	r3, #17
 8000ec6:	d102      	bne.n	8000ece <HAL_ADC_ConfigChannel+0x13a>
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	03db      	lsls	r3, r3, #15
 8000ecc:	e004      	b.n	8000ed8 <HAL_ADC_ConfigChannel+0x144>
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	045b      	lsls	r3, r3, #17
 8000ed2:	e001      	b.n	8000ed8 <HAL_ADC_ConfigChannel+0x144>
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	041b      	lsls	r3, r3, #16
 8000ed8:	4a2f      	ldr	r2, [pc, #188]	; (8000f98 <HAL_ADC_ConfigChannel+0x204>)
 8000eda:	430b      	orrs	r3, r1
 8000edc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b10      	cmp	r3, #16
 8000ee4:	d14a      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <HAL_ADC_ConfigChannel+0x208>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	492d      	ldr	r1, [pc, #180]	; (8000fa0 <HAL_ADC_ConfigChannel+0x20c>)
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff f90b 	bl	8000108 <__udivsi3>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	189b      	adds	r3, r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f00:	e002      	b.n	8000f08 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f9      	bne.n	8000f02 <HAL_ADC_ConfigChannel+0x16e>
 8000f0e:	e035      	b.n	8000f7c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4099      	lsls	r1, r3
 8000f1e:	000b      	movs	r3, r1
 8000f20:	43d9      	mvns	r1, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	400a      	ands	r2, r1
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b10      	cmp	r3, #16
 8000f30:	d007      	beq.n	8000f42 <HAL_ADC_ConfigChannel+0x1ae>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b11      	cmp	r3, #17
 8000f38:	d003      	beq.n	8000f42 <HAL_ADC_ConfigChannel+0x1ae>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b12      	cmp	r3, #18
 8000f40:	d11c      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_ADC_ConfigChannel+0x204>)
 8000f44:	6819      	ldr	r1, [r3, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b10      	cmp	r3, #16
 8000f4c:	d007      	beq.n	8000f5e <HAL_ADC_ConfigChannel+0x1ca>
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b11      	cmp	r3, #17
 8000f54:	d101      	bne.n	8000f5a <HAL_ADC_ConfigChannel+0x1c6>
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <HAL_ADC_ConfigChannel+0x210>)
 8000f58:	e002      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x1cc>
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_ADC_ConfigChannel+0x214>)
 8000f5c:	e000      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x1cc>
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <HAL_ADC_ConfigChannel+0x218>)
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <HAL_ADC_ConfigChannel+0x204>)
 8000f62:	400b      	ands	r3, r1
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e009      	b.n	8000f7c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000f74:	230f      	movs	r3, #15
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2234      	movs	r2, #52	; 0x34
 8000f80:	2100      	movs	r1, #0
 8000f82:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f84:	230f      	movs	r3, #15
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	781b      	ldrb	r3, [r3, #0]
}
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b004      	add	sp, #16
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	00001001 	.word	0x00001001
 8000f98:	40012708 	.word	0x40012708
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	000f4240 	.word	0x000f4240
 8000fa4:	ffbfffff 	.word	0xffbfffff
 8000fa8:	feffffff 	.word	0xfeffffff
 8000fac:	ff7fffff 	.word	0xff7fffff

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	0002      	movs	r2, r0
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b7f      	cmp	r3, #127	; 0x7f
 8000fc2:	d809      	bhi.n	8000fd8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	001a      	movs	r2, r3
 8000fca:	231f      	movs	r3, #31
 8000fcc:	401a      	ands	r2, r3
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_EnableIRQ+0x30>)
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4091      	lsls	r1, r2
 8000fd4:	000a      	movs	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]
  }
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b002      	add	sp, #8
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	0002      	movs	r2, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ff8:	d828      	bhi.n	800104c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <__NVIC_SetPriority+0xd4>)
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b25b      	sxtb	r3, r3
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	33c0      	adds	r3, #192	; 0xc0
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	589b      	ldr	r3, [r3, r2]
 800100a:	1dfa      	adds	r2, r7, #7
 800100c:	7812      	ldrb	r2, [r2, #0]
 800100e:	0011      	movs	r1, r2
 8001010:	2203      	movs	r2, #3
 8001012:	400a      	ands	r2, r1
 8001014:	00d2      	lsls	r2, r2, #3
 8001016:	21ff      	movs	r1, #255	; 0xff
 8001018:	4091      	lsls	r1, r2
 800101a:	000a      	movs	r2, r1
 800101c:	43d2      	mvns	r2, r2
 800101e:	401a      	ands	r2, r3
 8001020:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	019b      	lsls	r3, r3, #6
 8001026:	22ff      	movs	r2, #255	; 0xff
 8001028:	401a      	ands	r2, r3
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	0018      	movs	r0, r3
 8001030:	2303      	movs	r3, #3
 8001032:	4003      	ands	r3, r0
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001038:	481f      	ldr	r0, [pc, #124]	; (80010b8 <__NVIC_SetPriority+0xd4>)
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b25b      	sxtb	r3, r3
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	430a      	orrs	r2, r1
 8001044:	33c0      	adds	r3, #192	; 0xc0
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800104a:	e031      	b.n	80010b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800104c:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <__NVIC_SetPriority+0xd8>)
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	0019      	movs	r1, r3
 8001054:	230f      	movs	r3, #15
 8001056:	400b      	ands	r3, r1
 8001058:	3b08      	subs	r3, #8
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3306      	adds	r3, #6
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	18d3      	adds	r3, r2, r3
 8001062:	3304      	adds	r3, #4
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	1dfa      	adds	r2, r7, #7
 8001068:	7812      	ldrb	r2, [r2, #0]
 800106a:	0011      	movs	r1, r2
 800106c:	2203      	movs	r2, #3
 800106e:	400a      	ands	r2, r1
 8001070:	00d2      	lsls	r2, r2, #3
 8001072:	21ff      	movs	r1, #255	; 0xff
 8001074:	4091      	lsls	r1, r2
 8001076:	000a      	movs	r2, r1
 8001078:	43d2      	mvns	r2, r2
 800107a:	401a      	ands	r2, r3
 800107c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	019b      	lsls	r3, r3, #6
 8001082:	22ff      	movs	r2, #255	; 0xff
 8001084:	401a      	ands	r2, r3
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	0018      	movs	r0, r3
 800108c:	2303      	movs	r3, #3
 800108e:	4003      	ands	r3, r0
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001094:	4809      	ldr	r0, [pc, #36]	; (80010bc <__NVIC_SetPriority+0xd8>)
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	001c      	movs	r4, r3
 800109c:	230f      	movs	r3, #15
 800109e:	4023      	ands	r3, r4
 80010a0:	3b08      	subs	r3, #8
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	430a      	orrs	r2, r1
 80010a6:	3306      	adds	r3, #6
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	18c3      	adds	r3, r0, r3
 80010ac:	3304      	adds	r3, #4
 80010ae:	601a      	str	r2, [r3, #0]
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b003      	add	sp, #12
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <SysTick_Config+0x40>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d901      	bls.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e010      	b.n	80010f8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <SysTick_Config+0x44>)
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	3a01      	subs	r2, #1
 80010dc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	2301      	movs	r3, #1
 80010e0:	425b      	negs	r3, r3
 80010e2:	2103      	movs	r1, #3
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff ff7d 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SysTick_Config+0x44>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x44>)
 80010f2:	2207      	movs	r2, #7
 80010f4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	00ffffff 	.word	0x00ffffff
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	210f      	movs	r1, #15
 8001114:	187b      	adds	r3, r7, r1
 8001116:	1c02      	adds	r2, r0, #0
 8001118:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	187b      	adds	r3, r7, r1
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b25b      	sxtb	r3, r3
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff ff5d 	bl	8000fe4 <__NVIC_SetPriority>
}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b004      	add	sp, #16
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	0002      	movs	r2, r0
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b25b      	sxtb	r3, r3
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff ff33 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b002      	add	sp, #8
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff ffaf 	bl	80010c0 <SysTick_Config>
 8001162:	0003      	movs	r3, r0
}
 8001164:	0018      	movs	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	b002      	add	sp, #8
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e015      	b.n	80011aa <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	791b      	ldrb	r3, [r3, #4]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d106      	bne.n	8001196 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff f915 	bl	80003c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2202      	movs	r2, #2
 800119a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	0018      	movs	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b002      	add	sp, #8
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	795b      	ldrb	r3, [r3, #5]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <HAL_DAC_ConfigChannel+0x20>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e029      	b.n	8001226 <HAL_DAC_ConfigChannel+0x74>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2201      	movs	r2, #1
 80011d6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2202      	movs	r2, #2
 80011dc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 80011e6:	223e      	movs	r2, #62	; 0x3e
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	43da      	mvns	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	4013      	ands	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	409a      	lsls	r2, r3
 8001208:	0013      	movs	r3, r2
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4313      	orrs	r3, r2
 800120e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2201      	movs	r2, #1
 800121c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	0018      	movs	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	b006      	add	sp, #24
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	e14f      	b.n	80014e0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2101      	movs	r1, #1
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4091      	lsls	r1, r2
 800124a:	000a      	movs	r2, r1
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d100      	bne.n	8001258 <HAL_GPIO_Init+0x28>
 8001256:	e140      	b.n	80014da <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x38>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b12      	cmp	r3, #18
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	58d3      	ldr	r3, [r2, r3]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2207      	movs	r2, #7
 800127a:	4013      	ands	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	409a      	lsls	r2, r3
 8001282:	0013      	movs	r3, r2
 8001284:	43da      	mvns	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	2107      	movs	r1, #7
 8001294:	400b      	ands	r3, r1
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	409a      	lsls	r2, r3
 800129a:	0013      	movs	r3, r2
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	6939      	ldr	r1, [r7, #16]
 80012ae:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	409a      	lsls	r2, r3
 80012be:	0013      	movs	r3, r2
 80012c0:	43da      	mvns	r2, r3
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2203      	movs	r2, #3
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	409a      	lsls	r2, r3
 80012d6:	0013      	movs	r3, r2
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d00b      	beq.n	8001304 <HAL_GPIO_Init+0xd4>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d007      	beq.n	8001304 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f8:	2b11      	cmp	r3, #17
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b12      	cmp	r3, #18
 8001302:	d130      	bne.n	8001366 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	409a      	lsls	r2, r3
 8001312:	0013      	movs	r3, r2
 8001314:	43da      	mvns	r2, r3
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	409a      	lsls	r2, r3
 8001326:	0013      	movs	r3, r2
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800133a:	2201      	movs	r2, #1
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	43da      	mvns	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	2201      	movs	r2, #1
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	43da      	mvns	r2, r3
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	055b      	lsls	r3, r3, #21
 800139e:	4013      	ands	r3, r2
 80013a0:	d100      	bne.n	80013a4 <HAL_GPIO_Init+0x174>
 80013a2:	e09a      	b.n	80014da <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a4:	4b54      	ldr	r3, [pc, #336]	; (80014f8 <HAL_GPIO_Init+0x2c8>)
 80013a6:	699a      	ldr	r2, [r3, #24]
 80013a8:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_GPIO_Init+0x2c8>)
 80013aa:	2101      	movs	r1, #1
 80013ac:	430a      	orrs	r2, r1
 80013ae:	619a      	str	r2, [r3, #24]
 80013b0:	4b51      	ldr	r3, [pc, #324]	; (80014f8 <HAL_GPIO_Init+0x2c8>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013bc:	4a4f      	ldr	r2, [pc, #316]	; (80014fc <HAL_GPIO_Init+0x2cc>)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	589b      	ldr	r3, [r3, r2]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2203      	movs	r2, #3
 80013ce:	4013      	ands	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	409a      	lsls	r2, r3
 80013d6:	0013      	movs	r3, r2
 80013d8:	43da      	mvns	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	2390      	movs	r3, #144	; 0x90
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x1e2>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a44      	ldr	r2, [pc, #272]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x1de>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a43      	ldr	r2, [pc, #268]	; (8001504 <HAL_GPIO_Init+0x2d4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x1da>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a42      	ldr	r2, [pc, #264]	; (8001508 <HAL_GPIO_Init+0x2d8>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x1d6>
 8001402:	2303      	movs	r3, #3
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x1e4>
 8001406:	2305      	movs	r3, #5
 8001408:	e004      	b.n	8001414 <HAL_GPIO_Init+0x1e4>
 800140a:	2302      	movs	r3, #2
 800140c:	e002      	b.n	8001414 <HAL_GPIO_Init+0x1e4>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_GPIO_Init+0x1e4>
 8001412:	2300      	movs	r3, #0
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	2103      	movs	r1, #3
 8001418:	400a      	ands	r2, r1
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	4093      	lsls	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001424:	4935      	ldr	r1, [pc, #212]	; (80014fc <HAL_GPIO_Init+0x2cc>)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001432:	4b36      	ldr	r3, [pc, #216]	; (800150c <HAL_GPIO_Init+0x2dc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43da      	mvns	r2, r3
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	025b      	lsls	r3, r3, #9
 800144a:	4013      	ands	r3, r2
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001456:	4b2d      	ldr	r3, [pc, #180]	; (800150c <HAL_GPIO_Init+0x2dc>)
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <HAL_GPIO_Init+0x2dc>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43da      	mvns	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	029b      	lsls	r3, r3, #10
 8001474:	4013      	ands	r3, r2
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001480:	4b22      	ldr	r3, [pc, #136]	; (800150c <HAL_GPIO_Init+0x2dc>)
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_GPIO_Init+0x2dc>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	035b      	lsls	r3, r3, #13
 800149e:	4013      	ands	r3, r2
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_GPIO_Init+0x2dc>)
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014b0:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_GPIO_Init+0x2dc>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43da      	mvns	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	039b      	lsls	r3, r3, #14
 80014c8:	4013      	ands	r3, r2
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_GPIO_Init+0x2dc>)
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	40da      	lsrs	r2, r3
 80014e8:	1e13      	subs	r3, r2, #0
 80014ea:	d000      	beq.n	80014ee <HAL_GPIO_Init+0x2be>
 80014ec:	e6a8      	b.n	8001240 <HAL_GPIO_Init+0x10>
  } 
}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b006      	add	sp, #24
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010000 	.word	0x40010000
 8001500:	48000400 	.word	0x48000400
 8001504:	48000800 	.word	0x48000800
 8001508:	48000c00 	.word	0x48000c00
 800150c:	40010400 	.word	0x40010400

08001510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	0008      	movs	r0, r1
 800151a:	0011      	movs	r1, r2
 800151c:	1cbb      	adds	r3, r7, #2
 800151e:	1c02      	adds	r2, r0, #0
 8001520:	801a      	strh	r2, [r3, #0]
 8001522:	1c7b      	adds	r3, r7, #1
 8001524:	1c0a      	adds	r2, r1, #0
 8001526:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001528:	1c7b      	adds	r3, r7, #1
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d004      	beq.n	800153a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001530:	1cbb      	adds	r3, r7, #2
 8001532:	881a      	ldrh	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001538:	e003      	b.n	8001542 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800153a:	1cbb      	adds	r3, r7, #2
 800153c:	881a      	ldrh	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	b002      	add	sp, #8
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	000a      	movs	r2, r1
 8001554:	1cbb      	adds	r3, r7, #2
 8001556:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	1cba      	adds	r2, r7, #2
 800155e:	8812      	ldrh	r2, [r2, #0]
 8001560:	4013      	ands	r3, r2
 8001562:	d005      	beq.n	8001570 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001564:	1cbb      	adds	r3, r7, #2
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800156e:	e003      	b.n	8001578 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001570:	1cbb      	adds	r3, r7, #2
 8001572:	881a      	ldrh	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	619a      	str	r2, [r3, #24]
}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	b002      	add	sp, #8
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	0002      	movs	r2, r0
 8001588:	1dbb      	adds	r3, r7, #6
 800158a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	1dba      	adds	r2, r7, #6
 8001592:	8812      	ldrh	r2, [r2, #0]
 8001594:	4013      	ands	r3, r2
 8001596:	d008      	beq.n	80015aa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800159a:	1dba      	adds	r2, r7, #6
 800159c:	8812      	ldrh	r2, [r2, #0]
 800159e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015a0:	1dbb      	adds	r3, r7, #6
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	0018      	movs	r0, r3
 80015a6:	f000 f807 	bl	80015b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	40010400 	.word	0x40010400

080015b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	0002      	movs	r2, r0
 80015c0:	1dbb      	adds	r3, r7, #6
 80015c2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b002      	add	sp, #8
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e303      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2201      	movs	r2, #1
 80015e4:	4013      	ands	r3, r2
 80015e6:	d100      	bne.n	80015ea <HAL_RCC_OscConfig+0x1e>
 80015e8:	e08d      	b.n	8001706 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015ea:	4bc4      	ldr	r3, [pc, #784]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	220c      	movs	r2, #12
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d00e      	beq.n	8001614 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015f6:	4bc1      	ldr	r3, [pc, #772]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	220c      	movs	r2, #12
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d116      	bne.n	8001630 <HAL_RCC_OscConfig+0x64>
 8001602:	4bbe      	ldr	r3, [pc, #760]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	025b      	lsls	r3, r3, #9
 800160a:	401a      	ands	r2, r3
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	025b      	lsls	r3, r3, #9
 8001610:	429a      	cmp	r2, r3
 8001612:	d10d      	bne.n	8001630 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	4bb9      	ldr	r3, [pc, #740]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	029b      	lsls	r3, r3, #10
 800161c:	4013      	ands	r3, r2
 800161e:	d100      	bne.n	8001622 <HAL_RCC_OscConfig+0x56>
 8001620:	e070      	b.n	8001704 <HAL_RCC_OscConfig+0x138>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d000      	beq.n	800162c <HAL_RCC_OscConfig+0x60>
 800162a:	e06b      	b.n	8001704 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e2da      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d107      	bne.n	8001648 <HAL_RCC_OscConfig+0x7c>
 8001638:	4bb0      	ldr	r3, [pc, #704]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4baf      	ldr	r3, [pc, #700]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800163e:	2180      	movs	r1, #128	; 0x80
 8001640:	0249      	lsls	r1, r1, #9
 8001642:	430a      	orrs	r2, r1
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e02f      	b.n	80016a8 <HAL_RCC_OscConfig+0xdc>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10c      	bne.n	800166a <HAL_RCC_OscConfig+0x9e>
 8001650:	4baa      	ldr	r3, [pc, #680]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4ba9      	ldr	r3, [pc, #676]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001656:	49aa      	ldr	r1, [pc, #680]	; (8001900 <HAL_RCC_OscConfig+0x334>)
 8001658:	400a      	ands	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	4ba7      	ldr	r3, [pc, #668]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4ba6      	ldr	r3, [pc, #664]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001662:	49a8      	ldr	r1, [pc, #672]	; (8001904 <HAL_RCC_OscConfig+0x338>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	e01e      	b.n	80016a8 <HAL_RCC_OscConfig+0xdc>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b05      	cmp	r3, #5
 8001670:	d10e      	bne.n	8001690 <HAL_RCC_OscConfig+0xc4>
 8001672:	4ba2      	ldr	r3, [pc, #648]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4ba1      	ldr	r3, [pc, #644]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001678:	2180      	movs	r1, #128	; 0x80
 800167a:	02c9      	lsls	r1, r1, #11
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	4b9e      	ldr	r3, [pc, #632]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b9d      	ldr	r3, [pc, #628]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001686:	2180      	movs	r1, #128	; 0x80
 8001688:	0249      	lsls	r1, r1, #9
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0xdc>
 8001690:	4b9a      	ldr	r3, [pc, #616]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b99      	ldr	r3, [pc, #612]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001696:	499a      	ldr	r1, [pc, #616]	; (8001900 <HAL_RCC_OscConfig+0x334>)
 8001698:	400a      	ands	r2, r1
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	4b97      	ldr	r3, [pc, #604]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b96      	ldr	r3, [pc, #600]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80016a2:	4998      	ldr	r1, [pc, #608]	; (8001904 <HAL_RCC_OscConfig+0x338>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d014      	beq.n	80016da <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fa26 	bl	8000b00 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ba:	f7ff fa21 	bl	8000b00 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b64      	cmp	r3, #100	; 0x64
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e28c      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016cc:	4b8b      	ldr	r3, [pc, #556]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	029b      	lsls	r3, r3, #10
 80016d4:	4013      	ands	r3, r2
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0xee>
 80016d8:	e015      	b.n	8001706 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fa11 	bl	8000b00 <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff fa0c 	bl	8000b00 <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	; 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e277      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f6:	4b81      	ldr	r3, [pc, #516]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	029b      	lsls	r3, r3, #10
 80016fe:	4013      	ands	r3, r2
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x118>
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d100      	bne.n	8001712 <HAL_RCC_OscConfig+0x146>
 8001710:	e069      	b.n	80017e6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001712:	4b7a      	ldr	r3, [pc, #488]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	220c      	movs	r2, #12
 8001718:	4013      	ands	r3, r2
 800171a:	d00b      	beq.n	8001734 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800171c:	4b77      	ldr	r3, [pc, #476]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	220c      	movs	r2, #12
 8001722:	4013      	ands	r3, r2
 8001724:	2b08      	cmp	r3, #8
 8001726:	d11c      	bne.n	8001762 <HAL_RCC_OscConfig+0x196>
 8001728:	4b74      	ldr	r3, [pc, #464]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	025b      	lsls	r3, r3, #9
 8001730:	4013      	ands	r3, r2
 8001732:	d116      	bne.n	8001762 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001734:	4b71      	ldr	r3, [pc, #452]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2202      	movs	r2, #2
 800173a:	4013      	ands	r3, r2
 800173c:	d005      	beq.n	800174a <HAL_RCC_OscConfig+0x17e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d001      	beq.n	800174a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e24d      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174a:	4b6c      	ldr	r3, [pc, #432]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	22f8      	movs	r2, #248	; 0xf8
 8001750:	4393      	bics	r3, r2
 8001752:	0019      	movs	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	00da      	lsls	r2, r3, #3
 800175a:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001760:	e041      	b.n	80017e6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d024      	beq.n	80017b4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800176a:	4b64      	ldr	r3, [pc, #400]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001770:	2101      	movs	r1, #1
 8001772:	430a      	orrs	r2, r1
 8001774:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff f9c3 	bl	8000b00 <HAL_GetTick>
 800177a:	0003      	movs	r3, r0
 800177c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001780:	f7ff f9be 	bl	8000b00 <HAL_GetTick>
 8001784:	0002      	movs	r2, r0
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e229      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	4b5a      	ldr	r3, [pc, #360]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2202      	movs	r2, #2
 8001798:	4013      	ands	r3, r2
 800179a:	d0f1      	beq.n	8001780 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179c:	4b57      	ldr	r3, [pc, #348]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	22f8      	movs	r2, #248	; 0xf8
 80017a2:	4393      	bics	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	00da      	lsls	r2, r3, #3
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e018      	b.n	80017e6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b4:	4b51      	ldr	r3, [pc, #324]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	438a      	bics	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff f99e 	bl	8000b00 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ca:	f7ff f999 	bl	8000b00 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e204      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017dc:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2202      	movs	r2, #2
 80017e2:	4013      	ands	r3, r2
 80017e4:	d1f1      	bne.n	80017ca <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2208      	movs	r2, #8
 80017ec:	4013      	ands	r3, r2
 80017ee:	d036      	beq.n	800185e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d019      	beq.n	800182c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f8:	4b40      	ldr	r3, [pc, #256]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80017fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017fc:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80017fe:	2101      	movs	r1, #1
 8001800:	430a      	orrs	r2, r1
 8001802:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff f97c 	bl	8000b00 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180e:	f7ff f977 	bl	8000b00 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e1e2      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001820:	4b36      	ldr	r3, [pc, #216]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	2202      	movs	r2, #2
 8001826:	4013      	ands	r3, r2
 8001828:	d0f1      	beq.n	800180e <HAL_RCC_OscConfig+0x242>
 800182a:	e018      	b.n	800185e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182c:	4b33      	ldr	r3, [pc, #204]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800182e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001830:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001832:	2101      	movs	r1, #1
 8001834:	438a      	bics	r2, r1
 8001836:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7ff f962 	bl	8000b00 <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001842:	f7ff f95d 	bl	8000b00 <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1c8      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	2202      	movs	r2, #2
 800185a:	4013      	ands	r3, r2
 800185c:	d1f1      	bne.n	8001842 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2204      	movs	r2, #4
 8001864:	4013      	ands	r3, r2
 8001866:	d100      	bne.n	800186a <HAL_RCC_OscConfig+0x29e>
 8001868:	e0b6      	b.n	80019d8 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800186a:	231f      	movs	r3, #31
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	055b      	lsls	r3, r3, #21
 800187a:	4013      	ands	r3, r2
 800187c:	d111      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0549      	lsls	r1, r1, #21
 8001888:	430a      	orrs	r2, r1
 800188a:	61da      	str	r2, [r3, #28]
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 800188e:	69da      	ldr	r2, [r3, #28]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	055b      	lsls	r3, r3, #21
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800189a:	231f      	movs	r3, #31
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_RCC_OscConfig+0x33c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	d11a      	bne.n	80018e4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_RCC_OscConfig+0x33c>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_RCC_OscConfig+0x33c>)
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	0049      	lsls	r1, r1, #1
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018bc:	f7ff f920 	bl	8000b00 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c6:	f7ff f91b 	bl	8000b00 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b64      	cmp	r3, #100	; 0x64
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e186      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_OscConfig+0x33c>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4013      	ands	r3, r2
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d10f      	bne.n	800190c <HAL_RCC_OscConfig+0x340>
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	621a      	str	r2, [r3, #32]
 80018f8:	e036      	b.n	8001968 <HAL_RCC_OscConfig+0x39c>
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	40021000 	.word	0x40021000
 8001900:	fffeffff 	.word	0xfffeffff
 8001904:	fffbffff 	.word	0xfffbffff
 8001908:	40007000 	.word	0x40007000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10c      	bne.n	800192e <HAL_RCC_OscConfig+0x362>
 8001914:	4bb6      	ldr	r3, [pc, #728]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001916:	6a1a      	ldr	r2, [r3, #32]
 8001918:	4bb5      	ldr	r3, [pc, #724]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 800191a:	2101      	movs	r1, #1
 800191c:	438a      	bics	r2, r1
 800191e:	621a      	str	r2, [r3, #32]
 8001920:	4bb3      	ldr	r3, [pc, #716]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001922:	6a1a      	ldr	r2, [r3, #32]
 8001924:	4bb2      	ldr	r3, [pc, #712]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001926:	2104      	movs	r1, #4
 8001928:	438a      	bics	r2, r1
 800192a:	621a      	str	r2, [r3, #32]
 800192c:	e01c      	b.n	8001968 <HAL_RCC_OscConfig+0x39c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b05      	cmp	r3, #5
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x384>
 8001936:	4bae      	ldr	r3, [pc, #696]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001938:	6a1a      	ldr	r2, [r3, #32]
 800193a:	4bad      	ldr	r3, [pc, #692]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 800193c:	2104      	movs	r1, #4
 800193e:	430a      	orrs	r2, r1
 8001940:	621a      	str	r2, [r3, #32]
 8001942:	4bab      	ldr	r3, [pc, #684]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001944:	6a1a      	ldr	r2, [r3, #32]
 8001946:	4baa      	ldr	r3, [pc, #680]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001948:	2101      	movs	r1, #1
 800194a:	430a      	orrs	r2, r1
 800194c:	621a      	str	r2, [r3, #32]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0x39c>
 8001950:	4ba7      	ldr	r3, [pc, #668]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001952:	6a1a      	ldr	r2, [r3, #32]
 8001954:	4ba6      	ldr	r3, [pc, #664]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001956:	2101      	movs	r1, #1
 8001958:	438a      	bics	r2, r1
 800195a:	621a      	str	r2, [r3, #32]
 800195c:	4ba4      	ldr	r3, [pc, #656]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 800195e:	6a1a      	ldr	r2, [r3, #32]
 8001960:	4ba3      	ldr	r3, [pc, #652]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001962:	2104      	movs	r1, #4
 8001964:	438a      	bics	r2, r1
 8001966:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d014      	beq.n	800199a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7ff f8c6 	bl	8000b00 <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	e009      	b.n	800198e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff f8c1 	bl	8000b00 <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	4a9b      	ldr	r2, [pc, #620]	; (8001bf4 <HAL_RCC_OscConfig+0x628>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e12b      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198e:	4b98      	ldr	r3, [pc, #608]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	2202      	movs	r2, #2
 8001994:	4013      	ands	r3, r2
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x3ae>
 8001998:	e013      	b.n	80019c2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199a:	f7ff f8b1 	bl	8000b00 <HAL_GetTick>
 800199e:	0003      	movs	r3, r0
 80019a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a2:	e009      	b.n	80019b8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f7ff f8ac 	bl	8000b00 <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	4a91      	ldr	r2, [pc, #580]	; (8001bf4 <HAL_RCC_OscConfig+0x628>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e116      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b8:	4b8d      	ldr	r3, [pc, #564]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	2202      	movs	r2, #2
 80019be:	4013      	ands	r3, r2
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019c2:	231f      	movs	r3, #31
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019cc:	4b88      	ldr	r3, [pc, #544]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 80019ce:	69da      	ldr	r2, [r3, #28]
 80019d0:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 80019d2:	4989      	ldr	r1, [pc, #548]	; (8001bf8 <HAL_RCC_OscConfig+0x62c>)
 80019d4:	400a      	ands	r2, r1
 80019d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2210      	movs	r2, #16
 80019de:	4013      	ands	r3, r2
 80019e0:	d063      	beq.n	8001aaa <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d12a      	bne.n	8001a40 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019ea:	4b81      	ldr	r3, [pc, #516]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 80019ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ee:	4b80      	ldr	r3, [pc, #512]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 80019f0:	2104      	movs	r1, #4
 80019f2:	430a      	orrs	r2, r1
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019f6:	4b7e      	ldr	r3, [pc, #504]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 80019f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019fa:	4b7d      	ldr	r3, [pc, #500]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 80019fc:	2101      	movs	r1, #1
 80019fe:	430a      	orrs	r2, r1
 8001a00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a02:	f7ff f87d 	bl	8000b00 <HAL_GetTick>
 8001a06:	0003      	movs	r3, r0
 8001a08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a0c:	f7ff f878 	bl	8000b00 <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e0e3      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a1e:	4b74      	ldr	r3, [pc, #464]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	2202      	movs	r2, #2
 8001a24:	4013      	ands	r3, r2
 8001a26:	d0f1      	beq.n	8001a0c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a28:	4b71      	ldr	r3, [pc, #452]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2c:	22f8      	movs	r2, #248	; 0xf8
 8001a2e:	4393      	bics	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	00da      	lsls	r2, r3, #3
 8001a38:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a3e:	e034      	b.n	8001aaa <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	3305      	adds	r3, #5
 8001a46:	d111      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a48:	4b69      	ldr	r3, [pc, #420]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a4c:	4b68      	ldr	r3, [pc, #416]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a4e:	2104      	movs	r1, #4
 8001a50:	438a      	bics	r2, r1
 8001a52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a54:	4b66      	ldr	r3, [pc, #408]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a58:	22f8      	movs	r2, #248	; 0xf8
 8001a5a:	4393      	bics	r3, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	00da      	lsls	r2, r3, #3
 8001a64:	4b62      	ldr	r3, [pc, #392]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a66:	430a      	orrs	r2, r1
 8001a68:	635a      	str	r2, [r3, #52]	; 0x34
 8001a6a:	e01e      	b.n	8001aaa <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a6c:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a70:	4b5f      	ldr	r3, [pc, #380]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a72:	2104      	movs	r1, #4
 8001a74:	430a      	orrs	r2, r1
 8001a76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a78:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a7c:	4b5c      	ldr	r3, [pc, #368]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	438a      	bics	r2, r1
 8001a82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7ff f83c 	bl	8000b00 <HAL_GetTick>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a8e:	f7ff f837 	bl	8000b00 <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e0a2      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001aa0:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d1f1      	bne.n	8001a8e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d100      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4e8>
 8001ab2:	e097      	b.n	8001be4 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab4:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	220c      	movs	r2, #12
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d100      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x4f6>
 8001ac0:	e06b      	b.n	8001b9a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d14c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aca:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001ad0:	494a      	ldr	r1, [pc, #296]	; (8001bfc <HAL_RCC_OscConfig+0x630>)
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f813 	bl	8000b00 <HAL_GetTick>
 8001ada:	0003      	movs	r3, r0
 8001adc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f80e 	bl	8000b00 <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e079      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af2:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	049b      	lsls	r3, r3, #18
 8001afa:	4013      	ands	r3, r2
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afe:	4b3c      	ldr	r3, [pc, #240]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	220f      	movs	r2, #15
 8001b04:	4393      	bics	r3, r2
 8001b06:	0019      	movs	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0c:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b12:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4a3a      	ldr	r2, [pc, #232]	; (8001c00 <HAL_RCC_OscConfig+0x634>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	431a      	orrs	r2, r3
 8001b26:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b32:	2180      	movs	r1, #128	; 0x80
 8001b34:	0449      	lsls	r1, r1, #17
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7fe ffe1 	bl	8000b00 <HAL_GetTick>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b44:	f7fe ffdc 	bl	8000b00 <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e047      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	049b      	lsls	r3, r3, #18
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x578>
 8001b62:	e03f      	b.n	8001be4 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b6a:	4924      	ldr	r1, [pc, #144]	; (8001bfc <HAL_RCC_OscConfig+0x630>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7fe ffc6 	bl	8000b00 <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7fe ffc1 	bl	8000b00 <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e02c      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8c:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	049b      	lsls	r3, r3, #18
 8001b94:	4013      	ands	r3, r2
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x5ae>
 8001b98:	e024      	b.n	8001be4 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e01f      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_RCC_OscConfig+0x624>)
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	025b      	lsls	r3, r3, #9
 8001bb8:	401a      	ands	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d10e      	bne.n	8001be0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	23f0      	movs	r3, #240	; 0xf0
 8001bd4:	039b      	lsls	r3, r3, #14
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b008      	add	sp, #32
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	00001388 	.word	0x00001388
 8001bf8:	efffffff 	.word	0xefffffff
 8001bfc:	feffffff 	.word	0xfeffffff
 8001c00:	ffc2ffff 	.word	0xffc2ffff

08001c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0b3      	b.n	8001d80 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c18:	4b5b      	ldr	r3, [pc, #364]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4013      	ands	r3, r2
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d911      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b58      	ldr	r3, [pc, #352]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4393      	bics	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	4b55      	ldr	r3, [pc, #340]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c38:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4013      	ands	r3, r2
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e09a      	b.n	8001d80 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	d015      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2204      	movs	r2, #4
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d006      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c5e:	4b4b      	ldr	r3, [pc, #300]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4b4a      	ldr	r3, [pc, #296]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001c64:	21e0      	movs	r1, #224	; 0xe0
 8001c66:	00c9      	lsls	r1, r1, #3
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	22f0      	movs	r2, #240	; 0xf0
 8001c72:	4393      	bics	r3, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	4b44      	ldr	r3, [pc, #272]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2201      	movs	r2, #1
 8001c86:	4013      	ands	r3, r2
 8001c88:	d040      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	029b      	lsls	r3, r3, #10
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d114      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e06e      	b.n	8001d80 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	049b      	lsls	r3, r3, #18
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d108      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e062      	b.n	8001d80 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	4b34      	ldr	r3, [pc, #208]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e05b      	b.n	8001d80 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	4393      	bics	r3, r2
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cdc:	f7fe ff10 	bl	8000b00 <HAL_GetTick>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce4:	e009      	b.n	8001cfa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce6:	f7fe ff0b 	bl	8000b00 <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <HAL_RCC_ClockConfig+0x18c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e042      	b.n	8001d80 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	220c      	movs	r2, #12
 8001d00:	401a      	ands	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1ec      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d211      	bcs.n	8001d3e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4393      	bics	r3, r2
 8001d22:	0019      	movs	r1, r3
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_RCC_ClockConfig+0x184>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	4013      	ands	r3, r2
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e020      	b.n	8001d80 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2204      	movs	r2, #4
 8001d44:	4013      	ands	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <HAL_RCC_ClockConfig+0x190>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d5c:	f000 f820 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001d60:	0001      	movs	r1, r0
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_RCC_ClockConfig+0x188>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	220f      	movs	r2, #15
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <HAL_RCC_ClockConfig+0x194>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	000a      	movs	r2, r1
 8001d72:	40da      	lsrs	r2, r3
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_ClockConfig+0x198>)
 8001d76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7fe fe7b 	bl	8000a74 <HAL_InitTick>
  
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b004      	add	sp, #16
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40022000 	.word	0x40022000
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	00001388 	.word	0x00001388
 8001d94:	fffff8ff 	.word	0xfffff8ff
 8001d98:	080028ac 	.word	0x080028ac
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b08f      	sub	sp, #60	; 0x3c
 8001da4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001da6:	2314      	movs	r3, #20
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dae:	c313      	stmia	r3!, {r0, r1, r4}
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	4a29      	ldr	r2, [pc, #164]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001db8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dba:	c313      	stmia	r3!, {r0, r1, r4}
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc8:	2300      	movs	r3, #0
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	220c      	movs	r2, #12
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d002      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x4a>
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d003      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x50>
 8001de8:	e02d      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dee:	e02d      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df2:	0c9b      	lsrs	r3, r3, #18
 8001df4:	220f      	movs	r2, #15
 8001df6:	4013      	ands	r3, r2
 8001df8:	2214      	movs	r2, #20
 8001dfa:	18ba      	adds	r2, r7, r2
 8001dfc:	5cd3      	ldrb	r3, [r2, r3]
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	220f      	movs	r2, #15
 8001e06:	4013      	ands	r3, r2
 8001e08:	1d3a      	adds	r2, r7, #4
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	025b      	lsls	r3, r3, #9
 8001e14:	4013      	ands	r3, r2
 8001e16:	d009      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e1a:	4812      	ldr	r0, [pc, #72]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e1c:	f7fe f974 	bl	8000108 <__udivsi3>
 8001e20:	0003      	movs	r3, r0
 8001e22:	001a      	movs	r2, r3
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	4353      	muls	r3, r2
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
 8001e2a:	e009      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e2e:	000a      	movs	r2, r1
 8001e30:	0152      	lsls	r2, r2, #5
 8001e32:	1a52      	subs	r2, r2, r1
 8001e34:	0193      	lsls	r3, r2, #6
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	185b      	adds	r3, r3, r1
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e44:	e002      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e4a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e4e:	0018      	movs	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b00f      	add	sp, #60	; 0x3c
 8001e54:	bd90      	pop	{r4, r7, pc}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	0800288c 	.word	0x0800288c
 8001e5c:	0800289c 	.word	0x0800289c
 8001e60:	40021000 	.word	0x40021000
 8001e64:	007a1200 	.word	0x007a1200

08001e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e01e      	b.n	8001eb8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	223d      	movs	r2, #61	; 0x3d
 8001e7e:	5c9b      	ldrb	r3, [r3, r2]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	223c      	movs	r2, #60	; 0x3c
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7fe fd51 	bl	8000938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	223d      	movs	r2, #61	; 0x3d
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	0010      	movs	r0, r2
 8001eaa:	f000 f95b 	bl	8002164 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	223d      	movs	r2, #61	; 0x3d
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b002      	add	sp, #8
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	223d      	movs	r2, #61	; 0x3d
 8001ecc:	2102      	movs	r1, #2
 8001ece:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d007      	beq.n	8001ef2 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	223d      	movs	r2, #61	; 0x3d
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b004      	add	sp, #16
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e01e      	b.n	8001f54 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	223d      	movs	r2, #61	; 0x3d
 8001f1a:	5c9b      	ldrb	r3, [r3, r2]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d107      	bne.n	8001f32 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	223c      	movs	r2, #60	; 0x3c
 8001f26:	2100      	movs	r1, #0
 8001f28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7fe fce3 	bl	80008f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	223d      	movs	r2, #61	; 0x3d
 8001f36:	2102      	movs	r1, #2
 8001f38:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3304      	adds	r3, #4
 8001f42:	0019      	movs	r1, r3
 8001f44:	0010      	movs	r0, r2
 8001f46:	f000 f90d 	bl	8002164 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	223d      	movs	r2, #61	; 0x3d
 8001f4e:	2101      	movs	r1, #1
 8001f50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6839      	ldr	r1, [r7, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 fb74 	bl	800265c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1a      	ldr	r2, [pc, #104]	; (8001fe4 <HAL_TIM_PWM_Start+0x88>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00e      	beq.n	8001f9c <HAL_TIM_PWM_Start+0x40>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a19      	ldr	r2, [pc, #100]	; (8001fe8 <HAL_TIM_PWM_Start+0x8c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d009      	beq.n	8001f9c <HAL_TIM_PWM_Start+0x40>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a17      	ldr	r2, [pc, #92]	; (8001fec <HAL_TIM_PWM_Start+0x90>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_TIM_PWM_Start+0x40>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <HAL_TIM_PWM_Start+0x94>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <HAL_TIM_PWM_Start+0x44>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_TIM_PWM_Start+0x46>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d008      	beq.n	8001fb8 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	0209      	lsls	r1, r1, #8
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d007      	beq.n	8001fda <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b004      	add	sp, #16
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40012c00 	.word	0x40012c00
 8001fe8:	40014000 	.word	0x40014000
 8001fec:	40014400 	.word	0x40014400
 8001ff0:	40014800 	.word	0x40014800

08001ff4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	223c      	movs	r2, #60	; 0x3c
 8002004:	5c9b      	ldrb	r3, [r3, r2]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800200a:	2302      	movs	r3, #2
 800200c:	e0a4      	b.n	8002158 <HAL_TIM_PWM_ConfigChannel+0x164>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	223c      	movs	r2, #60	; 0x3c
 8002012:	2101      	movs	r1, #1
 8002014:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	223d      	movs	r2, #61	; 0x3d
 800201a:	2102      	movs	r1, #2
 800201c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b04      	cmp	r3, #4
 8002022:	d029      	beq.n	8002078 <HAL_TIM_PWM_ConfigChannel+0x84>
 8002024:	d802      	bhi.n	800202c <HAL_TIM_PWM_ConfigChannel+0x38>
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800202a:	e08c      	b.n	8002146 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800202c:	2b08      	cmp	r3, #8
 800202e:	d046      	beq.n	80020be <HAL_TIM_PWM_ConfigChannel+0xca>
 8002030:	2b0c      	cmp	r3, #12
 8002032:	d065      	beq.n	8002100 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002034:	e087      	b.n	8002146 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	0011      	movs	r1, r2
 800203e:	0018      	movs	r0, r3
 8002040:	f000 f910 	bl	8002264 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2108      	movs	r1, #8
 8002050:	430a      	orrs	r2, r1
 8002052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2104      	movs	r1, #4
 8002060:	438a      	bics	r2, r1
 8002062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6999      	ldr	r1, [r3, #24]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	619a      	str	r2, [r3, #24]
      break;
 8002076:	e066      	b.n	8002146 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	0011      	movs	r1, r2
 8002080:	0018      	movs	r0, r3
 8002082:	f000 f977 	bl	8002374 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2180      	movs	r1, #128	; 0x80
 8002092:	0109      	lsls	r1, r1, #4
 8002094:	430a      	orrs	r2, r1
 8002096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	492f      	ldr	r1, [pc, #188]	; (8002160 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6999      	ldr	r1, [r3, #24]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	021a      	lsls	r2, r3, #8
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	619a      	str	r2, [r3, #24]
      break;
 80020bc:	e043      	b.n	8002146 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	0011      	movs	r1, r2
 80020c6:	0018      	movs	r0, r3
 80020c8:	f000 f9d8 	bl	800247c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2108      	movs	r1, #8
 80020d8:	430a      	orrs	r2, r1
 80020da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2104      	movs	r1, #4
 80020e8:	438a      	bics	r2, r1
 80020ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69d9      	ldr	r1, [r3, #28]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	61da      	str	r2, [r3, #28]
      break;
 80020fe:	e022      	b.n	8002146 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	0011      	movs	r1, r2
 8002108:	0018      	movs	r0, r3
 800210a:	f000 fa3d 	bl	8002588 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2180      	movs	r1, #128	; 0x80
 800211a:	0109      	lsls	r1, r1, #4
 800211c:	430a      	orrs	r2, r1
 800211e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	490d      	ldr	r1, [pc, #52]	; (8002160 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800212c:	400a      	ands	r2, r1
 800212e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69d9      	ldr	r1, [r3, #28]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	021a      	lsls	r2, r3, #8
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	61da      	str	r2, [r3, #28]
      break;
 8002144:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	223d      	movs	r2, #61	; 0x3d
 800214a:	2101      	movs	r1, #1
 800214c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	223c      	movs	r2, #60	; 0x3c
 8002152:	2100      	movs	r1, #0
 8002154:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b004      	add	sp, #16
 800215e:	bd80      	pop	{r7, pc}
 8002160:	fffffbff 	.word	0xfffffbff

08002164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a34      	ldr	r2, [pc, #208]	; (8002248 <TIM_Base_SetConfig+0xe4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d008      	beq.n	800218e <TIM_Base_SetConfig+0x2a>
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	05db      	lsls	r3, r3, #23
 8002182:	429a      	cmp	r2, r3
 8002184:	d003      	beq.n	800218e <TIM_Base_SetConfig+0x2a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a30      	ldr	r2, [pc, #192]	; (800224c <TIM_Base_SetConfig+0xe8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d108      	bne.n	80021a0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2270      	movs	r2, #112	; 0x70
 8002192:	4393      	bics	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a29      	ldr	r2, [pc, #164]	; (8002248 <TIM_Base_SetConfig+0xe4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d018      	beq.n	80021da <TIM_Base_SetConfig+0x76>
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	05db      	lsls	r3, r3, #23
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d013      	beq.n	80021da <TIM_Base_SetConfig+0x76>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a25      	ldr	r2, [pc, #148]	; (800224c <TIM_Base_SetConfig+0xe8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00f      	beq.n	80021da <TIM_Base_SetConfig+0x76>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a24      	ldr	r2, [pc, #144]	; (8002250 <TIM_Base_SetConfig+0xec>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00b      	beq.n	80021da <TIM_Base_SetConfig+0x76>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a23      	ldr	r2, [pc, #140]	; (8002254 <TIM_Base_SetConfig+0xf0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <TIM_Base_SetConfig+0x76>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a22      	ldr	r2, [pc, #136]	; (8002258 <TIM_Base_SetConfig+0xf4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d003      	beq.n	80021da <TIM_Base_SetConfig+0x76>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a21      	ldr	r2, [pc, #132]	; (800225c <TIM_Base_SetConfig+0xf8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d108      	bne.n	80021ec <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4a20      	ldr	r2, [pc, #128]	; (8002260 <TIM_Base_SetConfig+0xfc>)
 80021de:	4013      	ands	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	4393      	bics	r3, r2
 80021f2:	001a      	movs	r2, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a0c      	ldr	r2, [pc, #48]	; (8002248 <TIM_Base_SetConfig+0xe4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00b      	beq.n	8002232 <TIM_Base_SetConfig+0xce>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a0d      	ldr	r2, [pc, #52]	; (8002254 <TIM_Base_SetConfig+0xf0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <TIM_Base_SetConfig+0xce>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <TIM_Base_SetConfig+0xf4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d003      	beq.n	8002232 <TIM_Base_SetConfig+0xce>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a0b      	ldr	r2, [pc, #44]	; (800225c <TIM_Base_SetConfig+0xf8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d103      	bne.n	800223a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	615a      	str	r2, [r3, #20]
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b004      	add	sp, #16
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40012c00 	.word	0x40012c00
 800224c:	40000400 	.word	0x40000400
 8002250:	40002000 	.word	0x40002000
 8002254:	40014000 	.word	0x40014000
 8002258:	40014400 	.word	0x40014400
 800225c:	40014800 	.word	0x40014800
 8002260:	fffffcff 	.word	0xfffffcff

08002264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	2201      	movs	r2, #1
 8002274:	4393      	bics	r3, r2
 8002276:	001a      	movs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2270      	movs	r2, #112	; 0x70
 8002292:	4393      	bics	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2203      	movs	r2, #3
 800229a:	4393      	bics	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2202      	movs	r2, #2
 80022ac:	4393      	bics	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a27      	ldr	r2, [pc, #156]	; (800235c <TIM_OC1_SetConfig+0xf8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00b      	beq.n	80022da <TIM_OC1_SetConfig+0x76>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a26      	ldr	r2, [pc, #152]	; (8002360 <TIM_OC1_SetConfig+0xfc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <TIM_OC1_SetConfig+0x76>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a25      	ldr	r2, [pc, #148]	; (8002364 <TIM_OC1_SetConfig+0x100>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d003      	beq.n	80022da <TIM_OC1_SetConfig+0x76>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a24      	ldr	r2, [pc, #144]	; (8002368 <TIM_OC1_SetConfig+0x104>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10c      	bne.n	80022f4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2208      	movs	r2, #8
 80022de:	4393      	bics	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2204      	movs	r2, #4
 80022f0:	4393      	bics	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a19      	ldr	r2, [pc, #100]	; (800235c <TIM_OC1_SetConfig+0xf8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00b      	beq.n	8002314 <TIM_OC1_SetConfig+0xb0>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a18      	ldr	r2, [pc, #96]	; (8002360 <TIM_OC1_SetConfig+0xfc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d007      	beq.n	8002314 <TIM_OC1_SetConfig+0xb0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a17      	ldr	r2, [pc, #92]	; (8002364 <TIM_OC1_SetConfig+0x100>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d003      	beq.n	8002314 <TIM_OC1_SetConfig+0xb0>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a16      	ldr	r2, [pc, #88]	; (8002368 <TIM_OC1_SetConfig+0x104>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d111      	bne.n	8002338 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4a15      	ldr	r2, [pc, #84]	; (800236c <TIM_OC1_SetConfig+0x108>)
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4a14      	ldr	r2, [pc, #80]	; (8002370 <TIM_OC1_SetConfig+0x10c>)
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	621a      	str	r2, [r3, #32]
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b006      	add	sp, #24
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	40012c00 	.word	0x40012c00
 8002360:	40014000 	.word	0x40014000
 8002364:	40014400 	.word	0x40014400
 8002368:	40014800 	.word	0x40014800
 800236c:	fffffeff 	.word	0xfffffeff
 8002370:	fffffdff 	.word	0xfffffdff

08002374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	2210      	movs	r2, #16
 8002384:	4393      	bics	r3, r2
 8002386:	001a      	movs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4a2e      	ldr	r2, [pc, #184]	; (800245c <TIM_OC2_SetConfig+0xe8>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a2d      	ldr	r2, [pc, #180]	; (8002460 <TIM_OC2_SetConfig+0xec>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2220      	movs	r2, #32
 80023be:	4393      	bics	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a24      	ldr	r2, [pc, #144]	; (8002464 <TIM_OC2_SetConfig+0xf0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d10d      	bne.n	80023f2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2280      	movs	r2, #128	; 0x80
 80023da:	4393      	bics	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2240      	movs	r2, #64	; 0x40
 80023ee:	4393      	bics	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <TIM_OC2_SetConfig+0xf0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00b      	beq.n	8002412 <TIM_OC2_SetConfig+0x9e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <TIM_OC2_SetConfig+0xf4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <TIM_OC2_SetConfig+0x9e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a19      	ldr	r2, [pc, #100]	; (800246c <TIM_OC2_SetConfig+0xf8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d003      	beq.n	8002412 <TIM_OC2_SetConfig+0x9e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a18      	ldr	r2, [pc, #96]	; (8002470 <TIM_OC2_SetConfig+0xfc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d113      	bne.n	800243a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <TIM_OC2_SetConfig+0x100>)
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4a16      	ldr	r2, [pc, #88]	; (8002478 <TIM_OC2_SetConfig+0x104>)
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	621a      	str	r2, [r3, #32]
}
 8002454:	46c0      	nop			; (mov r8, r8)
 8002456:	46bd      	mov	sp, r7
 8002458:	b006      	add	sp, #24
 800245a:	bd80      	pop	{r7, pc}
 800245c:	ffff8fff 	.word	0xffff8fff
 8002460:	fffffcff 	.word	0xfffffcff
 8002464:	40012c00 	.word	0x40012c00
 8002468:	40014000 	.word	0x40014000
 800246c:	40014400 	.word	0x40014400
 8002470:	40014800 	.word	0x40014800
 8002474:	fffffbff 	.word	0xfffffbff
 8002478:	fffff7ff 	.word	0xfffff7ff

0800247c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4a35      	ldr	r2, [pc, #212]	; (8002560 <TIM_OC3_SetConfig+0xe4>)
 800248c:	401a      	ands	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2270      	movs	r2, #112	; 0x70
 80024a8:	4393      	bics	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2203      	movs	r2, #3
 80024b0:	4393      	bics	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	4a28      	ldr	r2, [pc, #160]	; (8002564 <TIM_OC3_SetConfig+0xe8>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a24      	ldr	r2, [pc, #144]	; (8002568 <TIM_OC3_SetConfig+0xec>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d10d      	bne.n	80024f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	4a23      	ldr	r2, [pc, #140]	; (800256c <TIM_OC3_SetConfig+0xf0>)
 80024de:	4013      	ands	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <TIM_OC3_SetConfig+0xf4>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <TIM_OC3_SetConfig+0xec>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00b      	beq.n	8002516 <TIM_OC3_SetConfig+0x9a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <TIM_OC3_SetConfig+0xf8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d007      	beq.n	8002516 <TIM_OC3_SetConfig+0x9a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <TIM_OC3_SetConfig+0xfc>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d003      	beq.n	8002516 <TIM_OC3_SetConfig+0x9a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a1a      	ldr	r2, [pc, #104]	; (800257c <TIM_OC3_SetConfig+0x100>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d113      	bne.n	800253e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <TIM_OC3_SetConfig+0x104>)
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4a18      	ldr	r2, [pc, #96]	; (8002584 <TIM_OC3_SetConfig+0x108>)
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	621a      	str	r2, [r3, #32]
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b006      	add	sp, #24
 800255e:	bd80      	pop	{r7, pc}
 8002560:	fffffeff 	.word	0xfffffeff
 8002564:	fffffdff 	.word	0xfffffdff
 8002568:	40012c00 	.word	0x40012c00
 800256c:	fffff7ff 	.word	0xfffff7ff
 8002570:	fffffbff 	.word	0xfffffbff
 8002574:	40014000 	.word	0x40014000
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	ffffefff 	.word	0xffffefff
 8002584:	ffffdfff 	.word	0xffffdfff

08002588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a28      	ldr	r2, [pc, #160]	; (8002638 <TIM_OC4_SetConfig+0xb0>)
 8002598:	401a      	ands	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a22      	ldr	r2, [pc, #136]	; (800263c <TIM_OC4_SetConfig+0xb4>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4a21      	ldr	r2, [pc, #132]	; (8002640 <TIM_OC4_SetConfig+0xb8>)
 80025bc:	4013      	ands	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <TIM_OC4_SetConfig+0xbc>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	031b      	lsls	r3, r3, #12
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a19      	ldr	r2, [pc, #100]	; (8002648 <TIM_OC4_SetConfig+0xc0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00b      	beq.n	8002600 <TIM_OC4_SetConfig+0x78>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a18      	ldr	r2, [pc, #96]	; (800264c <TIM_OC4_SetConfig+0xc4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d007      	beq.n	8002600 <TIM_OC4_SetConfig+0x78>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a17      	ldr	r2, [pc, #92]	; (8002650 <TIM_OC4_SetConfig+0xc8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d003      	beq.n	8002600 <TIM_OC4_SetConfig+0x78>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a16      	ldr	r2, [pc, #88]	; (8002654 <TIM_OC4_SetConfig+0xcc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d109      	bne.n	8002614 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	4a15      	ldr	r2, [pc, #84]	; (8002658 <TIM_OC4_SetConfig+0xd0>)
 8002604:	4013      	ands	r3, r2
 8002606:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	019b      	lsls	r3, r3, #6
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	621a      	str	r2, [r3, #32]
}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b006      	add	sp, #24
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	ffffefff 	.word	0xffffefff
 800263c:	ffff8fff 	.word	0xffff8fff
 8002640:	fffffcff 	.word	0xfffffcff
 8002644:	ffffdfff 	.word	0xffffdfff
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40014000 	.word	0x40014000
 8002650:	40014400 	.word	0x40014400
 8002654:	40014800 	.word	0x40014800
 8002658:	ffffbfff 	.word	0xffffbfff

0800265c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	221f      	movs	r2, #31
 800266c:	4013      	ands	r3, r2
 800266e:	2201      	movs	r2, #1
 8002670:	409a      	lsls	r2, r3
 8002672:	0013      	movs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	43d2      	mvns	r2, r2
 800267e:	401a      	ands	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a1a      	ldr	r2, [r3, #32]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	211f      	movs	r1, #31
 800268c:	400b      	ands	r3, r1
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4099      	lsls	r1, r3
 8002692:	000b      	movs	r3, r1
 8002694:	431a      	orrs	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	621a      	str	r2, [r3, #32]
}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b006      	add	sp, #24
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	223c      	movs	r2, #60	; 0x3c
 80026b2:	5c9b      	ldrb	r3, [r3, r2]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e047      	b.n	800274c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	223c      	movs	r2, #60	; 0x3c
 80026c0:	2101      	movs	r1, #1
 80026c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	223d      	movs	r2, #61	; 0x3d
 80026c8:	2102      	movs	r1, #2
 80026ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2270      	movs	r2, #112	; 0x70
 80026e0:	4393      	bics	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a16      	ldr	r2, [pc, #88]	; (8002754 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00f      	beq.n	8002720 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	05db      	lsls	r3, r3, #23
 8002708:	429a      	cmp	r2, r3
 800270a:	d009      	beq.n	8002720 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a11      	ldr	r2, [pc, #68]	; (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d004      	beq.n	8002720 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d10c      	bne.n	800273a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2280      	movs	r2, #128	; 0x80
 8002724:	4393      	bics	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	4313      	orrs	r3, r2
 8002730:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	223d      	movs	r2, #61	; 0x3d
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	223c      	movs	r2, #60	; 0x3c
 8002746:	2100      	movs	r1, #0
 8002748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	b004      	add	sp, #16
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40012c00 	.word	0x40012c00
 8002758:	40000400 	.word	0x40000400
 800275c:	40014000 	.word	0x40014000

08002760 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	223c      	movs	r2, #60	; 0x3c
 8002772:	5c9b      	ldrb	r3, [r3, r2]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002778:	2302      	movs	r3, #2
 800277a:	e03e      	b.n	80027fa <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	223c      	movs	r2, #60	; 0x3c
 8002780:	2101      	movs	r1, #1
 8002782:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	22ff      	movs	r2, #255	; 0xff
 8002788:	4393      	bics	r3, r2
 800278a:	001a      	movs	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002798:	401a      	ands	r2, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a18      	ldr	r2, [pc, #96]	; (8002808 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80027a6:	401a      	ands	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a16      	ldr	r2, [pc, #88]	; (800280c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80027b4:	401a      	ands	r2, r3
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a13      	ldr	r2, [pc, #76]	; (8002810 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80027c2:	401a      	ands	r2, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a11      	ldr	r2, [pc, #68]	; (8002814 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80027d0:	401a      	ands	r2, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80027de:	401a      	ands	r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	223c      	movs	r2, #60	; 0x3c
 80027f4:	2100      	movs	r1, #0
 80027f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	0018      	movs	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b004      	add	sp, #16
 8002800:	bd80      	pop	{r7, pc}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	fffffcff 	.word	0xfffffcff
 8002808:	fffffbff 	.word	0xfffffbff
 800280c:	fffff7ff 	.word	0xfffff7ff
 8002810:	ffffefff 	.word	0xffffefff
 8002814:	ffffdfff 	.word	0xffffdfff
 8002818:	ffffbfff 	.word	0xffffbfff

0800281c <__libc_init_array>:
 800281c:	b570      	push	{r4, r5, r6, lr}
 800281e:	2600      	movs	r6, #0
 8002820:	4d0c      	ldr	r5, [pc, #48]	; (8002854 <__libc_init_array+0x38>)
 8002822:	4c0d      	ldr	r4, [pc, #52]	; (8002858 <__libc_init_array+0x3c>)
 8002824:	1b64      	subs	r4, r4, r5
 8002826:	10a4      	asrs	r4, r4, #2
 8002828:	42a6      	cmp	r6, r4
 800282a:	d109      	bne.n	8002840 <__libc_init_array+0x24>
 800282c:	2600      	movs	r6, #0
 800282e:	f000 f821 	bl	8002874 <_init>
 8002832:	4d0a      	ldr	r5, [pc, #40]	; (800285c <__libc_init_array+0x40>)
 8002834:	4c0a      	ldr	r4, [pc, #40]	; (8002860 <__libc_init_array+0x44>)
 8002836:	1b64      	subs	r4, r4, r5
 8002838:	10a4      	asrs	r4, r4, #2
 800283a:	42a6      	cmp	r6, r4
 800283c:	d105      	bne.n	800284a <__libc_init_array+0x2e>
 800283e:	bd70      	pop	{r4, r5, r6, pc}
 8002840:	00b3      	lsls	r3, r6, #2
 8002842:	58eb      	ldr	r3, [r5, r3]
 8002844:	4798      	blx	r3
 8002846:	3601      	adds	r6, #1
 8002848:	e7ee      	b.n	8002828 <__libc_init_array+0xc>
 800284a:	00b3      	lsls	r3, r6, #2
 800284c:	58eb      	ldr	r3, [r5, r3]
 800284e:	4798      	blx	r3
 8002850:	3601      	adds	r6, #1
 8002852:	e7f2      	b.n	800283a <__libc_init_array+0x1e>
 8002854:	080028bc 	.word	0x080028bc
 8002858:	080028bc 	.word	0x080028bc
 800285c:	080028bc 	.word	0x080028bc
 8002860:	080028c0 	.word	0x080028c0

08002864 <memset>:
 8002864:	0003      	movs	r3, r0
 8002866:	1812      	adds	r2, r2, r0
 8002868:	4293      	cmp	r3, r2
 800286a:	d100      	bne.n	800286e <memset+0xa>
 800286c:	4770      	bx	lr
 800286e:	7019      	strb	r1, [r3, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	e7f9      	b.n	8002868 <memset+0x4>

08002874 <_init>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287a:	bc08      	pop	{r3}
 800287c:	469e      	mov	lr, r3
 800287e:	4770      	bx	lr

08002880 <_fini>:
 8002880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002886:	bc08      	pop	{r3}
 8002888:	469e      	mov	lr, r3
 800288a:	4770      	bx	lr
