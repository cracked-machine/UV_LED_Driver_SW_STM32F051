
UV_LED_DRIVER_SW_STM32L051.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dbc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08004e7c  08004e7c  00014e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005158  08005158  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005158  08005158  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005158  08005158  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800515c  0800515c  0001515c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000078  080051d8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  080051d8  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118c8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029d8  00000000  00000000  00031968  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da8  00000000  00000000  00034340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  000350e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010c2f  00000000  00000000  00035d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc5d  00000000  00000000  00046957  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00057aef  00000000  00000000  000545b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac0a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c8  00000000  00000000  000ac120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e64 	.word	0x08004e64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08004e64 	.word	0x08004e64

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <EM_getSystemState>:
 *	@retval UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
										UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef 	EM_getSystemState()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	return eTheSystemState;
 8000224:	4b02      	ldr	r3, [pc, #8]	; (8000230 <EM_getSystemState+0x10>)
 8000226:	781b      	ldrb	r3, [r3, #0]
}
 8000228:	0018      	movs	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	20000094 	.word	0x20000094

08000234 <EM_ProcessEvent>:
											UVBOX_evLidClosed,
 *	@retval None
 *
 */
void EM_ProcessEvent(UVBOX_SystemEventsTypedef newEvent)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	701a      	strb	r2, [r3, #0]
	switch(eTheSystemState)
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <EM_ProcessEvent+0x58>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d002      	beq.n	800024e <EM_ProcessEvent+0x1a>
 8000248:	2b01      	cmp	r3, #1
 800024a:	d00d      	beq.n	8000268 <EM_ProcessEvent+0x34>
					break;
			}

			break;
	}
}
 800024c:	e019      	b.n	8000282 <EM_ProcessEvent+0x4e>
			switch(newEvent)
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b01      	cmp	r3, #1
 8000254:	d000      	beq.n	8000258 <EM_ProcessEvent+0x24>
					break;
 8000256:	e006      	b.n	8000266 <EM_ProcessEvent+0x32>
					eTheSystemState = LM_EnableUVMode();
 8000258:	f000 f81a 	bl	8000290 <LM_EnableUVMode>
 800025c:	0003      	movs	r3, r0
 800025e:	001a      	movs	r2, r3
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <EM_ProcessEvent+0x58>)
 8000262:	701a      	strb	r2, [r3, #0]
					break;
 8000264:	46c0      	nop			; (mov r8, r8)
			break;
 8000266:	e00c      	b.n	8000282 <EM_ProcessEvent+0x4e>
			switch(newEvent)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d000      	beq.n	8000272 <EM_ProcessEvent+0x3e>
					break;
 8000270:	e006      	b.n	8000280 <EM_ProcessEvent+0x4c>
					eTheSystemState = LM_DisableUVMode();
 8000272:	f000 f831 	bl	80002d8 <LM_DisableUVMode>
 8000276:	0003      	movs	r3, r0
 8000278:	001a      	movs	r2, r3
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <EM_ProcessEvent+0x58>)
 800027c:	701a      	strb	r2, [r3, #0]
					break;
 800027e:	46c0      	nop			; (mov r8, r8)
			break;
 8000280:	46c0      	nop			; (mov r8, r8)
}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	46bd      	mov	sp, r7
 8000286:	b002      	add	sp, #8
 8000288:	bd80      	pop	{r7, pc}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	20000094 	.word	0x20000094

08000290 <LM_EnableUVMode>:
 *	@retval 	UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
											UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef LM_EnableUVMode()
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	LM_SetStatusLed(UVBOX_StatusLedGreen);
 8000294:	2000      	movs	r0, #0
 8000296:	f000 f949 	bl	800052c <LM_SetStatusLed>

	UV_PWM_TIMER.Instance->CCR1 = MAX_UVLED_PWM_PERIOD;
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <LM_EnableUVMode+0x40>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	22a0      	movs	r2, #160	; 0xa0
 80002a0:	635a      	str	r2, [r3, #52]	; 0x34
	UV_PWM_TIMER.Instance->CCR2 = MAX_UVLED_PWM_PERIOD;
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <LM_EnableUVMode+0x40>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	22a0      	movs	r2, #160	; 0xa0
 80002a8:	639a      	str	r2, [r3, #56]	; 0x38
	UV_PWM_TIMER.Instance->CCR3 = MAX_UVLED_PWM_PERIOD;
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <LM_EnableUVMode+0x40>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	22a0      	movs	r2, #160	; 0xa0
 80002b0:	63da      	str	r2, [r3, #60]	; 0x3c
	UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
 80002b2:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <LM_EnableUVMode+0x40>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	22a0      	movs	r2, #160	; 0xa0
 80002b8:	641a      	str	r2, [r3, #64]	; 0x40
	LED_PWM_TIMER.Instance->CCR1 = 0;
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <LM_EnableUVMode+0x44>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2200      	movs	r2, #0
 80002c0:	635a      	str	r2, [r3, #52]	; 0x34


	TM_StartTimer();
 80002c2:	f000 f9cb 	bl	800065c <TM_StartTimer>

	return UVBOX_LidClosed;
 80002c6:	2301      	movs	r3, #1
}
 80002c8:	0018      	movs	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	200001d4 	.word	0x200001d4
 80002d4:	20000254 	.word	0x20000254

080002d8 <LM_DisableUVMode>:
 *	@retval 	UVBOX_SystemStateTypedef - 	UVBOX_LidOpen,
											UVBOX_LidClosed
 *
 */
UVBOX_SystemStateTypedef LM_DisableUVMode()
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	LM_SetStatusLed(UVBOX_StatusLedRed);
 80002dc:	2001      	movs	r0, #1
 80002de:	f000 f925 	bl	800052c <LM_SetStatusLed>

	UV_PWM_TIMER.Instance->CCR1 = 0;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <LM_DisableUVMode+0x44>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2200      	movs	r2, #0
 80002e8:	635a      	str	r2, [r3, #52]	; 0x34
	UV_PWM_TIMER.Instance->CCR2 = 0;
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <LM_DisableUVMode+0x44>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2200      	movs	r2, #0
 80002f0:	639a      	str	r2, [r3, #56]	; 0x38
	UV_PWM_TIMER.Instance->CCR3 = 0;
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <LM_DisableUVMode+0x44>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2200      	movs	r2, #0
 80002f8:	63da      	str	r2, [r3, #60]	; 0x3c
	UV_PWM_TIMER.Instance->CCR4 = 0;
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <LM_DisableUVMode+0x44>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2200      	movs	r2, #0
 8000300:	641a      	str	r2, [r3, #64]	; 0x40
	LED_PWM_TIMER.Instance->CCR1 = MAX_LED_PWM_PERIOD;
 8000302:	4b07      	ldr	r3, [pc, #28]	; (8000320 <LM_DisableUVMode+0x48>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2278      	movs	r2, #120	; 0x78
 8000308:	635a      	str	r2, [r3, #52]	; 0x34

	TM_StopTimer();
 800030a:	f000 f9bd 	bl	8000688 <TM_StopTimer>
	TM_ResetTimer();
 800030e:	f000 f947 	bl	80005a0 <TM_ResetTimer>

	return UVBOX_LidOpen;
 8000312:	2300      	movs	r3, #0
}
 8000314:	0018      	movs	r0, r3
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	200001d4 	.word	0x200001d4
 8000320:	20000254 	.word	0x20000254

08000324 <_UpdateUvPwm>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void _UpdateUvPwm(UVBOX_EncoderDirTypeDef new_encoder_dir)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	0002      	movs	r2, r0
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	701a      	strb	r2, [r3, #0]
  	// encoder direction has changed from increasing to decreasing
	if( (RE_getPrevEncoderDir()) && (!new_encoder_dir) )
 8000330:	f000 f91c 	bl	800056c <RE_getPrevEncoderDir>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d04e      	beq.n	80003d6 <_UpdateUvPwm+0xb2>
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d14a      	bne.n	80003d6 <_UpdateUvPwm+0xb2>
	{
		UV_PWM_TIMER.Instance->CCR1 -= ENCODER_STEP;
 8000340:	4b50      	ldr	r3, [pc, #320]	; (8000484 <_UpdateUvPwm+0x160>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000346:	4b4f      	ldr	r3, [pc, #316]	; (8000484 <_UpdateUvPwm+0x160>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3a01      	subs	r2, #1
 800034c:	635a      	str	r2, [r3, #52]	; 0x34
		UV_PWM_TIMER.Instance->CCR2 -= ENCODER_STEP;
 800034e:	4b4d      	ldr	r3, [pc, #308]	; (8000484 <_UpdateUvPwm+0x160>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000354:	4b4b      	ldr	r3, [pc, #300]	; (8000484 <_UpdateUvPwm+0x160>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	3a01      	subs	r2, #1
 800035a:	639a      	str	r2, [r3, #56]	; 0x38
		UV_PWM_TIMER.Instance->CCR3 -= ENCODER_STEP;
 800035c:	4b49      	ldr	r3, [pc, #292]	; (8000484 <_UpdateUvPwm+0x160>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000362:	4b48      	ldr	r3, [pc, #288]	; (8000484 <_UpdateUvPwm+0x160>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	3a01      	subs	r2, #1
 8000368:	63da      	str	r2, [r3, #60]	; 0x3c
		UV_PWM_TIMER.Instance->CCR4 -= ENCODER_STEP;
 800036a:	4b46      	ldr	r3, [pc, #280]	; (8000484 <_UpdateUvPwm+0x160>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000370:	4b44      	ldr	r3, [pc, #272]	; (8000484 <_UpdateUvPwm+0x160>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	3a01      	subs	r2, #1
 8000376:	641a      	str	r2, [r3, #64]	; 0x40

		// clamp lower range integer overflow to
		// MAX_UVLED_PWM_PERIOD+1
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD+1) ||
 8000378:	4b42      	ldr	r3, [pc, #264]	; (8000484 <_UpdateUvPwm+0x160>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800037e:	2ba1      	cmp	r3, #161	; 0xa1
 8000380:	d80e      	bhi.n	80003a0 <_UpdateUvPwm+0x7c>
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD+1)	||
 8000382:	4b40      	ldr	r3, [pc, #256]	; (8000484 <_UpdateUvPwm+0x160>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD+1) ||
 8000388:	2ba1      	cmp	r3, #161	; 0xa1
 800038a:	d809      	bhi.n	80003a0 <_UpdateUvPwm+0x7c>
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD+1) ||
 800038c:	4b3d      	ldr	r3, [pc, #244]	; (8000484 <_UpdateUvPwm+0x160>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD+1)	||
 8000392:	2ba1      	cmp	r3, #161	; 0xa1
 8000394:	d804      	bhi.n	80003a0 <_UpdateUvPwm+0x7c>
			(UV_PWM_TIMER.Instance->CCR4 > MAX_UVLED_PWM_PERIOD+1)
 8000396:	4b3b      	ldr	r3, [pc, #236]	; (8000484 <_UpdateUvPwm+0x160>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD+1) ||
 800039c:	2ba1      	cmp	r3, #161	; 0xa1
 800039e:	d90f      	bls.n	80003c0 <_UpdateUvPwm+0x9c>
			)
		{
			UV_PWM_TIMER.Instance->CCR1 = 0;
 80003a0:	4b38      	ldr	r3, [pc, #224]	; (8000484 <_UpdateUvPwm+0x160>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2200      	movs	r2, #0
 80003a6:	635a      	str	r2, [r3, #52]	; 0x34
			UV_PWM_TIMER.Instance->CCR2 = 0;
 80003a8:	4b36      	ldr	r3, [pc, #216]	; (8000484 <_UpdateUvPwm+0x160>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2200      	movs	r2, #0
 80003ae:	639a      	str	r2, [r3, #56]	; 0x38
			UV_PWM_TIMER.Instance->CCR3 = 0;
 80003b0:	4b34      	ldr	r3, [pc, #208]	; (8000484 <_UpdateUvPwm+0x160>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2200      	movs	r2, #0
 80003b6:	63da      	str	r2, [r3, #60]	; 0x3c
			UV_PWM_TIMER.Instance->CCR4 = 0;
 80003b8:	4b32      	ldr	r3, [pc, #200]	; (8000484 <_UpdateUvPwm+0x160>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2200      	movs	r2, #0
 80003be:	641a      	str	r2, [r3, #64]	; 0x40
		}

		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
 80003c0:	4b31      	ldr	r3, [pc, #196]	; (8000488 <_UpdateUvPwm+0x164>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	2210      	movs	r2, #16
 80003ca:	4013      	ands	r3, r2
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f8d6 	bl	8000580 <RE_setPrevEncoderDir>
			UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
		}

		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
	}
}
 80003d4:	e051      	b.n	800047a <_UpdateUvPwm+0x156>
	else if( (!RE_getPrevEncoderDir()) && (new_encoder_dir) )
 80003d6:	f000 f8c9 	bl	800056c <RE_getPrevEncoderDir>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d14d      	bne.n	800047a <_UpdateUvPwm+0x156>
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d049      	beq.n	800047a <_UpdateUvPwm+0x156>
		UV_PWM_TIMER.Instance->CCR1 += ENCODER_STEP;
 80003e6:	4b27      	ldr	r3, [pc, #156]	; (8000484 <_UpdateUvPwm+0x160>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003ec:	4b25      	ldr	r3, [pc, #148]	; (8000484 <_UpdateUvPwm+0x160>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3201      	adds	r2, #1
 80003f2:	635a      	str	r2, [r3, #52]	; 0x34
		UV_PWM_TIMER.Instance->CCR2 += ENCODER_STEP;
 80003f4:	4b23      	ldr	r3, [pc, #140]	; (8000484 <_UpdateUvPwm+0x160>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80003fa:	4b22      	ldr	r3, [pc, #136]	; (8000484 <_UpdateUvPwm+0x160>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	3201      	adds	r2, #1
 8000400:	639a      	str	r2, [r3, #56]	; 0x38
		UV_PWM_TIMER.Instance->CCR3 += ENCODER_STEP;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <_UpdateUvPwm+0x160>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <_UpdateUvPwm+0x160>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3201      	adds	r2, #1
 800040e:	63da      	str	r2, [r3, #60]	; 0x3c
		UV_PWM_TIMER.Instance->CCR4 += ENCODER_STEP;
 8000410:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <_UpdateUvPwm+0x160>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000416:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <_UpdateUvPwm+0x160>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	3201      	adds	r2, #1
 800041c:	641a      	str	r2, [r3, #64]	; 0x40
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD) ||
 800041e:	4b19      	ldr	r3, [pc, #100]	; (8000484 <_UpdateUvPwm+0x160>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000424:	2ba0      	cmp	r3, #160	; 0xa0
 8000426:	d80e      	bhi.n	8000446 <_UpdateUvPwm+0x122>
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD)	||
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <_UpdateUvPwm+0x160>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		if(	(UV_PWM_TIMER.Instance->CCR1 > MAX_UVLED_PWM_PERIOD) ||
 800042e:	2ba0      	cmp	r3, #160	; 0xa0
 8000430:	d809      	bhi.n	8000446 <_UpdateUvPwm+0x122>
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD) ||
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <_UpdateUvPwm+0x160>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			(UV_PWM_TIMER.Instance->CCR2 > MAX_UVLED_PWM_PERIOD)	||
 8000438:	2ba0      	cmp	r3, #160	; 0xa0
 800043a:	d804      	bhi.n	8000446 <_UpdateUvPwm+0x122>
			(UV_PWM_TIMER.Instance->CCR4 > MAX_UVLED_PWM_PERIOD)
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <_UpdateUvPwm+0x160>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			(UV_PWM_TIMER.Instance->CCR3 > MAX_UVLED_PWM_PERIOD) ||
 8000442:	2ba0      	cmp	r3, #160	; 0xa0
 8000444:	d90f      	bls.n	8000466 <_UpdateUvPwm+0x142>
			UV_PWM_TIMER.Instance->CCR1 = MAX_UVLED_PWM_PERIOD;
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <_UpdateUvPwm+0x160>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	22a0      	movs	r2, #160	; 0xa0
 800044c:	635a      	str	r2, [r3, #52]	; 0x34
			UV_PWM_TIMER.Instance->CCR2 = MAX_UVLED_PWM_PERIOD;
 800044e:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <_UpdateUvPwm+0x160>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	22a0      	movs	r2, #160	; 0xa0
 8000454:	639a      	str	r2, [r3, #56]	; 0x38
			UV_PWM_TIMER.Instance->CCR3 = MAX_UVLED_PWM_PERIOD;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <_UpdateUvPwm+0x160>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	22a0      	movs	r2, #160	; 0xa0
 800045c:	63da      	str	r2, [r3, #60]	; 0x3c
			UV_PWM_TIMER.Instance->CCR4 = MAX_UVLED_PWM_PERIOD;
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <_UpdateUvPwm+0x160>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	22a0      	movs	r2, #160	; 0xa0
 8000464:	641a      	str	r2, [r3, #64]	; 0x40
		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <_UpdateUvPwm+0x164>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2210      	movs	r2, #16
 8000470:	4013      	ands	r3, r2
 8000472:	b2db      	uxtb	r3, r3
 8000474:	0018      	movs	r0, r3
 8000476:	f000 f883 	bl	8000580 <RE_setPrevEncoderDir>
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	200001d4 	.word	0x200001d4
 8000488:	20000214 	.word	0x20000214

0800048c <_UpdateLedPwm>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void _UpdateLedPwm(UVBOX_EncoderDirTypeDef new_encoder_dir)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	0002      	movs	r2, r0
 8000494:	1dfb      	adds	r3, r7, #7
 8000496:	701a      	strb	r2, [r3, #0]
	uint32_t new_encoder_value = ROTARY_ENCODER.Instance->CNT;
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <_UpdateLedPwm+0x54>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800049e:	60fb      	str	r3, [r7, #12]
	if(new_encoder_value < previous_encoder_value)
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <_UpdateLedPwm+0x58>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d207      	bcs.n	80004ba <_UpdateLedPwm+0x2e>
	{
		LED_PWM_TIMER.Instance->CCR1 -= ENCODER_STEP;
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <_UpdateLedPwm+0x5c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <_UpdateLedPwm+0x5c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3a01      	subs	r2, #1
 80004b6:	635a      	str	r2, [r3, #52]	; 0x34
 80004b8:	e00b      	b.n	80004d2 <_UpdateLedPwm+0x46>
	}
	else if(new_encoder_value > previous_encoder_value)
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <_UpdateLedPwm+0x58>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d906      	bls.n	80004d2 <_UpdateLedPwm+0x46>
	{
		LED_PWM_TIMER.Instance->CCR1 += ENCODER_STEP;
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <_UpdateLedPwm+0x5c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ca:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <_UpdateLedPwm+0x5c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	3201      	adds	r2, #1
 80004d0:	635a      	str	r2, [r3, #52]	; 0x34
	}

	previous_encoder_value = new_encoder_value;
 80004d2:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <_UpdateLedPwm+0x58>)
 80004d4:	68fa      	ldr	r2, [r7, #12]
 80004d6:	601a      	str	r2, [r3, #0]

		RE_setPrevEncoderDir( (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR) );
	}

	*/
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b004      	add	sp, #16
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000214 	.word	0x20000214
 80004e4:	20000098 	.word	0x20000098
 80004e8:	20000254 	.word	0x20000254

080004ec <LM_UpdatePwm>:
 *	@param 		None
 *	@retval 	None
 *
 */
void LM_UpdatePwm()
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	if(EM_getSystemState())
 80004f0:	f7ff fe96 	bl	8000220 <EM_getSystemState>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d00a      	beq.n	800050e <LM_UpdatePwm+0x22>
	{
	  	_UpdateUvPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <LM_UpdatePwm+0x3c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	2210      	movs	r2, #16
 8000502:	4013      	ands	r3, r2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	0018      	movs	r0, r3
 8000508:	f7ff ff0c 	bl	8000324 <_UpdateUvPwm>
	}
	else
	{
		_UpdateLedPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
	}
}
 800050c:	e009      	b.n	8000522 <LM_UpdatePwm+0x36>
		_UpdateLedPwm( ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR );
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <LM_UpdatePwm+0x3c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2210      	movs	r2, #16
 8000518:	4013      	ands	r3, r2
 800051a:	b2db      	uxtb	r3, r3
 800051c:	0018      	movs	r0, r3
 800051e:	f7ff ffb5 	bl	800048c <_UpdateLedPwm>
}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000214 	.word	0x20000214

0800052c <LM_SetStatusLed>:
											UVBOX_StatusLedBlue
 *	@retval 	None
 *
 */
void LM_SetStatusLed(UVBOX_StatusLedTypeDef new_status)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	0002      	movs	r2, r0
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, STATUS_RED_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, STATUS_BLUE_Pin, GPIO_PIN_RESET);
		break;
	}
*/
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b002      	add	sp, #8
 800053e:	bd80      	pop	{r7, pc}

08000540 <RE_Setup>:
 *	@param 	None
 *	@retval None
 *
 */
void RE_Setup()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&ROTARY_ENCODER);
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <RE_Setup+0x24>)
 8000546:	0018      	movs	r0, r3
 8000548:	f002 f8de 	bl	8002708 <HAL_TIM_Base_Start>
	previous_encoder_dir = (ROTARY_ENCODER.Instance->CR1 & TIM_CR1_DIR);
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <RE_Setup+0x24>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2210      	movs	r2, #16
 8000556:	4013      	ands	r3, r2
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b03      	ldr	r3, [pc, #12]	; (8000568 <RE_Setup+0x28>)
 800055c:	701a      	strb	r2, [r3, #0]
}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000214 	.word	0x20000214
 8000568:	200000ac 	.word	0x200000ac

0800056c <RE_getPrevEncoderDir>:
 *	@retval 	UVBOX_EncoderDirTypeDef - 	UVBOX_ENCODER_DOWN = 0x0,
											UVBOX_ENCODER_UP
 *
 */
UVBOX_EncoderDirTypeDef RE_getPrevEncoderDir()
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	return previous_encoder_dir;
 8000570:	4b02      	ldr	r3, [pc, #8]	; (800057c <RE_getPrevEncoderDir+0x10>)
 8000572:	781b      	ldrb	r3, [r3, #0]
}
 8000574:	0018      	movs	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	200000ac 	.word	0x200000ac

08000580 <RE_setPrevEncoderDir>:
											UVBOX_ENCODER_UP
 *	@retval 	None
 *
 */
void RE_setPrevEncoderDir(UVBOX_EncoderDirTypeDef direction)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	0002      	movs	r2, r0
 8000588:	1dfb      	adds	r3, r7, #7
 800058a:	701a      	strb	r2, [r3, #0]
	previous_encoder_dir = direction;
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <RE_setPrevEncoderDir+0x1c>)
 800058e:	1dfa      	adds	r2, r7, #7
 8000590:	7812      	ldrb	r2, [r2, #0]
 8000592:	701a      	strb	r2, [r3, #0]
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b002      	add	sp, #8
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200000ac 	.word	0x200000ac

080005a0 <TM_ResetTimer>:
#define DEFAULT_TIMEOUT 60
uint16_t user_defined_timeout = DEFAULT_TIMEOUT;		// seconds
uint16_t timer_count = DEFAULT_TIMEOUT;

void TM_ResetTimer()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	timer_count = DEFAULT_TIMEOUT;
 80005a4:	4b02      	ldr	r3, [pc, #8]	; (80005b0 <TM_ResetTimer+0x10>)
 80005a6:	223c      	movs	r2, #60	; 0x3c
 80005a8:	801a      	strh	r2, [r3, #0]
}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000002 	.word	0x20000002

080005b4 <TM_UserIncrementTimer>:

void TM_UserIncrementTimer()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	user_defined_timeout += 10;
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <TM_UserIncrementTimer+0x24>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	330a      	adds	r3, #10
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <TM_UserIncrementTimer+0x24>)
 80005c2:	801a      	strh	r2, [r3, #0]
	timer_count += 10;
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <TM_UserIncrementTimer+0x28>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	330a      	adds	r3, #10
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <TM_UserIncrementTimer+0x28>)
 80005ce:	801a      	strh	r2, [r3, #0]
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000002 	.word	0x20000002

080005e0 <TM_UserDecrementTimer>:

void TM_UserDecrementTimer()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	user_defined_timeout -= 10;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <TM_UserDecrementTimer+0x24>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	3b0a      	subs	r3, #10
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <TM_UserDecrementTimer+0x24>)
 80005ee:	801a      	strh	r2, [r3, #0]
	timer_count -= 10;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <TM_UserDecrementTimer+0x28>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	3b0a      	subs	r3, #10
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <TM_UserDecrementTimer+0x28>)
 80005fa:	801a      	strh	r2, [r3, #0]
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	20000000 	.word	0x20000000
 8000608:	20000002 	.word	0x20000002

0800060c <TM_DecrementTimer>:


void TM_DecrementTimer()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	timer_count--;
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <TM_DecrementTimer+0x1c>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	3b01      	subs	r3, #1
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <TM_DecrementTimer+0x1c>)
 800061a:	801a      	strh	r2, [r3, #0]

	TM_CheckTimer();
 800061c:	f000 f810 	bl	8000640 <TM_CheckTimer>
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	20000002 	.word	0x20000002

0800062c <TM_GetTimerCount>:

uint16_t TM_GetTimerCount()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	return timer_count;
 8000630:	4b02      	ldr	r3, [pc, #8]	; (800063c <TM_GetTimerCount+0x10>)
 8000632:	881b      	ldrh	r3, [r3, #0]
}
 8000634:	0018      	movs	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	20000002 	.word	0x20000002

08000640 <TM_CheckTimer>:

void TM_CheckTimer()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	if(timer_count == 0)
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <TM_CheckTimer+0x18>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d102      	bne.n	8000652 <TM_CheckTimer+0x12>
	{
		EM_ProcessEvent(UVBOX_evLidOpened);
 800064c:	2000      	movs	r0, #0
 800064e:	f7ff fdf1 	bl	8000234 <EM_ProcessEvent>
	}
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000002 	.word	0x20000002

0800065c <TM_StartTimer>:

void TM_StartTimer()
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	EXPOSE_TIMER.Instance->SR &= ~(TIM_SR_UIF);	// reset
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <TM_StartTimer+0x28>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	691a      	ldr	r2, [r3, #16]
 8000666:	4b07      	ldr	r3, [pc, #28]	; (8000684 <TM_StartTimer+0x28>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2101      	movs	r1, #1
 800066c:	438a      	bics	r2, r1
 800066e:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&EXPOSE_TIMER);
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <TM_StartTimer+0x28>)
 8000672:	0018      	movs	r0, r3
 8000674:	f002 f86a 	bl	800274c <HAL_TIM_Base_Start_IT>
	UM_DisplayRunningMsg();
 8000678:	f000 f814 	bl	80006a4 <UM_DisplayRunningMsg>
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	20000194 	.word	0x20000194

08000688 <TM_StopTimer>:

void TM_StopTimer()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&EXPOSE_TIMER);
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <TM_StopTimer+0x18>)
 800068e:	0018      	movs	r0, r3
 8000690:	f002 f87e 	bl	8002790 <HAL_TIM_Base_Stop_IT>
	UM_DisplayExpiredMsg();
 8000694:	f000 f81e 	bl	80006d4 <UM_DisplayExpiredMsg>
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	20000194 	.word	0x20000194

080006a4 <UM_DisplayRunningMsg>:
//UVBOX_LidStatusTypedef eLidStatus = UVBOX_LIDOPEN;
uint16_t debounce_last_interrupt_time = 0;


void UM_DisplayRunningMsg()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f003 fa8a 	bl	8003bc4 <ILI9341_Fill_Screen>
	ILI9341_Draw_Text("RUNNING", 10, 120, RUNTEXT, 7, BGCOLOUR);
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <UM_DisplayRunningMsg+0x28>)
 80006b2:	4807      	ldr	r0, [pc, #28]	; (80006d0 <UM_DisplayRunningMsg+0x2c>)
 80006b4:	2300      	movs	r3, #0
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2307      	movs	r3, #7
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	0013      	movs	r3, r2
 80006be:	2278      	movs	r2, #120	; 0x78
 80006c0:	210a      	movs	r1, #10
 80006c2:	f003 f805 	bl	80036d0 <ILI9341_Draw_Text>
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	000014a2 	.word	0x000014a2
 80006d0:	08004e7c 	.word	0x08004e7c

080006d4 <UM_DisplayExpiredMsg>:

void UM_DisplayExpiredMsg()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 80006da:	2000      	movs	r0, #0
 80006dc:	f003 fa72 	bl	8003bc4 <ILI9341_Fill_Screen>
	ILI9341_Draw_Text("STOPPED", 10, 120, STOPTEXT, 7, BGCOLOUR);
 80006e0:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <UM_DisplayExpiredMsg+0x44>)
 80006e2:	480e      	ldr	r0, [pc, #56]	; (800071c <UM_DisplayExpiredMsg+0x48>)
 80006e4:	2300      	movs	r3, #0
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	2307      	movs	r3, #7
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	0013      	movs	r3, r2
 80006ee:	2278      	movs	r2, #120	; 0x78
 80006f0:	210a      	movs	r1, #10
 80006f2:	f002 ffed 	bl	80036d0 <ILI9341_Draw_Text>
	BUZZER_PWM.Instance->PSC = 256;
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <UM_DisplayExpiredMsg+0x4c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	0052      	lsls	r2, r2, #1
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(1000);
 8000700:	23fa      	movs	r3, #250	; 0xfa
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	0018      	movs	r0, r3
 8000706:	f001 f837 	bl	8001778 <HAL_Delay>
	BUZZER_PWM.Instance->PSC = 0;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <UM_DisplayExpiredMsg+0x4c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	0000d8c3 	.word	0x0000d8c3
 800071c:	08004e84 	.word	0x08004e84
 8000720:	20000154 	.word	0x20000154

08000724 <UM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void UM_UpdateDisplay()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	UM_DisplayAsMinutesAndSeconds(TM_GetTimerCount());
 8000728:	f7ff ff80 	bl	800062c <TM_GetTimerCount>
 800072c:	0003      	movs	r3, r0
 800072e:	0018      	movs	r0, r3
 8000730:	f000 f804 	bl	800073c <UM_DisplayAsMinutesAndSeconds>

}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <UM_DisplayAsMinutesAndSeconds>:
 *	@param pSeconds
 *	@retval None
 *
 */
void UM_DisplayAsMinutesAndSeconds(uint16_t pSeconds)
{
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af02      	add	r7, sp, #8
 8000742:	0002      	movs	r2, r0
 8000744:	1dbb      	adds	r3, r7, #6
 8000746:	801a      	strh	r2, [r3, #0]
	uint8_t minutes = 0;
 8000748:	2427      	movs	r4, #39	; 0x27
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
	uint8_t seconds = 0;
 8000750:	2526      	movs	r5, #38	; 0x26
 8000752:	197b      	adds	r3, r7, r5
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]

	minutes = pSeconds / 60;
 8000758:	1dbb      	adds	r3, r7, #6
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	213c      	movs	r1, #60	; 0x3c
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff fcd2 	bl	8000108 <__udivsi3>
 8000764:	0003      	movs	r3, r0
 8000766:	b29a      	uxth	r2, r3
 8000768:	193b      	adds	r3, r7, r4
 800076a:	701a      	strb	r2, [r3, #0]
	seconds = pSeconds % 60;
 800076c:	1dbb      	adds	r3, r7, #6
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	213c      	movs	r1, #60	; 0x3c
 8000772:	0018      	movs	r0, r3
 8000774:	f7ff fd4e 	bl	8000214 <__aeabi_uidivmod>
 8000778:	000b      	movs	r3, r1
 800077a:	b29a      	uxth	r2, r3
 800077c:	197b      	adds	r3, r7, r5
 800077e:	701a      	strb	r2, [r3, #0]

	char timer_count[30];
	snprintf(timer_count, sizeof(timer_count), "%02d:%02d", minutes, seconds);
 8000780:	193b      	adds	r3, r7, r4
 8000782:	7819      	ldrb	r1, [r3, #0]
 8000784:	197b      	adds	r3, r7, r5
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <UM_DisplayAsMinutesAndSeconds+0x7c>)
 800078a:	2408      	movs	r4, #8
 800078c:	1938      	adds	r0, r7, r4
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	000b      	movs	r3, r1
 8000792:	211e      	movs	r1, #30
 8000794:	f003 ff4c 	bl	8004630 <sniprintf>
	ILI9341_Draw_Text(timer_count, 30, 50, TIMETEXT, 9, BGCOLOUR);
 8000798:	4a08      	ldr	r2, [pc, #32]	; (80007bc <UM_DisplayAsMinutesAndSeconds+0x80>)
 800079a:	1938      	adds	r0, r7, r4
 800079c:	2300      	movs	r3, #0
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	2309      	movs	r3, #9
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	0013      	movs	r3, r2
 80007a6:	2232      	movs	r2, #50	; 0x32
 80007a8:	211e      	movs	r1, #30
 80007aa:	f002 ff91 	bl	80036d0 <ILI9341_Draw_Text>
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b00a      	add	sp, #40	; 0x28
 80007b4:	bdb0      	pop	{r4, r5, r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	08004e8c 	.word	0x08004e8c
 80007bc:	000002fd 	.word	0x000002fd

080007c0 <UM_Setup>:
 *	@param None
 *	@retval None
 *
 */
void UM_Setup()
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af02      	add	r7, sp, #8
	  // enable TFT ILI9341 driver
	  ILI9341_Init();
 80007c6:	f002 fff4 	bl	80037b2 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80007ca:	2003      	movs	r0, #3
 80007cc:	f003 fc96 	bl	80040fc <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(BLACK);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f003 f9f7 	bl	8003bc4 <ILI9341_Fill_Screen>
	  ILI9341_Draw_Text("INITIALISING...", 10, 10, SYSTEXT, 1, BGCOLOUR);
 80007d6:	4a35      	ldr	r2, [pc, #212]	; (80008ac <UM_Setup+0xec>)
 80007d8:	4835      	ldr	r0, [pc, #212]	; (80008b0 <UM_Setup+0xf0>)
 80007da:	2300      	movs	r3, #0
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	2301      	movs	r3, #1
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	0013      	movs	r3, r2
 80007e4:	220a      	movs	r2, #10
 80007e6:	210a      	movs	r1, #10
 80007e8:	f002 ff72 	bl	80036d0 <ILI9341_Draw_Text>

	  // PWM OUTPUTS

	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_1 );
 80007ec:	4b31      	ldr	r3, [pc, #196]	; (80008b4 <UM_Setup+0xf4>)
 80007ee:	2100      	movs	r1, #0
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 f823 	bl	800283c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_2 );
 80007f6:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <UM_Setup+0xf4>)
 80007f8:	2104      	movs	r1, #4
 80007fa:	0018      	movs	r0, r3
 80007fc:	f002 f81e 	bl	800283c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_3 );
 8000800:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <UM_Setup+0xf4>)
 8000802:	2108      	movs	r1, #8
 8000804:	0018      	movs	r0, r3
 8000806:	f002 f819 	bl	800283c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &UV_PWM_TIMER, TIM_CHANNEL_4 );
 800080a:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <UM_Setup+0xf4>)
 800080c:	210c      	movs	r1, #12
 800080e:	0018      	movs	r0, r3
 8000810:	f002 f814 	bl	800283c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &LED_PWM_TIMER, TIM_CHANNEL_1 );
 8000814:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <UM_Setup+0xf8>)
 8000816:	2100      	movs	r1, #0
 8000818:	0018      	movs	r0, r3
 800081a:	f002 f80f 	bl	800283c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &BUZZER_PWM, TIM_CHANNEL_1);
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <UM_Setup+0xfc>)
 8000820:	2100      	movs	r1, #0
 8000822:	0018      	movs	r0, r3
 8000824:	f002 f80a 	bl	800283c <HAL_TIM_PWM_Start>

	  UV_PWM_TIMER.Instance->ARR	= 0xFF;		// 	255
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <UM_Setup+0xf4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	22ff      	movs	r2, #255	; 0xff
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
	  UV_PWM_TIMER.Instance->CCR1 	= 0x00;
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <UM_Setup+0xf4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2200      	movs	r2, #0
 8000836:	635a      	str	r2, [r3, #52]	; 0x34
	  UV_PWM_TIMER.Instance->CCR2 	= 0x00;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <UM_Setup+0xf4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2200      	movs	r2, #0
 800083e:	639a      	str	r2, [r3, #56]	; 0x38
	  UV_PWM_TIMER.Instance->CCR3 	= 0x00;
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <UM_Setup+0xf4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2200      	movs	r2, #0
 8000846:	63da      	str	r2, [r3, #60]	; 0x3c
	  UV_PWM_TIMER.Instance->CCR4 	= 0x00;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <UM_Setup+0xf4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2200      	movs	r2, #0
 800084e:	641a      	str	r2, [r3, #64]	; 0x40

	  LED_PWM_TIMER.Instance->ARR  	= 0xFF;		// 	255
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <UM_Setup+0xf8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	22ff      	movs	r2, #255	; 0xff
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
	  LED_PWM_TIMER.Instance->CCR1 	= MAX_LED_PWM_PERIOD;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <UM_Setup+0xf8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2278      	movs	r2, #120	; 0x78
 800085e:	635a      	str	r2, [r3, #52]	; 0x34

	  BUZZER_PWM.Instance->ARR = 0xFF;
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <UM_Setup+0xfc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	22ff      	movs	r2, #255	; 0xff
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
	  BUZZER_PWM.Instance->CCR1 = 127;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <UM_Setup+0xfc>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	227f      	movs	r2, #127	; 0x7f
 800086e:	635a      	str	r2, [r3, #52]	; 0x34
	  BUZZER_PWM.Instance->PSC = 0;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <UM_Setup+0xfc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	; 0x28

	  // debounce timer
	  HAL_TIM_Base_Start( &DEBOUNCE_TIMER );
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <UM_Setup+0x100>)
 800087a:	0018      	movs	r0, r3
 800087c:	f001 ff44 	bl	8002708 <HAL_TIM_Base_Start>

	  // status output LED
	  LM_SetStatusLed(UVBOX_StatusLedBlue);
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff fe53 	bl	800052c <LM_SetStatusLed>

	  // rotary encoder
	  RE_Setup();
 8000886:	f7ff fe5b 	bl	8000540 <RE_Setup>


	  HAL_Delay(100);
 800088a:	2064      	movs	r0, #100	; 0x64
 800088c:	f000 ff74 	bl	8001778 <HAL_Delay>
	  ILI9341_Draw_Text("READY!", 100, 10, SYSTEXT, 1, BGCOLOUR);
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <UM_Setup+0xec>)
 8000892:	480c      	ldr	r0, [pc, #48]	; (80008c4 <UM_Setup+0x104>)
 8000894:	2300      	movs	r3, #0
 8000896:	9301      	str	r3, [sp, #4]
 8000898:	2301      	movs	r3, #1
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	0013      	movs	r3, r2
 800089e:	220a      	movs	r2, #10
 80008a0:	2164      	movs	r1, #100	; 0x64
 80008a2:	f002 ff15 	bl	80036d0 <ILI9341_Draw_Text>



}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	0000ffff 	.word	0x0000ffff
 80008b0:	08004e98 	.word	0x08004e98
 80008b4:	200001d4 	.word	0x200001d4
 80008b8:	20000254 	.word	0x20000254
 80008bc:	20000154 	.word	0x20000154
 80008c0:	20000114 	.word	0x20000114
 80008c4:	08004ea8 	.word	0x08004ea8

080008c8 <UM_EXTI0_1_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void UM_EXTI0_1_IRQHandler()
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
	uint16_t debounce_interrupt_time = DEBOUNCE_TIMER.Instance->CNT;
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <UM_EXTI0_1_IRQHandler+0x5c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008d4:	1dbb      	adds	r3, r7, #6
 80008d6:	801a      	strh	r2, [r3, #0]
	if ((debounce_interrupt_time - UM_getLastDebounceTime()) > MAX_DEBOUNCE_DELAY)
 80008d8:	1dbb      	adds	r3, r7, #6
 80008da:	881c      	ldrh	r4, [r3, #0]
 80008dc:	f000 f85c 	bl	8000998 <UM_getLastDebounceTime>
 80008e0:	0003      	movs	r3, r0
 80008e2:	1ae3      	subs	r3, r4, r3
 80008e4:	2baf      	cmp	r3, #175	; 0xaf
 80008e6:	dd14      	ble.n	8000912 <UM_EXTI0_1_IRQHandler+0x4a>
	{
		if(EM_getSystemState())	// LID CLOSED
 80008e8:	f7ff fc9a 	bl	8000220 <EM_getSystemState>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d110      	bne.n	8000912 <UM_EXTI0_1_IRQHandler+0x4a>
			//EM_ProcessEvent(UVBOX_evLidOpened);
		}
		else
		{

			if( (EXTI->PR & EXTI_PR_PR0) == EXTI_PR_PR0)
 80008f0:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <UM_EXTI0_1_IRQHandler+0x60>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	2201      	movs	r2, #1
 80008f6:	4013      	ands	r3, r2
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d102      	bne.n	8000902 <UM_EXTI0_1_IRQHandler+0x3a>
			{
				TM_UserDecrementTimer();
 80008fc:	f7ff fe70 	bl	80005e0 <TM_UserDecrementTimer>
 8000900:	e007      	b.n	8000912 <UM_EXTI0_1_IRQHandler+0x4a>
			}
			else if( (EXTI->PR & EXTI_PR_PR1) == EXTI_PR_PR1)
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <UM_EXTI0_1_IRQHandler+0x60>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	2202      	movs	r2, #2
 8000908:	4013      	ands	r3, r2
 800090a:	2b02      	cmp	r3, #2
 800090c:	d101      	bne.n	8000912 <UM_EXTI0_1_IRQHandler+0x4a>
			{
				TM_UserIncrementTimer();
 800090e:	f7ff fe51 	bl	80005b4 <TM_UserIncrementTimer>
			}

		}
	}
	UM_SetLastDebounceTime(debounce_interrupt_time);
 8000912:	1dbb      	adds	r3, r7, #6
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	0018      	movs	r0, r3
 8000918:	f000 f82e 	bl	8000978 <UM_SetLastDebounceTime>


}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b003      	add	sp, #12
 8000922:	bd90      	pop	{r4, r7, pc}
 8000924:	20000114 	.word	0x20000114
 8000928:	40010400 	.word	0x40010400

0800092c <UM_EXTI2_3_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void UM_EXTI2_3_IRQHandler()
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
	uint16_t debounce_interrupt_time = DEBOUNCE_TIMER.Instance->CNT;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <UM_EXTI2_3_IRQHandler+0x48>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000938:	1dbb      	adds	r3, r7, #6
 800093a:	801a      	strh	r2, [r3, #0]
	if ((debounce_interrupt_time - UM_getLastDebounceTime()) > MAX_DEBOUNCE_DELAY)
 800093c:	1dbb      	adds	r3, r7, #6
 800093e:	881c      	ldrh	r4, [r3, #0]
 8000940:	f000 f82a 	bl	8000998 <UM_getLastDebounceTime>
 8000944:	0003      	movs	r3, r0
 8000946:	1ae3      	subs	r3, r4, r3
 8000948:	2baf      	cmp	r3, #175	; 0xaf
 800094a:	dd0a      	ble.n	8000962 <UM_EXTI2_3_IRQHandler+0x36>
	{
		if(EM_getSystemState())	// LID CLOSED
 800094c:	f7ff fc68 	bl	8000220 <EM_getSystemState>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d003      	beq.n	800095c <UM_EXTI2_3_IRQHandler+0x30>
		{
			EM_ProcessEvent(UVBOX_evLidOpened);
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fc6d 	bl	8000234 <EM_ProcessEvent>
 800095a:	e002      	b.n	8000962 <UM_EXTI2_3_IRQHandler+0x36>
		}
		else
		{
			EM_ProcessEvent(UVBOX_evLidClosed);
 800095c:	2001      	movs	r0, #1
 800095e:	f7ff fc69 	bl	8000234 <EM_ProcessEvent>
		}
	}
	UM_SetLastDebounceTime(debounce_interrupt_time);
 8000962:	1dbb      	adds	r3, r7, #6
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	0018      	movs	r0, r3
 8000968:	f000 f806 	bl	8000978 <UM_SetLastDebounceTime>
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b003      	add	sp, #12
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	20000114 	.word	0x20000114

08000978 <UM_SetLastDebounceTime>:
 *	@param pDebounceTime
 *	@retval None
 *
 */
void UM_SetLastDebounceTime(uint16_t pDebounceTime)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	0002      	movs	r2, r0
 8000980:	1dbb      	adds	r3, r7, #6
 8000982:	801a      	strh	r2, [r3, #0]
	debounce_last_interrupt_time = pDebounceTime;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <UM_SetLastDebounceTime+0x1c>)
 8000986:	1dba      	adds	r2, r7, #6
 8000988:	8812      	ldrh	r2, [r2, #0]
 800098a:	801a      	strh	r2, [r3, #0]
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b002      	add	sp, #8
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000009c 	.word	0x2000009c

08000998 <UM_getLastDebounceTime>:
 *	@param None
 *	@retval debounce_last_interrupt_time
 *
 */
uint16_t UM_getLastDebounceTime()
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	return debounce_last_interrupt_time;
 800099c:	4b02      	ldr	r3, [pc, #8]	; (80009a8 <UM_getLastDebounceTime+0x10>)
 800099e:	881b      	ldrh	r3, [r3, #0]
}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	2000009c 	.word	0x2000009c

080009ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b089      	sub	sp, #36	; 0x24
 80009b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	240c      	movs	r4, #12
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	0018      	movs	r0, r3
 80009b8:	2314      	movs	r3, #20
 80009ba:	001a      	movs	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	f003 fe2f 	bl	8004620 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c2:	4b48      	ldr	r3, [pc, #288]	; (8000ae4 <MX_GPIO_Init+0x138>)
 80009c4:	695a      	ldr	r2, [r3, #20]
 80009c6:	4b47      	ldr	r3, [pc, #284]	; (8000ae4 <MX_GPIO_Init+0x138>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	03c9      	lsls	r1, r1, #15
 80009cc:	430a      	orrs	r2, r1
 80009ce:	615a      	str	r2, [r3, #20]
 80009d0:	4b44      	ldr	r3, [pc, #272]	; (8000ae4 <MX_GPIO_Init+0x138>)
 80009d2:	695a      	ldr	r2, [r3, #20]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	03db      	lsls	r3, r3, #15
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b41      	ldr	r3, [pc, #260]	; (8000ae4 <MX_GPIO_Init+0x138>)
 80009e0:	695a      	ldr	r2, [r3, #20]
 80009e2:	4b40      	ldr	r3, [pc, #256]	; (8000ae4 <MX_GPIO_Init+0x138>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	0289      	lsls	r1, r1, #10
 80009e8:	430a      	orrs	r2, r1
 80009ea:	615a      	str	r2, [r3, #20]
 80009ec:	4b3d      	ldr	r3, [pc, #244]	; (8000ae4 <MX_GPIO_Init+0x138>)
 80009ee:	695a      	ldr	r2, [r3, #20]
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	029b      	lsls	r3, r3, #10
 80009f4:	4013      	ands	r3, r2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <MX_GPIO_Init+0x138>)
 80009fc:	695a      	ldr	r2, [r3, #20]
 80009fe:	4b39      	ldr	r3, [pc, #228]	; (8000ae4 <MX_GPIO_Init+0x138>)
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	02c9      	lsls	r1, r1, #11
 8000a04:	430a      	orrs	r2, r1
 8000a06:	615a      	str	r2, [r3, #20]
 8000a08:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <MX_GPIO_Init+0x138>)
 8000a0a:	695a      	ldr	r2, [r3, #20]
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	02db      	lsls	r3, r3, #11
 8000a10:	4013      	ands	r3, r2
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|DC_Pin, GPIO_PIN_RESET);
 8000a16:	2390      	movs	r3, #144	; 0x90
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2118      	movs	r1, #24
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 f91a 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	2101      	movs	r1, #1
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 f914 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	4a2c      	ldr	r2, [pc, #176]	; (8000aec <MX_GPIO_Init+0x140>)
 8000a3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2202      	movs	r2, #2
 8000a40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	4a2a      	ldr	r2, [pc, #168]	; (8000af0 <MX_GPIO_Init+0x144>)
 8000a46:	0019      	movs	r1, r3
 8000a48:	0010      	movs	r0, r2
 8000a4a:	f000 ff95 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2206      	movs	r2, #6
 8000a52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	4a25      	ldr	r2, [pc, #148]	; (8000aec <MX_GPIO_Init+0x140>)
 8000a58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	193a      	adds	r2, r7, r4
 8000a62:	2390      	movs	r3, #144	; 0x90
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	0011      	movs	r1, r2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f000 ff85 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2218      	movs	r2, #24
 8000a72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2201      	movs	r2, #1
 8000a78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	193a      	adds	r2, r7, r4
 8000a88:	2390      	movs	r3, #144	; 0x90
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 ff72 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000a94:	0021      	movs	r1, r4
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 8000ab2:	0019      	movs	r1, r3
 8000ab4:	0010      	movs	r0, r2
 8000ab6:	f000 ff5f 	bl	8001978 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2101      	movs	r1, #1
 8000abe:	2005      	movs	r0, #5
 8000ac0:	f000 ff28 	bl	8001914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000ac4:	2005      	movs	r0, #5
 8000ac6:	f000 ff3a 	bl	800193e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2101      	movs	r1, #1
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f000 ff20 	bl	8001914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000ad4:	2006      	movs	r0, #6
 8000ad6:	f000 ff32 	bl	800193e <HAL_NVIC_EnableIRQ>

}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b009      	add	sp, #36	; 0x24
 8000ae0:	bd90      	pop	{r4, r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48000400 	.word	0x48000400
 8000aec:	10110000 	.word	0x10110000
 8000af0:	48001400 	.word	0x48001400

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afa:	f000 fdd9 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afe:	f000 f833 	bl	8000b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b02:	f7ff ff53 	bl	80009ac <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b06:	f000 f9a9 	bl	8000e5c <MX_TIM1_Init>
  MX_TIM17_Init();
 8000b0a:	f000 fbcf 	bl	80012ac <MX_TIM17_Init>
  MX_TIM14_Init();
 8000b0e:	f000 fb59 	bl	80011c4 <MX_TIM14_Init>
  MX_SPI1_Init();
 8000b12:	f000 f879 	bl	8000c08 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000b16:	f000 fa57 	bl	8000fc8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b1a:	f000 fab7 	bl	800108c <MX_TIM3_Init>
  MX_TIM16_Init();
 8000b1e:	f000 fb9f 	bl	8001260 <MX_TIM16_Init>
  MX_TIM6_Init();
 8000b22:	f000 fb13 	bl	800114c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  UM_Setup();
 8000b26:	f7ff fe4b 	bl	80007c0 <UM_Setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  LM_UpdatePwm();
 8000b2a:	f7ff fcdf 	bl	80004ec <LM_UpdatePwm>
	  UM_UpdateDisplay();
 8000b2e:	f7ff fdf9 	bl	8000724 <UM_UpdateDisplay>
	  char enc_cnt[20];
	  snprintf(enc_cnt, sizeof(enc_cnt), "%lu", LED_PWM_TIMER.Instance->CCR1);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <main+0x68>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b38:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <main+0x6c>)
 8000b3a:	1d38      	adds	r0, r7, #4
 8000b3c:	2114      	movs	r1, #20
 8000b3e:	f003 fd77 	bl	8004630 <sniprintf>
	  ILI9341_Draw_Text(enc_cnt, 10, 200, WHITE, 2, BLACK);
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <main+0x70>)
 8000b44:	1d38      	adds	r0, r7, #4
 8000b46:	2300      	movs	r3, #0
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	0013      	movs	r3, r2
 8000b50:	22c8      	movs	r2, #200	; 0xc8
 8000b52:	210a      	movs	r1, #10
 8000b54:	f002 fdbc 	bl	80036d0 <ILI9341_Draw_Text>
  {
 8000b58:	e7e7      	b.n	8000b2a <main+0x36>
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000254 	.word	0x20000254
 8000b60:	08004eb0 	.word	0x08004eb0
 8000b64:	0000ffff 	.word	0x0000ffff

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b091      	sub	sp, #68	; 0x44
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	2410      	movs	r4, #16
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	0018      	movs	r0, r3
 8000b74:	2330      	movs	r3, #48	; 0x30
 8000b76:	001a      	movs	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f003 fd51 	bl	8004620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7e:	003b      	movs	r3, r7
 8000b80:	0018      	movs	r0, r3
 8000b82:	2310      	movs	r3, #16
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f003 fd4a 	bl	8004620 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8c:	0021      	movs	r1, r4
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2202      	movs	r2, #2
 8000b92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2201      	movs	r2, #1
 8000b98:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	0352      	lsls	r2, r2, #13
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f001 f88f 	bl	8001ce0 <HAL_RCC_OscConfig>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000bc6:	f000 f819 	bl	8000bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bca:	003b      	movs	r3, r7
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd0:	003b      	movs	r3, r7
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd6:	003b      	movs	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bdc:	003b      	movs	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000be2:	003b      	movs	r3, r7
 8000be4:	2100      	movs	r1, #0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f001 fb96 	bl	8002318 <HAL_RCC_ClockConfig>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000bf0:	f000 f804 	bl	8000bfc <Error_Handler>
  }
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b011      	add	sp, #68	; 0x44
 8000bfa:	bd90      	pop	{r4, r7, pc}

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <MX_SPI1_Init+0x78>)
 8000c10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c14:	2282      	movs	r2, #130	; 0x82
 8000c16:	0052      	lsls	r2, r2, #1
 8000c18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c22:	22e0      	movs	r2, #224	; 0xe0
 8000c24:	00d2      	lsls	r2, r2, #3
 8000c26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	0092      	lsls	r2, r2, #2
 8000c3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c56:	2207      	movs	r2, #7
 8000c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c62:	2208      	movs	r2, #8
 8000c64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f001 fc87 	bl	800257c <HAL_SPI_Init>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c72:	f7ff ffc3 	bl	8000bfc <Error_Handler>
  }

}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000b0 	.word	0x200000b0
 8000c80:	40013000 	.word	0x40013000

08000c84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	2314      	movs	r3, #20
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	0018      	movs	r0, r3
 8000c92:	2314      	movs	r3, #20
 8000c94:	001a      	movs	r2, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	f003 fcc2 	bl	8004620 <memset>
  if(spiHandle->Instance==SPI1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <HAL_SPI_MspInit+0x90>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d132      	bne.n	8000d0c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <HAL_SPI_MspInit+0x94>)
 8000ca8:	699a      	ldr	r2, [r3, #24]
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <HAL_SPI_MspInit+0x94>)
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	0149      	lsls	r1, r1, #5
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	619a      	str	r2, [r3, #24]
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_SPI_MspInit+0x94>)
 8000cb6:	699a      	ldr	r2, [r3, #24]
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	015b      	lsls	r3, r3, #5
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_SPI_MspInit+0x94>)
 8000cc4:	695a      	ldr	r2, [r3, #20]
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <HAL_SPI_MspInit+0x94>)
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	0289      	lsls	r1, r1, #10
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	615a      	str	r2, [r3, #20]
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_SPI_MspInit+0x94>)
 8000cd2:	695a      	ldr	r2, [r3, #20]
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	029b      	lsls	r3, r3, #10
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cde:	2114      	movs	r1, #20
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	22e0      	movs	r2, #224	; 0xe0
 8000ce4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2202      	movs	r2, #2
 8000cea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	187a      	adds	r2, r7, r1
 8000d00:	2390      	movs	r3, #144	; 0x90
 8000d02:	05db      	lsls	r3, r3, #23
 8000d04:	0011      	movs	r1, r2
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 fe36 	bl	8001978 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b00a      	add	sp, #40	; 0x28
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40013000 	.word	0x40013000
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_MspInit+0x44>)
 8000d24:	699a      	ldr	r2, [r3, #24]
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_MspInit+0x44>)
 8000d28:	2101      	movs	r1, #1
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	619a      	str	r2, [r3, #24]
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_MspInit+0x44>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	2201      	movs	r2, #1
 8000d34:	4013      	ands	r3, r2
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x44>)
 8000d3c:	69da      	ldr	r2, [r3, #28]
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_MspInit+0x44>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	0549      	lsls	r1, r1, #21
 8000d44:	430a      	orrs	r2, r1
 8000d46:	61da      	str	r2, [r3, #28]
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_MspInit+0x44>)
 8000d4a:	69da      	ldr	r2, [r3, #28]
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	055b      	lsls	r3, r3, #21
 8000d50:	4013      	ands	r3, r2
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	40021000 	.word	0x40021000

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 fcd8 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	UM_EXTI0_1_IRQHandler();
 8000d9a:	f7ff fd95 	bl	80008c8 <UM_EXTI0_1_IRQHandler>
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f000 ff78 	bl	8001c94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000da4:	2002      	movs	r0, #2
 8000da6:	f000 ff75 	bl	8001c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
	UM_EXTI2_3_IRQHandler();
 8000db4:	f7ff fdba 	bl	800092c <UM_EXTI2_3_IRQHandler>
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000db8:	2004      	movs	r0, #4
 8000dba:	f000 ff6b 	bl	8001c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <TIM2_IRQHandler+0x14>)
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f001 fe16 	bl	80029fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	20000214 	.word	0x20000214

08000ddc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	TM_DecrementTimer();
 8000de0:	f7ff fc14 	bl	800060c <TM_DecrementTimer>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <TIM6_DAC_IRQHandler+0x18>)
 8000de6:	0018      	movs	r0, r3
 8000de8:	f001 fe08 	bl	80029fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	20000194 	.word	0x20000194

08000df8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <_sbrk+0x50>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x16>
		heap_end = &end;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <_sbrk+0x50>)
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <_sbrk+0x54>)
 8000e0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <_sbrk+0x50>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <_sbrk+0x50>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	18d3      	adds	r3, r2, r3
 8000e1c:	466a      	mov	r2, sp
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d907      	bls.n	8000e32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e22:	f003 fbd3 	bl	80045cc <__errno>
 8000e26:	0003      	movs	r3, r0
 8000e28:	220c      	movs	r2, #12
 8000e2a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	425b      	negs	r3, r3
 8000e30:	e006      	b.n	8000e40 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <_sbrk+0x50>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	18d2      	adds	r2, r2, r3
 8000e3a:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <_sbrk+0x50>)
 8000e3c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b004      	add	sp, #16
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200000a0 	.word	0x200000a0
 8000e4c:	200002e0 	.word	0x200002e0

08000e50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b092      	sub	sp, #72	; 0x48
 8000e60:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e62:	2340      	movs	r3, #64	; 0x40
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	0018      	movs	r0, r3
 8000e68:	2308      	movs	r3, #8
 8000e6a:	001a      	movs	r2, r3
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	f003 fbd7 	bl	8004620 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e72:	2324      	movs	r3, #36	; 0x24
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	0018      	movs	r0, r3
 8000e78:	231c      	movs	r3, #28
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	f003 fbcf 	bl	8004620 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	0018      	movs	r0, r3
 8000e86:	2320      	movs	r3, #32
 8000e88:	001a      	movs	r2, r3
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	f003 fbc8 	bl	8004620 <memset>

  htim1.Instance = TIM1;
 8000e90:	4b4b      	ldr	r3, [pc, #300]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000e92:	4a4c      	ldr	r2, [pc, #304]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000e94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e96:	4b4a      	ldr	r3, [pc, #296]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9c:	4b48      	ldr	r3, [pc, #288]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64;
 8000ea2:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000ea4:	2240      	movs	r2, #64	; 0x40
 8000ea6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b45      	ldr	r3, [pc, #276]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eae:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb4:	4b42      	ldr	r3, [pc, #264]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eba:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f001 fc91 	bl	80027e4 <HAL_TIM_PWM_Init>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ec6:	f7ff fe99 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed8:	187a      	adds	r2, r7, r1
 8000eda:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000edc:	0011      	movs	r1, r2
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f002 fa22 	bl	8003328 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee4:	1e03      	subs	r3, r0, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ee8:	f7ff fe88 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eec:	2124      	movs	r1, #36	; 0x24
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	2260      	movs	r2, #96	; 0x60
 8000ef2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f001 fe82 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000f28:	f7ff fe68 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f2c:	2324      	movs	r3, #36	; 0x24
 8000f2e:	18f9      	adds	r1, r7, r3
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000f32:	2204      	movs	r2, #4
 8000f34:	0018      	movs	r0, r3
 8000f36:	f001 fe77 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 8000f3a:	1e03      	subs	r3, r0, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8000f3e:	f7ff fe5d 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f42:	2324      	movs	r3, #36	; 0x24
 8000f44:	18f9      	adds	r1, r7, r3
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000f48:	2208      	movs	r2, #8
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f001 fe6c 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 8000f50:	1e03      	subs	r3, r0, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000f54:	f7ff fe52 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f58:	2324      	movs	r3, #36	; 0x24
 8000f5a:	18f9      	adds	r1, r7, r3
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	0018      	movs	r0, r3
 8000f62:	f001 fe61 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 8000f66:	1e03      	subs	r3, r0, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000f6a:	f7ff fe47 	bl	8000bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2280      	movs	r2, #128	; 0x80
 8000f90:	0192      	lsls	r2, r2, #6
 8000f92:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f9a:	1d3a      	adds	r2, r7, #4
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f002 fa1f 	bl	80033e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000faa:	f7ff fe27 	bl	8000bfc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 fab9 	bl	8001528 <HAL_TIM_MspPostInit>

}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b012      	add	sp, #72	; 0x48
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	200001d4 	.word	0x200001d4
 8000fc4:	40012c00 	.word	0x40012c00

08000fc8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b08d      	sub	sp, #52	; 0x34
 8000fcc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fce:	240c      	movs	r4, #12
 8000fd0:	193b      	adds	r3, r7, r4
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	2324      	movs	r3, #36	; 0x24
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f003 fb21 	bl	8004620 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	001a      	movs	r2, r3
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	f003 fb1a 	bl	8004620 <memset>

  htim2.Instance = TIM2;
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <MX_TIM2_Init+0xc0>)
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	05d2      	lsls	r2, r2, #23
 8000ff2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ff4:	4b24      	ldr	r3, [pc, #144]	; (8001088 <MX_TIM2_Init+0xc0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000ffa:	4b23      	ldr	r3, [pc, #140]	; (8001088 <MX_TIM2_Init+0xc0>)
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 680;
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <MX_TIM2_Init+0xc0>)
 8001002:	22aa      	movs	r2, #170	; 0xaa
 8001004:	0092      	lsls	r2, r2, #2
 8001006:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <MX_TIM2_Init+0xc0>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <MX_TIM2_Init+0xc0>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001014:	0021      	movs	r1, r4
 8001016:	187b      	adds	r3, r7, r1
 8001018:	2203      	movs	r2, #3
 800101a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800101c:	187b      	adds	r3, r7, r1
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001022:	187b      	adds	r3, r7, r1
 8001024:	2201      	movs	r2, #1
 8001026:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001028:	187b      	adds	r3, r7, r1
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001034:	187b      	adds	r3, r7, r1
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800103a:	187b      	adds	r3, r7, r1
 800103c:	2201      	movs	r2, #1
 800103e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001046:	187b      	adds	r3, r7, r1
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800104c:	187a      	adds	r2, r7, r1
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_TIM2_Init+0xc0>)
 8001050:	0011      	movs	r1, r2
 8001052:	0018      	movs	r0, r3
 8001054:	f001 fc3e 	bl	80028d4 <HAL_TIM_Encoder_Init>
 8001058:	1e03      	subs	r3, r0, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800105c:	f7ff fdce 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2220      	movs	r2, #32
 8001064:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800106c:	1d3a      	adds	r2, r7, #4
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_TIM2_Init+0xc0>)
 8001070:	0011      	movs	r1, r2
 8001072:	0018      	movs	r0, r3
 8001074:	f002 f958 	bl	8003328 <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	1e03      	subs	r3, r0, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800107c:	f7ff fdbe 	bl	8000bfc <Error_Handler>
  }

}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b00d      	add	sp, #52	; 0x34
 8001086:	bd90      	pop	{r4, r7, pc}
 8001088:	20000214 	.word	0x20000214

0800108c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001092:	2320      	movs	r3, #32
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	0018      	movs	r0, r3
 8001098:	2308      	movs	r3, #8
 800109a:	001a      	movs	r2, r3
 800109c:	2100      	movs	r1, #0
 800109e:	f003 fabf 	bl	8004620 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	0018      	movs	r0, r3
 80010a6:	231c      	movs	r3, #28
 80010a8:	001a      	movs	r2, r3
 80010aa:	2100      	movs	r1, #0
 80010ac:	f003 fab8 	bl	8004620 <memset>

  htim3.Instance = TIM3;
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <MX_TIM3_Init+0xb8>)
 80010b2:	4a25      	ldr	r2, [pc, #148]	; (8001148 <MX_TIM3_Init+0xbc>)
 80010b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010b6:	4b23      	ldr	r3, [pc, #140]	; (8001144 <MX_TIM3_Init+0xb8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <MX_TIM3_Init+0xb8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <MX_TIM3_Init+0xb8>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <MX_TIM3_Init+0xb8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <MX_TIM3_Init+0xb8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_TIM3_Init+0xb8>)
 80010d6:	0018      	movs	r0, r3
 80010d8:	f001 fb84 	bl	80027e4 <HAL_TIM_PWM_Init>
 80010dc:	1e03      	subs	r3, r0, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80010e0:	f7ff fd8c 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e4:	2120      	movs	r1, #32
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f2:	187a      	adds	r2, r7, r1
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_TIM3_Init+0xb8>)
 80010f6:	0011      	movs	r1, r2
 80010f8:	0018      	movs	r0, r3
 80010fa:	f002 f915 	bl	8003328 <HAL_TIMEx_MasterConfigSynchronization>
 80010fe:	1e03      	subs	r3, r0, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001102:	f7ff fd7b 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2260      	movs	r2, #96	; 0x60
 800110a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111e:	1d39      	adds	r1, r7, #4
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_TIM3_Init+0xb8>)
 8001122:	2200      	movs	r2, #0
 8001124:	0018      	movs	r0, r3
 8001126:	f001 fd7f 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 800112a:	1e03      	subs	r3, r0, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800112e:	f7ff fd65 	bl	8000bfc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <MX_TIM3_Init+0xb8>)
 8001134:	0018      	movs	r0, r3
 8001136:	f000 f9f7 	bl	8001528 <HAL_TIM_MspPostInit>

}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b00a      	add	sp, #40	; 0x28
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	20000154 	.word	0x20000154
 8001148:	40000400 	.word	0x40000400

0800114c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001152:	003b      	movs	r3, r7
 8001154:	0018      	movs	r0, r3
 8001156:	2308      	movs	r3, #8
 8001158:	001a      	movs	r2, r3
 800115a:	2100      	movs	r1, #0
 800115c:	f003 fa60 	bl	8004620 <memset>

  htim6.Instance = TIM6;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_TIM6_Init+0x6c>)
 8001162:	4a16      	ldr	r2, [pc, #88]	; (80011bc <MX_TIM6_Init+0x70>)
 8001164:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 366;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_TIM6_Init+0x6c>)
 8001168:	22b7      	movs	r2, #183	; 0xb7
 800116a:	0052      	lsls	r2, r2, #1
 800116c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_TIM6_Init+0x6c>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_TIM6_Init+0x6c>)
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <MX_TIM6_Init+0x74>)
 8001178:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_TIM6_Init+0x6c>)
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MX_TIM6_Init+0x6c>)
 8001182:	0018      	movs	r0, r3
 8001184:	f001 fa94 	bl	80026b0 <HAL_TIM_Base_Init>
 8001188:	1e03      	subs	r3, r0, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 800118c:	f7ff fd36 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	003b      	movs	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	003b      	movs	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800119c:	003a      	movs	r2, r7
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_TIM6_Init+0x6c>)
 80011a0:	0011      	movs	r1, r2
 80011a2:	0018      	movs	r0, r3
 80011a4:	f002 f8c0 	bl	8003328 <HAL_TIMEx_MasterConfigSynchronization>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 80011ac:	f7ff fd26 	bl	8000bfc <Error_Handler>
  }

}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000194 	.word	0x20000194
 80011bc:	40001000 	.word	0x40001000
 80011c0:	0000ffff 	.word	0x0000ffff

080011c4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	0018      	movs	r0, r3
 80011ce:	231c      	movs	r3, #28
 80011d0:	001a      	movs	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	f003 fa24 	bl	8004620 <memset>

  htim14.Instance = TIM14;
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MX_TIM14_Init+0x94>)
 80011da:	4a20      	ldr	r2, [pc, #128]	; (800125c <MX_TIM14_Init+0x98>)
 80011dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MX_TIM14_Init+0x94>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MX_TIM14_Init+0x94>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 64;
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_TIM14_Init+0x94>)
 80011ec:	2240      	movs	r2, #64	; 0x40
 80011ee:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_TIM14_Init+0x94>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_TIM14_Init+0x94>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_TIM14_Init+0x94>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f001 fa56 	bl	80026b0 <HAL_TIM_Base_Init>
 8001204:	1e03      	subs	r3, r0, #0
 8001206:	d001      	beq.n	800120c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001208:	f7ff fcf8 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_TIM14_Init+0x94>)
 800120e:	0018      	movs	r0, r3
 8001210:	f001 fae8 	bl	80027e4 <HAL_TIM_PWM_Init>
 8001214:	1e03      	subs	r3, r0, #0
 8001216:	d001      	beq.n	800121c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001218:	f7ff fcf0 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2260      	movs	r2, #96	; 0x60
 8001220:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001234:	1d39      	adds	r1, r7, #4
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_TIM14_Init+0x94>)
 8001238:	2200      	movs	r2, #0
 800123a:	0018      	movs	r0, r3
 800123c:	f001 fcf4 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 8001240:	1e03      	subs	r3, r0, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001244:	f7ff fcda 	bl	8000bfc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <MX_TIM14_Init+0x94>)
 800124a:	0018      	movs	r0, r3
 800124c:	f000 f96c 	bl	8001528 <HAL_TIM_MspPostInit>

}
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	b008      	add	sp, #32
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000254 	.word	0x20000254
 800125c:	40002000 	.word	0x40002000

08001260 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_TIM16_Init+0x44>)
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <MX_TIM16_Init+0x48>)
 8001268:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_TIM16_Init+0x44>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_TIM16_Init+0x44>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_TIM16_Init+0x44>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_TIM16_Init+0x44>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_TIM16_Init+0x44>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_TIM16_Init+0x44>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <MX_TIM16_Init+0x44>)
 8001290:	0018      	movs	r0, r3
 8001292:	f001 fa0d 	bl	80026b0 <HAL_TIM_Base_Init>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d001      	beq.n	800129e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800129a:	f7ff fcaf 	bl	8000bfc <Error_Handler>
  }

}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000294 	.word	0x20000294
 80012a8:	40014400 	.word	0x40014400

080012ac <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_TIM17_Init+0x44>)
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <MX_TIM17_Init+0x48>)
 80012b4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 65535;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_TIM17_Init+0x44>)
 80012b8:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <MX_TIM17_Init+0x4c>)
 80012ba:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_TIM17_Init+0x44>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_TIM17_Init+0x44>)
 80012c4:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <MX_TIM17_Init+0x4c>)
 80012c6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_TIM17_Init+0x44>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_TIM17_Init+0x44>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_TIM17_Init+0x44>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <MX_TIM17_Init+0x44>)
 80012dc:	0018      	movs	r0, r3
 80012de:	f001 f9e7 	bl	80026b0 <HAL_TIM_Base_Init>
 80012e2:	1e03      	subs	r3, r0, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80012e6:	f7ff fc89 	bl	8000bfc <Error_Handler>
  }

}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000114 	.word	0x20000114
 80012f4:	40014800 	.word	0x40014800
 80012f8:	0000ffff 	.word	0x0000ffff

080012fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a13      	ldr	r2, [pc, #76]	; (8001358 <HAL_TIM_PWM_MspInit+0x5c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d10e      	bne.n	800132c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <HAL_TIM_PWM_MspInit+0x60>)
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_TIM_PWM_MspInit+0x60>)
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	0109      	lsls	r1, r1, #4
 8001318:	430a      	orrs	r2, r1
 800131a:	619a      	str	r2, [r3, #24]
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_TIM_PWM_MspInit+0x60>)
 800131e:	699a      	ldr	r2, [r3, #24]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	4013      	ands	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800132a:	e010      	b.n	800134e <HAL_TIM_PWM_MspInit+0x52>
  else if(tim_pwmHandle->Instance==TIM3)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <HAL_TIM_PWM_MspInit+0x64>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d10b      	bne.n	800134e <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_TIM_PWM_MspInit+0x60>)
 8001338:	69da      	ldr	r2, [r3, #28]
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_TIM_PWM_MspInit+0x60>)
 800133c:	2102      	movs	r1, #2
 800133e:	430a      	orrs	r2, r1
 8001340:	61da      	str	r2, [r3, #28]
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_TIM_PWM_MspInit+0x60>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	2202      	movs	r2, #2
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b004      	add	sp, #16
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	40012c00 	.word	0x40012c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40000400 	.word	0x40000400

08001364 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b08b      	sub	sp, #44	; 0x2c
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	2314      	movs	r3, #20
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	0018      	movs	r0, r3
 8001372:	2314      	movs	r3, #20
 8001374:	001a      	movs	r2, r3
 8001376:	2100      	movs	r1, #0
 8001378:	f003 f952 	bl	8004620 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	05db      	lsls	r3, r3, #23
 8001384:	429a      	cmp	r2, r3
 8001386:	d15e      	bne.n	8001446 <HAL_TIM_Encoder_MspInit+0xe2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 800138a:	69da      	ldr	r2, [r3, #28]
 800138c:	4b30      	ldr	r3, [pc, #192]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 800138e:	2101      	movs	r1, #1
 8001390:	430a      	orrs	r2, r1
 8001392:	61da      	str	r2, [r3, #28]
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	2201      	movs	r2, #1
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 80013a2:	695a      	ldr	r2, [r3, #20]
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	0289      	lsls	r1, r1, #10
 80013aa:	430a      	orrs	r2, r1
 80013ac:	615a      	str	r2, [r3, #20]
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	029b      	lsls	r3, r3, #10
 80013b6:	4013      	ands	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 80013be:	695a      	ldr	r2, [r3, #20]
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	02c9      	lsls	r1, r1, #11
 80013c6:	430a      	orrs	r2, r1
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 80013cc:	695a      	ldr	r2, [r3, #20]
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	02db      	lsls	r3, r3, #11
 80013d2:	4013      	ands	r3, r2
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013d8:	2114      	movs	r1, #20
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	0212      	lsls	r2, r2, #8
 80013e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	000c      	movs	r4, r1
 80013e4:	193b      	adds	r3, r7, r4
 80013e6:	2202      	movs	r2, #2
 80013e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	193b      	adds	r3, r7, r4
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	193b      	adds	r3, r7, r4
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80013f6:	193b      	adds	r3, r7, r4
 80013f8:	2202      	movs	r2, #2
 80013fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	193a      	adds	r2, r7, r4
 80013fe:	2390      	movs	r3, #144	; 0x90
 8001400:	05db      	lsls	r3, r3, #23
 8001402:	0011      	movs	r1, r2
 8001404:	0018      	movs	r0, r3
 8001406:	f000 fab7 	bl	8001978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800140a:	0021      	movs	r1, r4
 800140c:	187b      	adds	r3, r7, r1
 800140e:	2208      	movs	r2, #8
 8001410:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	187b      	adds	r3, r7, r1
 8001414:	2202      	movs	r2, #2
 8001416:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	187b      	adds	r3, r7, r1
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2202      	movs	r2, #2
 8001428:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	187b      	adds	r3, r7, r1
 800142c:	4a09      	ldr	r2, [pc, #36]	; (8001454 <HAL_TIM_Encoder_MspInit+0xf0>)
 800142e:	0019      	movs	r1, r3
 8001430:	0010      	movs	r0, r2
 8001432:	f000 faa1 	bl	8001978 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2101      	movs	r1, #1
 800143a:	200f      	movs	r0, #15
 800143c:	f000 fa6a 	bl	8001914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001440:	200f      	movs	r0, #15
 8001442:	f000 fa7c 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b00b      	add	sp, #44	; 0x2c
 800144c:	bd90      	pop	{r4, r7, pc}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	40021000 	.word	0x40021000
 8001454:	48000400 	.word	0x48000400

08001458 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a2b      	ldr	r2, [pc, #172]	; (8001514 <HAL_TIM_Base_MspInit+0xbc>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d114      	bne.n	8001494 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 800146c:	69da      	ldr	r2, [r3, #28]
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 8001470:	2110      	movs	r1, #16
 8001472:	430a      	orrs	r2, r1
 8001474:	61da      	str	r2, [r3, #28]
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	2210      	movs	r2, #16
 800147c:	4013      	ands	r3, r2
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2101      	movs	r1, #1
 8001486:	2011      	movs	r0, #17
 8001488:	f000 fa44 	bl	8001914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800148c:	2011      	movs	r0, #17
 800148e:	f000 fa56 	bl	800193e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001492:	e03a      	b.n	800150a <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM14)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a20      	ldr	r2, [pc, #128]	; (800151c <HAL_TIM_Base_MspInit+0xc4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d10e      	bne.n	80014bc <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	0049      	lsls	r1, r1, #1
 80014a8:	430a      	orrs	r2, r1
 80014aa:	61da      	str	r2, [r3, #28]
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014ae:	69da      	ldr	r2, [r3, #28]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
}
 80014ba:	e026      	b.n	800150a <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM16)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <HAL_TIM_Base_MspInit+0xc8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d10e      	bne.n	80014e4 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014cc:	2180      	movs	r1, #128	; 0x80
 80014ce:	0289      	lsls	r1, r1, #10
 80014d0:	430a      	orrs	r2, r1
 80014d2:	619a      	str	r2, [r3, #24]
 80014d4:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014d6:	699a      	ldr	r2, [r3, #24]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	029b      	lsls	r3, r3, #10
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
}
 80014e2:	e012      	b.n	800150a <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM17)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_TIM_Base_MspInit+0xcc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d10d      	bne.n	800150a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014f0:	699a      	ldr	r2, [r3, #24]
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	02c9      	lsls	r1, r1, #11
 80014f8:	430a      	orrs	r2, r1
 80014fa:	619a      	str	r2, [r3, #24]
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	02db      	lsls	r3, r3, #11
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	b006      	add	sp, #24
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	40001000 	.word	0x40001000
 8001518:	40021000 	.word	0x40021000
 800151c:	40002000 	.word	0x40002000
 8001520:	40014400 	.word	0x40014400
 8001524:	40014800 	.word	0x40014800

08001528 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	2314      	movs	r3, #20
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	0018      	movs	r0, r3
 8001536:	2314      	movs	r3, #20
 8001538:	001a      	movs	r2, r3
 800153a:	2100      	movs	r1, #0
 800153c:	f003 f870 	bl	8004620 <memset>
  if(timHandle->Instance==TIM1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a40      	ldr	r2, [pc, #256]	; (8001648 <HAL_TIM_MspPostInit+0x120>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d126      	bne.n	8001598 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b40      	ldr	r3, [pc, #256]	; (800164c <HAL_TIM_MspPostInit+0x124>)
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	4b3f      	ldr	r3, [pc, #252]	; (800164c <HAL_TIM_MspPostInit+0x124>)
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	0289      	lsls	r1, r1, #10
 8001554:	430a      	orrs	r2, r1
 8001556:	615a      	str	r2, [r3, #20]
 8001558:	4b3c      	ldr	r3, [pc, #240]	; (800164c <HAL_TIM_MspPostInit+0x124>)
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	029b      	lsls	r3, r3, #10
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001566:	2114      	movs	r1, #20
 8001568:	187b      	adds	r3, r7, r1
 800156a:	22f0      	movs	r2, #240	; 0xf0
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	187b      	adds	r3, r7, r1
 8001572:	2202      	movs	r2, #2
 8001574:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	187b      	adds	r3, r7, r1
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	187b      	adds	r3, r7, r1
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001582:	187b      	adds	r3, r7, r1
 8001584:	2202      	movs	r2, #2
 8001586:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	187a      	adds	r2, r7, r1
 800158a:	2390      	movs	r3, #144	; 0x90
 800158c:	05db      	lsls	r3, r3, #23
 800158e:	0011      	movs	r1, r2
 8001590:	0018      	movs	r0, r3
 8001592:	f000 f9f1 	bl	8001978 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001596:	e052      	b.n	800163e <HAL_TIM_MspPostInit+0x116>
  else if(timHandle->Instance==TIM3)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a2c      	ldr	r2, [pc, #176]	; (8001650 <HAL_TIM_MspPostInit+0x128>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d124      	bne.n	80015ec <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <HAL_TIM_MspPostInit+0x124>)
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	4b29      	ldr	r3, [pc, #164]	; (800164c <HAL_TIM_MspPostInit+0x124>)
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	02c9      	lsls	r1, r1, #11
 80015ac:	430a      	orrs	r2, r1
 80015ae:	615a      	str	r2, [r3, #20]
 80015b0:	4b26      	ldr	r3, [pc, #152]	; (800164c <HAL_TIM_MspPostInit+0x124>)
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	02db      	lsls	r3, r3, #11
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015be:	2114      	movs	r1, #20
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	2210      	movs	r2, #16
 80015c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	2202      	movs	r2, #2
 80015ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	2201      	movs	r2, #1
 80015dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <HAL_TIM_MspPostInit+0x12c>)
 80015e2:	0019      	movs	r1, r3
 80015e4:	0010      	movs	r0, r2
 80015e6:	f000 f9c7 	bl	8001978 <HAL_GPIO_Init>
}
 80015ea:	e028      	b.n	800163e <HAL_TIM_MspPostInit+0x116>
  else if(timHandle->Instance==TIM14)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_TIM_MspPostInit+0x130>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d123      	bne.n	800163e <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_TIM_MspPostInit+0x124>)
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_TIM_MspPostInit+0x124>)
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	02c9      	lsls	r1, r1, #11
 8001600:	430a      	orrs	r2, r1
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_TIM_MspPostInit+0x124>)
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	02db      	lsls	r3, r3, #11
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001612:	2114      	movs	r1, #20
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2202      	movs	r2, #2
 8001618:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	187b      	adds	r3, r7, r1
 800161c:	2202      	movs	r2, #2
 800161e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	187b      	adds	r3, r7, r1
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	187b      	adds	r3, r7, r1
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 800162c:	187b      	adds	r3, r7, r1
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	187b      	adds	r3, r7, r1
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_TIM_MspPostInit+0x12c>)
 8001636:	0019      	movs	r1, r3
 8001638:	0010      	movs	r0, r2
 800163a:	f000 f99d 	bl	8001978 <HAL_GPIO_Init>
}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b00a      	add	sp, #40	; 0x28
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	40012c00 	.word	0x40012c00
 800164c:	40021000 	.word	0x40021000
 8001650:	40000400 	.word	0x40000400
 8001654:	48000400 	.word	0x48000400
 8001658:	40002000 	.word	0x40002000

0800165c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800165e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopForever+0x6>)
  ldr r1, =_edata
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <LoopForever+0xe>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001678:	4c0b      	ldr	r4, [pc, #44]	; (80016a8 <LoopForever+0x16>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001686:	f7ff fbe3 	bl	8000e50 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800168a:	f002 ffa5 	bl	80045d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800168e:	f7ff fa31 	bl	8000af4 <main>

08001692 <LoopForever>:

LoopForever:
    b LoopForever
 8001692:	e7fe      	b.n	8001692 <LoopForever>
  ldr   r0, =_estack
 8001694:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80016a0:	08005160 	.word	0x08005160
  ldr r2, =_sbss
 80016a4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80016a8:	200002dc 	.word	0x200002dc

080016ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC1_COMP_IRQHandler>
	...

080016b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <HAL_Init+0x24>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_Init+0x24>)
 80016ba:	2110      	movs	r1, #16
 80016bc:	430a      	orrs	r2, r1
 80016be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80016c0:	2000      	movs	r0, #0
 80016c2:	f000 f809 	bl	80016d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c6:	f7ff fb29 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	40022000 	.word	0x40022000

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <HAL_InitTick+0x5c>)
 80016e2:	681c      	ldr	r4, [r3, #0]
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_InitTick+0x60>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	0019      	movs	r1, r3
 80016ea:	23fa      	movs	r3, #250	; 0xfa
 80016ec:	0098      	lsls	r0, r3, #2
 80016ee:	f7fe fd0b 	bl	8000108 <__udivsi3>
 80016f2:	0003      	movs	r3, r0
 80016f4:	0019      	movs	r1, r3
 80016f6:	0020      	movs	r0, r4
 80016f8:	f7fe fd06 	bl	8000108 <__udivsi3>
 80016fc:	0003      	movs	r3, r0
 80016fe:	0018      	movs	r0, r3
 8001700:	f000 f92d 	bl	800195e <HAL_SYSTICK_Config>
 8001704:	1e03      	subs	r3, r0, #0
 8001706:	d001      	beq.n	800170c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e00f      	b.n	800172c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d80b      	bhi.n	800172a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	2301      	movs	r3, #1
 8001716:	425b      	negs	r3, r3
 8001718:	2200      	movs	r2, #0
 800171a:	0018      	movs	r0, r3
 800171c:	f000 f8fa 	bl	8001914 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_InitTick+0x64>)
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b003      	add	sp, #12
 8001732:	bd90      	pop	{r4, r7, pc}
 8001734:	20000004 	.word	0x20000004
 8001738:	2000000c 	.word	0x2000000c
 800173c:	20000008 	.word	0x20000008

08001740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_IncTick+0x1c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	001a      	movs	r2, r3
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_IncTick+0x20>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	18d2      	adds	r2, r2, r3
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_IncTick+0x20>)
 8001752:	601a      	str	r2, [r3, #0]
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	2000000c 	.word	0x2000000c
 8001760:	200002d4 	.word	0x200002d4

08001764 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b02      	ldr	r3, [pc, #8]	; (8001774 <HAL_GetTick+0x10>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	200002d4 	.word	0x200002d4

08001778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff fff0 	bl	8001764 <HAL_GetTick>
 8001784:	0003      	movs	r3, r0
 8001786:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3301      	adds	r3, #1
 8001790:	d005      	beq.n	800179e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_Delay+0x40>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	001a      	movs	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	189b      	adds	r3, r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	f7ff ffe0 	bl	8001764 <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d8f7      	bhi.n	80017a0 <HAL_Delay+0x28>
  {
  }
}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b004      	add	sp, #16
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	2000000c 	.word	0x2000000c

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	0002      	movs	r2, r0
 80017c4:	1dfb      	adds	r3, r7, #7
 80017c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	1dfb      	adds	r3, r7, #7
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b7f      	cmp	r3, #127	; 0x7f
 80017ce:	d809      	bhi.n	80017e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d0:	1dfb      	adds	r3, r7, #7
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	001a      	movs	r2, r3
 80017d6:	231f      	movs	r3, #31
 80017d8:	401a      	ands	r2, r3
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_EnableIRQ+0x30>)
 80017dc:	2101      	movs	r1, #1
 80017de:	4091      	lsls	r1, r2
 80017e0:	000a      	movs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
  }
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b002      	add	sp, #8
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	0002      	movs	r2, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b7f      	cmp	r3, #127	; 0x7f
 8001804:	d828      	bhi.n	8001858 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001806:	4a2f      	ldr	r2, [pc, #188]	; (80018c4 <__NVIC_SetPriority+0xd4>)
 8001808:	1dfb      	adds	r3, r7, #7
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b25b      	sxtb	r3, r3
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	33c0      	adds	r3, #192	; 0xc0
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	589b      	ldr	r3, [r3, r2]
 8001816:	1dfa      	adds	r2, r7, #7
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	0011      	movs	r1, r2
 800181c:	2203      	movs	r2, #3
 800181e:	400a      	ands	r2, r1
 8001820:	00d2      	lsls	r2, r2, #3
 8001822:	21ff      	movs	r1, #255	; 0xff
 8001824:	4091      	lsls	r1, r2
 8001826:	000a      	movs	r2, r1
 8001828:	43d2      	mvns	r2, r2
 800182a:	401a      	ands	r2, r3
 800182c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	019b      	lsls	r3, r3, #6
 8001832:	22ff      	movs	r2, #255	; 0xff
 8001834:	401a      	ands	r2, r3
 8001836:	1dfb      	adds	r3, r7, #7
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	0018      	movs	r0, r3
 800183c:	2303      	movs	r3, #3
 800183e:	4003      	ands	r3, r0
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001844:	481f      	ldr	r0, [pc, #124]	; (80018c4 <__NVIC_SetPriority+0xd4>)
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b25b      	sxtb	r3, r3
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	430a      	orrs	r2, r1
 8001850:	33c0      	adds	r3, #192	; 0xc0
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001856:	e031      	b.n	80018bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <__NVIC_SetPriority+0xd8>)
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	0019      	movs	r1, r3
 8001860:	230f      	movs	r3, #15
 8001862:	400b      	ands	r3, r1
 8001864:	3b08      	subs	r3, #8
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3306      	adds	r3, #6
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	18d3      	adds	r3, r2, r3
 800186e:	3304      	adds	r3, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	1dfa      	adds	r2, r7, #7
 8001874:	7812      	ldrb	r2, [r2, #0]
 8001876:	0011      	movs	r1, r2
 8001878:	2203      	movs	r2, #3
 800187a:	400a      	ands	r2, r1
 800187c:	00d2      	lsls	r2, r2, #3
 800187e:	21ff      	movs	r1, #255	; 0xff
 8001880:	4091      	lsls	r1, r2
 8001882:	000a      	movs	r2, r1
 8001884:	43d2      	mvns	r2, r2
 8001886:	401a      	ands	r2, r3
 8001888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	019b      	lsls	r3, r3, #6
 800188e:	22ff      	movs	r2, #255	; 0xff
 8001890:	401a      	ands	r2, r3
 8001892:	1dfb      	adds	r3, r7, #7
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	0018      	movs	r0, r3
 8001898:	2303      	movs	r3, #3
 800189a:	4003      	ands	r3, r0
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <__NVIC_SetPriority+0xd8>)
 80018a2:	1dfb      	adds	r3, r7, #7
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	001c      	movs	r4, r3
 80018a8:	230f      	movs	r3, #15
 80018aa:	4023      	ands	r3, r4
 80018ac:	3b08      	subs	r3, #8
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	430a      	orrs	r2, r1
 80018b2:	3306      	adds	r3, #6
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	18c3      	adds	r3, r0, r3
 80018b8:	3304      	adds	r3, #4
 80018ba:	601a      	str	r2, [r3, #0]
}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	b003      	add	sp, #12
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	e000e100 	.word	0xe000e100
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	4a0c      	ldr	r2, [pc, #48]	; (800190c <SysTick_Config+0x40>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e010      	b.n	8001904 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <SysTick_Config+0x44>)
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	3a01      	subs	r2, #1
 80018e8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	2301      	movs	r3, #1
 80018ec:	425b      	negs	r3, r3
 80018ee:	2103      	movs	r1, #3
 80018f0:	0018      	movs	r0, r3
 80018f2:	f7ff ff7d 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <SysTick_Config+0x44>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SysTick_Config+0x44>)
 80018fe:	2207      	movs	r2, #7
 8001900:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001902:	2300      	movs	r3, #0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}
 800190c:	00ffffff 	.word	0x00ffffff
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	210f      	movs	r1, #15
 8001920:	187b      	adds	r3, r7, r1
 8001922:	1c02      	adds	r2, r0, #0
 8001924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	187b      	adds	r3, r7, r1
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b25b      	sxtb	r3, r3
 800192e:	0011      	movs	r1, r2
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff ff5d 	bl	80017f0 <__NVIC_SetPriority>
}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b004      	add	sp, #16
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	0002      	movs	r2, r0
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b25b      	sxtb	r3, r3
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff ff33 	bl	80017bc <__NVIC_EnableIRQ>
}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b002      	add	sp, #8
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff ffaf 	bl	80018cc <SysTick_Config>
 800196e:	0003      	movs	r3, r0
}
 8001970:	0018      	movs	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	b002      	add	sp, #8
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001986:	e14f      	b.n	8001c28 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2101      	movs	r1, #1
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4091      	lsls	r1, r2
 8001992:	000a      	movs	r2, r1
 8001994:	4013      	ands	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d100      	bne.n	80019a0 <HAL_GPIO_Init+0x28>
 800199e:	e140      	b.n	8001c22 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x38>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b12      	cmp	r3, #18
 80019ae:	d123      	bne.n	80019f8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	08da      	lsrs	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3208      	adds	r2, #8
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	58d3      	ldr	r3, [r2, r3]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	2207      	movs	r2, #7
 80019c2:	4013      	ands	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	220f      	movs	r2, #15
 80019c8:	409a      	lsls	r2, r3
 80019ca:	0013      	movs	r3, r2
 80019cc:	43da      	mvns	r2, r3
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	2107      	movs	r1, #7
 80019dc:	400b      	ands	r3, r1
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	409a      	lsls	r2, r3
 80019e2:	0013      	movs	r3, r2
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	08da      	lsrs	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3208      	adds	r2, #8
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	6939      	ldr	r1, [r7, #16]
 80019f6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	409a      	lsls	r2, r3
 8001a06:	0013      	movs	r3, r2
 8001a08:	43da      	mvns	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2203      	movs	r2, #3
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	0013      	movs	r3, r2
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d00b      	beq.n	8001a4c <HAL_GPIO_Init+0xd4>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d007      	beq.n	8001a4c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a40:	2b11      	cmp	r3, #17
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b12      	cmp	r3, #18
 8001a4a:	d130      	bne.n	8001aae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	0013      	movs	r3, r2
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	0013      	movs	r3, r2
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a82:	2201      	movs	r2, #1
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	2201      	movs	r2, #1
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	0013      	movs	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	409a      	lsls	r2, r3
 8001abc:	0013      	movs	r3, r2
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	055b      	lsls	r3, r3, #21
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d100      	bne.n	8001aec <HAL_GPIO_Init+0x174>
 8001aea:	e09a      	b.n	8001c22 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aec:	4b54      	ldr	r3, [pc, #336]	; (8001c40 <HAL_GPIO_Init+0x2c8>)
 8001aee:	699a      	ldr	r2, [r3, #24]
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_GPIO_Init+0x2c8>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	430a      	orrs	r2, r1
 8001af6:	619a      	str	r2, [r3, #24]
 8001af8:	4b51      	ldr	r3, [pc, #324]	; (8001c40 <HAL_GPIO_Init+0x2c8>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b04:	4a4f      	ldr	r2, [pc, #316]	; (8001c44 <HAL_GPIO_Init+0x2cc>)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	589b      	ldr	r3, [r3, r2]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2203      	movs	r2, #3
 8001b16:	4013      	ands	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	0013      	movs	r3, r2
 8001b20:	43da      	mvns	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	2390      	movs	r3, #144	; 0x90
 8001b2c:	05db      	lsls	r3, r3, #23
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0x1e2>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a44      	ldr	r2, [pc, #272]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00d      	beq.n	8001b56 <HAL_GPIO_Init+0x1de>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a43      	ldr	r2, [pc, #268]	; (8001c4c <HAL_GPIO_Init+0x2d4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0x1da>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a42      	ldr	r2, [pc, #264]	; (8001c50 <HAL_GPIO_Init+0x2d8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_GPIO_Init+0x1d6>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x1e4>
 8001b4e:	2305      	movs	r3, #5
 8001b50:	e004      	b.n	8001b5c <HAL_GPIO_Init+0x1e4>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_Init+0x1e4>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x1e4>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	2103      	movs	r1, #3
 8001b60:	400a      	ands	r2, r1
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	4093      	lsls	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b6c:	4935      	ldr	r1, [pc, #212]	; (8001c44 <HAL_GPIO_Init+0x2cc>)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7a:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	43da      	mvns	r2, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	025b      	lsls	r3, r3, #9
 8001b92:	4013      	ands	r3, r2
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b9e:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43da      	mvns	r2, r3
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	029b      	lsls	r3, r3, #10
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	035b      	lsls	r3, r3, #13
 8001be6:	4013      	ands	r3, r2
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43da      	mvns	r2, r3
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	039b      	lsls	r3, r3, #14
 8001c10:	4013      	ands	r3, r2
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	40da      	lsrs	r2, r3
 8001c30:	1e13      	subs	r3, r2, #0
 8001c32:	d000      	beq.n	8001c36 <HAL_GPIO_Init+0x2be>
 8001c34:	e6a8      	b.n	8001988 <HAL_GPIO_Init+0x10>
  } 
}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b006      	add	sp, #24
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010000 	.word	0x40010000
 8001c48:	48000400 	.word	0x48000400
 8001c4c:	48000800 	.word	0x48000800
 8001c50:	48000c00 	.word	0x48000c00
 8001c54:	40010400 	.word	0x40010400

08001c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	0008      	movs	r0, r1
 8001c62:	0011      	movs	r1, r2
 8001c64:	1cbb      	adds	r3, r7, #2
 8001c66:	1c02      	adds	r2, r0, #0
 8001c68:	801a      	strh	r2, [r3, #0]
 8001c6a:	1c7b      	adds	r3, r7, #1
 8001c6c:	1c0a      	adds	r2, r1, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c70:	1c7b      	adds	r3, r7, #1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c78:	1cbb      	adds	r3, r7, #2
 8001c7a:	881a      	ldrh	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c80:	e003      	b.n	8001c8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c82:	1cbb      	adds	r3, r7, #2
 8001c84:	881a      	ldrh	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b002      	add	sp, #8
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	1dbb      	adds	r3, r7, #6
 8001c9e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	1dba      	adds	r2, r7, #6
 8001ca6:	8812      	ldrh	r2, [r2, #0]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d008      	beq.n	8001cbe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001cae:	1dba      	adds	r2, r7, #6
 8001cb0:	8812      	ldrh	r2, [r2, #0]
 8001cb2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cb4:	1dbb      	adds	r3, r7, #6
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 f807 	bl	8001ccc <HAL_GPIO_EXTI_Callback>
  }
}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b002      	add	sp, #8
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	40010400 	.word	0x40010400

08001ccc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	1dbb      	adds	r3, r7, #6
 8001cd6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e303      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <HAL_RCC_OscConfig+0x1e>
 8001cfc:	e08d      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cfe:	4bc4      	ldr	r3, [pc, #784]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	220c      	movs	r2, #12
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d00e      	beq.n	8001d28 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d0a:	4bc1      	ldr	r3, [pc, #772]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	220c      	movs	r2, #12
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d116      	bne.n	8001d44 <HAL_RCC_OscConfig+0x64>
 8001d16:	4bbe      	ldr	r3, [pc, #760]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	025b      	lsls	r3, r3, #9
 8001d1e:	401a      	ands	r2, r3
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	025b      	lsls	r3, r3, #9
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d10d      	bne.n	8001d44 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	4bb9      	ldr	r3, [pc, #740]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	029b      	lsls	r3, r3, #10
 8001d30:	4013      	ands	r3, r2
 8001d32:	d100      	bne.n	8001d36 <HAL_RCC_OscConfig+0x56>
 8001d34:	e070      	b.n	8001e18 <HAL_RCC_OscConfig+0x138>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d000      	beq.n	8001d40 <HAL_RCC_OscConfig+0x60>
 8001d3e:	e06b      	b.n	8001e18 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e2da      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_OscConfig+0x7c>
 8001d4c:	4bb0      	ldr	r3, [pc, #704]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4baf      	ldr	r3, [pc, #700]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	0249      	lsls	r1, r1, #9
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	e02f      	b.n	8001dbc <HAL_RCC_OscConfig+0xdc>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10c      	bne.n	8001d7e <HAL_RCC_OscConfig+0x9e>
 8001d64:	4baa      	ldr	r3, [pc, #680]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4ba9      	ldr	r3, [pc, #676]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001d6a:	49aa      	ldr	r1, [pc, #680]	; (8002014 <HAL_RCC_OscConfig+0x334>)
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	4ba7      	ldr	r3, [pc, #668]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4ba6      	ldr	r3, [pc, #664]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001d76:	49a8      	ldr	r1, [pc, #672]	; (8002018 <HAL_RCC_OscConfig+0x338>)
 8001d78:	400a      	ands	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	e01e      	b.n	8001dbc <HAL_RCC_OscConfig+0xdc>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d10e      	bne.n	8001da4 <HAL_RCC_OscConfig+0xc4>
 8001d86:	4ba2      	ldr	r3, [pc, #648]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4ba1      	ldr	r3, [pc, #644]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	02c9      	lsls	r1, r1, #11
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	4b9e      	ldr	r3, [pc, #632]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b9d      	ldr	r3, [pc, #628]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	0249      	lsls	r1, r1, #9
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	e00b      	b.n	8001dbc <HAL_RCC_OscConfig+0xdc>
 8001da4:	4b9a      	ldr	r3, [pc, #616]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b99      	ldr	r3, [pc, #612]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001daa:	499a      	ldr	r1, [pc, #616]	; (8002014 <HAL_RCC_OscConfig+0x334>)
 8001dac:	400a      	ands	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	4b97      	ldr	r3, [pc, #604]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b96      	ldr	r3, [pc, #600]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001db6:	4998      	ldr	r1, [pc, #608]	; (8002018 <HAL_RCC_OscConfig+0x338>)
 8001db8:	400a      	ands	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d014      	beq.n	8001dee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fcce 	bl	8001764 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dce:	f7ff fcc9 	bl	8001764 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	; 0x64
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e28c      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de0:	4b8b      	ldr	r3, [pc, #556]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	029b      	lsls	r3, r3, #10
 8001de8:	4013      	ands	r3, r2
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0xee>
 8001dec:	e015      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7ff fcb9 	bl	8001764 <HAL_GetTick>
 8001df2:	0003      	movs	r3, r0
 8001df4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff fcb4 	bl	8001764 <HAL_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e277      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	4b81      	ldr	r3, [pc, #516]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	029b      	lsls	r3, r3, #10
 8001e12:	4013      	ands	r3, r2
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x118>
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	4013      	ands	r3, r2
 8001e22:	d100      	bne.n	8001e26 <HAL_RCC_OscConfig+0x146>
 8001e24:	e069      	b.n	8001efa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e26:	4b7a      	ldr	r3, [pc, #488]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d00b      	beq.n	8001e48 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e30:	4b77      	ldr	r3, [pc, #476]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	220c      	movs	r2, #12
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d11c      	bne.n	8001e76 <HAL_RCC_OscConfig+0x196>
 8001e3c:	4b74      	ldr	r3, [pc, #464]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	025b      	lsls	r3, r3, #9
 8001e44:	4013      	ands	r3, r2
 8001e46:	d116      	bne.n	8001e76 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e48:	4b71      	ldr	r3, [pc, #452]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d005      	beq.n	8001e5e <HAL_RCC_OscConfig+0x17e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d001      	beq.n	8001e5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e24d      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5e:	4b6c      	ldr	r3, [pc, #432]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	22f8      	movs	r2, #248	; 0xf8
 8001e64:	4393      	bics	r3, r2
 8001e66:	0019      	movs	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	00da      	lsls	r2, r3, #3
 8001e6e:	4b68      	ldr	r3, [pc, #416]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e74:	e041      	b.n	8001efa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d024      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e7e:	4b64      	ldr	r3, [pc, #400]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001e84:	2101      	movs	r1, #1
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fc6b 	bl	8001764 <HAL_GetTick>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e94:	f7ff fc66 	bl	8001764 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e229      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea6:	4b5a      	ldr	r3, [pc, #360]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d0f1      	beq.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	4b57      	ldr	r3, [pc, #348]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	22f8      	movs	r2, #248	; 0xf8
 8001eb6:	4393      	bics	r3, r2
 8001eb8:	0019      	movs	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00da      	lsls	r2, r3, #3
 8001ec0:	4b53      	ldr	r3, [pc, #332]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e018      	b.n	8001efa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec8:	4b51      	ldr	r3, [pc, #324]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b50      	ldr	r3, [pc, #320]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001ece:	2101      	movs	r1, #1
 8001ed0:	438a      	bics	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fc46 	bl	8001764 <HAL_GetTick>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ede:	f7ff fc41 	bl	8001764 <HAL_GetTick>
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e204      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef0:	4b47      	ldr	r3, [pc, #284]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d1f1      	bne.n	8001ede <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2208      	movs	r2, #8
 8001f00:	4013      	ands	r3, r2
 8001f02:	d036      	beq.n	8001f72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d019      	beq.n	8001f40 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0c:	4b40      	ldr	r3, [pc, #256]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f10:	4b3f      	ldr	r3, [pc, #252]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	430a      	orrs	r2, r1
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7ff fc24 	bl	8001764 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f22:	f7ff fc1f 	bl	8001764 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e1e2      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f34:	4b36      	ldr	r3, [pc, #216]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d0f1      	beq.n	8001f22 <HAL_RCC_OscConfig+0x242>
 8001f3e:	e018      	b.n	8001f72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f40:	4b33      	ldr	r3, [pc, #204]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f44:	4b32      	ldr	r3, [pc, #200]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001f46:	2101      	movs	r1, #1
 8001f48:	438a      	bics	r2, r1
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4c:	f7ff fc0a 	bl	8001764 <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f56:	f7ff fc05 	bl	8001764 <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e1c8      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d1f1      	bne.n	8001f56 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2204      	movs	r2, #4
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <HAL_RCC_OscConfig+0x29e>
 8001f7c:	e0b6      	b.n	80020ec <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	231f      	movs	r3, #31
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001f88:	69da      	ldr	r2, [r3, #28]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	055b      	lsls	r3, r3, #21
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d111      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001f94:	69da      	ldr	r2, [r3, #28]
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001f98:	2180      	movs	r1, #128	; 0x80
 8001f9a:	0549      	lsls	r1, r1, #21
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	61da      	str	r2, [r3, #28]
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8001fa2:	69da      	ldr	r2, [r3, #28]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	055b      	lsls	r3, r3, #21
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fae:	231f      	movs	r3, #31
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_RCC_OscConfig+0x33c>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d11a      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_RCC_OscConfig+0x33c>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_RCC_OscConfig+0x33c>)
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	0049      	lsls	r1, r1, #1
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd0:	f7ff fbc8 	bl	8001764 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fda:	f7ff fbc3 	bl	8001764 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b64      	cmp	r3, #100	; 0x64
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e186      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_RCC_OscConfig+0x33c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d10f      	bne.n	8002020 <HAL_RCC_OscConfig+0x340>
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8002002:	6a1a      	ldr	r2, [r3, #32]
 8002004:	4b02      	ldr	r3, [pc, #8]	; (8002010 <HAL_RCC_OscConfig+0x330>)
 8002006:	2101      	movs	r1, #1
 8002008:	430a      	orrs	r2, r1
 800200a:	621a      	str	r2, [r3, #32]
 800200c:	e036      	b.n	800207c <HAL_RCC_OscConfig+0x39c>
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	40021000 	.word	0x40021000
 8002014:	fffeffff 	.word	0xfffeffff
 8002018:	fffbffff 	.word	0xfffbffff
 800201c:	40007000 	.word	0x40007000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10c      	bne.n	8002042 <HAL_RCC_OscConfig+0x362>
 8002028:	4bb6      	ldr	r3, [pc, #728]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800202a:	6a1a      	ldr	r2, [r3, #32]
 800202c:	4bb5      	ldr	r3, [pc, #724]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800202e:	2101      	movs	r1, #1
 8002030:	438a      	bics	r2, r1
 8002032:	621a      	str	r2, [r3, #32]
 8002034:	4bb3      	ldr	r3, [pc, #716]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002036:	6a1a      	ldr	r2, [r3, #32]
 8002038:	4bb2      	ldr	r3, [pc, #712]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800203a:	2104      	movs	r1, #4
 800203c:	438a      	bics	r2, r1
 800203e:	621a      	str	r2, [r3, #32]
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0x39c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x384>
 800204a:	4bae      	ldr	r3, [pc, #696]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800204c:	6a1a      	ldr	r2, [r3, #32]
 800204e:	4bad      	ldr	r3, [pc, #692]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002050:	2104      	movs	r1, #4
 8002052:	430a      	orrs	r2, r1
 8002054:	621a      	str	r2, [r3, #32]
 8002056:	4bab      	ldr	r3, [pc, #684]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002058:	6a1a      	ldr	r2, [r3, #32]
 800205a:	4baa      	ldr	r3, [pc, #680]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800205c:	2101      	movs	r1, #1
 800205e:	430a      	orrs	r2, r1
 8002060:	621a      	str	r2, [r3, #32]
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0x39c>
 8002064:	4ba7      	ldr	r3, [pc, #668]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002066:	6a1a      	ldr	r2, [r3, #32]
 8002068:	4ba6      	ldr	r3, [pc, #664]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800206a:	2101      	movs	r1, #1
 800206c:	438a      	bics	r2, r1
 800206e:	621a      	str	r2, [r3, #32]
 8002070:	4ba4      	ldr	r3, [pc, #656]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002072:	6a1a      	ldr	r2, [r3, #32]
 8002074:	4ba3      	ldr	r3, [pc, #652]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002076:	2104      	movs	r1, #4
 8002078:	438a      	bics	r2, r1
 800207a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d014      	beq.n	80020ae <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002084:	f7ff fb6e 	bl	8001764 <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208c:	e009      	b.n	80020a2 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7ff fb69 	bl	8001764 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	4a9b      	ldr	r2, [pc, #620]	; (8002308 <HAL_RCC_OscConfig+0x628>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e12b      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a2:	4b98      	ldr	r3, [pc, #608]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	2202      	movs	r2, #2
 80020a8:	4013      	ands	r3, r2
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x3ae>
 80020ac:	e013      	b.n	80020d6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7ff fb59 	bl	8001764 <HAL_GetTick>
 80020b2:	0003      	movs	r3, r0
 80020b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b6:	e009      	b.n	80020cc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7ff fb54 	bl	8001764 <HAL_GetTick>
 80020bc:	0002      	movs	r2, r0
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	4a91      	ldr	r2, [pc, #580]	; (8002308 <HAL_RCC_OscConfig+0x628>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e116      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020cc:	4b8d      	ldr	r3, [pc, #564]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	2202      	movs	r2, #2
 80020d2:	4013      	ands	r3, r2
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020d6:	231f      	movs	r3, #31
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e0:	4b88      	ldr	r3, [pc, #544]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 80020e2:	69da      	ldr	r2, [r3, #28]
 80020e4:	4b87      	ldr	r3, [pc, #540]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 80020e6:	4989      	ldr	r1, [pc, #548]	; (800230c <HAL_RCC_OscConfig+0x62c>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2210      	movs	r2, #16
 80020f2:	4013      	ands	r3, r2
 80020f4:	d063      	beq.n	80021be <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d12a      	bne.n	8002154 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020fe:	4b81      	ldr	r3, [pc, #516]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002102:	4b80      	ldr	r3, [pc, #512]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002104:	2104      	movs	r1, #4
 8002106:	430a      	orrs	r2, r1
 8002108:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800210a:	4b7e      	ldr	r3, [pc, #504]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800210c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210e:	4b7d      	ldr	r3, [pc, #500]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002110:	2101      	movs	r1, #1
 8002112:	430a      	orrs	r2, r1
 8002114:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002116:	f7ff fb25 	bl	8001764 <HAL_GetTick>
 800211a:	0003      	movs	r3, r0
 800211c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002120:	f7ff fb20 	bl	8001764 <HAL_GetTick>
 8002124:	0002      	movs	r2, r0
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e0e3      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002132:	4b74      	ldr	r3, [pc, #464]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002136:	2202      	movs	r2, #2
 8002138:	4013      	ands	r3, r2
 800213a:	d0f1      	beq.n	8002120 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800213c:	4b71      	ldr	r3, [pc, #452]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800213e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002140:	22f8      	movs	r2, #248	; 0xf8
 8002142:	4393      	bics	r3, r2
 8002144:	0019      	movs	r1, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	00da      	lsls	r2, r3, #3
 800214c:	4b6d      	ldr	r3, [pc, #436]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800214e:	430a      	orrs	r2, r1
 8002150:	635a      	str	r2, [r3, #52]	; 0x34
 8002152:	e034      	b.n	80021be <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	3305      	adds	r3, #5
 800215a:	d111      	bne.n	8002180 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800215c:	4b69      	ldr	r3, [pc, #420]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800215e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002160:	4b68      	ldr	r3, [pc, #416]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002162:	2104      	movs	r1, #4
 8002164:	438a      	bics	r2, r1
 8002166:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	22f8      	movs	r2, #248	; 0xf8
 800216e:	4393      	bics	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	00da      	lsls	r2, r3, #3
 8002178:	4b62      	ldr	r3, [pc, #392]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800217a:	430a      	orrs	r2, r1
 800217c:	635a      	str	r2, [r3, #52]	; 0x34
 800217e:	e01e      	b.n	80021be <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002180:	4b60      	ldr	r3, [pc, #384]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002184:	4b5f      	ldr	r3, [pc, #380]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002186:	2104      	movs	r1, #4
 8002188:	430a      	orrs	r2, r1
 800218a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800218c:	4b5d      	ldr	r3, [pc, #372]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800218e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002190:	4b5c      	ldr	r3, [pc, #368]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002192:	2101      	movs	r1, #1
 8002194:	438a      	bics	r2, r1
 8002196:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7ff fae4 	bl	8001764 <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021a2:	f7ff fadf 	bl	8001764 <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0a2      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 80021b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b8:	2202      	movs	r2, #2
 80021ba:	4013      	ands	r3, r2
 80021bc:	d1f1      	bne.n	80021a2 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d100      	bne.n	80021c8 <HAL_RCC_OscConfig+0x4e8>
 80021c6:	e097      	b.n	80022f8 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c8:	4b4e      	ldr	r3, [pc, #312]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	220c      	movs	r2, #12
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d100      	bne.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
 80021d4:	e06b      	b.n	80022ae <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d14c      	bne.n	8002278 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021de:	4b49      	ldr	r3, [pc, #292]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b48      	ldr	r3, [pc, #288]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 80021e4:	494a      	ldr	r1, [pc, #296]	; (8002310 <HAL_RCC_OscConfig+0x630>)
 80021e6:	400a      	ands	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff fabb 	bl	8001764 <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f4:	f7ff fab6 	bl	8001764 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e079      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002206:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	049b      	lsls	r3, r3, #18
 800220e:	4013      	ands	r3, r2
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002212:	4b3c      	ldr	r3, [pc, #240]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	220f      	movs	r2, #15
 8002218:	4393      	bics	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002220:	4b38      	ldr	r3, [pc, #224]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002222:	430a      	orrs	r2, r1
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c
 8002226:	4b37      	ldr	r3, [pc, #220]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4a3a      	ldr	r2, [pc, #232]	; (8002314 <HAL_RCC_OscConfig+0x634>)
 800222c:	4013      	ands	r3, r2
 800222e:	0019      	movs	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	431a      	orrs	r2, r3
 800223a:	4b32      	ldr	r3, [pc, #200]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002240:	4b30      	ldr	r3, [pc, #192]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 8002246:	2180      	movs	r1, #128	; 0x80
 8002248:	0449      	lsls	r1, r1, #17
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7ff fa89 	bl	8001764 <HAL_GetTick>
 8002252:	0003      	movs	r3, r0
 8002254:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002258:	f7ff fa84 	bl	8001764 <HAL_GetTick>
 800225c:	0002      	movs	r2, r0
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e047      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	049b      	lsls	r3, r3, #18
 8002272:	4013      	ands	r3, r2
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x578>
 8002276:	e03f      	b.n	80022f8 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002278:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b21      	ldr	r3, [pc, #132]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 800227e:	4924      	ldr	r1, [pc, #144]	; (8002310 <HAL_RCC_OscConfig+0x630>)
 8002280:	400a      	ands	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff fa6e 	bl	8001764 <HAL_GetTick>
 8002288:	0003      	movs	r3, r0
 800228a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228e:	f7ff fa69 	bl	8001764 <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e02c      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a0:	4b18      	ldr	r3, [pc, #96]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	049b      	lsls	r3, r3, #18
 80022a8:	4013      	ands	r3, r2
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x5ae>
 80022ac:	e024      	b.n	80022f8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e01f      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80022c0:	4b10      	ldr	r3, [pc, #64]	; (8002304 <HAL_RCC_OscConfig+0x624>)
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	025b      	lsls	r3, r3, #9
 80022cc:	401a      	ands	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d10e      	bne.n	80022f4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	220f      	movs	r2, #15
 80022da:	401a      	ands	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	23f0      	movs	r3, #240	; 0xf0
 80022e8:	039b      	lsls	r3, r3, #14
 80022ea:	401a      	ands	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b008      	add	sp, #32
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	40021000 	.word	0x40021000
 8002308:	00001388 	.word	0x00001388
 800230c:	efffffff 	.word	0xefffffff
 8002310:	feffffff 	.word	0xfeffffff
 8002314:	ffc2ffff 	.word	0xffc2ffff

08002318 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0b3      	b.n	8002494 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b5b      	ldr	r3, [pc, #364]	; (800249c <HAL_RCC_ClockConfig+0x184>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2201      	movs	r2, #1
 8002332:	4013      	ands	r3, r2
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d911      	bls.n	800235e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b58      	ldr	r3, [pc, #352]	; (800249c <HAL_RCC_ClockConfig+0x184>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2201      	movs	r2, #1
 8002340:	4393      	bics	r3, r2
 8002342:	0019      	movs	r1, r3
 8002344:	4b55      	ldr	r3, [pc, #340]	; (800249c <HAL_RCC_ClockConfig+0x184>)
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234c:	4b53      	ldr	r3, [pc, #332]	; (800249c <HAL_RCC_ClockConfig+0x184>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2201      	movs	r2, #1
 8002352:	4013      	ands	r3, r2
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d001      	beq.n	800235e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e09a      	b.n	8002494 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2202      	movs	r2, #2
 8002364:	4013      	ands	r3, r2
 8002366:	d015      	beq.n	8002394 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2204      	movs	r2, #4
 800236e:	4013      	ands	r3, r2
 8002370:	d006      	beq.n	8002380 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002372:	4b4b      	ldr	r3, [pc, #300]	; (80024a0 <HAL_RCC_ClockConfig+0x188>)
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	4b4a      	ldr	r3, [pc, #296]	; (80024a0 <HAL_RCC_ClockConfig+0x188>)
 8002378:	21e0      	movs	r1, #224	; 0xe0
 800237a:	00c9      	lsls	r1, r1, #3
 800237c:	430a      	orrs	r2, r1
 800237e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <HAL_RCC_ClockConfig+0x188>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	22f0      	movs	r2, #240	; 0xf0
 8002386:	4393      	bics	r3, r2
 8002388:	0019      	movs	r1, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	4b44      	ldr	r3, [pc, #272]	; (80024a0 <HAL_RCC_ClockConfig+0x188>)
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2201      	movs	r2, #1
 800239a:	4013      	ands	r3, r2
 800239c:	d040      	beq.n	8002420 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <HAL_RCC_ClockConfig+0x188>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	029b      	lsls	r3, r3, #10
 80023ae:	4013      	ands	r3, r2
 80023b0:	d114      	bne.n	80023dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e06e      	b.n	8002494 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <HAL_RCC_ClockConfig+0x188>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	049b      	lsls	r3, r3, #18
 80023c6:	4013      	ands	r3, r2
 80023c8:	d108      	bne.n	80023dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e062      	b.n	8002494 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <HAL_RCC_ClockConfig+0x188>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2202      	movs	r2, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e05b      	b.n	8002494 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023dc:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <HAL_RCC_ClockConfig+0x188>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2203      	movs	r2, #3
 80023e2:	4393      	bics	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <HAL_RCC_ClockConfig+0x188>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7ff f9b8 	bl	8001764 <HAL_GetTick>
 80023f4:	0003      	movs	r3, r0
 80023f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f8:	e009      	b.n	800240e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fa:	f7ff f9b3 	bl	8001764 <HAL_GetTick>
 80023fe:	0002      	movs	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <HAL_RCC_ClockConfig+0x18c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e042      	b.n	8002494 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_RCC_ClockConfig+0x188>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	220c      	movs	r2, #12
 8002414:	401a      	ands	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1ec      	bne.n	80023fa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <HAL_RCC_ClockConfig+0x184>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2201      	movs	r2, #1
 8002426:	4013      	ands	r3, r2
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d211      	bcs.n	8002452 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b1b      	ldr	r3, [pc, #108]	; (800249c <HAL_RCC_ClockConfig+0x184>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2201      	movs	r2, #1
 8002434:	4393      	bics	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	4b18      	ldr	r3, [pc, #96]	; (800249c <HAL_RCC_ClockConfig+0x184>)
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <HAL_RCC_ClockConfig+0x184>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2201      	movs	r2, #1
 8002446:	4013      	ands	r3, r2
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e020      	b.n	8002494 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2204      	movs	r2, #4
 8002458:	4013      	ands	r3, r2
 800245a:	d009      	beq.n	8002470 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800245c:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_RCC_ClockConfig+0x188>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <HAL_RCC_ClockConfig+0x190>)
 8002462:	4013      	ands	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RCC_ClockConfig+0x188>)
 800246c:	430a      	orrs	r2, r1
 800246e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002470:	f000 f820 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002474:	0001      	movs	r1, r0
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x188>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	220f      	movs	r2, #15
 800247e:	4013      	ands	r3, r2
 8002480:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <HAL_RCC_ClockConfig+0x194>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	000a      	movs	r2, r1
 8002486:	40da      	lsrs	r2, r3
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x198>)
 800248a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800248c:	2000      	movs	r0, #0
 800248e:	f7ff f923 	bl	80016d8 <HAL_InitTick>
  
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b004      	add	sp, #16
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40022000 	.word	0x40022000
 80024a0:	40021000 	.word	0x40021000
 80024a4:	00001388 	.word	0x00001388
 80024a8:	fffff8ff 	.word	0xfffff8ff
 80024ac:	08004ed4 	.word	0x08004ed4
 80024b0:	20000004 	.word	0x20000004

080024b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b08f      	sub	sp, #60	; 0x3c
 80024b8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80024ba:	2314      	movs	r3, #20
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	4a2b      	ldr	r2, [pc, #172]	; (800256c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024c2:	c313      	stmia	r3!, {r0, r1, r4}
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	4a29      	ldr	r2, [pc, #164]	; (8002570 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024ce:	c313      	stmia	r3!, {r0, r1, r4}
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d8:	2300      	movs	r3, #0
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
 80024dc:	2300      	movs	r3, #0
 80024de:	637b      	str	r3, [r7, #52]	; 0x34
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80024e8:	4b22      	ldr	r3, [pc, #136]	; (8002574 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	220c      	movs	r2, #12
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d002      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x4a>
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d003      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x50>
 80024fc:	e02d      	b.n	800255a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024fe:	4b1e      	ldr	r3, [pc, #120]	; (8002578 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002502:	e02d      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	0c9b      	lsrs	r3, r3, #18
 8002508:	220f      	movs	r2, #15
 800250a:	4013      	ands	r3, r2
 800250c:	2214      	movs	r2, #20
 800250e:	18ba      	adds	r2, r7, r2
 8002510:	5cd3      	ldrb	r3, [r2, r3]
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002514:	4b17      	ldr	r3, [pc, #92]	; (8002574 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	220f      	movs	r2, #15
 800251a:	4013      	ands	r3, r2
 800251c:	1d3a      	adds	r2, r7, #4
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	025b      	lsls	r3, r3, #9
 8002528:	4013      	ands	r3, r2
 800252a:	d009      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800252c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800252e:	4812      	ldr	r0, [pc, #72]	; (8002578 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002530:	f7fd fdea 	bl	8000108 <__udivsi3>
 8002534:	0003      	movs	r3, r0
 8002536:	001a      	movs	r2, r3
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	4353      	muls	r3, r2
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
 800253e:	e009      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002542:	000a      	movs	r2, r1
 8002544:	0152      	lsls	r2, r2, #5
 8002546:	1a52      	subs	r2, r2, r1
 8002548:	0193      	lsls	r3, r2, #6
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	185b      	adds	r3, r3, r1
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002558:	e002      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_RCC_GetSysClockFreq+0xc4>)
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800255e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b00f      	add	sp, #60	; 0x3c
 8002568:	bd90      	pop	{r4, r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	08004eb4 	.word	0x08004eb4
 8002570:	08004ec4 	.word	0x08004ec4
 8002574:	40021000 	.word	0x40021000
 8002578:	007a1200 	.word	0x007a1200

0800257c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e08a      	b.n	80026a4 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	225d      	movs	r2, #93	; 0x5d
 8002598:	5c9b      	ldrb	r3, [r3, r2]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d107      	bne.n	80025b0 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	225c      	movs	r2, #92	; 0x5c
 80025a4:	2100      	movs	r1, #0
 80025a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	0018      	movs	r0, r3
 80025ac:	f7fe fb6a 	bl	8000c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	225d      	movs	r2, #93	; 0x5d
 80025b4:	2102      	movs	r1, #2
 80025b6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2140      	movs	r1, #64	; 0x40
 80025c4:	438a      	bics	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	23e0      	movs	r3, #224	; 0xe0
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d902      	bls.n	80025da <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	e002      	b.n	80025e0 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	015b      	lsls	r3, r3, #5
 80025de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	23f0      	movs	r3, #240	; 0xf0
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d008      	beq.n	80025fe <HAL_SPI_Init+0x82>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	23e0      	movs	r3, #224	; 0xe0
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d002      	beq.n	80025fe <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10c      	bne.n	8002620 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	23e0      	movs	r3, #224	; 0xe0
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	429a      	cmp	r2, r3
 8002610:	d903      	bls.n	800261a <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2202      	movs	r2, #2
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
 8002618:	e002      	b.n	8002620 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6999      	ldr	r1, [r3, #24]
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	400b      	ands	r3, r1
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	431a      	orrs	r2, r3
 800264e:	0011      	movs	r1, r2
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	2204      	movs	r2, #4
 8002664:	401a      	ands	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	431a      	orrs	r2, r3
 8002678:	0011      	movs	r1, r2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	430a      	orrs	r2, r1
 8002682:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4907      	ldr	r1, [pc, #28]	; (80026ac <HAL_SPI_Init+0x130>)
 8002690:	400a      	ands	r2, r1
 8002692:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	225d      	movs	r2, #93	; 0x5d
 800269e:	2101      	movs	r1, #1
 80026a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b004      	add	sp, #16
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	fffff7ff 	.word	0xfffff7ff

080026b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e01e      	b.n	8002700 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	223d      	movs	r2, #61	; 0x3d
 80026c6:	5c9b      	ldrb	r3, [r3, r2]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d107      	bne.n	80026de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	223c      	movs	r2, #60	; 0x3c
 80026d2:	2100      	movs	r1, #0
 80026d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f7fe febd 	bl	8001458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	223d      	movs	r2, #61	; 0x3d
 80026e2:	2102      	movs	r1, #2
 80026e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3304      	adds	r3, #4
 80026ee:	0019      	movs	r1, r3
 80026f0:	0010      	movs	r0, r2
 80026f2:	f000 fb79 	bl	8002de8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	223d      	movs	r2, #61	; 0x3d
 80026fa:	2101      	movs	r1, #1
 80026fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	0018      	movs	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	b002      	add	sp, #8
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	223d      	movs	r2, #61	; 0x3d
 8002714:	2102      	movs	r1, #2
 8002716:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2207      	movs	r2, #7
 8002720:	4013      	ands	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b06      	cmp	r3, #6
 8002728:	d007      	beq.n	800273a <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	223d      	movs	r2, #61	; 0x3d
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	0018      	movs	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	b004      	add	sp, #16
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2101      	movs	r1, #1
 8002760:	430a      	orrs	r2, r1
 8002762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2207      	movs	r2, #7
 800276c:	4013      	ands	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b06      	cmp	r3, #6
 8002774:	d007      	beq.n	8002786 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2101      	movs	r1, #1
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b004      	add	sp, #16
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2101      	movs	r1, #1
 80027a4:	438a      	bics	r2, r1
 80027a6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <HAL_TIM_Base_Stop_IT+0x4c>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	d10d      	bne.n	80027d0 <HAL_TIM_Base_Stop_IT+0x40>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_TIM_Base_Stop_IT+0x50>)
 80027bc:	4013      	ands	r3, r2
 80027be:	d107      	bne.n	80027d0 <HAL_TIM_Base_Stop_IT+0x40>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2101      	movs	r1, #1
 80027cc:	438a      	bics	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b002      	add	sp, #8
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	00001111 	.word	0x00001111
 80027e0:	00000444 	.word	0x00000444

080027e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e01e      	b.n	8002834 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	223d      	movs	r2, #61	; 0x3d
 80027fa:	5c9b      	ldrb	r3, [r3, r2]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d107      	bne.n	8002812 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	223c      	movs	r2, #60	; 0x3c
 8002806:	2100      	movs	r1, #0
 8002808:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f7fe fd75 	bl	80012fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	223d      	movs	r2, #61	; 0x3d
 8002816:	2102      	movs	r1, #2
 8002818:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3304      	adds	r3, #4
 8002822:	0019      	movs	r1, r3
 8002824:	0010      	movs	r0, r2
 8002826:	f000 fadf 	bl	8002de8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	223d      	movs	r2, #61	; 0x3d
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b002      	add	sp, #8
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	2201      	movs	r2, #1
 800284e:	0018      	movs	r0, r3
 8002850:	f000 fd46 	bl	80032e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1a      	ldr	r2, [pc, #104]	; (80028c4 <HAL_TIM_PWM_Start+0x88>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <HAL_TIM_PWM_Start+0x40>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a19      	ldr	r2, [pc, #100]	; (80028c8 <HAL_TIM_PWM_Start+0x8c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_TIM_PWM_Start+0x40>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a17      	ldr	r2, [pc, #92]	; (80028cc <HAL_TIM_PWM_Start+0x90>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_TIM_PWM_Start+0x40>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <HAL_TIM_PWM_Start+0x94>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d101      	bne.n	8002880 <HAL_TIM_PWM_Start+0x44>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <HAL_TIM_PWM_Start+0x46>
 8002880:	2300      	movs	r3, #0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2180      	movs	r1, #128	; 0x80
 8002892:	0209      	lsls	r1, r1, #8
 8002894:	430a      	orrs	r2, r1
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2207      	movs	r2, #7
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d007      	beq.n	80028ba <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2101      	movs	r1, #1
 80028b6:	430a      	orrs	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	b004      	add	sp, #16
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40014000 	.word	0x40014000
 80028cc:	40014400 	.word	0x40014400
 80028d0:	40014800 	.word	0x40014800

080028d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e07c      	b.n	80029e2 <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	223d      	movs	r2, #61	; 0x3d
 80028ec:	5c9b      	ldrb	r3, [r3, r2]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	223c      	movs	r2, #60	; 0x3c
 80028f8:	2100      	movs	r1, #0
 80028fa:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	0018      	movs	r0, r3
 8002900:	f7fe fd30 	bl	8001364 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	223d      	movs	r2, #61	; 0x3d
 8002908:	2102      	movs	r1, #2
 800290a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4935      	ldr	r1, [pc, #212]	; (80029ec <HAL_TIM_Encoder_Init+0x118>)
 8002918:	400a      	ands	r2, r1
 800291a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	0019      	movs	r1, r3
 8002926:	0010      	movs	r0, r2
 8002928:	f000 fa5e 	bl	8002de8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4a27      	ldr	r2, [pc, #156]	; (80029f0 <HAL_TIM_Encoder_Init+0x11c>)
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	4313      	orrs	r3, r2
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4a22      	ldr	r2, [pc, #136]	; (80029f4 <HAL_TIM_Encoder_Init+0x120>)
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4a21      	ldr	r2, [pc, #132]	; (80029f8 <HAL_TIM_Encoder_Init+0x124>)
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	4313      	orrs	r3, r2
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	011a      	lsls	r2, r3, #4
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	031b      	lsls	r3, r3, #12
 8002996:	4313      	orrs	r3, r2
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2222      	movs	r2, #34	; 0x22
 80029a2:	4393      	bics	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2288      	movs	r2, #136	; 0x88
 80029aa:	4393      	bics	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	4313      	orrs	r3, r2
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	223d      	movs	r2, #61	; 0x3d
 80029dc:	2101      	movs	r1, #1
 80029de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b006      	add	sp, #24
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	ffffbff8 	.word	0xffffbff8
 80029f0:	fffffcfc 	.word	0xfffffcfc
 80029f4:	fffff3f3 	.word	0xfffff3f3
 80029f8:	ffff0f0f 	.word	0xffff0f0f

080029fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d124      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d11d      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2203      	movs	r2, #3
 8002a26:	4252      	negs	r2, r2
 8002a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2203      	movs	r2, #3
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d004      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 f9ba 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 8002a44:	e007      	b.n	8002a56 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 f9ad 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 f9b9 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2204      	movs	r2, #4
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d125      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2204      	movs	r2, #4
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d11e      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2205      	movs	r2, #5
 8002a7e:	4252      	negs	r2, r2
 8002a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2202      	movs	r2, #2
 8002a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	23c0      	movs	r3, #192	; 0xc0
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4013      	ands	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f000 f98d 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 8002a9e:	e007      	b.n	8002ab0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f000 f980 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 f98c 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2208      	movs	r2, #8
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d124      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2208      	movs	r2, #8
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11d      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2209      	movs	r2, #9
 8002ad8:	4252      	negs	r2, r2
 8002ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	2203      	movs	r2, #3
 8002aea:	4013      	ands	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	0018      	movs	r0, r3
 8002af2:	f000 f961 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 8002af6:	e007      	b.n	8002b08 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 f954 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 f960 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2210      	movs	r2, #16
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d125      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2210      	movs	r2, #16
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d11e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2211      	movs	r2, #17
 8002b30:	4252      	negs	r2, r2
 8002b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2208      	movs	r2, #8
 8002b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	23c0      	movs	r3, #192	; 0xc0
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d004      	beq.n	8002b52 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 f934 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 8002b50:	e007      	b.n	8002b62 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f000 f927 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f000 f933 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d10f      	bne.n	8002b96 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d108      	bne.n	8002b96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	4252      	negs	r2, r2
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f000 f901 	bl	8002d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b80      	cmp	r3, #128	; 0x80
 8002ba2:	d10f      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b80      	cmp	r3, #128	; 0x80
 8002bb0:	d108      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2281      	movs	r2, #129	; 0x81
 8002bb8:	4252      	negs	r2, r2
 8002bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 fc76 	bl	80034b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2240      	movs	r2, #64	; 0x40
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b40      	cmp	r3, #64	; 0x40
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2240      	movs	r2, #64	; 0x40
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d108      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2241      	movs	r2, #65	; 0x41
 8002be6:	4252      	negs	r2, r2
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 f8f3 	bl	8002dd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d10f      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d108      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2221      	movs	r2, #33	; 0x21
 8002c14:	4252      	negs	r2, r2
 8002c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f000 fc40 	bl	80034a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	223c      	movs	r2, #60	; 0x3c
 8002c38:	5c9b      	ldrb	r3, [r3, r2]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e0a4      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x164>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	223c      	movs	r2, #60	; 0x3c
 8002c46:	2101      	movs	r1, #1
 8002c48:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	223d      	movs	r2, #61	; 0x3d
 8002c4e:	2102      	movs	r1, #2
 8002c50:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d029      	beq.n	8002cac <HAL_TIM_PWM_ConfigChannel+0x84>
 8002c58:	d802      	bhi.n	8002c60 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002c5e:	e08c      	b.n	8002d7a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d046      	beq.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002c64:	2b0c      	cmp	r3, #12
 8002c66:	d065      	beq.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002c68:	e087      	b.n	8002d7a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	0011      	movs	r1, r2
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 f938 	bl	8002ee8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2108      	movs	r1, #8
 8002c84:	430a      	orrs	r2, r1
 8002c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2104      	movs	r1, #4
 8002c94:	438a      	bics	r2, r1
 8002c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6999      	ldr	r1, [r3, #24]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	619a      	str	r2, [r3, #24]
      break;
 8002caa:	e066      	b.n	8002d7a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	0011      	movs	r1, r2
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 f99f 	bl	8002ff8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699a      	ldr	r2, [r3, #24]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2180      	movs	r1, #128	; 0x80
 8002cc6:	0109      	lsls	r1, r1, #4
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	492f      	ldr	r1, [pc, #188]	; (8002d94 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002cd8:	400a      	ands	r2, r1
 8002cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6999      	ldr	r1, [r3, #24]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	021a      	lsls	r2, r3, #8
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	619a      	str	r2, [r3, #24]
      break;
 8002cf0:	e043      	b.n	8002d7a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	0011      	movs	r1, r2
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 fa00 	bl	8003100 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2108      	movs	r1, #8
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2104      	movs	r1, #4
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69d9      	ldr	r1, [r3, #28]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	61da      	str	r2, [r3, #28]
      break;
 8002d32:	e022      	b.n	8002d7a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 fa65 	bl	800320c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	0109      	lsls	r1, r1, #4
 8002d50:	430a      	orrs	r2, r1
 8002d52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69da      	ldr	r2, [r3, #28]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	490d      	ldr	r1, [pc, #52]	; (8002d94 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002d60:	400a      	ands	r2, r1
 8002d62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69d9      	ldr	r1, [r3, #28]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	021a      	lsls	r2, r3, #8
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	61da      	str	r2, [r3, #28]
      break;
 8002d78:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	223d      	movs	r2, #61	; 0x3d
 8002d7e:	2101      	movs	r1, #1
 8002d80:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	223c      	movs	r2, #60	; 0x3c
 8002d86:	2100      	movs	r1, #0
 8002d88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b004      	add	sp, #16
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	fffffbff 	.word	0xfffffbff

08002d98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b002      	add	sp, #8
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b002      	add	sp, #8
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b002      	add	sp, #8
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a34      	ldr	r2, [pc, #208]	; (8002ecc <TIM_Base_SetConfig+0xe4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d008      	beq.n	8002e12 <TIM_Base_SetConfig+0x2a>
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	05db      	lsls	r3, r3, #23
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d003      	beq.n	8002e12 <TIM_Base_SetConfig+0x2a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a30      	ldr	r2, [pc, #192]	; (8002ed0 <TIM_Base_SetConfig+0xe8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d108      	bne.n	8002e24 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2270      	movs	r2, #112	; 0x70
 8002e16:	4393      	bics	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <TIM_Base_SetConfig+0xe4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d018      	beq.n	8002e5e <TIM_Base_SetConfig+0x76>
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	05db      	lsls	r3, r3, #23
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d013      	beq.n	8002e5e <TIM_Base_SetConfig+0x76>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a25      	ldr	r2, [pc, #148]	; (8002ed0 <TIM_Base_SetConfig+0xe8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00f      	beq.n	8002e5e <TIM_Base_SetConfig+0x76>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a24      	ldr	r2, [pc, #144]	; (8002ed4 <TIM_Base_SetConfig+0xec>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00b      	beq.n	8002e5e <TIM_Base_SetConfig+0x76>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a23      	ldr	r2, [pc, #140]	; (8002ed8 <TIM_Base_SetConfig+0xf0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d007      	beq.n	8002e5e <TIM_Base_SetConfig+0x76>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a22      	ldr	r2, [pc, #136]	; (8002edc <TIM_Base_SetConfig+0xf4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d003      	beq.n	8002e5e <TIM_Base_SetConfig+0x76>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a21      	ldr	r2, [pc, #132]	; (8002ee0 <TIM_Base_SetConfig+0xf8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d108      	bne.n	8002e70 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4a20      	ldr	r2, [pc, #128]	; (8002ee4 <TIM_Base_SetConfig+0xfc>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	4393      	bics	r3, r2
 8002e76:	001a      	movs	r2, r3
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a0c      	ldr	r2, [pc, #48]	; (8002ecc <TIM_Base_SetConfig+0xe4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00b      	beq.n	8002eb6 <TIM_Base_SetConfig+0xce>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	; (8002ed8 <TIM_Base_SetConfig+0xf0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d007      	beq.n	8002eb6 <TIM_Base_SetConfig+0xce>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <TIM_Base_SetConfig+0xf4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d003      	beq.n	8002eb6 <TIM_Base_SetConfig+0xce>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <TIM_Base_SetConfig+0xf8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d103      	bne.n	8002ebe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	615a      	str	r2, [r3, #20]
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b004      	add	sp, #16
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	40002000 	.word	0x40002000
 8002ed8:	40014000 	.word	0x40014000
 8002edc:	40014400 	.word	0x40014400
 8002ee0:	40014800 	.word	0x40014800
 8002ee4:	fffffcff 	.word	0xfffffcff

08002ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	4393      	bics	r3, r2
 8002efa:	001a      	movs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2270      	movs	r2, #112	; 0x70
 8002f16:	4393      	bics	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	4393      	bics	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	4393      	bics	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a27      	ldr	r2, [pc, #156]	; (8002fe0 <TIM_OC1_SetConfig+0xf8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00b      	beq.n	8002f5e <TIM_OC1_SetConfig+0x76>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a26      	ldr	r2, [pc, #152]	; (8002fe4 <TIM_OC1_SetConfig+0xfc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <TIM_OC1_SetConfig+0x76>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a25      	ldr	r2, [pc, #148]	; (8002fe8 <TIM_OC1_SetConfig+0x100>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <TIM_OC1_SetConfig+0x76>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a24      	ldr	r2, [pc, #144]	; (8002fec <TIM_OC1_SetConfig+0x104>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d10c      	bne.n	8002f78 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2208      	movs	r2, #8
 8002f62:	4393      	bics	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2204      	movs	r2, #4
 8002f74:	4393      	bics	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <TIM_OC1_SetConfig+0xf8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00b      	beq.n	8002f98 <TIM_OC1_SetConfig+0xb0>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <TIM_OC1_SetConfig+0xfc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <TIM_OC1_SetConfig+0xb0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <TIM_OC1_SetConfig+0x100>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_OC1_SetConfig+0xb0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a16      	ldr	r2, [pc, #88]	; (8002fec <TIM_OC1_SetConfig+0x104>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d111      	bne.n	8002fbc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <TIM_OC1_SetConfig+0x108>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <TIM_OC1_SetConfig+0x10c>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	621a      	str	r2, [r3, #32]
}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b006      	add	sp, #24
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	40012c00 	.word	0x40012c00
 8002fe4:	40014000 	.word	0x40014000
 8002fe8:	40014400 	.word	0x40014400
 8002fec:	40014800 	.word	0x40014800
 8002ff0:	fffffeff 	.word	0xfffffeff
 8002ff4:	fffffdff 	.word	0xfffffdff

08002ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	2210      	movs	r2, #16
 8003008:	4393      	bics	r3, r2
 800300a:	001a      	movs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4a2e      	ldr	r2, [pc, #184]	; (80030e0 <TIM_OC2_SetConfig+0xe8>)
 8003026:	4013      	ands	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a2d      	ldr	r2, [pc, #180]	; (80030e4 <TIM_OC2_SetConfig+0xec>)
 800302e:	4013      	ands	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2220      	movs	r2, #32
 8003042:	4393      	bics	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a24      	ldr	r2, [pc, #144]	; (80030e8 <TIM_OC2_SetConfig+0xf0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10d      	bne.n	8003076 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2280      	movs	r2, #128	; 0x80
 800305e:	4393      	bics	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2240      	movs	r2, #64	; 0x40
 8003072:	4393      	bics	r3, r2
 8003074:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <TIM_OC2_SetConfig+0xf0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00b      	beq.n	8003096 <TIM_OC2_SetConfig+0x9e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a1a      	ldr	r2, [pc, #104]	; (80030ec <TIM_OC2_SetConfig+0xf4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <TIM_OC2_SetConfig+0x9e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a19      	ldr	r2, [pc, #100]	; (80030f0 <TIM_OC2_SetConfig+0xf8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <TIM_OC2_SetConfig+0x9e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a18      	ldr	r2, [pc, #96]	; (80030f4 <TIM_OC2_SetConfig+0xfc>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d113      	bne.n	80030be <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4a17      	ldr	r2, [pc, #92]	; (80030f8 <TIM_OC2_SetConfig+0x100>)
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4a16      	ldr	r2, [pc, #88]	; (80030fc <TIM_OC2_SetConfig+0x104>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	621a      	str	r2, [r3, #32]
}
 80030d8:	46c0      	nop			; (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	b006      	add	sp, #24
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	ffff8fff 	.word	0xffff8fff
 80030e4:	fffffcff 	.word	0xfffffcff
 80030e8:	40012c00 	.word	0x40012c00
 80030ec:	40014000 	.word	0x40014000
 80030f0:	40014400 	.word	0x40014400
 80030f4:	40014800 	.word	0x40014800
 80030f8:	fffffbff 	.word	0xfffffbff
 80030fc:	fffff7ff 	.word	0xfffff7ff

08003100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4a35      	ldr	r2, [pc, #212]	; (80031e4 <TIM_OC3_SetConfig+0xe4>)
 8003110:	401a      	ands	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2270      	movs	r2, #112	; 0x70
 800312c:	4393      	bics	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2203      	movs	r2, #3
 8003134:	4393      	bics	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	4a28      	ldr	r2, [pc, #160]	; (80031e8 <TIM_OC3_SetConfig+0xe8>)
 8003146:	4013      	ands	r3, r2
 8003148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a24      	ldr	r2, [pc, #144]	; (80031ec <TIM_OC3_SetConfig+0xec>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d10d      	bne.n	800317a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <TIM_OC3_SetConfig+0xf0>)
 8003162:	4013      	ands	r3, r2
 8003164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	4a1f      	ldr	r2, [pc, #124]	; (80031f4 <TIM_OC3_SetConfig+0xf4>)
 8003176:	4013      	ands	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1b      	ldr	r2, [pc, #108]	; (80031ec <TIM_OC3_SetConfig+0xec>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00b      	beq.n	800319a <TIM_OC3_SetConfig+0x9a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <TIM_OC3_SetConfig+0xf8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <TIM_OC3_SetConfig+0x9a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <TIM_OC3_SetConfig+0xfc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d003      	beq.n	800319a <TIM_OC3_SetConfig+0x9a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <TIM_OC3_SetConfig+0x100>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d113      	bne.n	80031c2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4a19      	ldr	r2, [pc, #100]	; (8003204 <TIM_OC3_SetConfig+0x104>)
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4a18      	ldr	r2, [pc, #96]	; (8003208 <TIM_OC3_SetConfig+0x108>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	621a      	str	r2, [r3, #32]
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	b006      	add	sp, #24
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	fffffeff 	.word	0xfffffeff
 80031e8:	fffffdff 	.word	0xfffffdff
 80031ec:	40012c00 	.word	0x40012c00
 80031f0:	fffff7ff 	.word	0xfffff7ff
 80031f4:	fffffbff 	.word	0xfffffbff
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40014400 	.word	0x40014400
 8003200:	40014800 	.word	0x40014800
 8003204:	ffffefff 	.word	0xffffefff
 8003208:	ffffdfff 	.word	0xffffdfff

0800320c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a28      	ldr	r2, [pc, #160]	; (80032bc <TIM_OC4_SetConfig+0xb0>)
 800321c:	401a      	ands	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <TIM_OC4_SetConfig+0xb4>)
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <TIM_OC4_SetConfig+0xb8>)
 8003240:	4013      	ands	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4a1d      	ldr	r2, [pc, #116]	; (80032c8 <TIM_OC4_SetConfig+0xbc>)
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	031b      	lsls	r3, r3, #12
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a19      	ldr	r2, [pc, #100]	; (80032cc <TIM_OC4_SetConfig+0xc0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00b      	beq.n	8003284 <TIM_OC4_SetConfig+0x78>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <TIM_OC4_SetConfig+0xc4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d007      	beq.n	8003284 <TIM_OC4_SetConfig+0x78>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <TIM_OC4_SetConfig+0xc8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d003      	beq.n	8003284 <TIM_OC4_SetConfig+0x78>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a16      	ldr	r2, [pc, #88]	; (80032d8 <TIM_OC4_SetConfig+0xcc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d109      	bne.n	8003298 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	4a15      	ldr	r2, [pc, #84]	; (80032dc <TIM_OC4_SetConfig+0xd0>)
 8003288:	4013      	ands	r3, r2
 800328a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	019b      	lsls	r3, r3, #6
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	4313      	orrs	r3, r2
 8003296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	621a      	str	r2, [r3, #32]
}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b006      	add	sp, #24
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	ffffefff 	.word	0xffffefff
 80032c0:	ffff8fff 	.word	0xffff8fff
 80032c4:	fffffcff 	.word	0xfffffcff
 80032c8:	ffffdfff 	.word	0xffffdfff
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	40014000 	.word	0x40014000
 80032d4:	40014400 	.word	0x40014400
 80032d8:	40014800 	.word	0x40014800
 80032dc:	ffffbfff 	.word	0xffffbfff

080032e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	221f      	movs	r2, #31
 80032f0:	4013      	ands	r3, r2
 80032f2:	2201      	movs	r2, #1
 80032f4:	409a      	lsls	r2, r3
 80032f6:	0013      	movs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	43d2      	mvns	r2, r2
 8003302:	401a      	ands	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a1a      	ldr	r2, [r3, #32]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	211f      	movs	r1, #31
 8003310:	400b      	ands	r3, r1
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4099      	lsls	r1, r3
 8003316:	000b      	movs	r3, r1
 8003318:	431a      	orrs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	621a      	str	r2, [r3, #32]
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b006      	add	sp, #24
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	223c      	movs	r2, #60	; 0x3c
 8003336:	5c9b      	ldrb	r3, [r3, r2]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800333c:	2302      	movs	r3, #2
 800333e:	e047      	b.n	80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	223c      	movs	r2, #60	; 0x3c
 8003344:	2101      	movs	r1, #1
 8003346:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	223d      	movs	r2, #61	; 0x3d
 800334c:	2102      	movs	r1, #2
 800334e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2270      	movs	r2, #112	; 0x70
 8003364:	4393      	bics	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00f      	beq.n	80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	05db      	lsls	r3, r3, #23
 800338c:	429a      	cmp	r2, r3
 800338e:	d009      	beq.n	80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a11      	ldr	r2, [pc, #68]	; (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a10      	ldr	r2, [pc, #64]	; (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d10c      	bne.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2280      	movs	r2, #128	; 0x80
 80033a8:	4393      	bics	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	223d      	movs	r2, #61	; 0x3d
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	223c      	movs	r2, #60	; 0x3c
 80033ca:	2100      	movs	r1, #0
 80033cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b004      	add	sp, #16
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40014000 	.word	0x40014000

080033e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	223c      	movs	r2, #60	; 0x3c
 80033f6:	5c9b      	ldrb	r3, [r3, r2]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e03e      	b.n	800347e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	223c      	movs	r2, #60	; 0x3c
 8003404:	2101      	movs	r1, #1
 8003406:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	22ff      	movs	r2, #255	; 0xff
 800340c:	4393      	bics	r3, r2
 800340e:	001a      	movs	r2, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a1b      	ldr	r2, [pc, #108]	; (8003488 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800341c:	401a      	ands	r2, r3
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a18      	ldr	r2, [pc, #96]	; (800348c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800342a:	401a      	ands	r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4a16      	ldr	r2, [pc, #88]	; (8003490 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003438:	401a      	ands	r2, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a13      	ldr	r2, [pc, #76]	; (8003494 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003446:	401a      	ands	r2, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4a11      	ldr	r2, [pc, #68]	; (8003498 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003454:	401a      	ands	r2, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4a0e      	ldr	r2, [pc, #56]	; (800349c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003462:	401a      	ands	r2, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	223c      	movs	r2, #60	; 0x3c
 8003478:	2100      	movs	r1, #0
 800347a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	b004      	add	sp, #16
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	fffffcff 	.word	0xfffffcff
 800348c:	fffffbff 	.word	0xfffffbff
 8003490:	fffff7ff 	.word	0xfffff7ff
 8003494:	ffffefff 	.word	0xffffefff
 8003498:	ffffdfff 	.word	0xffffdfff
 800349c:	ffffbfff 	.word	0xffffbfff

080034a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b002      	add	sp, #8
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}

080034c0 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80034c0:	b5b0      	push	{r4, r5, r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	0005      	movs	r5, r0
 80034c8:	000c      	movs	r4, r1
 80034ca:	0010      	movs	r0, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	1dfb      	adds	r3, r7, #7
 80034d0:	1c2a      	adds	r2, r5, #0
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	1d3b      	adds	r3, r7, #4
 80034d6:	1c22      	adds	r2, r4, #0
 80034d8:	801a      	strh	r2, [r3, #0]
 80034da:	1cbb      	adds	r3, r7, #2
 80034dc:	1c02      	adds	r2, r0, #0
 80034de:	801a      	strh	r2, [r3, #0]
 80034e0:	003b      	movs	r3, r7
 80034e2:	1c0a      	adds	r2, r1, #0
 80034e4:	801a      	strh	r2, [r3, #0]
    uint8_t 	i,j;
		



	function_char = character;
 80034e6:	2117      	movs	r1, #23
 80034e8:	187b      	adds	r3, r7, r1
 80034ea:	1dfa      	adds	r2, r7, #7
 80034ec:	7812      	ldrb	r2, [r2, #0]
 80034ee:	701a      	strb	r2, [r3, #0]
		
    if (function_char < ' ')
 80034f0:	187b      	adds	r3, r7, r1
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b1f      	cmp	r3, #31
 80034f6:	d803      	bhi.n	8003500 <ILI9341_Draw_Char+0x40>
    {
        character = 0;
 80034f8:	1dfb      	adds	r3, r7, #7
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e005      	b.n	800350c <ILI9341_Draw_Char+0x4c>
    }
    else
    {
    	function_char -= 32;
 8003500:	2217      	movs	r2, #23
 8003502:	18bb      	adds	r3, r7, r2
 8003504:	18ba      	adds	r2, r7, r2
 8003506:	7812      	ldrb	r2, [r2, #0]
 8003508:	3a20      	subs	r2, #32
 800350a:	701a      	strb	r2, [r3, #0]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800350c:	2314      	movs	r3, #20
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	e016      	b.n	8003544 <ILI9341_Draw_Char+0x84>
	{
		temp[k] = font[function_char][k];
 8003516:	2317      	movs	r3, #23
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	781a      	ldrb	r2, [r3, #0]
 800351c:	2514      	movs	r5, #20
 800351e:	197b      	adds	r3, r7, r5
 8003520:	7818      	ldrb	r0, [r3, #0]
 8003522:	197b      	adds	r3, r7, r5
 8003524:	7819      	ldrb	r1, [r3, #0]
 8003526:	4c69      	ldr	r4, [pc, #420]	; (80036cc <ILI9341_Draw_Char+0x20c>)
 8003528:	0013      	movs	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	189b      	adds	r3, r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	18e3      	adds	r3, r4, r3
 8003532:	5c1a      	ldrb	r2, [r3, r0]
 8003534:	230c      	movs	r3, #12
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	545a      	strb	r2, [r3, r1]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800353a:	197b      	adds	r3, r7, r5
 800353c:	781a      	ldrb	r2, [r3, #0]
 800353e:	197b      	adds	r3, r7, r5
 8003540:	3201      	adds	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	2314      	movs	r3, #20
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b05      	cmp	r3, #5
 800354c:	d9e3      	bls.n	8003516 <ILI9341_Draw_Char+0x56>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800354e:	2315      	movs	r3, #21
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e0ae      	b.n	80036b6 <ILI9341_Draw_Char+0x1f6>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8003558:	2316      	movs	r3, #22
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	e09d      	b.n	800369e <ILI9341_Draw_Char+0x1de>
        {
            if (temp[j] & (1<<i))
 8003562:	2315      	movs	r3, #21
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	220c      	movs	r2, #12
 800356a:	18ba      	adds	r2, r7, r2
 800356c:	5cd3      	ldrb	r3, [r2, r3]
 800356e:	001a      	movs	r2, r3
 8003570:	2316      	movs	r3, #22
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	411a      	asrs	r2, r3
 8003578:	0013      	movs	r3, r2
 800357a:	2201      	movs	r2, #1
 800357c:	4013      	ands	r3, r2
 800357e:	d043      	beq.n	8003608 <ILI9341_Draw_Char+0x148>
            {
            	if(size == 1)
 8003580:	2328      	movs	r3, #40	; 0x28
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d115      	bne.n	80035b6 <ILI9341_Draw_Char+0xf6>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800358a:	2315      	movs	r3, #21
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	b29a      	uxth	r2, r3
 8003592:	1d3b      	adds	r3, r7, #4
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	18d3      	adds	r3, r2, r3
 8003598:	b298      	uxth	r0, r3
 800359a:	2316      	movs	r3, #22
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	1cbb      	adds	r3, r7, #2
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	18d3      	adds	r3, r2, r3
 80035a8:	b299      	uxth	r1, r3
 80035aa:	003b      	movs	r3, r7
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	001a      	movs	r2, r3
 80035b0:	f000 fb32 	bl	8003c18 <ILI9341_Draw_Pixel>
 80035b4:	e06d      	b.n	8003692 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 80035b6:	2315      	movs	r3, #21
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2128      	movs	r1, #40	; 0x28
 80035c0:	187a      	adds	r2, r7, r1
 80035c2:	8812      	ldrh	r2, [r2, #0]
 80035c4:	4353      	muls	r3, r2
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	1d3b      	adds	r3, r7, #4
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	18d3      	adds	r3, r2, r3
 80035ce:	b298      	uxth	r0, r3
 80035d0:	2316      	movs	r3, #22
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	000c      	movs	r4, r1
 80035da:	187a      	adds	r2, r7, r1
 80035dc:	8812      	ldrh	r2, [r2, #0]
 80035de:	4353      	muls	r3, r2
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	1cbb      	adds	r3, r7, #2
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	18d3      	adds	r3, r2, r3
 80035e8:	b299      	uxth	r1, r3
 80035ea:	0022      	movs	r2, r4
 80035ec:	193b      	adds	r3, r7, r4
 80035ee:	881c      	ldrh	r4, [r3, #0]
 80035f0:	0013      	movs	r3, r2
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	881a      	ldrh	r2, [r3, #0]
 80035f6:	2301      	movs	r3, #1
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	003b      	movs	r3, r7
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	0023      	movs	r3, r4
 8003602:	f000 fcad 	bl	8003f60 <ILI9341_Draw_Rectangle>
 8003606:	e044      	b.n	8003692 <ILI9341_Draw_Char+0x1d2>
				}
            }
            else
            {
               	if(size == 1)
 8003608:	2328      	movs	r3, #40	; 0x28
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d116      	bne.n	8003640 <ILI9341_Draw_Char+0x180>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8003612:	2315      	movs	r3, #21
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	b29a      	uxth	r2, r3
 800361a:	1d3b      	adds	r3, r7, #4
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	18d3      	adds	r3, r2, r3
 8003620:	b298      	uxth	r0, r3
 8003622:	2316      	movs	r3, #22
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	b29a      	uxth	r2, r3
 800362a:	1cbb      	adds	r3, r7, #2
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	18d3      	adds	r3, r2, r3
 8003630:	b299      	uxth	r1, r3
 8003632:	232c      	movs	r3, #44	; 0x2c
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	001a      	movs	r2, r3
 800363a:	f000 faed 	bl	8003c18 <ILI9341_Draw_Pixel>
 800363e:	e028      	b.n	8003692 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8003640:	2315      	movs	r3, #21
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	2128      	movs	r1, #40	; 0x28
 800364a:	187a      	adds	r2, r7, r1
 800364c:	8812      	ldrh	r2, [r2, #0]
 800364e:	4353      	muls	r3, r2
 8003650:	b29a      	uxth	r2, r3
 8003652:	1d3b      	adds	r3, r7, #4
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	18d3      	adds	r3, r2, r3
 8003658:	b298      	uxth	r0, r3
 800365a:	2316      	movs	r3, #22
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	000c      	movs	r4, r1
 8003664:	187a      	adds	r2, r7, r1
 8003666:	8812      	ldrh	r2, [r2, #0]
 8003668:	4353      	muls	r3, r2
 800366a:	b29a      	uxth	r2, r3
 800366c:	1cbb      	adds	r3, r7, #2
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	18d3      	adds	r3, r2, r3
 8003672:	b299      	uxth	r1, r3
 8003674:	0022      	movs	r2, r4
 8003676:	193b      	adds	r3, r7, r4
 8003678:	881c      	ldrh	r4, [r3, #0]
 800367a:	0013      	movs	r3, r2
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	881a      	ldrh	r2, [r3, #0]
 8003680:	2301      	movs	r3, #1
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	232c      	movs	r3, #44	; 0x2c
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	0023      	movs	r3, r4
 800368e:	f000 fc67 	bl	8003f60 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8003692:	2116      	movs	r1, #22
 8003694:	187b      	adds	r3, r7, r1
 8003696:	781a      	ldrb	r2, [r3, #0]
 8003698:	187b      	adds	r3, r7, r1
 800369a:	3201      	adds	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b07      	cmp	r3, #7
 80036a6:	d800      	bhi.n	80036aa <ILI9341_Draw_Char+0x1ea>
 80036a8:	e75b      	b.n	8003562 <ILI9341_Draw_Char+0xa2>
    for (j=0; j<CHAR_WIDTH; j++)
 80036aa:	2115      	movs	r1, #21
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	781a      	ldrb	r2, [r3, #0]
 80036b0:	187b      	adds	r3, r7, r1
 80036b2:	3201      	adds	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	2315      	movs	r3, #21
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b05      	cmp	r3, #5
 80036be:	d800      	bhi.n	80036c2 <ILI9341_Draw_Char+0x202>
 80036c0:	e74a      	b.n	8003558 <ILI9341_Draw_Char+0x98>
				}
            }
        }
    }
}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b006      	add	sp, #24
 80036c8:	bdb0      	pop	{r4, r5, r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	08004ee4 	.word	0x08004ee4

080036d0 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80036d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	000c      	movs	r4, r1
 80036da:	0010      	movs	r0, r2
 80036dc:	0019      	movs	r1, r3
 80036de:	250a      	movs	r5, #10
 80036e0:	197b      	adds	r3, r7, r5
 80036e2:	1c22      	adds	r2, r4, #0
 80036e4:	801a      	strh	r2, [r3, #0]
 80036e6:	2608      	movs	r6, #8
 80036e8:	19bb      	adds	r3, r7, r6
 80036ea:	1c02      	adds	r2, r0, #0
 80036ec:	801a      	strh	r2, [r3, #0]
 80036ee:	1dbb      	adds	r3, r7, #6
 80036f0:	1c0a      	adds	r2, r1, #0
 80036f2:	801a      	strh	r2, [r3, #0]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 80036f4:	197b      	adds	r3, r7, r5
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b298      	uxth	r0, r3
 80036fc:	2320      	movs	r3, #32
 80036fe:	2208      	movs	r2, #8
 8003700:	4694      	mov	ip, r2
 8003702:	44bc      	add	ip, r7
 8003704:	4463      	add	r3, ip
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	b29a      	uxth	r2, r3
 800370c:	2124      	movs	r1, #36	; 0x24
 800370e:	2308      	movs	r3, #8
 8003710:	18fc      	adds	r4, r7, r3
 8003712:	1863      	adds	r3, r4, r1
 8003714:	881c      	ldrh	r4, [r3, #0]
 8003716:	19bb      	adds	r3, r7, r6
 8003718:	8819      	ldrh	r1, [r3, #0]
 800371a:	0023      	movs	r3, r4
 800371c:	f000 f974 	bl	8003a08 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 8003720:	197b      	adds	r3, r7, r5
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	3b02      	subs	r3, #2
 8003726:	b298      	uxth	r0, r3
 8003728:	2320      	movs	r3, #32
 800372a:	2208      	movs	r2, #8
 800372c:	4694      	mov	ip, r2
 800372e:	44bc      	add	ip, r7
 8003730:	4463      	add	r3, ip
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	b29a      	uxth	r2, r3
 8003738:	2124      	movs	r1, #36	; 0x24
 800373a:	2308      	movs	r3, #8
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	185b      	adds	r3, r3, r1
 8003740:	881c      	ldrh	r4, [r3, #0]
 8003742:	19bb      	adds	r3, r7, r6
 8003744:	8819      	ldrh	r1, [r3, #0]
 8003746:	0023      	movs	r3, r4
 8003748:	f000 f95e 	bl	8003a08 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800374c:	e029      	b.n	80037a2 <ILI9341_Draw_Text+0xd2>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	60fa      	str	r2, [r7, #12]
 8003754:	7818      	ldrb	r0, [r3, #0]
 8003756:	1dbb      	adds	r3, r7, #6
 8003758:	881c      	ldrh	r4, [r3, #0]
 800375a:	2308      	movs	r3, #8
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	881a      	ldrh	r2, [r3, #0]
 8003760:	250a      	movs	r5, #10
 8003762:	197b      	adds	r3, r7, r5
 8003764:	8819      	ldrh	r1, [r3, #0]
 8003766:	2324      	movs	r3, #36	; 0x24
 8003768:	2608      	movs	r6, #8
 800376a:	46b4      	mov	ip, r6
 800376c:	44bc      	add	ip, r7
 800376e:	4463      	add	r3, ip
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	2620      	movs	r6, #32
 8003776:	2308      	movs	r3, #8
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	199b      	adds	r3, r3, r6
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	0023      	movs	r3, r4
 8003782:	f7ff fe9d 	bl	80034c0 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8003786:	2308      	movs	r3, #8
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	199b      	adds	r3, r3, r6
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	1c1a      	adds	r2, r3, #0
 8003790:	1892      	adds	r2, r2, r2
 8003792:	18d3      	adds	r3, r2, r3
 8003794:	18db      	adds	r3, r3, r3
 8003796:	b299      	uxth	r1, r3
 8003798:	197b      	adds	r3, r7, r5
 800379a:	197a      	adds	r2, r7, r5
 800379c:	8812      	ldrh	r2, [r2, #0]
 800379e:	188a      	adds	r2, r1, r2
 80037a0:	801a      	strh	r2, [r3, #0]
    while (*Text) {
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1d1      	bne.n	800374e <ILI9341_Draw_Text+0x7e>
    }


}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b005      	add	sp, #20
 80037b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037b2 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	af00      	add	r7, sp, #0

	_LCD_Enable();
 80037b6:	f000 fcf1 	bl	800419c <_LCD_Enable>
	ILI9341_SPI_Init();
 80037ba:	f000 f909 	bl	80039d0 <ILI9341_SPI_Init>
	_LCD_Reset();
 80037be:	f000 fcfb 	bl	80041b8 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 80037c2:	2001      	movs	r0, #1
 80037c4:	f000 fdfe 	bl	80043c4 <_LCD_SendCommand>
	HAL_Delay(2000);
 80037c8:	23fa      	movs	r3, #250	; 0xfa
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7fd ffd3 	bl	8001778 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 80037d2:	20cb      	movs	r0, #203	; 0xcb
 80037d4:	f000 fdf6 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 80037d8:	2039      	movs	r0, #57	; 0x39
 80037da:	f000 fe2d 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x2C);
 80037de:	202c      	movs	r0, #44	; 0x2c
 80037e0:	f000 fe2a 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x00);
 80037e4:	2000      	movs	r0, #0
 80037e6:	f000 fe27 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x34);
 80037ea:	2034      	movs	r0, #52	; 0x34
 80037ec:	f000 fe24 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x02);
 80037f0:	2002      	movs	r0, #2
 80037f2:	f000 fe21 	bl	8004438 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 80037f6:	20cf      	movs	r0, #207	; 0xcf
 80037f8:	f000 fde4 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80037fc:	2000      	movs	r0, #0
 80037fe:	f000 fe1b 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8003802:	20c1      	movs	r0, #193	; 0xc1
 8003804:	f000 fe18 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x30);
 8003808:	2030      	movs	r0, #48	; 0x30
 800380a:	f000 fe15 	bl	8004438 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800380e:	20e8      	movs	r0, #232	; 0xe8
 8003810:	f000 fdd8 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8003814:	2085      	movs	r0, #133	; 0x85
 8003816:	f000 fe0f 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x00);
 800381a:	2000      	movs	r0, #0
 800381c:	f000 fe0c 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x78);
 8003820:	2078      	movs	r0, #120	; 0x78
 8003822:	f000 fe09 	bl	8004438 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 8003826:	20ea      	movs	r0, #234	; 0xea
 8003828:	f000 fdcc 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800382c:	2000      	movs	r0, #0
 800382e:	f000 fe03 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x00);
 8003832:	2000      	movs	r0, #0
 8003834:	f000 fe00 	bl	8004438 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 8003838:	20ed      	movs	r0, #237	; 0xed
 800383a:	f000 fdc3 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800383e:	2064      	movs	r0, #100	; 0x64
 8003840:	f000 fdfa 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x03);
 8003844:	2003      	movs	r0, #3
 8003846:	f000 fdf7 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x12);
 800384a:	2012      	movs	r0, #18
 800384c:	f000 fdf4 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x81);
 8003850:	2081      	movs	r0, #129	; 0x81
 8003852:	f000 fdf1 	bl	8004438 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 8003856:	20f7      	movs	r0, #247	; 0xf7
 8003858:	f000 fdb4 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800385c:	2020      	movs	r0, #32
 800385e:	f000 fdeb 	bl	8004438 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8003862:	20c0      	movs	r0, #192	; 0xc0
 8003864:	f000 fdae 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 8003868:	2023      	movs	r0, #35	; 0x23
 800386a:	f000 fde5 	bl	8004438 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800386e:	20c1      	movs	r0, #193	; 0xc1
 8003870:	f000 fda8 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8003874:	2010      	movs	r0, #16
 8003876:	f000 fddf 	bl	8004438 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800387a:	20c5      	movs	r0, #197	; 0xc5
 800387c:	f000 fda2 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 8003880:	203e      	movs	r0, #62	; 0x3e
 8003882:	f000 fdd9 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x28);
 8003886:	2028      	movs	r0, #40	; 0x28
 8003888:	f000 fdd6 	bl	8004438 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800388c:	20c7      	movs	r0, #199	; 0xc7
 800388e:	f000 fd99 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 8003892:	2086      	movs	r0, #134	; 0x86
 8003894:	f000 fdd0 	bl	8004438 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 8003898:	2036      	movs	r0, #54	; 0x36
 800389a:	f000 fd93 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800389e:	2048      	movs	r0, #72	; 0x48
 80038a0:	f000 fdca 	bl	8004438 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 80038a4:	203a      	movs	r0, #58	; 0x3a
 80038a6:	f000 fd8d 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 80038aa:	2055      	movs	r0, #85	; 0x55
 80038ac:	f000 fdc4 	bl	8004438 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 80038b0:	20b1      	movs	r0, #177	; 0xb1
 80038b2:	f000 fd87 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80038b6:	2000      	movs	r0, #0
 80038b8:	f000 fdbe 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x18);
 80038bc:	2018      	movs	r0, #24
 80038be:	f000 fdbb 	bl	8004438 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 80038c2:	20b6      	movs	r0, #182	; 0xb6
 80038c4:	f000 fd7e 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 80038c8:	2008      	movs	r0, #8
 80038ca:	f000 fdb5 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x82);
 80038ce:	2082      	movs	r0, #130	; 0x82
 80038d0:	f000 fdb2 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x27);
 80038d4:	2027      	movs	r0, #39	; 0x27
 80038d6:	f000 fdaf 	bl	8004438 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 80038da:	20f2      	movs	r0, #242	; 0xf2
 80038dc:	f000 fd72 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80038e0:	2000      	movs	r0, #0
 80038e2:	f000 fda9 	bl	8004438 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 80038e6:	2026      	movs	r0, #38	; 0x26
 80038e8:	f000 fd6c 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 80038ec:	2001      	movs	r0, #1
 80038ee:	f000 fda3 	bl	8004438 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 80038f2:	20e0      	movs	r0, #224	; 0xe0
 80038f4:	f000 fd66 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 80038f8:	200f      	movs	r0, #15
 80038fa:	f000 fd9d 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x31);
 80038fe:	2031      	movs	r0, #49	; 0x31
 8003900:	f000 fd9a 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8003904:	202b      	movs	r0, #43	; 0x2b
 8003906:	f000 fd97 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800390a:	200c      	movs	r0, #12
 800390c:	f000 fd94 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8003910:	200e      	movs	r0, #14
 8003912:	f000 fd91 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x08);
 8003916:	2008      	movs	r0, #8
 8003918:	f000 fd8e 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800391c:	204e      	movs	r0, #78	; 0x4e
 800391e:	f000 fd8b 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0xF1);
 8003922:	20f1      	movs	r0, #241	; 0xf1
 8003924:	f000 fd88 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x37);
 8003928:	2037      	movs	r0, #55	; 0x37
 800392a:	f000 fd85 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x07);
 800392e:	2007      	movs	r0, #7
 8003930:	f000 fd82 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x10);
 8003934:	2010      	movs	r0, #16
 8003936:	f000 fd7f 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x03);
 800393a:	2003      	movs	r0, #3
 800393c:	f000 fd7c 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8003940:	200e      	movs	r0, #14
 8003942:	f000 fd79 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x09);
 8003946:	2009      	movs	r0, #9
 8003948:	f000 fd76 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x00);
 800394c:	2000      	movs	r0, #0
 800394e:	f000 fd73 	bl	8004438 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8003952:	20e1      	movs	r0, #225	; 0xe1
 8003954:	f000 fd36 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8003958:	2000      	movs	r0, #0
 800395a:	f000 fd6d 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800395e:	200e      	movs	r0, #14
 8003960:	f000 fd6a 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x14);
 8003964:	2014      	movs	r0, #20
 8003966:	f000 fd67 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x03);
 800396a:	2003      	movs	r0, #3
 800396c:	f000 fd64 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x11);
 8003970:	2011      	movs	r0, #17
 8003972:	f000 fd61 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x07);
 8003976:	2007      	movs	r0, #7
 8003978:	f000 fd5e 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x31);
 800397c:	2031      	movs	r0, #49	; 0x31
 800397e:	f000 fd5b 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8003982:	20c1      	movs	r0, #193	; 0xc1
 8003984:	f000 fd58 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x48);
 8003988:	2048      	movs	r0, #72	; 0x48
 800398a:	f000 fd55 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x08);
 800398e:	2008      	movs	r0, #8
 8003990:	f000 fd52 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8003994:	200f      	movs	r0, #15
 8003996:	f000 fd4f 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800399a:	200c      	movs	r0, #12
 800399c:	f000 fd4c 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x31);
 80039a0:	2031      	movs	r0, #49	; 0x31
 80039a2:	f000 fd49 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x36);
 80039a6:	2036      	movs	r0, #54	; 0x36
 80039a8:	f000 fd46 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(0x0F);
 80039ac:	200f      	movs	r0, #15
 80039ae:	f000 fd43 	bl	8004438 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 80039b2:	2011      	movs	r0, #17
 80039b4:	f000 fd06 	bl	80043c4 <_LCD_SendCommand>
	HAL_Delay(240);
 80039b8:	20f0      	movs	r0, #240	; 0xf0
 80039ba:	f7fd fedd 	bl	8001778 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 80039be:	2029      	movs	r0, #41	; 0x29
 80039c0:	f000 fd00 	bl	80043c4 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80039c4:	2000      	movs	r0, #0
 80039c6:	f000 fb99 	bl	80040fc <ILI9341_Set_Rotation>
}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <ILI9341_SPI_Init+0x34>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2240      	movs	r2, #64	; 0x40
 80039da:	4013      	ands	r3, r2
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	d005      	beq.n	80039ec <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <ILI9341_SPI_Init+0x34>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <ILI9341_SPI_Init+0x34>)
 80039e6:	2140      	movs	r1, #64	; 0x40
 80039e8:	430a      	orrs	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80039ec:	2390      	movs	r3, #144	; 0x90
 80039ee:	05db      	lsls	r3, r3, #23
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	2390      	movs	r3, #144	; 0x90
 80039f4:	05db      	lsls	r3, r3, #23
 80039f6:	2108      	movs	r1, #8
 80039f8:	438a      	bics	r2, r1
 80039fa:	615a      	str	r2, [r3, #20]
}
 80039fc:	46c0      	nop			; (mov r8, r8)
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	40013000 	.word	0x40013000

08003a08 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8003a08:	b5b0      	push	{r4, r5, r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	0005      	movs	r5, r0
 8003a10:	000c      	movs	r4, r1
 8003a12:	0010      	movs	r0, r2
 8003a14:	0019      	movs	r1, r3
 8003a16:	1dbb      	adds	r3, r7, #6
 8003a18:	1c2a      	adds	r2, r5, #0
 8003a1a:	801a      	strh	r2, [r3, #0]
 8003a1c:	1d3b      	adds	r3, r7, #4
 8003a1e:	1c22      	adds	r2, r4, #0
 8003a20:	801a      	strh	r2, [r3, #0]
 8003a22:	1cbb      	adds	r3, r7, #2
 8003a24:	1c02      	adds	r2, r0, #0
 8003a26:	801a      	strh	r2, [r3, #0]
 8003a28:	003b      	movs	r3, r7
 8003a2a:	1c0a      	adds	r2, r1, #0
 8003a2c:	801a      	strh	r2, [r3, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8003a2e:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <ILI9341_Draw_Vertical_Line+0x104>)
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	1dba      	adds	r2, r7, #6
 8003a36:	8812      	ldrh	r2, [r2, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d300      	bcc.n	8003a3e <ILI9341_Draw_Vertical_Line+0x36>
 8003a3c:	e062      	b.n	8003b04 <ILI9341_Draw_Vertical_Line+0xfc>
 8003a3e:	4b34      	ldr	r3, [pc, #208]	; (8003b10 <ILI9341_Draw_Vertical_Line+0x108>)
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	1d3a      	adds	r2, r7, #4
 8003a46:	8812      	ldrh	r2, [r2, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d25b      	bcs.n	8003b04 <ILI9341_Draw_Vertical_Line+0xfc>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8003a4c:	1d3b      	adds	r3, r7, #4
 8003a4e:	881a      	ldrh	r2, [r3, #0]
 8003a50:	1cbb      	adds	r3, r7, #2
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	18d3      	adds	r3, r2, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	4a2d      	ldr	r2, [pc, #180]	; (8003b10 <ILI9341_Draw_Vertical_Line+0x108>)
 8003a5a:	8812      	ldrh	r2, [r2, #0]
 8003a5c:	b292      	uxth	r2, r2
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	db07      	blt.n	8003a72 <ILI9341_Draw_Vertical_Line+0x6a>
	{
		height= LCD_HEIGHT - ypos;
 8003a62:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <ILI9341_Draw_Vertical_Line+0x108>)
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b299      	uxth	r1, r3
 8003a68:	1cbb      	adds	r3, r7, #2
 8003a6a:	1d3a      	adds	r2, r7, #4
 8003a6c:	8812      	ldrh	r2, [r2, #0]
 8003a6e:	1a8a      	subs	r2, r1, r2
 8003a70:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8003a72:	1d3a      	adds	r2, r7, #4
 8003a74:	1cbb      	adds	r3, r7, #2
 8003a76:	8812      	ldrh	r2, [r2, #0]
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	18d3      	adds	r3, r2, r3
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29c      	uxth	r4, r3
 8003a82:	1dbb      	adds	r3, r7, #6
 8003a84:	881a      	ldrh	r2, [r3, #0]
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	8819      	ldrh	r1, [r3, #0]
 8003a8a:	1dbb      	adds	r3, r7, #6
 8003a8c:	8818      	ldrh	r0, [r3, #0]
 8003a8e:	0023      	movs	r3, r4
 8003a90:	f000 f840 	bl	8003b14 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8003a94:	230f      	movs	r3, #15
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8003a9c:	1cbb      	adds	r3, r7, #2
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d00e      	beq.n	8003ac4 <ILI9341_Draw_Vertical_Line+0xbc>
 8003aa6:	1cbb      	adds	r3, r7, #2
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d90a      	bls.n	8003ac4 <ILI9341_Draw_Vertical_Line+0xbc>
	{
		truncated = 1;
 8003aae:	230f      	movs	r3, #15
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	701a      	strb	r2, [r3, #0]
		height = ((height >> 1) * 2);
 8003ab6:	1cbb      	adds	r3, r7, #2
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	1cba      	adds	r2, r7, #2
 8003ac0:	18db      	adds	r3, r3, r3
 8003ac2:	8013      	strh	r3, [r2, #0]
//TODO


	//

	if(truncated)
 8003ac4:	230f      	movs	r3, #15
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00c      	beq.n	8003ae8 <ILI9341_Draw_Vertical_Line+0xe0>
	{
		ILI9341_Draw_Pixel(	(xpos),
 8003ace:	1d3a      	adds	r2, r7, #4
 8003ad0:	1cbb      	adds	r3, r7, #2
 8003ad2:	8812      	ldrh	r2, [r2, #0]
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	18d3      	adds	r3, r2, r3
 8003ad8:	b299      	uxth	r1, r3
 8003ada:	003b      	movs	r3, r7
 8003adc:	881a      	ldrh	r2, [r3, #0]
 8003ade:	1dbb      	adds	r3, r7, #6
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 f898 	bl	8003c18 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8003ae8:	1cbb      	adds	r3, r7, #2
 8003aea:	881c      	ldrh	r4, [r3, #0]
 8003aec:	003b      	movs	r3, r7
 8003aee:	881a      	ldrh	r2, [r3, #0]
 8003af0:	1d3b      	adds	r3, r7, #4
 8003af2:	8819      	ldrh	r1, [r3, #0]
 8003af4:	1dbb      	adds	r3, r7, #6
 8003af6:	8818      	ldrh	r0, [r3, #0]
 8003af8:	2303      	movs	r3, #3
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	0023      	movs	r3, r4
 8003afe:	f000 fb7d 	bl	80041fc <_LCD_Write_Frame>
 8003b02:	e000      	b.n	8003b06 <ILI9341_Draw_Vertical_Line+0xfe>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8003b04:	46c0      	nop			; (mov r8, r8)
}
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b004      	add	sp, #16
 8003b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b0c:	20000010 	.word	0x20000010
 8003b10:	2000000e 	.word	0x2000000e

08003b14 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8003b14:	b5b0      	push	{r4, r5, r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	0005      	movs	r5, r0
 8003b1c:	000c      	movs	r4, r1
 8003b1e:	0010      	movs	r0, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	1dbb      	adds	r3, r7, #6
 8003b24:	1c2a      	adds	r2, r5, #0
 8003b26:	801a      	strh	r2, [r3, #0]
 8003b28:	1d3b      	adds	r3, r7, #4
 8003b2a:	1c22      	adds	r2, r4, #0
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	1cbb      	adds	r3, r7, #2
 8003b30:	1c02      	adds	r2, r0, #0
 8003b32:	801a      	strh	r2, [r3, #0]
 8003b34:	003b      	movs	r3, r7
 8003b36:	1c0a      	adds	r2, r1, #0
 8003b38:	801a      	strh	r2, [r3, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 8003b3a:	202a      	movs	r0, #42	; 0x2a
 8003b3c:	f000 fc42 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8003b40:	1dbb      	adds	r3, r7, #6
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	0a1b      	lsrs	r3, r3, #8
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f000 fc74 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(sc);
 8003b50:	1dbb      	adds	r3, r7, #6
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 fc6e 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8003b5c:	1cbb      	adds	r3, r7, #2
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	0a1b      	lsrs	r3, r3, #8
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	0018      	movs	r0, r3
 8003b68:	f000 fc66 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(ec);
 8003b6c:	1cbb      	adds	r3, r7, #2
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	0018      	movs	r0, r3
 8003b74:	f000 fc60 	bl	8004438 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 8003b78:	202b      	movs	r0, #43	; 0x2b
 8003b7a:	f000 fc23 	bl	80043c4 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 8003b7e:	1d3b      	adds	r3, r7, #4
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 fc55 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(sp);
 8003b8e:	1d3b      	adds	r3, r7, #4
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	0018      	movs	r0, r3
 8003b96:	f000 fc4f 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 8003b9a:	003b      	movs	r3, r7
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f000 fc47 	bl	8004438 <_LCD_SendData>
	_LCD_SendData(ep);
 8003baa:	003b      	movs	r3, r7
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f000 fc41 	bl	8004438 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 8003bb6:	202c      	movs	r0, #44	; 0x2c
 8003bb8:	f000 fc04 	bl	80043c4 <_LCD_SendCommand>
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bdb0      	pop	{r4, r5, r7, pc}

08003bc4 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	0002      	movs	r2, r0
 8003bcc:	1dbb      	adds	r3, r7, #6
 8003bce:	801a      	strh	r2, [r3, #0]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <ILI9341_Fill_Screen+0x4c>)
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <ILI9341_Fill_Screen+0x50>)
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2100      	movs	r1, #0
 8003bde:	2000      	movs	r0, #0
 8003be0:	f7ff ff98 	bl	8003b14 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <ILI9341_Fill_Screen+0x4c>)
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	001a      	movs	r2, r3
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <ILI9341_Fill_Screen+0x50>)
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	4353      	muls	r3, r2
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	1dbb      	adds	r3, r7, #6
 8003bf8:	881a      	ldrh	r2, [r3, #0]
 8003bfa:	2304      	movs	r3, #4
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	000b      	movs	r3, r1
 8003c00:	2100      	movs	r1, #0
 8003c02:	2000      	movs	r0, #0
 8003c04:	f000 fafa 	bl	80041fc <_LCD_Write_Frame>
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b002      	add	sp, #8
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000010 	.word	0x20000010
 8003c14:	2000000e 	.word	0x2000000e

08003c18 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b08f      	sub	sp, #60	; 0x3c
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	0004      	movs	r4, r0
 8003c20:	0008      	movs	r0, r1
 8003c22:	0011      	movs	r1, r2
 8003c24:	1dbb      	adds	r3, r7, #6
 8003c26:	1c22      	adds	r2, r4, #0
 8003c28:	801a      	strh	r2, [r3, #0]
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	1c02      	adds	r2, r0, #0
 8003c2e:	801a      	strh	r2, [r3, #0]
 8003c30:	1cbb      	adds	r3, r7, #2
 8003c32:	1c0a      	adds	r2, r1, #0
 8003c34:	801a      	strh	r2, [r3, #0]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003c36:	4bc8      	ldr	r3, [pc, #800]	; (8003f58 <ILI9341_Draw_Pixel+0x340>)
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	1dba      	adds	r2, r7, #6
 8003c3e:	8812      	ldrh	r2, [r2, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d300      	bcc.n	8003c46 <ILI9341_Draw_Pixel+0x2e>
 8003c44:	e184      	b.n	8003f50 <ILI9341_Draw_Pixel+0x338>
 8003c46:	4bc5      	ldr	r3, [pc, #788]	; (8003f5c <ILI9341_Draw_Pixel+0x344>)
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	1d3a      	adds	r2, r7, #4
 8003c4e:	8812      	ldrh	r2, [r2, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d300      	bcc.n	8003c56 <ILI9341_Draw_Pixel+0x3e>
 8003c54:	e17c      	b.n	8003f50 <ILI9341_Draw_Pixel+0x338>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8003c56:	2390      	movs	r3, #144	; 0x90
 8003c58:	05db      	lsls	r3, r3, #23
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	2390      	movs	r3, #144	; 0x90
 8003c5e:	05db      	lsls	r3, r3, #23
 8003c60:	2110      	movs	r1, #16
 8003c62:	438a      	bics	r2, r1
 8003c64:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003c66:	2390      	movs	r3, #144	; 0x90
 8003c68:	05db      	lsls	r3, r3, #23
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	2390      	movs	r3, #144	; 0x90
 8003c6e:	05db      	lsls	r3, r3, #23
 8003c70:	2108      	movs	r1, #8
 8003c72:	438a      	bics	r2, r1
 8003c74:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8003c76:	220a      	movs	r2, #10
 8003c78:	2100      	movs	r1, #0
 8003c7a:	202a      	movs	r0, #42	; 0x2a
 8003c7c:	f000 fc16 	bl	80044ac <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003c80:	2300      	movs	r3, #0
 8003c82:	637b      	str	r3, [r7, #52]	; 0x34
 8003c84:	e00a      	b.n	8003c9c <ILI9341_Draw_Pixel+0x84>
 8003c86:	2390      	movs	r3, #144	; 0x90
 8003c88:	05db      	lsls	r3, r3, #23
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	2390      	movs	r3, #144	; 0x90
 8003c8e:	05db      	lsls	r3, r3, #23
 8003c90:	2108      	movs	r1, #8
 8003c92:	438a      	bics	r2, r1
 8003c94:	615a      	str	r2, [r3, #20]
 8003c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c98:	3301      	adds	r3, #1
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	ddf1      	ble.n	8003c86 <ILI9341_Draw_Pixel+0x6e>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8003ca2:	2390      	movs	r3, #144	; 0x90
 8003ca4:	05db      	lsls	r3, r3, #23
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	2390      	movs	r3, #144	; 0x90
 8003caa:	05db      	lsls	r3, r3, #23
 8003cac:	2110      	movs	r1, #16
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003cb2:	2390      	movs	r3, #144	; 0x90
 8003cb4:	05db      	lsls	r3, r3, #23
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	2390      	movs	r3, #144	; 0x90
 8003cba:	05db      	lsls	r3, r3, #23
 8003cbc:	2108      	movs	r1, #8
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	615a      	str	r2, [r3, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003cc2:	2390      	movs	r3, #144	; 0x90
 8003cc4:	05db      	lsls	r3, r3, #23
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	2390      	movs	r3, #144	; 0x90
 8003cca:	05db      	lsls	r3, r3, #23
 8003ccc:	2108      	movs	r1, #8
 8003cce:	438a      	bics	r2, r1
 8003cd0:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 8003cd2:	1dbb      	adds	r3, r7, #6
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	2114      	movs	r1, #20
 8003cde:	187b      	adds	r3, r7, r1
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	1dbb      	adds	r3, r7, #6
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	187b      	adds	r3, r7, r1
 8003cea:	705a      	strb	r2, [r3, #1]
 8003cec:	1dbb      	adds	r3, r7, #6
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	121b      	asrs	r3, r3, #8
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	187b      	adds	r3, r7, r1
 8003cf8:	709a      	strb	r2, [r3, #2]
 8003cfa:	1dbb      	adds	r3, r7, #6
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	3301      	adds	r3, #1
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	187b      	adds	r3, r7, r1
 8003d06:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 8003d08:	1878      	adds	r0, r7, r1
 8003d0a:	230a      	movs	r3, #10
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2104      	movs	r1, #4
 8003d10:	f000 fc06 	bl	8004520 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003d14:	2300      	movs	r3, #0
 8003d16:	633b      	str	r3, [r7, #48]	; 0x30
 8003d18:	e00a      	b.n	8003d30 <ILI9341_Draw_Pixel+0x118>
 8003d1a:	2390      	movs	r3, #144	; 0x90
 8003d1c:	05db      	lsls	r3, r3, #23
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	2390      	movs	r3, #144	; 0x90
 8003d22:	05db      	lsls	r3, r3, #23
 8003d24:	2108      	movs	r1, #8
 8003d26:	438a      	bics	r2, r1
 8003d28:	615a      	str	r2, [r3, #20]
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	ddf1      	ble.n	8003d1a <ILI9341_Draw_Pixel+0x102>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003d36:	2390      	movs	r3, #144	; 0x90
 8003d38:	05db      	lsls	r3, r3, #23
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	2390      	movs	r3, #144	; 0x90
 8003d3e:	05db      	lsls	r3, r3, #23
 8003d40:	2108      	movs	r1, #8
 8003d42:	430a      	orrs	r2, r1
 8003d44:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8003d46:	2390      	movs	r3, #144	; 0x90
 8003d48:	05db      	lsls	r3, r3, #23
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	2390      	movs	r3, #144	; 0x90
 8003d4e:	05db      	lsls	r3, r3, #23
 8003d50:	2110      	movs	r1, #16
 8003d52:	438a      	bics	r2, r1
 8003d54:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003d56:	2390      	movs	r3, #144	; 0x90
 8003d58:	05db      	lsls	r3, r3, #23
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	2390      	movs	r3, #144	; 0x90
 8003d5e:	05db      	lsls	r3, r3, #23
 8003d60:	2108      	movs	r1, #8
 8003d62:	438a      	bics	r2, r1
 8003d64:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8003d66:	220a      	movs	r2, #10
 8003d68:	2100      	movs	r1, #0
 8003d6a:	202b      	movs	r0, #43	; 0x2b
 8003d6c:	f000 fb9e 	bl	80044ac <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003d70:	2300      	movs	r3, #0
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d74:	e00a      	b.n	8003d8c <ILI9341_Draw_Pixel+0x174>
 8003d76:	2390      	movs	r3, #144	; 0x90
 8003d78:	05db      	lsls	r3, r3, #23
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	2390      	movs	r3, #144	; 0x90
 8003d7e:	05db      	lsls	r3, r3, #23
 8003d80:	2108      	movs	r1, #8
 8003d82:	438a      	bics	r2, r1
 8003d84:	615a      	str	r2, [r3, #20]
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	3301      	adds	r3, #1
 8003d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	ddf1      	ble.n	8003d76 <ILI9341_Draw_Pixel+0x15e>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8003d92:	2390      	movs	r3, #144	; 0x90
 8003d94:	05db      	lsls	r3, r3, #23
 8003d96:	695a      	ldr	r2, [r3, #20]
 8003d98:	2390      	movs	r3, #144	; 0x90
 8003d9a:	05db      	lsls	r3, r3, #23
 8003d9c:	2110      	movs	r1, #16
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003da2:	2390      	movs	r3, #144	; 0x90
 8003da4:	05db      	lsls	r3, r3, #23
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	2390      	movs	r3, #144	; 0x90
 8003daa:	05db      	lsls	r3, r3, #23
 8003dac:	2108      	movs	r1, #8
 8003dae:	430a      	orrs	r2, r1
 8003db0:	615a      	str	r2, [r3, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003db2:	2390      	movs	r3, #144	; 0x90
 8003db4:	05db      	lsls	r3, r3, #23
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	2390      	movs	r3, #144	; 0x90
 8003dba:	05db      	lsls	r3, r3, #23
 8003dbc:	2108      	movs	r1, #8
 8003dbe:	438a      	bics	r2, r1
 8003dc0:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	2110      	movs	r1, #16
 8003dce:	187b      	adds	r3, r7, r1
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	1d3b      	adds	r3, r7, #4
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	187b      	adds	r3, r7, r1
 8003dda:	705a      	strb	r2, [r3, #1]
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	121b      	asrs	r3, r3, #8
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	187b      	adds	r3, r7, r1
 8003de8:	709a      	strb	r2, [r3, #2]
 8003dea:	1d3b      	adds	r3, r7, #4
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	3301      	adds	r3, #1
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	187b      	adds	r3, r7, r1
 8003df6:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 8003df8:	1878      	adds	r0, r7, r1
 8003dfa:	230a      	movs	r3, #10
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2104      	movs	r1, #4
 8003e00:	f000 fb8e 	bl	8004520 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003e04:	2300      	movs	r3, #0
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e08:	e00a      	b.n	8003e20 <ILI9341_Draw_Pixel+0x208>
 8003e0a:	2390      	movs	r3, #144	; 0x90
 8003e0c:	05db      	lsls	r3, r3, #23
 8003e0e:	695a      	ldr	r2, [r3, #20]
 8003e10:	2390      	movs	r3, #144	; 0x90
 8003e12:	05db      	lsls	r3, r3, #23
 8003e14:	2108      	movs	r1, #8
 8003e16:	438a      	bics	r2, r1
 8003e18:	615a      	str	r2, [r3, #20]
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	ddf1      	ble.n	8003e0a <ILI9341_Draw_Pixel+0x1f2>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003e26:	2390      	movs	r3, #144	; 0x90
 8003e28:	05db      	lsls	r3, r3, #23
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	2390      	movs	r3, #144	; 0x90
 8003e2e:	05db      	lsls	r3, r3, #23
 8003e30:	2108      	movs	r1, #8
 8003e32:	430a      	orrs	r2, r1
 8003e34:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8003e36:	2390      	movs	r3, #144	; 0x90
 8003e38:	05db      	lsls	r3, r3, #23
 8003e3a:	695a      	ldr	r2, [r3, #20]
 8003e3c:	2390      	movs	r3, #144	; 0x90
 8003e3e:	05db      	lsls	r3, r3, #23
 8003e40:	2110      	movs	r1, #16
 8003e42:	438a      	bics	r2, r1
 8003e44:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003e46:	2390      	movs	r3, #144	; 0x90
 8003e48:	05db      	lsls	r3, r3, #23
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	2390      	movs	r3, #144	; 0x90
 8003e4e:	05db      	lsls	r3, r3, #23
 8003e50:	2108      	movs	r1, #8
 8003e52:	438a      	bics	r2, r1
 8003e54:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2C, 0, 10);
 8003e56:	220a      	movs	r2, #10
 8003e58:	2100      	movs	r1, #0
 8003e5a:	202c      	movs	r0, #44	; 0x2c
 8003e5c:	f000 fb26 	bl	80044ac <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003e60:	2300      	movs	r3, #0
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
 8003e64:	e00a      	b.n	8003e7c <ILI9341_Draw_Pixel+0x264>
 8003e66:	2390      	movs	r3, #144	; 0x90
 8003e68:	05db      	lsls	r3, r3, #23
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	2390      	movs	r3, #144	; 0x90
 8003e6e:	05db      	lsls	r3, r3, #23
 8003e70:	2108      	movs	r1, #8
 8003e72:	438a      	bics	r2, r1
 8003e74:	615a      	str	r2, [r3, #20]
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	3301      	adds	r3, #1
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	ddf1      	ble.n	8003e66 <ILI9341_Draw_Pixel+0x24e>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8003e82:	2390      	movs	r3, #144	; 0x90
 8003e84:	05db      	lsls	r3, r3, #23
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	2390      	movs	r3, #144	; 0x90
 8003e8a:	05db      	lsls	r3, r3, #23
 8003e8c:	2110      	movs	r1, #16
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003e92:	2390      	movs	r3, #144	; 0x90
 8003e94:	05db      	lsls	r3, r3, #23
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	2390      	movs	r3, #144	; 0x90
 8003e9a:	05db      	lsls	r3, r3, #23
 8003e9c:	2108      	movs	r1, #8
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	615a      	str	r2, [r3, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003ea2:	2390      	movs	r3, #144	; 0x90
 8003ea4:	05db      	lsls	r3, r3, #23
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	2390      	movs	r3, #144	; 0x90
 8003eaa:	05db      	lsls	r3, r3, #23
 8003eac:	2108      	movs	r1, #8
 8003eae:	438a      	bics	r2, r1
 8003eb0:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8003eb2:	1cbb      	adds	r3, r7, #2
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	210c      	movs	r1, #12
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	1cbb      	adds	r3, r7, #2
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	705a      	strb	r2, [r3, #1]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 8003ecc:	1878      	adds	r0, r7, r1
 8003ece:	2301      	movs	r3, #1
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	f000 fb24 	bl	8004520 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003ed8:	2300      	movs	r3, #0
 8003eda:	623b      	str	r3, [r7, #32]
 8003edc:	e00a      	b.n	8003ef4 <ILI9341_Draw_Pixel+0x2dc>
 8003ede:	2390      	movs	r3, #144	; 0x90
 8003ee0:	05db      	lsls	r3, r3, #23
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	2390      	movs	r3, #144	; 0x90
 8003ee6:	05db      	lsls	r3, r3, #23
 8003ee8:	2108      	movs	r1, #8
 8003eea:	438a      	bics	r2, r1
 8003eec:	615a      	str	r2, [r3, #20]
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	623b      	str	r3, [r7, #32]
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	ddf1      	ble.n	8003ede <ILI9341_Draw_Pixel+0x2c6>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	e00a      	b.n	8003f16 <ILI9341_Draw_Pixel+0x2fe>
 8003f00:	2390      	movs	r3, #144	; 0x90
 8003f02:	05db      	lsls	r3, r3, #23
 8003f04:	695a      	ldr	r2, [r3, #20]
 8003f06:	2390      	movs	r3, #144	; 0x90
 8003f08:	05db      	lsls	r3, r3, #23
 8003f0a:	2108      	movs	r1, #8
 8003f0c:	438a      	bics	r2, r1
 8003f0e:	615a      	str	r2, [r3, #20]
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	3301      	adds	r3, #1
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	ddf1      	ble.n	8003f00 <ILI9341_Draw_Pixel+0x2e8>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61bb      	str	r3, [r7, #24]
 8003f20:	e00a      	b.n	8003f38 <ILI9341_Draw_Pixel+0x320>
 8003f22:	2390      	movs	r3, #144	; 0x90
 8003f24:	05db      	lsls	r3, r3, #23
 8003f26:	695a      	ldr	r2, [r3, #20]
 8003f28:	2390      	movs	r3, #144	; 0x90
 8003f2a:	05db      	lsls	r3, r3, #23
 8003f2c:	2108      	movs	r1, #8
 8003f2e:	438a      	bics	r2, r1
 8003f30:	615a      	str	r2, [r3, #20]
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	3301      	adds	r3, #1
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	ddf1      	ble.n	8003f22 <ILI9341_Draw_Pixel+0x30a>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8003f3e:	2390      	movs	r3, #144	; 0x90
 8003f40:	05db      	lsls	r3, r3, #23
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	2390      	movs	r3, #144	; 0x90
 8003f46:	05db      	lsls	r3, r3, #23
 8003f48:	2108      	movs	r1, #8
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	615a      	str	r2, [r3, #20]
 8003f4e:	e000      	b.n	8003f52 <ILI9341_Draw_Pixel+0x33a>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003f50:	46c0      	nop			; (mov r8, r8)


}
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b00f      	add	sp, #60	; 0x3c
 8003f56:	bd90      	pop	{r4, r7, pc}
 8003f58:	20000010 	.word	0x20000010
 8003f5c:	2000000e 	.word	0x2000000e

08003f60 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8003f60:	b5b0      	push	{r4, r5, r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	0005      	movs	r5, r0
 8003f68:	000c      	movs	r4, r1
 8003f6a:	0010      	movs	r0, r2
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	1dbb      	adds	r3, r7, #6
 8003f70:	1c2a      	adds	r2, r5, #0
 8003f72:	801a      	strh	r2, [r3, #0]
 8003f74:	1d3b      	adds	r3, r7, #4
 8003f76:	1c22      	adds	r2, r4, #0
 8003f78:	801a      	strh	r2, [r3, #0]
 8003f7a:	1cbb      	adds	r3, r7, #2
 8003f7c:	1c02      	adds	r2, r0, #0
 8003f7e:	801a      	strh	r2, [r3, #0]
 8003f80:	003b      	movs	r3, r7
 8003f82:	1c0a      	adds	r2, r1, #0
 8003f84:	801a      	strh	r2, [r3, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8003f86:	4b5b      	ldr	r3, [pc, #364]	; (80040f4 <ILI9341_Draw_Rectangle+0x194>)
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	1dba      	adds	r2, r7, #6
 8003f8e:	8812      	ldrh	r2, [r2, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d300      	bcc.n	8003f96 <ILI9341_Draw_Rectangle+0x36>
 8003f94:	e0a9      	b.n	80040ea <ILI9341_Draw_Rectangle+0x18a>
 8003f96:	4b58      	ldr	r3, [pc, #352]	; (80040f8 <ILI9341_Draw_Rectangle+0x198>)
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	1d3a      	adds	r2, r7, #4
 8003f9e:	8812      	ldrh	r2, [r2, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d300      	bcc.n	8003fa6 <ILI9341_Draw_Rectangle+0x46>
 8003fa4:	e0a1      	b.n	80040ea <ILI9341_Draw_Rectangle+0x18a>
	if((xpos+width-1)>=LCD_WIDTH)
 8003fa6:	1dbb      	adds	r3, r7, #6
 8003fa8:	881a      	ldrh	r2, [r3, #0]
 8003faa:	1cbb      	adds	r3, r7, #2
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	18d3      	adds	r3, r2, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	4a50      	ldr	r2, [pc, #320]	; (80040f4 <ILI9341_Draw_Rectangle+0x194>)
 8003fb4:	8812      	ldrh	r2, [r2, #0]
 8003fb6:	b292      	uxth	r2, r2
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	db07      	blt.n	8003fcc <ILI9341_Draw_Rectangle+0x6c>
		{
			width=LCD_WIDTH-xpos;
 8003fbc:	4b4d      	ldr	r3, [pc, #308]	; (80040f4 <ILI9341_Draw_Rectangle+0x194>)
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b299      	uxth	r1, r3
 8003fc2:	1cbb      	adds	r3, r7, #2
 8003fc4:	1dba      	adds	r2, r7, #6
 8003fc6:	8812      	ldrh	r2, [r2, #0]
 8003fc8:	1a8a      	subs	r2, r1, r2
 8003fca:	801a      	strh	r2, [r3, #0]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	881a      	ldrh	r2, [r3, #0]
 8003fd0:	003b      	movs	r3, r7
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	18d3      	adds	r3, r2, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	4a47      	ldr	r2, [pc, #284]	; (80040f8 <ILI9341_Draw_Rectangle+0x198>)
 8003fda:	8812      	ldrh	r2, [r2, #0]
 8003fdc:	b292      	uxth	r2, r2
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	db07      	blt.n	8003ff2 <ILI9341_Draw_Rectangle+0x92>
		{
			height=LCD_HEIGHT-ypos;
 8003fe2:	4b45      	ldr	r3, [pc, #276]	; (80040f8 <ILI9341_Draw_Rectangle+0x198>)
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	b299      	uxth	r1, r3
 8003fe8:	003b      	movs	r3, r7
 8003fea:	1d3a      	adds	r2, r7, #4
 8003fec:	8812      	ldrh	r2, [r2, #0]
 8003fee:	1a8a      	subs	r2, r1, r2
 8003ff0:	801a      	strh	r2, [r3, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 8003ff2:	1dba      	adds	r2, r7, #6
 8003ff4:	1cbb      	adds	r3, r7, #2
 8003ff6:	8812      	ldrh	r2, [r2, #0]
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	18d3      	adds	r3, r2, r3
 8003ffc:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8004002:	1d3a      	adds	r2, r7, #4
 8004004:	003b      	movs	r3, r7
 8004006:	8812      	ldrh	r2, [r2, #0]
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	18d3      	adds	r3, r2, r3
 800400c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	8819      	ldrh	r1, [r3, #0]
 8004016:	1dbb      	adds	r3, r7, #6
 8004018:	8818      	ldrh	r0, [r3, #0]
 800401a:	0013      	movs	r3, r2
 800401c:	0022      	movs	r2, r4
 800401e:	f7ff fd79 	bl	8003b14 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8004022:	200e      	movs	r0, #14
 8004024:	183b      	adds	r3, r7, r0
 8004026:	003a      	movs	r2, r7
 8004028:	1cb9      	adds	r1, r7, #2
 800402a:	8812      	ldrh	r2, [r2, #0]
 800402c:	8809      	ldrh	r1, [r1, #0]
 800402e:	434a      	muls	r2, r1
 8004030:	801a      	strh	r2, [r3, #0]
	uint8_t truncated = 0;
 8004032:	230d      	movs	r3, #13
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800403a:	183b      	adds	r3, r7, r0
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	2201      	movs	r2, #1
 8004040:	4013      	ands	r3, r2
 8004042:	d010      	beq.n	8004066 <ILI9341_Draw_Rectangle+0x106>
 8004044:	230e      	movs	r3, #14
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d90b      	bls.n	8004066 <ILI9341_Draw_Rectangle+0x106>
	{
		truncated = 1;
 800404e:	230d      	movs	r3, #13
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
	 	size = ((size >> 1) * 2);
 8004056:	220e      	movs	r2, #14
 8004058:	18bb      	adds	r3, r7, r2
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	085b      	lsrs	r3, r3, #1
 800405e:	b29b      	uxth	r3, r3
 8004060:	18ba      	adds	r2, r7, r2
 8004062:	18db      	adds	r3, r3, r3
 8004064:	8013      	strh	r3, [r2, #0]
	}

	_LCD_Write_Frame(	xpos,
 8004066:	230e      	movs	r3, #14
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	881c      	ldrh	r4, [r3, #0]
 800406c:	2320      	movs	r3, #32
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	881a      	ldrh	r2, [r3, #0]
 8004072:	1d3b      	adds	r3, r7, #4
 8004074:	8819      	ldrh	r1, [r3, #0]
 8004076:	1dbb      	adds	r3, r7, #6
 8004078:	8818      	ldrh	r0, [r3, #0]
 800407a:	2324      	movs	r3, #36	; 0x24
 800407c:	18fb      	adds	r3, r7, r3
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	0023      	movs	r3, r4
 8004084:	f000 f8ba 	bl	80041fc <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 8004088:	230d      	movs	r3, #13
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d02c      	beq.n	80040ec <ILI9341_Draw_Rectangle+0x18c>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8004092:	1dba      	adds	r2, r7, #6
 8004094:	1cbb      	adds	r3, r7, #2
 8004096:	8812      	ldrh	r2, [r2, #0]
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	18d3      	adds	r3, r2, r3
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b02      	subs	r3, #2
 80040a0:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80040a2:	1d3a      	adds	r2, r7, #4
 80040a4:	003b      	movs	r3, r7
 80040a6:	8812      	ldrh	r2, [r2, #0]
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	18d3      	adds	r3, r2, r3
 80040ac:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2420      	movs	r4, #32
 80040b4:	193a      	adds	r2, r7, r4
 80040b6:	8812      	ldrh	r2, [r2, #0]
 80040b8:	0019      	movs	r1, r3
 80040ba:	f7ff fdad 	bl	8003c18 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80040be:	1dba      	adds	r2, r7, #6
 80040c0:	1cbb      	adds	r3, r7, #2
 80040c2:	8812      	ldrh	r2, [r2, #0]
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	18d3      	adds	r3, r2, r3
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80040ce:	1d3a      	adds	r2, r7, #4
 80040d0:	003b      	movs	r3, r7
 80040d2:	8812      	ldrh	r2, [r2, #0]
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	18d3      	adds	r3, r2, r3
 80040d8:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29b      	uxth	r3, r3
 80040de:	193a      	adds	r2, r7, r4
 80040e0:	8812      	ldrh	r2, [r2, #0]
 80040e2:	0019      	movs	r1, r3
 80040e4:	f7ff fd98 	bl	8003c18 <ILI9341_Draw_Pixel>
 80040e8:	e000      	b.n	80040ec <ILI9341_Draw_Rectangle+0x18c>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80040ea:	46c0      	nop			; (mov r8, r8)
							colour);
	}
}
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b004      	add	sp, #16
 80040f0:	bdb0      	pop	{r4, r5, r7, pc}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	20000010 	.word	0x20000010
 80040f8:	2000000e 	.word	0x2000000e

080040fc <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 80040fc:	b590      	push	{r4, r7, lr}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	0002      	movs	r2, r0
 8004104:	1dfb      	adds	r3, r7, #7
 8004106:	701a      	strb	r2, [r3, #0]

	uint8_t screen_rotation = rotation;
 8004108:	240f      	movs	r4, #15
 800410a:	193b      	adds	r3, r7, r4
 800410c:	1dfa      	adds	r2, r7, #7
 800410e:	7812      	ldrb	r2, [r2, #0]
 8004110:	701a      	strb	r2, [r3, #0]

	_LCD_SendCommand(0x36);
 8004112:	2036      	movs	r0, #54	; 0x36
 8004114:	f000 f956 	bl	80043c4 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8004118:	193b      	adds	r3, r7, r4
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d013      	beq.n	8004148 <ILI9341_Set_Rotation+0x4c>
 8004120:	dc02      	bgt.n	8004128 <ILI9341_Set_Rotation+0x2c>
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <ILI9341_Set_Rotation+0x36>
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8004126:	e030      	b.n	800418a <ILI9341_Set_Rotation+0x8e>
	switch(screen_rotation)
 8004128:	2b02      	cmp	r3, #2
 800412a:	d018      	beq.n	800415e <ILI9341_Set_Rotation+0x62>
 800412c:	2b03      	cmp	r3, #3
 800412e:	d021      	beq.n	8004174 <ILI9341_Set_Rotation+0x78>
			break;
 8004130:	e02b      	b.n	800418a <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x08);
 8004132:	2048      	movs	r0, #72	; 0x48
 8004134:	f000 f980 	bl	8004438 <_LCD_SendData>
			LCD_WIDTH = 240;
 8004138:	4b16      	ldr	r3, [pc, #88]	; (8004194 <ILI9341_Set_Rotation+0x98>)
 800413a:	22f0      	movs	r2, #240	; 0xf0
 800413c:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800413e:	4b16      	ldr	r3, [pc, #88]	; (8004198 <ILI9341_Set_Rotation+0x9c>)
 8004140:	22a0      	movs	r2, #160	; 0xa0
 8004142:	0052      	lsls	r2, r2, #1
 8004144:	801a      	strh	r2, [r3, #0]
			break;
 8004146:	e020      	b.n	800418a <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x20|0x08);
 8004148:	2028      	movs	r0, #40	; 0x28
 800414a:	f000 f975 	bl	8004438 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800414e:	4b11      	ldr	r3, [pc, #68]	; (8004194 <ILI9341_Set_Rotation+0x98>)
 8004150:	22a0      	movs	r2, #160	; 0xa0
 8004152:	0052      	lsls	r2, r2, #1
 8004154:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <ILI9341_Set_Rotation+0x9c>)
 8004158:	22f0      	movs	r2, #240	; 0xf0
 800415a:	801a      	strh	r2, [r3, #0]
			break;
 800415c:	e015      	b.n	800418a <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x80|0x08);
 800415e:	2088      	movs	r0, #136	; 0x88
 8004160:	f000 f96a 	bl	8004438 <_LCD_SendData>
			LCD_WIDTH  = 240;
 8004164:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <ILI9341_Set_Rotation+0x98>)
 8004166:	22f0      	movs	r2, #240	; 0xf0
 8004168:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <ILI9341_Set_Rotation+0x9c>)
 800416c:	22a0      	movs	r2, #160	; 0xa0
 800416e:	0052      	lsls	r2, r2, #1
 8004170:	801a      	strh	r2, [r3, #0]
			break;
 8004172:	e00a      	b.n	800418a <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x80|0x20|0x08);
 8004174:	20e8      	movs	r0, #232	; 0xe8
 8004176:	f000 f95f 	bl	8004438 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <ILI9341_Set_Rotation+0x98>)
 800417c:	22a0      	movs	r2, #160	; 0xa0
 800417e:	0052      	lsls	r2, r2, #1
 8004180:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <ILI9341_Set_Rotation+0x9c>)
 8004184:	22f0      	movs	r2, #240	; 0xf0
 8004186:	801a      	strh	r2, [r3, #0]
			break;
 8004188:	46c0      	nop			; (mov r8, r8)
	}
}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b005      	add	sp, #20
 8004190:	bd90      	pop	{r4, r7, pc}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	20000010 	.word	0x20000010
 8004198:	2000000e 	.word	0x2000000e

0800419c <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <_LCD_Enable+0x18>)
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <_LCD_Enable+0x18>)
 80041a6:	2101      	movs	r1, #1
 80041a8:	430a      	orrs	r2, r1
 80041aa:	615a      	str	r2, [r3, #20]
}
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	48000400 	.word	0x48000400

080041b8 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 80041bc:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <_LCD_Reset+0x40>)
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	4b0d      	ldr	r3, [pc, #52]	; (80041f8 <_LCD_Reset+0x40>)
 80041c2:	2101      	movs	r1, #1
 80041c4:	438a      	bics	r2, r1
 80041c6:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 80041c8:	20c8      	movs	r0, #200	; 0xc8
 80041ca:	f7fd fad5 	bl	8001778 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80041ce:	2390      	movs	r3, #144	; 0x90
 80041d0:	05db      	lsls	r3, r3, #23
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	2390      	movs	r3, #144	; 0x90
 80041d6:	05db      	lsls	r3, r3, #23
 80041d8:	2108      	movs	r1, #8
 80041da:	438a      	bics	r2, r1
 80041dc:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 80041de:	20c8      	movs	r0, #200	; 0xc8
 80041e0:	f7fd faca 	bl	8001778 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <_LCD_Reset+0x40>)
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <_LCD_Reset+0x40>)
 80041ea:	2101      	movs	r1, #1
 80041ec:	430a      	orrs	r2, r1
 80041ee:	615a      	str	r2, [r3, #20]
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	48000400 	.word	0x48000400

080041fc <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 80041fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041fe:	b095      	sub	sp, #84	; 0x54
 8004200:	af00      	add	r7, sp, #0
 8004202:	0006      	movs	r6, r0
 8004204:	0008      	movs	r0, r1
 8004206:	0011      	movs	r1, r2
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	230e      	movs	r3, #14
 800420c:	2218      	movs	r2, #24
 800420e:	4694      	mov	ip, r2
 8004210:	44bc      	add	ip, r7
 8004212:	4463      	add	r3, ip
 8004214:	1c32      	adds	r2, r6, #0
 8004216:	801a      	strh	r2, [r3, #0]
 8004218:	230c      	movs	r3, #12
 800421a:	2218      	movs	r2, #24
 800421c:	4694      	mov	ip, r2
 800421e:	44bc      	add	ip, r7
 8004220:	4463      	add	r3, ip
 8004222:	1c02      	adds	r2, r0, #0
 8004224:	801a      	strh	r2, [r3, #0]
 8004226:	230a      	movs	r3, #10
 8004228:	2218      	movs	r2, #24
 800422a:	4694      	mov	ip, r2
 800422c:	44bc      	add	ip, r7
 800422e:	4463      	add	r3, ip
 8004230:	1c0a      	adds	r2, r1, #0
 8004232:	801a      	strh	r2, [r3, #0]
 8004234:	466b      	mov	r3, sp
 8004236:	61bb      	str	r3, [r7, #24]

	uint32_t buffer_size = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	647b      	str	r3, [r7, #68]	; 0x44
	if((chunk_size*2) < BURST_MAX_SIZE)
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	4a5f      	ldr	r2, [pc, #380]	; (80043c0 <_LCD_Write_Frame+0x1c4>)
 8004242:	8812      	ldrh	r2, [r2, #0]
 8004244:	4293      	cmp	r3, r2
 8004246:	d202      	bcs.n	800424e <_LCD_Write_Frame+0x52>
	{
		buffer_size = chunk_size;
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	647b      	str	r3, [r7, #68]	; 0x44
 800424c:	e002      	b.n	8004254 <_LCD_Write_Frame+0x58>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800424e:	4b5c      	ldr	r3, [pc, #368]	; (80043c0 <_LCD_Write_Frame+0x1c4>)
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	647b      	str	r3, [r7, #68]	; 0x44
	}

	unsigned char chifted = 	colour>>8;;
 8004254:	230a      	movs	r3, #10
 8004256:	2218      	movs	r2, #24
 8004258:	4694      	mov	ip, r2
 800425a:	44bc      	add	ip, r7
 800425c:	4463      	add	r3, ip
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	b29a      	uxth	r2, r3
 8004264:	231f      	movs	r3, #31
 8004266:	2118      	movs	r1, #24
 8004268:	468c      	mov	ip, r1
 800426a:	44bc      	add	ip, r7
 800426c:	4463      	add	r3, ip
 800426e:	701a      	strb	r2, [r3, #0]
	unsigned char burst_buffer[buffer_size];
 8004270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004272:	001a      	movs	r2, r3
 8004274:	3a01      	subs	r2, #1
 8004276:	633a      	str	r2, [r7, #48]	; 0x30
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	2200      	movs	r2, #0
 800427c:	60fa      	str	r2, [r7, #12]
 800427e:	68b8      	ldr	r0, [r7, #8]
 8004280:	68f9      	ldr	r1, [r7, #12]
 8004282:	0002      	movs	r2, r0
 8004284:	0f52      	lsrs	r2, r2, #29
 8004286:	000e      	movs	r6, r1
 8004288:	00f6      	lsls	r6, r6, #3
 800428a:	617e      	str	r6, [r7, #20]
 800428c:	697e      	ldr	r6, [r7, #20]
 800428e:	4316      	orrs	r6, r2
 8004290:	617e      	str	r6, [r7, #20]
 8004292:	0002      	movs	r2, r0
 8004294:	00d2      	lsls	r2, r2, #3
 8004296:	613a      	str	r2, [r7, #16]
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	607a      	str	r2, [r7, #4]
 800429e:	6838      	ldr	r0, [r7, #0]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	0002      	movs	r2, r0
 80042a4:	0f52      	lsrs	r2, r2, #29
 80042a6:	000e      	movs	r6, r1
 80042a8:	00f5      	lsls	r5, r6, #3
 80042aa:	4315      	orrs	r5, r2
 80042ac:	0002      	movs	r2, r0
 80042ae:	00d4      	lsls	r4, r2, #3
 80042b0:	3307      	adds	r3, #7
 80042b2:	08db      	lsrs	r3, r3, #3
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	466a      	mov	r2, sp
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	469d      	mov	sp, r3
 80042bc:	466b      	mov	r3, sp
 80042be:	3300      	adds	r3, #0
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80042c2:	2300      	movs	r3, #0
 80042c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80042c6:	e017      	b.n	80042f8 <_LCD_Write_Frame+0xfc>
	{
			burst_buffer[j] = 	chifted;
 80042c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042cc:	18d3      	adds	r3, r2, r3
 80042ce:	221f      	movs	r2, #31
 80042d0:	2118      	movs	r1, #24
 80042d2:	468c      	mov	ip, r1
 80042d4:	44bc      	add	ip, r7
 80042d6:	4462      	add	r2, ip
 80042d8:	7812      	ldrb	r2, [r2, #0]
 80042da:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 80042dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042de:	3301      	adds	r3, #1
 80042e0:	220a      	movs	r2, #10
 80042e2:	2118      	movs	r1, #24
 80042e4:	468c      	mov	ip, r1
 80042e6:	44bc      	add	ip, r7
 80042e8:	4462      	add	r2, ip
 80042ea:	8812      	ldrh	r2, [r2, #0]
 80042ec:	b2d1      	uxtb	r1, r2
 80042ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042f0:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80042f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f4:	3302      	adds	r3, #2
 80042f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80042f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d3e3      	bcc.n	80042c8 <_LCD_Write_Frame+0xcc>
	}
	
	uint32_t Sending_size = chunk_size*2;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	62bb      	str	r3, [r7, #40]	; 0x28

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8004306:	2301      	movs	r3, #1
 8004308:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Remainder_from_block = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	643b      	str	r3, [r7, #64]	; 0x40
	if(chunk_size > 0)
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00c      	beq.n	800432e <_LCD_Write_Frame+0x132>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8004314:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004318:	f7fb fef6 	bl	8000108 <__udivsi3>
 800431c:	0003      	movs	r3, r0
 800431e:	64fb      	str	r3, [r7, #76]	; 0x4c
			Remainder_from_block 	= Sending_size%buffer_size;
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004324:	0018      	movs	r0, r3
 8004326:	f7fb ff75 	bl	8000214 <__aeabi_uidivmod>
 800432a:	000b      	movs	r3, r1
 800432c:	643b      	str	r3, [r7, #64]	; 0x40
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800432e:	2390      	movs	r3, #144	; 0x90
 8004330:	05db      	lsls	r3, r3, #23
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	2390      	movs	r3, #144	; 0x90
 8004336:	05db      	lsls	r3, r3, #23
 8004338:	2110      	movs	r1, #16
 800433a:	430a      	orrs	r2, r1
 800433c:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800433e:	2390      	movs	r3, #144	; 0x90
 8004340:	05db      	lsls	r3, r3, #23
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	2390      	movs	r3, #144	; 0x90
 8004346:	05db      	lsls	r3, r3, #23
 8004348:	2108      	movs	r1, #8
 800434a:	438a      	bics	r2, r1
 800434c:	615a      	str	r2, [r3, #20]
//TODO
	if(Sending_in_Block != 0)
 800434e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00f      	beq.n	8004374 <_LCD_Write_Frame+0x178>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8004354:	2300      	movs	r3, #0
 8004356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004358:	e008      	b.n	800436c <_LCD_Write_Frame+0x170>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800435a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800435c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800435e:	230a      	movs	r3, #10
 8004360:	2200      	movs	r2, #0
 8004362:	f000 f8dd 	bl	8004520 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8004366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004368:	3301      	adds	r3, #1
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800436c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800436e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004370:	429a      	cmp	r2, r3
 8004372:	d3f2      	bcc.n	800435a <_LCD_Write_Frame+0x15e>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8004374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004376:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004378:	230a      	movs	r3, #10
 800437a:	2200      	movs	r2, #0
 800437c:	f000 f8d0 	bl	8004520 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004380:	2300      	movs	r3, #0
 8004382:	63bb      	str	r3, [r7, #56]	; 0x38
 8004384:	e00a      	b.n	800439c <_LCD_Write_Frame+0x1a0>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004386:	2390      	movs	r3, #144	; 0x90
 8004388:	05db      	lsls	r3, r3, #23
 800438a:	695a      	ldr	r2, [r3, #20]
 800438c:	2390      	movs	r3, #144	; 0x90
 800438e:	05db      	lsls	r3, r3, #23
 8004390:	2108      	movs	r1, #8
 8004392:	438a      	bics	r2, r1
 8004394:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004398:	3301      	adds	r3, #1
 800439a:	63bb      	str	r3, [r7, #56]	; 0x38
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	2b02      	cmp	r3, #2
 80043a0:	ddf1      	ble.n	8004386 <_LCD_Write_Frame+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80043a2:	2390      	movs	r3, #144	; 0x90
 80043a4:	05db      	lsls	r3, r3, #23
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	2390      	movs	r3, #144	; 0x90
 80043aa:	05db      	lsls	r3, r3, #23
 80043ac:	2108      	movs	r1, #8
 80043ae:	430a      	orrs	r2, r1
 80043b0:	615a      	str	r2, [r3, #20]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	469d      	mov	sp, r3

}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	46bd      	mov	sp, r7
 80043ba:	b015      	add	sp, #84	; 0x54
 80043bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	20000012 	.word	0x20000012

080043c4 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	0002      	movs	r2, r0
 80043cc:	1dfb      	adds	r3, r7, #7
 80043ce:	701a      	strb	r2, [r3, #0]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80043d0:	2390      	movs	r3, #144	; 0x90
 80043d2:	05db      	lsls	r3, r3, #23
 80043d4:	695a      	ldr	r2, [r3, #20]
 80043d6:	2390      	movs	r3, #144	; 0x90
 80043d8:	05db      	lsls	r3, r3, #23
 80043da:	2108      	movs	r1, #8
 80043dc:	438a      	bics	r2, r1
 80043de:	615a      	str	r2, [r3, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80043e0:	2390      	movs	r3, #144	; 0x90
 80043e2:	05db      	lsls	r3, r3, #23
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	2390      	movs	r3, #144	; 0x90
 80043e8:	05db      	lsls	r3, r3, #23
 80043ea:	2110      	movs	r1, #16
 80043ec:	438a      	bics	r2, r1
 80043ee:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(command, 0 , 0);
 80043f0:	1dfb      	adds	r3, r7, #7
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2200      	movs	r2, #0
 80043f6:	2100      	movs	r1, #0
 80043f8:	0018      	movs	r0, r3
 80043fa:	f000 f857 	bl	80044ac <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	e00a      	b.n	800441a <_LCD_SendCommand+0x56>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004404:	2390      	movs	r3, #144	; 0x90
 8004406:	05db      	lsls	r3, r3, #23
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	2390      	movs	r3, #144	; 0x90
 800440c:	05db      	lsls	r3, r3, #23
 800440e:	2108      	movs	r1, #8
 8004410:	438a      	bics	r2, r1
 8004412:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b02      	cmp	r3, #2
 800441e:	ddf1      	ble.n	8004404 <_LCD_SendCommand+0x40>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8004420:	2390      	movs	r3, #144	; 0x90
 8004422:	05db      	lsls	r3, r3, #23
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	2390      	movs	r3, #144	; 0x90
 8004428:	05db      	lsls	r3, r3, #23
 800442a:	2108      	movs	r1, #8
 800442c:	430a      	orrs	r2, r1
 800442e:	615a      	str	r2, [r3, #20]
}
 8004430:	46c0      	nop			; (mov r8, r8)
 8004432:	46bd      	mov	sp, r7
 8004434:	b004      	add	sp, #16
 8004436:	bd80      	pop	{r7, pc}

08004438 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	0002      	movs	r2, r0
 8004440:	1dfb      	adds	r3, r7, #7
 8004442:	701a      	strb	r2, [r3, #0]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8004444:	2390      	movs	r3, #144	; 0x90
 8004446:	05db      	lsls	r3, r3, #23
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	2390      	movs	r3, #144	; 0x90
 800444c:	05db      	lsls	r3, r3, #23
 800444e:	2110      	movs	r1, #16
 8004450:	430a      	orrs	r2, r1
 8004452:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004454:	2390      	movs	r3, #144	; 0x90
 8004456:	05db      	lsls	r3, r3, #23
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	2390      	movs	r3, #144	; 0x90
 800445c:	05db      	lsls	r3, r3, #23
 800445e:	2108      	movs	r1, #8
 8004460:	438a      	bics	r2, r1
 8004462:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(data, 0 , 0);
 8004464:	1dfb      	adds	r3, r7, #7
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2200      	movs	r2, #0
 800446a:	2100      	movs	r1, #0
 800446c:	0018      	movs	r0, r3
 800446e:	f000 f81d 	bl	80044ac <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e00a      	b.n	800448e <_LCD_SendData+0x56>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004478:	2390      	movs	r3, #144	; 0x90
 800447a:	05db      	lsls	r3, r3, #23
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	2390      	movs	r3, #144	; 0x90
 8004480:	05db      	lsls	r3, r3, #23
 8004482:	2108      	movs	r1, #8
 8004484:	438a      	bics	r2, r1
 8004486:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3301      	adds	r3, #1
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b02      	cmp	r3, #2
 8004492:	ddf1      	ble.n	8004478 <_LCD_SendData+0x40>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004494:	2390      	movs	r3, #144	; 0x90
 8004496:	05db      	lsls	r3, r3, #23
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	2390      	movs	r3, #144	; 0x90
 800449c:	05db      	lsls	r3, r3, #23
 800449e:	2108      	movs	r1, #8
 80044a0:	438a      	bics	r2, r1
 80044a2:	615a      	str	r2, [r3, #20]
}
 80044a4:	46c0      	nop			; (mov r8, r8)
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b004      	add	sp, #16
 80044aa:	bd80      	pop	{r7, pc}

080044ac <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	0004      	movs	r4, r0
 80044b4:	0008      	movs	r0, r1
 80044b6:	0011      	movs	r1, r2
 80044b8:	1dfb      	adds	r3, r7, #7
 80044ba:	1c22      	adds	r2, r4, #0
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	1dbb      	adds	r3, r7, #6
 80044c0:	1c02      	adds	r2, r0, #0
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	1d7b      	adds	r3, r7, #5
 80044c6:	1c0a      	adds	r2, r1, #0
 80044c8:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	e003      	b.n	80044d8 <_SPI_SendByte+0x2c>
   		asm("nop");
 80044d0:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3301      	adds	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	1dbb      	adds	r3, r7, #6
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	429a      	cmp	r2, r3
 80044e0:	dbf6      	blt.n	80044d0 <_SPI_SendByte+0x24>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80044e2:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <_SPI_SendByte+0x6c>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2202      	movs	r2, #2
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d103      	bne.n	80044f6 <_SPI_SendByte+0x4a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 80044ee:	4a0b      	ldr	r2, [pc, #44]	; (800451c <_SPI_SendByte+0x70>)
 80044f0:	1dfb      	adds	r3, r7, #7
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	e003      	b.n	8004504 <_SPI_SendByte+0x58>
   		asm("nop");
 80044fc:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	3301      	adds	r3, #1
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	1d7b      	adds	r3, r7, #5
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	429a      	cmp	r2, r3
 800450c:	dbf6      	blt.n	80044fc <_SPI_SendByte+0x50>

#endif

}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	46bd      	mov	sp, r7
 8004512:	b005      	add	sp, #20
 8004514:	bd90      	pop	{r4, r7, pc}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	40013000 	.word	0x40013000
 800451c:	4001300c 	.word	0x4001300c

08004520 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	0019      	movs	r1, r3
 800452c:	1dfb      	adds	r3, r7, #7
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	1dbb      	adds	r3, r7, #6
 8004532:	1c0a      	adds	r2, r1, #0
 8004534:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	e003      	b.n	8004544 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800453c:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	3301      	adds	r3, #1
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	1dfb      	adds	r3, r7, #7
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	429a      	cmp	r2, r3
 800454c:	dbf6      	blt.n	800453c <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 8004552:	e01d      	b.n	8004590 <_SPI_SendByteMultiByte+0x70>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8004554:	4b1b      	ldr	r3, [pc, #108]	; (80045c4 <_SPI_SendByteMultiByte+0xa4>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2202      	movs	r2, #2
 800455a:	4013      	ands	r3, r2
 800455c:	2b02      	cmp	r3, #2
 800455e:	d117      	bne.n	8004590 <_SPI_SendByteMultiByte+0x70>
		{
			if (buffer_size > 1U)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d90a      	bls.n	800457c <_SPI_SendByteMultiByte+0x5c>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	881a      	ldrh	r2, [r3, #0]
 800456a:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <_SPI_SendByteMultiByte+0xa4>)
 800456c:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	3302      	adds	r3, #2
 8004572:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	3b02      	subs	r3, #2
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	e009      	b.n	8004590 <_SPI_SendByteMultiByte+0x70>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800457c:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <_SPI_SendByteMultiByte+0xa8>)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	3301      	adds	r3, #1
 8004588:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3b01      	subs	r3, #1
 800458e:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1de      	bne.n	8004554 <_SPI_SendByteMultiByte+0x34>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <_SPI_SendByteMultiByte+0xa4>)
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <_SPI_SendByteMultiByte+0xa4>)
 800459c:	2140      	movs	r1, #64	; 0x40
 800459e:	438a      	bics	r2, r1
 80045a0:	609a      	str	r2, [r3, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	e003      	b.n	80045b0 <_SPI_SendByteMultiByte+0x90>
   		asm("nop");
 80045a8:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	3301      	adds	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	1dbb      	adds	r3, r7, #6
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	dbf6      	blt.n	80045a8 <_SPI_SendByteMultiByte+0x88>

#endif

}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	46bd      	mov	sp, r7
 80045be:	b008      	add	sp, #32
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	40013000 	.word	0x40013000
 80045c8:	4001300c 	.word	0x4001300c

080045cc <__errno>:
 80045cc:	4b01      	ldr	r3, [pc, #4]	; (80045d4 <__errno+0x8>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	4770      	bx	lr
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	20000014 	.word	0x20000014

080045d8 <__libc_init_array>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	2600      	movs	r6, #0
 80045dc:	4d0c      	ldr	r5, [pc, #48]	; (8004610 <__libc_init_array+0x38>)
 80045de:	4c0d      	ldr	r4, [pc, #52]	; (8004614 <__libc_init_array+0x3c>)
 80045e0:	1b64      	subs	r4, r4, r5
 80045e2:	10a4      	asrs	r4, r4, #2
 80045e4:	42a6      	cmp	r6, r4
 80045e6:	d109      	bne.n	80045fc <__libc_init_array+0x24>
 80045e8:	2600      	movs	r6, #0
 80045ea:	f000 fc3b 	bl	8004e64 <_init>
 80045ee:	4d0a      	ldr	r5, [pc, #40]	; (8004618 <__libc_init_array+0x40>)
 80045f0:	4c0a      	ldr	r4, [pc, #40]	; (800461c <__libc_init_array+0x44>)
 80045f2:	1b64      	subs	r4, r4, r5
 80045f4:	10a4      	asrs	r4, r4, #2
 80045f6:	42a6      	cmp	r6, r4
 80045f8:	d105      	bne.n	8004606 <__libc_init_array+0x2e>
 80045fa:	bd70      	pop	{r4, r5, r6, pc}
 80045fc:	00b3      	lsls	r3, r6, #2
 80045fe:	58eb      	ldr	r3, [r5, r3]
 8004600:	4798      	blx	r3
 8004602:	3601      	adds	r6, #1
 8004604:	e7ee      	b.n	80045e4 <__libc_init_array+0xc>
 8004606:	00b3      	lsls	r3, r6, #2
 8004608:	58eb      	ldr	r3, [r5, r3]
 800460a:	4798      	blx	r3
 800460c:	3601      	adds	r6, #1
 800460e:	e7f2      	b.n	80045f6 <__libc_init_array+0x1e>
 8004610:	08005158 	.word	0x08005158
 8004614:	08005158 	.word	0x08005158
 8004618:	08005158 	.word	0x08005158
 800461c:	0800515c 	.word	0x0800515c

08004620 <memset>:
 8004620:	0003      	movs	r3, r0
 8004622:	1812      	adds	r2, r2, r0
 8004624:	4293      	cmp	r3, r2
 8004626:	d100      	bne.n	800462a <memset+0xa>
 8004628:	4770      	bx	lr
 800462a:	7019      	strb	r1, [r3, #0]
 800462c:	3301      	adds	r3, #1
 800462e:	e7f9      	b.n	8004624 <memset+0x4>

08004630 <sniprintf>:
 8004630:	b40c      	push	{r2, r3}
 8004632:	b530      	push	{r4, r5, lr}
 8004634:	4b16      	ldr	r3, [pc, #88]	; (8004690 <sniprintf+0x60>)
 8004636:	b09d      	sub	sp, #116	; 0x74
 8004638:	1e0c      	subs	r4, r1, #0
 800463a:	681d      	ldr	r5, [r3, #0]
 800463c:	da08      	bge.n	8004650 <sniprintf+0x20>
 800463e:	238b      	movs	r3, #139	; 0x8b
 8004640:	2001      	movs	r0, #1
 8004642:	602b      	str	r3, [r5, #0]
 8004644:	4240      	negs	r0, r0
 8004646:	b01d      	add	sp, #116	; 0x74
 8004648:	bc30      	pop	{r4, r5}
 800464a:	bc08      	pop	{r3}
 800464c:	b002      	add	sp, #8
 800464e:	4718      	bx	r3
 8004650:	2382      	movs	r3, #130	; 0x82
 8004652:	a902      	add	r1, sp, #8
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	818b      	strh	r3, [r1, #12]
 8004658:	2300      	movs	r3, #0
 800465a:	9002      	str	r0, [sp, #8]
 800465c:	6108      	str	r0, [r1, #16]
 800465e:	429c      	cmp	r4, r3
 8004660:	d000      	beq.n	8004664 <sniprintf+0x34>
 8004662:	1e63      	subs	r3, r4, #1
 8004664:	608b      	str	r3, [r1, #8]
 8004666:	614b      	str	r3, [r1, #20]
 8004668:	2301      	movs	r3, #1
 800466a:	425b      	negs	r3, r3
 800466c:	81cb      	strh	r3, [r1, #14]
 800466e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004670:	ab21      	add	r3, sp, #132	; 0x84
 8004672:	0028      	movs	r0, r5
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	f000 f86f 	bl	8004758 <_svfiprintf_r>
 800467a:	1c43      	adds	r3, r0, #1
 800467c:	da01      	bge.n	8004682 <sniprintf+0x52>
 800467e:	238b      	movs	r3, #139	; 0x8b
 8004680:	602b      	str	r3, [r5, #0]
 8004682:	2c00      	cmp	r4, #0
 8004684:	d0df      	beq.n	8004646 <sniprintf+0x16>
 8004686:	2300      	movs	r3, #0
 8004688:	9a02      	ldr	r2, [sp, #8]
 800468a:	7013      	strb	r3, [r2, #0]
 800468c:	e7db      	b.n	8004646 <sniprintf+0x16>
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	20000014 	.word	0x20000014

08004694 <__ssputs_r>:
 8004694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004696:	688e      	ldr	r6, [r1, #8]
 8004698:	b085      	sub	sp, #20
 800469a:	0007      	movs	r7, r0
 800469c:	000c      	movs	r4, r1
 800469e:	9203      	str	r2, [sp, #12]
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	429e      	cmp	r6, r3
 80046a4:	d83c      	bhi.n	8004720 <__ssputs_r+0x8c>
 80046a6:	2390      	movs	r3, #144	; 0x90
 80046a8:	898a      	ldrh	r2, [r1, #12]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	421a      	tst	r2, r3
 80046ae:	d034      	beq.n	800471a <__ssputs_r+0x86>
 80046b0:	2503      	movs	r5, #3
 80046b2:	6909      	ldr	r1, [r1, #16]
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	1a5b      	subs	r3, r3, r1
 80046b8:	9302      	str	r3, [sp, #8]
 80046ba:	6963      	ldr	r3, [r4, #20]
 80046bc:	9802      	ldr	r0, [sp, #8]
 80046be:	435d      	muls	r5, r3
 80046c0:	0feb      	lsrs	r3, r5, #31
 80046c2:	195d      	adds	r5, r3, r5
 80046c4:	9b01      	ldr	r3, [sp, #4]
 80046c6:	106d      	asrs	r5, r5, #1
 80046c8:	3301      	adds	r3, #1
 80046ca:	181b      	adds	r3, r3, r0
 80046cc:	42ab      	cmp	r3, r5
 80046ce:	d900      	bls.n	80046d2 <__ssputs_r+0x3e>
 80046d0:	001d      	movs	r5, r3
 80046d2:	0553      	lsls	r3, r2, #21
 80046d4:	d532      	bpl.n	800473c <__ssputs_r+0xa8>
 80046d6:	0029      	movs	r1, r5
 80046d8:	0038      	movs	r0, r7
 80046da:	f000 fb23 	bl	8004d24 <_malloc_r>
 80046de:	1e06      	subs	r6, r0, #0
 80046e0:	d109      	bne.n	80046f6 <__ssputs_r+0x62>
 80046e2:	230c      	movs	r3, #12
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	2340      	movs	r3, #64	; 0x40
 80046e8:	2001      	movs	r0, #1
 80046ea:	89a2      	ldrh	r2, [r4, #12]
 80046ec:	4240      	negs	r0, r0
 80046ee:	4313      	orrs	r3, r2
 80046f0:	81a3      	strh	r3, [r4, #12]
 80046f2:	b005      	add	sp, #20
 80046f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f6:	9a02      	ldr	r2, [sp, #8]
 80046f8:	6921      	ldr	r1, [r4, #16]
 80046fa:	f000 faac 	bl	8004c56 <memcpy>
 80046fe:	89a3      	ldrh	r3, [r4, #12]
 8004700:	4a14      	ldr	r2, [pc, #80]	; (8004754 <__ssputs_r+0xc0>)
 8004702:	401a      	ands	r2, r3
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	4313      	orrs	r3, r2
 8004708:	81a3      	strh	r3, [r4, #12]
 800470a:	9b02      	ldr	r3, [sp, #8]
 800470c:	6126      	str	r6, [r4, #16]
 800470e:	18f6      	adds	r6, r6, r3
 8004710:	6026      	str	r6, [r4, #0]
 8004712:	6165      	str	r5, [r4, #20]
 8004714:	9e01      	ldr	r6, [sp, #4]
 8004716:	1aed      	subs	r5, r5, r3
 8004718:	60a5      	str	r5, [r4, #8]
 800471a:	9b01      	ldr	r3, [sp, #4]
 800471c:	429e      	cmp	r6, r3
 800471e:	d900      	bls.n	8004722 <__ssputs_r+0x8e>
 8004720:	9e01      	ldr	r6, [sp, #4]
 8004722:	0032      	movs	r2, r6
 8004724:	9903      	ldr	r1, [sp, #12]
 8004726:	6820      	ldr	r0, [r4, #0]
 8004728:	f000 fa9e 	bl	8004c68 <memmove>
 800472c:	68a3      	ldr	r3, [r4, #8]
 800472e:	2000      	movs	r0, #0
 8004730:	1b9b      	subs	r3, r3, r6
 8004732:	60a3      	str	r3, [r4, #8]
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	199e      	adds	r6, r3, r6
 8004738:	6026      	str	r6, [r4, #0]
 800473a:	e7da      	b.n	80046f2 <__ssputs_r+0x5e>
 800473c:	002a      	movs	r2, r5
 800473e:	0038      	movs	r0, r7
 8004740:	f000 fb4e 	bl	8004de0 <_realloc_r>
 8004744:	1e06      	subs	r6, r0, #0
 8004746:	d1e0      	bne.n	800470a <__ssputs_r+0x76>
 8004748:	6921      	ldr	r1, [r4, #16]
 800474a:	0038      	movs	r0, r7
 800474c:	f000 faa0 	bl	8004c90 <_free_r>
 8004750:	e7c7      	b.n	80046e2 <__ssputs_r+0x4e>
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	fffffb7f 	.word	0xfffffb7f

08004758 <_svfiprintf_r>:
 8004758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475a:	b0a1      	sub	sp, #132	; 0x84
 800475c:	9003      	str	r0, [sp, #12]
 800475e:	001d      	movs	r5, r3
 8004760:	898b      	ldrh	r3, [r1, #12]
 8004762:	000f      	movs	r7, r1
 8004764:	0016      	movs	r6, r2
 8004766:	061b      	lsls	r3, r3, #24
 8004768:	d511      	bpl.n	800478e <_svfiprintf_r+0x36>
 800476a:	690b      	ldr	r3, [r1, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10e      	bne.n	800478e <_svfiprintf_r+0x36>
 8004770:	2140      	movs	r1, #64	; 0x40
 8004772:	f000 fad7 	bl	8004d24 <_malloc_r>
 8004776:	6038      	str	r0, [r7, #0]
 8004778:	6138      	str	r0, [r7, #16]
 800477a:	2800      	cmp	r0, #0
 800477c:	d105      	bne.n	800478a <_svfiprintf_r+0x32>
 800477e:	230c      	movs	r3, #12
 8004780:	9a03      	ldr	r2, [sp, #12]
 8004782:	3801      	subs	r0, #1
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	b021      	add	sp, #132	; 0x84
 8004788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800478a:	2340      	movs	r3, #64	; 0x40
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	2300      	movs	r3, #0
 8004790:	ac08      	add	r4, sp, #32
 8004792:	6163      	str	r3, [r4, #20]
 8004794:	3320      	adds	r3, #32
 8004796:	7663      	strb	r3, [r4, #25]
 8004798:	3310      	adds	r3, #16
 800479a:	76a3      	strb	r3, [r4, #26]
 800479c:	9507      	str	r5, [sp, #28]
 800479e:	0035      	movs	r5, r6
 80047a0:	782b      	ldrb	r3, [r5, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <_svfiprintf_r+0x52>
 80047a6:	2b25      	cmp	r3, #37	; 0x25
 80047a8:	d146      	bne.n	8004838 <_svfiprintf_r+0xe0>
 80047aa:	1bab      	subs	r3, r5, r6
 80047ac:	9305      	str	r3, [sp, #20]
 80047ae:	d00c      	beq.n	80047ca <_svfiprintf_r+0x72>
 80047b0:	0032      	movs	r2, r6
 80047b2:	0039      	movs	r1, r7
 80047b4:	9803      	ldr	r0, [sp, #12]
 80047b6:	f7ff ff6d 	bl	8004694 <__ssputs_r>
 80047ba:	1c43      	adds	r3, r0, #1
 80047bc:	d100      	bne.n	80047c0 <_svfiprintf_r+0x68>
 80047be:	e0ae      	b.n	800491e <_svfiprintf_r+0x1c6>
 80047c0:	6962      	ldr	r2, [r4, #20]
 80047c2:	9b05      	ldr	r3, [sp, #20]
 80047c4:	4694      	mov	ip, r2
 80047c6:	4463      	add	r3, ip
 80047c8:	6163      	str	r3, [r4, #20]
 80047ca:	782b      	ldrb	r3, [r5, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d100      	bne.n	80047d2 <_svfiprintf_r+0x7a>
 80047d0:	e0a5      	b.n	800491e <_svfiprintf_r+0x1c6>
 80047d2:	2201      	movs	r2, #1
 80047d4:	2300      	movs	r3, #0
 80047d6:	4252      	negs	r2, r2
 80047d8:	6062      	str	r2, [r4, #4]
 80047da:	a904      	add	r1, sp, #16
 80047dc:	3254      	adds	r2, #84	; 0x54
 80047de:	1852      	adds	r2, r2, r1
 80047e0:	1c6e      	adds	r6, r5, #1
 80047e2:	6023      	str	r3, [r4, #0]
 80047e4:	60e3      	str	r3, [r4, #12]
 80047e6:	60a3      	str	r3, [r4, #8]
 80047e8:	7013      	strb	r3, [r2, #0]
 80047ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80047ec:	7831      	ldrb	r1, [r6, #0]
 80047ee:	2205      	movs	r2, #5
 80047f0:	4853      	ldr	r0, [pc, #332]	; (8004940 <_svfiprintf_r+0x1e8>)
 80047f2:	f000 fa25 	bl	8004c40 <memchr>
 80047f6:	1c75      	adds	r5, r6, #1
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d11f      	bne.n	800483c <_svfiprintf_r+0xe4>
 80047fc:	6822      	ldr	r2, [r4, #0]
 80047fe:	06d3      	lsls	r3, r2, #27
 8004800:	d504      	bpl.n	800480c <_svfiprintf_r+0xb4>
 8004802:	2353      	movs	r3, #83	; 0x53
 8004804:	a904      	add	r1, sp, #16
 8004806:	185b      	adds	r3, r3, r1
 8004808:	2120      	movs	r1, #32
 800480a:	7019      	strb	r1, [r3, #0]
 800480c:	0713      	lsls	r3, r2, #28
 800480e:	d504      	bpl.n	800481a <_svfiprintf_r+0xc2>
 8004810:	2353      	movs	r3, #83	; 0x53
 8004812:	a904      	add	r1, sp, #16
 8004814:	185b      	adds	r3, r3, r1
 8004816:	212b      	movs	r1, #43	; 0x2b
 8004818:	7019      	strb	r1, [r3, #0]
 800481a:	7833      	ldrb	r3, [r6, #0]
 800481c:	2b2a      	cmp	r3, #42	; 0x2a
 800481e:	d016      	beq.n	800484e <_svfiprintf_r+0xf6>
 8004820:	0035      	movs	r5, r6
 8004822:	2100      	movs	r1, #0
 8004824:	200a      	movs	r0, #10
 8004826:	68e3      	ldr	r3, [r4, #12]
 8004828:	782a      	ldrb	r2, [r5, #0]
 800482a:	1c6e      	adds	r6, r5, #1
 800482c:	3a30      	subs	r2, #48	; 0x30
 800482e:	2a09      	cmp	r2, #9
 8004830:	d94e      	bls.n	80048d0 <_svfiprintf_r+0x178>
 8004832:	2900      	cmp	r1, #0
 8004834:	d018      	beq.n	8004868 <_svfiprintf_r+0x110>
 8004836:	e010      	b.n	800485a <_svfiprintf_r+0x102>
 8004838:	3501      	adds	r5, #1
 800483a:	e7b1      	b.n	80047a0 <_svfiprintf_r+0x48>
 800483c:	4b40      	ldr	r3, [pc, #256]	; (8004940 <_svfiprintf_r+0x1e8>)
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	1ac0      	subs	r0, r0, r3
 8004842:	2301      	movs	r3, #1
 8004844:	4083      	lsls	r3, r0
 8004846:	4313      	orrs	r3, r2
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	002e      	movs	r6, r5
 800484c:	e7ce      	b.n	80047ec <_svfiprintf_r+0x94>
 800484e:	9b07      	ldr	r3, [sp, #28]
 8004850:	1d19      	adds	r1, r3, #4
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	9107      	str	r1, [sp, #28]
 8004856:	2b00      	cmp	r3, #0
 8004858:	db01      	blt.n	800485e <_svfiprintf_r+0x106>
 800485a:	930b      	str	r3, [sp, #44]	; 0x2c
 800485c:	e004      	b.n	8004868 <_svfiprintf_r+0x110>
 800485e:	425b      	negs	r3, r3
 8004860:	60e3      	str	r3, [r4, #12]
 8004862:	2302      	movs	r3, #2
 8004864:	4313      	orrs	r3, r2
 8004866:	6023      	str	r3, [r4, #0]
 8004868:	782b      	ldrb	r3, [r5, #0]
 800486a:	2b2e      	cmp	r3, #46	; 0x2e
 800486c:	d10a      	bne.n	8004884 <_svfiprintf_r+0x12c>
 800486e:	786b      	ldrb	r3, [r5, #1]
 8004870:	2b2a      	cmp	r3, #42	; 0x2a
 8004872:	d135      	bne.n	80048e0 <_svfiprintf_r+0x188>
 8004874:	9b07      	ldr	r3, [sp, #28]
 8004876:	3502      	adds	r5, #2
 8004878:	1d1a      	adds	r2, r3, #4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	9207      	str	r2, [sp, #28]
 800487e:	2b00      	cmp	r3, #0
 8004880:	db2b      	blt.n	80048da <_svfiprintf_r+0x182>
 8004882:	9309      	str	r3, [sp, #36]	; 0x24
 8004884:	4e2f      	ldr	r6, [pc, #188]	; (8004944 <_svfiprintf_r+0x1ec>)
 8004886:	7829      	ldrb	r1, [r5, #0]
 8004888:	2203      	movs	r2, #3
 800488a:	0030      	movs	r0, r6
 800488c:	f000 f9d8 	bl	8004c40 <memchr>
 8004890:	2800      	cmp	r0, #0
 8004892:	d006      	beq.n	80048a2 <_svfiprintf_r+0x14a>
 8004894:	2340      	movs	r3, #64	; 0x40
 8004896:	1b80      	subs	r0, r0, r6
 8004898:	4083      	lsls	r3, r0
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	3501      	adds	r5, #1
 800489e:	4313      	orrs	r3, r2
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	7829      	ldrb	r1, [r5, #0]
 80048a4:	2206      	movs	r2, #6
 80048a6:	4828      	ldr	r0, [pc, #160]	; (8004948 <_svfiprintf_r+0x1f0>)
 80048a8:	1c6e      	adds	r6, r5, #1
 80048aa:	7621      	strb	r1, [r4, #24]
 80048ac:	f000 f9c8 	bl	8004c40 <memchr>
 80048b0:	2800      	cmp	r0, #0
 80048b2:	d03c      	beq.n	800492e <_svfiprintf_r+0x1d6>
 80048b4:	4b25      	ldr	r3, [pc, #148]	; (800494c <_svfiprintf_r+0x1f4>)
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d125      	bne.n	8004906 <_svfiprintf_r+0x1ae>
 80048ba:	2207      	movs	r2, #7
 80048bc:	9b07      	ldr	r3, [sp, #28]
 80048be:	3307      	adds	r3, #7
 80048c0:	4393      	bics	r3, r2
 80048c2:	3308      	adds	r3, #8
 80048c4:	9307      	str	r3, [sp, #28]
 80048c6:	6963      	ldr	r3, [r4, #20]
 80048c8:	9a04      	ldr	r2, [sp, #16]
 80048ca:	189b      	adds	r3, r3, r2
 80048cc:	6163      	str	r3, [r4, #20]
 80048ce:	e766      	b.n	800479e <_svfiprintf_r+0x46>
 80048d0:	4343      	muls	r3, r0
 80048d2:	2101      	movs	r1, #1
 80048d4:	189b      	adds	r3, r3, r2
 80048d6:	0035      	movs	r5, r6
 80048d8:	e7a6      	b.n	8004828 <_svfiprintf_r+0xd0>
 80048da:	2301      	movs	r3, #1
 80048dc:	425b      	negs	r3, r3
 80048de:	e7d0      	b.n	8004882 <_svfiprintf_r+0x12a>
 80048e0:	2300      	movs	r3, #0
 80048e2:	200a      	movs	r0, #10
 80048e4:	001a      	movs	r2, r3
 80048e6:	3501      	adds	r5, #1
 80048e8:	6063      	str	r3, [r4, #4]
 80048ea:	7829      	ldrb	r1, [r5, #0]
 80048ec:	1c6e      	adds	r6, r5, #1
 80048ee:	3930      	subs	r1, #48	; 0x30
 80048f0:	2909      	cmp	r1, #9
 80048f2:	d903      	bls.n	80048fc <_svfiprintf_r+0x1a4>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0c5      	beq.n	8004884 <_svfiprintf_r+0x12c>
 80048f8:	9209      	str	r2, [sp, #36]	; 0x24
 80048fa:	e7c3      	b.n	8004884 <_svfiprintf_r+0x12c>
 80048fc:	4342      	muls	r2, r0
 80048fe:	2301      	movs	r3, #1
 8004900:	1852      	adds	r2, r2, r1
 8004902:	0035      	movs	r5, r6
 8004904:	e7f1      	b.n	80048ea <_svfiprintf_r+0x192>
 8004906:	ab07      	add	r3, sp, #28
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	003a      	movs	r2, r7
 800490c:	4b10      	ldr	r3, [pc, #64]	; (8004950 <_svfiprintf_r+0x1f8>)
 800490e:	0021      	movs	r1, r4
 8004910:	9803      	ldr	r0, [sp, #12]
 8004912:	e000      	b.n	8004916 <_svfiprintf_r+0x1be>
 8004914:	bf00      	nop
 8004916:	9004      	str	r0, [sp, #16]
 8004918:	9b04      	ldr	r3, [sp, #16]
 800491a:	3301      	adds	r3, #1
 800491c:	d1d3      	bne.n	80048c6 <_svfiprintf_r+0x16e>
 800491e:	89bb      	ldrh	r3, [r7, #12]
 8004920:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004922:	065b      	lsls	r3, r3, #25
 8004924:	d400      	bmi.n	8004928 <_svfiprintf_r+0x1d0>
 8004926:	e72e      	b.n	8004786 <_svfiprintf_r+0x2e>
 8004928:	2001      	movs	r0, #1
 800492a:	4240      	negs	r0, r0
 800492c:	e72b      	b.n	8004786 <_svfiprintf_r+0x2e>
 800492e:	ab07      	add	r3, sp, #28
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	003a      	movs	r2, r7
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <_svfiprintf_r+0x1f8>)
 8004936:	0021      	movs	r1, r4
 8004938:	9803      	ldr	r0, [sp, #12]
 800493a:	f000 f879 	bl	8004a30 <_printf_i>
 800493e:	e7ea      	b.n	8004916 <_svfiprintf_r+0x1be>
 8004940:	08005124 	.word	0x08005124
 8004944:	0800512a 	.word	0x0800512a
 8004948:	0800512e 	.word	0x0800512e
 800494c:	00000000 	.word	0x00000000
 8004950:	08004695 	.word	0x08004695

08004954 <_printf_common>:
 8004954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004956:	0015      	movs	r5, r2
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	688a      	ldr	r2, [r1, #8]
 800495c:	690b      	ldr	r3, [r1, #16]
 800495e:	9000      	str	r0, [sp, #0]
 8004960:	000c      	movs	r4, r1
 8004962:	4293      	cmp	r3, r2
 8004964:	da00      	bge.n	8004968 <_printf_common+0x14>
 8004966:	0013      	movs	r3, r2
 8004968:	0022      	movs	r2, r4
 800496a:	602b      	str	r3, [r5, #0]
 800496c:	3243      	adds	r2, #67	; 0x43
 800496e:	7812      	ldrb	r2, [r2, #0]
 8004970:	2a00      	cmp	r2, #0
 8004972:	d001      	beq.n	8004978 <_printf_common+0x24>
 8004974:	3301      	adds	r3, #1
 8004976:	602b      	str	r3, [r5, #0]
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	069b      	lsls	r3, r3, #26
 800497c:	d502      	bpl.n	8004984 <_printf_common+0x30>
 800497e:	682b      	ldr	r3, [r5, #0]
 8004980:	3302      	adds	r3, #2
 8004982:	602b      	str	r3, [r5, #0]
 8004984:	2706      	movs	r7, #6
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	401f      	ands	r7, r3
 800498a:	d027      	beq.n	80049dc <_printf_common+0x88>
 800498c:	0023      	movs	r3, r4
 800498e:	3343      	adds	r3, #67	; 0x43
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	1e5a      	subs	r2, r3, #1
 8004994:	4193      	sbcs	r3, r2
 8004996:	6822      	ldr	r2, [r4, #0]
 8004998:	0692      	lsls	r2, r2, #26
 800499a:	d430      	bmi.n	80049fe <_printf_common+0xaa>
 800499c:	0022      	movs	r2, r4
 800499e:	9901      	ldr	r1, [sp, #4]
 80049a0:	3243      	adds	r2, #67	; 0x43
 80049a2:	9800      	ldr	r0, [sp, #0]
 80049a4:	9e08      	ldr	r6, [sp, #32]
 80049a6:	47b0      	blx	r6
 80049a8:	1c43      	adds	r3, r0, #1
 80049aa:	d025      	beq.n	80049f8 <_printf_common+0xa4>
 80049ac:	2306      	movs	r3, #6
 80049ae:	6820      	ldr	r0, [r4, #0]
 80049b0:	682a      	ldr	r2, [r5, #0]
 80049b2:	68e1      	ldr	r1, [r4, #12]
 80049b4:	4003      	ands	r3, r0
 80049b6:	2500      	movs	r5, #0
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d103      	bne.n	80049c4 <_printf_common+0x70>
 80049bc:	1a8d      	subs	r5, r1, r2
 80049be:	43eb      	mvns	r3, r5
 80049c0:	17db      	asrs	r3, r3, #31
 80049c2:	401d      	ands	r5, r3
 80049c4:	68a3      	ldr	r3, [r4, #8]
 80049c6:	6922      	ldr	r2, [r4, #16]
 80049c8:	4293      	cmp	r3, r2
 80049ca:	dd01      	ble.n	80049d0 <_printf_common+0x7c>
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	18ed      	adds	r5, r5, r3
 80049d0:	2700      	movs	r7, #0
 80049d2:	42bd      	cmp	r5, r7
 80049d4:	d120      	bne.n	8004a18 <_printf_common+0xc4>
 80049d6:	2000      	movs	r0, #0
 80049d8:	e010      	b.n	80049fc <_printf_common+0xa8>
 80049da:	3701      	adds	r7, #1
 80049dc:	68e3      	ldr	r3, [r4, #12]
 80049de:	682a      	ldr	r2, [r5, #0]
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	42bb      	cmp	r3, r7
 80049e4:	ddd2      	ble.n	800498c <_printf_common+0x38>
 80049e6:	0022      	movs	r2, r4
 80049e8:	2301      	movs	r3, #1
 80049ea:	3219      	adds	r2, #25
 80049ec:	9901      	ldr	r1, [sp, #4]
 80049ee:	9800      	ldr	r0, [sp, #0]
 80049f0:	9e08      	ldr	r6, [sp, #32]
 80049f2:	47b0      	blx	r6
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d1f0      	bne.n	80049da <_printf_common+0x86>
 80049f8:	2001      	movs	r0, #1
 80049fa:	4240      	negs	r0, r0
 80049fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049fe:	2030      	movs	r0, #48	; 0x30
 8004a00:	18e1      	adds	r1, r4, r3
 8004a02:	3143      	adds	r1, #67	; 0x43
 8004a04:	7008      	strb	r0, [r1, #0]
 8004a06:	0021      	movs	r1, r4
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	3145      	adds	r1, #69	; 0x45
 8004a0c:	7809      	ldrb	r1, [r1, #0]
 8004a0e:	18a2      	adds	r2, r4, r2
 8004a10:	3243      	adds	r2, #67	; 0x43
 8004a12:	3302      	adds	r3, #2
 8004a14:	7011      	strb	r1, [r2, #0]
 8004a16:	e7c1      	b.n	800499c <_printf_common+0x48>
 8004a18:	0022      	movs	r2, r4
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	321a      	adds	r2, #26
 8004a1e:	9901      	ldr	r1, [sp, #4]
 8004a20:	9800      	ldr	r0, [sp, #0]
 8004a22:	9e08      	ldr	r6, [sp, #32]
 8004a24:	47b0      	blx	r6
 8004a26:	1c43      	adds	r3, r0, #1
 8004a28:	d0e6      	beq.n	80049f8 <_printf_common+0xa4>
 8004a2a:	3701      	adds	r7, #1
 8004a2c:	e7d1      	b.n	80049d2 <_printf_common+0x7e>
	...

08004a30 <_printf_i>:
 8004a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a32:	b089      	sub	sp, #36	; 0x24
 8004a34:	9204      	str	r2, [sp, #16]
 8004a36:	000a      	movs	r2, r1
 8004a38:	3243      	adds	r2, #67	; 0x43
 8004a3a:	9305      	str	r3, [sp, #20]
 8004a3c:	9003      	str	r0, [sp, #12]
 8004a3e:	9202      	str	r2, [sp, #8]
 8004a40:	7e0a      	ldrb	r2, [r1, #24]
 8004a42:	000c      	movs	r4, r1
 8004a44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a46:	2a6e      	cmp	r2, #110	; 0x6e
 8004a48:	d100      	bne.n	8004a4c <_printf_i+0x1c>
 8004a4a:	e086      	b.n	8004b5a <_printf_i+0x12a>
 8004a4c:	d81f      	bhi.n	8004a8e <_printf_i+0x5e>
 8004a4e:	2a63      	cmp	r2, #99	; 0x63
 8004a50:	d033      	beq.n	8004aba <_printf_i+0x8a>
 8004a52:	d808      	bhi.n	8004a66 <_printf_i+0x36>
 8004a54:	2a00      	cmp	r2, #0
 8004a56:	d100      	bne.n	8004a5a <_printf_i+0x2a>
 8004a58:	e08c      	b.n	8004b74 <_printf_i+0x144>
 8004a5a:	2a58      	cmp	r2, #88	; 0x58
 8004a5c:	d04d      	beq.n	8004afa <_printf_i+0xca>
 8004a5e:	0025      	movs	r5, r4
 8004a60:	3542      	adds	r5, #66	; 0x42
 8004a62:	702a      	strb	r2, [r5, #0]
 8004a64:	e030      	b.n	8004ac8 <_printf_i+0x98>
 8004a66:	2a64      	cmp	r2, #100	; 0x64
 8004a68:	d001      	beq.n	8004a6e <_printf_i+0x3e>
 8004a6a:	2a69      	cmp	r2, #105	; 0x69
 8004a6c:	d1f7      	bne.n	8004a5e <_printf_i+0x2e>
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	6825      	ldr	r5, [r4, #0]
 8004a72:	1d0a      	adds	r2, r1, #4
 8004a74:	0628      	lsls	r0, r5, #24
 8004a76:	d529      	bpl.n	8004acc <_printf_i+0x9c>
 8004a78:	6808      	ldr	r0, [r1, #0]
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	da03      	bge.n	8004a88 <_printf_i+0x58>
 8004a80:	232d      	movs	r3, #45	; 0x2d
 8004a82:	9a02      	ldr	r2, [sp, #8]
 8004a84:	4240      	negs	r0, r0
 8004a86:	7013      	strb	r3, [r2, #0]
 8004a88:	4e6b      	ldr	r6, [pc, #428]	; (8004c38 <_printf_i+0x208>)
 8004a8a:	270a      	movs	r7, #10
 8004a8c:	e04f      	b.n	8004b2e <_printf_i+0xfe>
 8004a8e:	2a73      	cmp	r2, #115	; 0x73
 8004a90:	d074      	beq.n	8004b7c <_printf_i+0x14c>
 8004a92:	d808      	bhi.n	8004aa6 <_printf_i+0x76>
 8004a94:	2a6f      	cmp	r2, #111	; 0x6f
 8004a96:	d01f      	beq.n	8004ad8 <_printf_i+0xa8>
 8004a98:	2a70      	cmp	r2, #112	; 0x70
 8004a9a:	d1e0      	bne.n	8004a5e <_printf_i+0x2e>
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	6809      	ldr	r1, [r1, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	6022      	str	r2, [r4, #0]
 8004aa4:	e003      	b.n	8004aae <_printf_i+0x7e>
 8004aa6:	2a75      	cmp	r2, #117	; 0x75
 8004aa8:	d016      	beq.n	8004ad8 <_printf_i+0xa8>
 8004aaa:	2a78      	cmp	r2, #120	; 0x78
 8004aac:	d1d7      	bne.n	8004a5e <_printf_i+0x2e>
 8004aae:	0022      	movs	r2, r4
 8004ab0:	2178      	movs	r1, #120	; 0x78
 8004ab2:	3245      	adds	r2, #69	; 0x45
 8004ab4:	7011      	strb	r1, [r2, #0]
 8004ab6:	4e61      	ldr	r6, [pc, #388]	; (8004c3c <_printf_i+0x20c>)
 8004ab8:	e022      	b.n	8004b00 <_printf_i+0xd0>
 8004aba:	0025      	movs	r5, r4
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	3542      	adds	r5, #66	; 0x42
 8004ac0:	1d11      	adds	r1, r2, #4
 8004ac2:	6019      	str	r1, [r3, #0]
 8004ac4:	6813      	ldr	r3, [r2, #0]
 8004ac6:	702b      	strb	r3, [r5, #0]
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e065      	b.n	8004b98 <_printf_i+0x168>
 8004acc:	6808      	ldr	r0, [r1, #0]
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	0669      	lsls	r1, r5, #25
 8004ad2:	d5d3      	bpl.n	8004a7c <_printf_i+0x4c>
 8004ad4:	b200      	sxth	r0, r0
 8004ad6:	e7d1      	b.n	8004a7c <_printf_i+0x4c>
 8004ad8:	6819      	ldr	r1, [r3, #0]
 8004ada:	6825      	ldr	r5, [r4, #0]
 8004adc:	1d08      	adds	r0, r1, #4
 8004ade:	6018      	str	r0, [r3, #0]
 8004ae0:	6808      	ldr	r0, [r1, #0]
 8004ae2:	062e      	lsls	r6, r5, #24
 8004ae4:	d505      	bpl.n	8004af2 <_printf_i+0xc2>
 8004ae6:	4e54      	ldr	r6, [pc, #336]	; (8004c38 <_printf_i+0x208>)
 8004ae8:	2708      	movs	r7, #8
 8004aea:	2a6f      	cmp	r2, #111	; 0x6f
 8004aec:	d01b      	beq.n	8004b26 <_printf_i+0xf6>
 8004aee:	270a      	movs	r7, #10
 8004af0:	e019      	b.n	8004b26 <_printf_i+0xf6>
 8004af2:	066d      	lsls	r5, r5, #25
 8004af4:	d5f7      	bpl.n	8004ae6 <_printf_i+0xb6>
 8004af6:	b280      	uxth	r0, r0
 8004af8:	e7f5      	b.n	8004ae6 <_printf_i+0xb6>
 8004afa:	3145      	adds	r1, #69	; 0x45
 8004afc:	4e4e      	ldr	r6, [pc, #312]	; (8004c38 <_printf_i+0x208>)
 8004afe:	700a      	strb	r2, [r1, #0]
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	1d01      	adds	r1, r0, #4
 8004b06:	6800      	ldr	r0, [r0, #0]
 8004b08:	6019      	str	r1, [r3, #0]
 8004b0a:	0615      	lsls	r5, r2, #24
 8004b0c:	d521      	bpl.n	8004b52 <_printf_i+0x122>
 8004b0e:	07d3      	lsls	r3, r2, #31
 8004b10:	d502      	bpl.n	8004b18 <_printf_i+0xe8>
 8004b12:	2320      	movs	r3, #32
 8004b14:	431a      	orrs	r2, r3
 8004b16:	6022      	str	r2, [r4, #0]
 8004b18:	2710      	movs	r7, #16
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d103      	bne.n	8004b26 <_printf_i+0xf6>
 8004b1e:	2320      	movs	r3, #32
 8004b20:	6822      	ldr	r2, [r4, #0]
 8004b22:	439a      	bics	r2, r3
 8004b24:	6022      	str	r2, [r4, #0]
 8004b26:	0023      	movs	r3, r4
 8004b28:	2200      	movs	r2, #0
 8004b2a:	3343      	adds	r3, #67	; 0x43
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	6863      	ldr	r3, [r4, #4]
 8004b30:	60a3      	str	r3, [r4, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	db58      	blt.n	8004be8 <_printf_i+0x1b8>
 8004b36:	2204      	movs	r2, #4
 8004b38:	6821      	ldr	r1, [r4, #0]
 8004b3a:	4391      	bics	r1, r2
 8004b3c:	6021      	str	r1, [r4, #0]
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d154      	bne.n	8004bec <_printf_i+0x1bc>
 8004b42:	9d02      	ldr	r5, [sp, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d05a      	beq.n	8004bfe <_printf_i+0x1ce>
 8004b48:	0025      	movs	r5, r4
 8004b4a:	7833      	ldrb	r3, [r6, #0]
 8004b4c:	3542      	adds	r5, #66	; 0x42
 8004b4e:	702b      	strb	r3, [r5, #0]
 8004b50:	e055      	b.n	8004bfe <_printf_i+0x1ce>
 8004b52:	0655      	lsls	r5, r2, #25
 8004b54:	d5db      	bpl.n	8004b0e <_printf_i+0xde>
 8004b56:	b280      	uxth	r0, r0
 8004b58:	e7d9      	b.n	8004b0e <_printf_i+0xde>
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	680d      	ldr	r5, [r1, #0]
 8004b5e:	1d10      	adds	r0, r2, #4
 8004b60:	6949      	ldr	r1, [r1, #20]
 8004b62:	6018      	str	r0, [r3, #0]
 8004b64:	6813      	ldr	r3, [r2, #0]
 8004b66:	062e      	lsls	r6, r5, #24
 8004b68:	d501      	bpl.n	8004b6e <_printf_i+0x13e>
 8004b6a:	6019      	str	r1, [r3, #0]
 8004b6c:	e002      	b.n	8004b74 <_printf_i+0x144>
 8004b6e:	066d      	lsls	r5, r5, #25
 8004b70:	d5fb      	bpl.n	8004b6a <_printf_i+0x13a>
 8004b72:	8019      	strh	r1, [r3, #0]
 8004b74:	2300      	movs	r3, #0
 8004b76:	9d02      	ldr	r5, [sp, #8]
 8004b78:	6123      	str	r3, [r4, #16]
 8004b7a:	e04f      	b.n	8004c1c <_printf_i+0x1ec>
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	1d11      	adds	r1, r2, #4
 8004b80:	6019      	str	r1, [r3, #0]
 8004b82:	6815      	ldr	r5, [r2, #0]
 8004b84:	2100      	movs	r1, #0
 8004b86:	6862      	ldr	r2, [r4, #4]
 8004b88:	0028      	movs	r0, r5
 8004b8a:	f000 f859 	bl	8004c40 <memchr>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d001      	beq.n	8004b96 <_printf_i+0x166>
 8004b92:	1b40      	subs	r0, r0, r5
 8004b94:	6060      	str	r0, [r4, #4]
 8004b96:	6863      	ldr	r3, [r4, #4]
 8004b98:	6123      	str	r3, [r4, #16]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	9a02      	ldr	r2, [sp, #8]
 8004b9e:	7013      	strb	r3, [r2, #0]
 8004ba0:	e03c      	b.n	8004c1c <_printf_i+0x1ec>
 8004ba2:	6923      	ldr	r3, [r4, #16]
 8004ba4:	002a      	movs	r2, r5
 8004ba6:	9904      	ldr	r1, [sp, #16]
 8004ba8:	9803      	ldr	r0, [sp, #12]
 8004baa:	9d05      	ldr	r5, [sp, #20]
 8004bac:	47a8      	blx	r5
 8004bae:	1c43      	adds	r3, r0, #1
 8004bb0:	d03e      	beq.n	8004c30 <_printf_i+0x200>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	079b      	lsls	r3, r3, #30
 8004bb6:	d415      	bmi.n	8004be4 <_printf_i+0x1b4>
 8004bb8:	9b07      	ldr	r3, [sp, #28]
 8004bba:	68e0      	ldr	r0, [r4, #12]
 8004bbc:	4298      	cmp	r0, r3
 8004bbe:	da39      	bge.n	8004c34 <_printf_i+0x204>
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	e037      	b.n	8004c34 <_printf_i+0x204>
 8004bc4:	0022      	movs	r2, r4
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	3219      	adds	r2, #25
 8004bca:	9904      	ldr	r1, [sp, #16]
 8004bcc:	9803      	ldr	r0, [sp, #12]
 8004bce:	9e05      	ldr	r6, [sp, #20]
 8004bd0:	47b0      	blx	r6
 8004bd2:	1c43      	adds	r3, r0, #1
 8004bd4:	d02c      	beq.n	8004c30 <_printf_i+0x200>
 8004bd6:	3501      	adds	r5, #1
 8004bd8:	68e3      	ldr	r3, [r4, #12]
 8004bda:	9a07      	ldr	r2, [sp, #28]
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	42ab      	cmp	r3, r5
 8004be0:	dcf0      	bgt.n	8004bc4 <_printf_i+0x194>
 8004be2:	e7e9      	b.n	8004bb8 <_printf_i+0x188>
 8004be4:	2500      	movs	r5, #0
 8004be6:	e7f7      	b.n	8004bd8 <_printf_i+0x1a8>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d0ad      	beq.n	8004b48 <_printf_i+0x118>
 8004bec:	9d02      	ldr	r5, [sp, #8]
 8004bee:	0039      	movs	r1, r7
 8004bf0:	f7fb fb10 	bl	8000214 <__aeabi_uidivmod>
 8004bf4:	5c73      	ldrb	r3, [r6, r1]
 8004bf6:	3d01      	subs	r5, #1
 8004bf8:	702b      	strb	r3, [r5, #0]
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d1f7      	bne.n	8004bee <_printf_i+0x1be>
 8004bfe:	2f08      	cmp	r7, #8
 8004c00:	d109      	bne.n	8004c16 <_printf_i+0x1e6>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	07db      	lsls	r3, r3, #31
 8004c06:	d506      	bpl.n	8004c16 <_printf_i+0x1e6>
 8004c08:	6863      	ldr	r3, [r4, #4]
 8004c0a:	6922      	ldr	r2, [r4, #16]
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	dc02      	bgt.n	8004c16 <_printf_i+0x1e6>
 8004c10:	2330      	movs	r3, #48	; 0x30
 8004c12:	3d01      	subs	r5, #1
 8004c14:	702b      	strb	r3, [r5, #0]
 8004c16:	9b02      	ldr	r3, [sp, #8]
 8004c18:	1b5b      	subs	r3, r3, r5
 8004c1a:	6123      	str	r3, [r4, #16]
 8004c1c:	9b05      	ldr	r3, [sp, #20]
 8004c1e:	aa07      	add	r2, sp, #28
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	0021      	movs	r1, r4
 8004c24:	9b04      	ldr	r3, [sp, #16]
 8004c26:	9803      	ldr	r0, [sp, #12]
 8004c28:	f7ff fe94 	bl	8004954 <_printf_common>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d1b8      	bne.n	8004ba2 <_printf_i+0x172>
 8004c30:	2001      	movs	r0, #1
 8004c32:	4240      	negs	r0, r0
 8004c34:	b009      	add	sp, #36	; 0x24
 8004c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c38:	08005135 	.word	0x08005135
 8004c3c:	08005146 	.word	0x08005146

08004c40 <memchr>:
 8004c40:	b2c9      	uxtb	r1, r1
 8004c42:	1882      	adds	r2, r0, r2
 8004c44:	4290      	cmp	r0, r2
 8004c46:	d101      	bne.n	8004c4c <memchr+0xc>
 8004c48:	2000      	movs	r0, #0
 8004c4a:	4770      	bx	lr
 8004c4c:	7803      	ldrb	r3, [r0, #0]
 8004c4e:	428b      	cmp	r3, r1
 8004c50:	d0fb      	beq.n	8004c4a <memchr+0xa>
 8004c52:	3001      	adds	r0, #1
 8004c54:	e7f6      	b.n	8004c44 <memchr+0x4>

08004c56 <memcpy>:
 8004c56:	2300      	movs	r3, #0
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d100      	bne.n	8004c60 <memcpy+0xa>
 8004c5e:	bd10      	pop	{r4, pc}
 8004c60:	5ccc      	ldrb	r4, [r1, r3]
 8004c62:	54c4      	strb	r4, [r0, r3]
 8004c64:	3301      	adds	r3, #1
 8004c66:	e7f8      	b.n	8004c5a <memcpy+0x4>

08004c68 <memmove>:
 8004c68:	b510      	push	{r4, lr}
 8004c6a:	4288      	cmp	r0, r1
 8004c6c:	d902      	bls.n	8004c74 <memmove+0xc>
 8004c6e:	188b      	adds	r3, r1, r2
 8004c70:	4298      	cmp	r0, r3
 8004c72:	d303      	bcc.n	8004c7c <memmove+0x14>
 8004c74:	2300      	movs	r3, #0
 8004c76:	e007      	b.n	8004c88 <memmove+0x20>
 8004c78:	5c8b      	ldrb	r3, [r1, r2]
 8004c7a:	5483      	strb	r3, [r0, r2]
 8004c7c:	3a01      	subs	r2, #1
 8004c7e:	d2fb      	bcs.n	8004c78 <memmove+0x10>
 8004c80:	bd10      	pop	{r4, pc}
 8004c82:	5ccc      	ldrb	r4, [r1, r3]
 8004c84:	54c4      	strb	r4, [r0, r3]
 8004c86:	3301      	adds	r3, #1
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d1fa      	bne.n	8004c82 <memmove+0x1a>
 8004c8c:	e7f8      	b.n	8004c80 <memmove+0x18>
	...

08004c90 <_free_r>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	0005      	movs	r5, r0
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d010      	beq.n	8004cba <_free_r+0x2a>
 8004c98:	1f0c      	subs	r4, r1, #4
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	da00      	bge.n	8004ca2 <_free_r+0x12>
 8004ca0:	18e4      	adds	r4, r4, r3
 8004ca2:	0028      	movs	r0, r5
 8004ca4:	f000 f8d4 	bl	8004e50 <__malloc_lock>
 8004ca8:	4a1d      	ldr	r2, [pc, #116]	; (8004d20 <_free_r+0x90>)
 8004caa:	6813      	ldr	r3, [r2, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d105      	bne.n	8004cbc <_free_r+0x2c>
 8004cb0:	6063      	str	r3, [r4, #4]
 8004cb2:	6014      	str	r4, [r2, #0]
 8004cb4:	0028      	movs	r0, r5
 8004cb6:	f000 f8cc 	bl	8004e52 <__malloc_unlock>
 8004cba:	bd70      	pop	{r4, r5, r6, pc}
 8004cbc:	42a3      	cmp	r3, r4
 8004cbe:	d909      	bls.n	8004cd4 <_free_r+0x44>
 8004cc0:	6821      	ldr	r1, [r4, #0]
 8004cc2:	1860      	adds	r0, r4, r1
 8004cc4:	4283      	cmp	r3, r0
 8004cc6:	d1f3      	bne.n	8004cb0 <_free_r+0x20>
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	1841      	adds	r1, r0, r1
 8004cce:	6021      	str	r1, [r4, #0]
 8004cd0:	e7ee      	b.n	8004cb0 <_free_r+0x20>
 8004cd2:	0013      	movs	r3, r2
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	2a00      	cmp	r2, #0
 8004cd8:	d001      	beq.n	8004cde <_free_r+0x4e>
 8004cda:	42a2      	cmp	r2, r4
 8004cdc:	d9f9      	bls.n	8004cd2 <_free_r+0x42>
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	1858      	adds	r0, r3, r1
 8004ce2:	42a0      	cmp	r0, r4
 8004ce4:	d10b      	bne.n	8004cfe <_free_r+0x6e>
 8004ce6:	6820      	ldr	r0, [r4, #0]
 8004ce8:	1809      	adds	r1, r1, r0
 8004cea:	1858      	adds	r0, r3, r1
 8004cec:	6019      	str	r1, [r3, #0]
 8004cee:	4282      	cmp	r2, r0
 8004cf0:	d1e0      	bne.n	8004cb4 <_free_r+0x24>
 8004cf2:	6810      	ldr	r0, [r2, #0]
 8004cf4:	6852      	ldr	r2, [r2, #4]
 8004cf6:	1841      	adds	r1, r0, r1
 8004cf8:	6019      	str	r1, [r3, #0]
 8004cfa:	605a      	str	r2, [r3, #4]
 8004cfc:	e7da      	b.n	8004cb4 <_free_r+0x24>
 8004cfe:	42a0      	cmp	r0, r4
 8004d00:	d902      	bls.n	8004d08 <_free_r+0x78>
 8004d02:	230c      	movs	r3, #12
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	e7d5      	b.n	8004cb4 <_free_r+0x24>
 8004d08:	6821      	ldr	r1, [r4, #0]
 8004d0a:	1860      	adds	r0, r4, r1
 8004d0c:	4282      	cmp	r2, r0
 8004d0e:	d103      	bne.n	8004d18 <_free_r+0x88>
 8004d10:	6810      	ldr	r0, [r2, #0]
 8004d12:	6852      	ldr	r2, [r2, #4]
 8004d14:	1841      	adds	r1, r0, r1
 8004d16:	6021      	str	r1, [r4, #0]
 8004d18:	6062      	str	r2, [r4, #4]
 8004d1a:	605c      	str	r4, [r3, #4]
 8004d1c:	e7ca      	b.n	8004cb4 <_free_r+0x24>
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	200000a4 	.word	0x200000a4

08004d24 <_malloc_r>:
 8004d24:	2303      	movs	r3, #3
 8004d26:	b570      	push	{r4, r5, r6, lr}
 8004d28:	1ccd      	adds	r5, r1, #3
 8004d2a:	439d      	bics	r5, r3
 8004d2c:	3508      	adds	r5, #8
 8004d2e:	0006      	movs	r6, r0
 8004d30:	2d0c      	cmp	r5, #12
 8004d32:	d21e      	bcs.n	8004d72 <_malloc_r+0x4e>
 8004d34:	250c      	movs	r5, #12
 8004d36:	42a9      	cmp	r1, r5
 8004d38:	d81d      	bhi.n	8004d76 <_malloc_r+0x52>
 8004d3a:	0030      	movs	r0, r6
 8004d3c:	f000 f888 	bl	8004e50 <__malloc_lock>
 8004d40:	4a25      	ldr	r2, [pc, #148]	; (8004dd8 <_malloc_r+0xb4>)
 8004d42:	6814      	ldr	r4, [r2, #0]
 8004d44:	0021      	movs	r1, r4
 8004d46:	2900      	cmp	r1, #0
 8004d48:	d119      	bne.n	8004d7e <_malloc_r+0x5a>
 8004d4a:	4c24      	ldr	r4, [pc, #144]	; (8004ddc <_malloc_r+0xb8>)
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d103      	bne.n	8004d5a <_malloc_r+0x36>
 8004d52:	0030      	movs	r0, r6
 8004d54:	f000 f86a 	bl	8004e2c <_sbrk_r>
 8004d58:	6020      	str	r0, [r4, #0]
 8004d5a:	0029      	movs	r1, r5
 8004d5c:	0030      	movs	r0, r6
 8004d5e:	f000 f865 	bl	8004e2c <_sbrk_r>
 8004d62:	1c43      	adds	r3, r0, #1
 8004d64:	d12b      	bne.n	8004dbe <_malloc_r+0x9a>
 8004d66:	230c      	movs	r3, #12
 8004d68:	0030      	movs	r0, r6
 8004d6a:	6033      	str	r3, [r6, #0]
 8004d6c:	f000 f871 	bl	8004e52 <__malloc_unlock>
 8004d70:	e003      	b.n	8004d7a <_malloc_r+0x56>
 8004d72:	2d00      	cmp	r5, #0
 8004d74:	dadf      	bge.n	8004d36 <_malloc_r+0x12>
 8004d76:	230c      	movs	r3, #12
 8004d78:	6033      	str	r3, [r6, #0]
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	bd70      	pop	{r4, r5, r6, pc}
 8004d7e:	680b      	ldr	r3, [r1, #0]
 8004d80:	1b5b      	subs	r3, r3, r5
 8004d82:	d419      	bmi.n	8004db8 <_malloc_r+0x94>
 8004d84:	2b0b      	cmp	r3, #11
 8004d86:	d903      	bls.n	8004d90 <_malloc_r+0x6c>
 8004d88:	600b      	str	r3, [r1, #0]
 8004d8a:	18cc      	adds	r4, r1, r3
 8004d8c:	6025      	str	r5, [r4, #0]
 8004d8e:	e003      	b.n	8004d98 <_malloc_r+0x74>
 8004d90:	684b      	ldr	r3, [r1, #4]
 8004d92:	428c      	cmp	r4, r1
 8004d94:	d10d      	bne.n	8004db2 <_malloc_r+0x8e>
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	0030      	movs	r0, r6
 8004d9a:	f000 f85a 	bl	8004e52 <__malloc_unlock>
 8004d9e:	0020      	movs	r0, r4
 8004da0:	2207      	movs	r2, #7
 8004da2:	300b      	adds	r0, #11
 8004da4:	1d23      	adds	r3, r4, #4
 8004da6:	4390      	bics	r0, r2
 8004da8:	1ac3      	subs	r3, r0, r3
 8004daa:	d0e7      	beq.n	8004d7c <_malloc_r+0x58>
 8004dac:	425a      	negs	r2, r3
 8004dae:	50e2      	str	r2, [r4, r3]
 8004db0:	e7e4      	b.n	8004d7c <_malloc_r+0x58>
 8004db2:	6063      	str	r3, [r4, #4]
 8004db4:	000c      	movs	r4, r1
 8004db6:	e7ef      	b.n	8004d98 <_malloc_r+0x74>
 8004db8:	000c      	movs	r4, r1
 8004dba:	6849      	ldr	r1, [r1, #4]
 8004dbc:	e7c3      	b.n	8004d46 <_malloc_r+0x22>
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	1cc4      	adds	r4, r0, #3
 8004dc2:	439c      	bics	r4, r3
 8004dc4:	42a0      	cmp	r0, r4
 8004dc6:	d0e1      	beq.n	8004d8c <_malloc_r+0x68>
 8004dc8:	1a21      	subs	r1, r4, r0
 8004dca:	0030      	movs	r0, r6
 8004dcc:	f000 f82e 	bl	8004e2c <_sbrk_r>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d1db      	bne.n	8004d8c <_malloc_r+0x68>
 8004dd4:	e7c7      	b.n	8004d66 <_malloc_r+0x42>
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	200000a4 	.word	0x200000a4
 8004ddc:	200000a8 	.word	0x200000a8

08004de0 <_realloc_r>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	0007      	movs	r7, r0
 8004de4:	000d      	movs	r5, r1
 8004de6:	0016      	movs	r6, r2
 8004de8:	2900      	cmp	r1, #0
 8004dea:	d105      	bne.n	8004df8 <_realloc_r+0x18>
 8004dec:	0011      	movs	r1, r2
 8004dee:	f7ff ff99 	bl	8004d24 <_malloc_r>
 8004df2:	0004      	movs	r4, r0
 8004df4:	0020      	movs	r0, r4
 8004df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df8:	2a00      	cmp	r2, #0
 8004dfa:	d103      	bne.n	8004e04 <_realloc_r+0x24>
 8004dfc:	f7ff ff48 	bl	8004c90 <_free_r>
 8004e00:	0034      	movs	r4, r6
 8004e02:	e7f7      	b.n	8004df4 <_realloc_r+0x14>
 8004e04:	f000 f826 	bl	8004e54 <_malloc_usable_size_r>
 8004e08:	002c      	movs	r4, r5
 8004e0a:	42b0      	cmp	r0, r6
 8004e0c:	d2f2      	bcs.n	8004df4 <_realloc_r+0x14>
 8004e0e:	0031      	movs	r1, r6
 8004e10:	0038      	movs	r0, r7
 8004e12:	f7ff ff87 	bl	8004d24 <_malloc_r>
 8004e16:	1e04      	subs	r4, r0, #0
 8004e18:	d0ec      	beq.n	8004df4 <_realloc_r+0x14>
 8004e1a:	0029      	movs	r1, r5
 8004e1c:	0032      	movs	r2, r6
 8004e1e:	f7ff ff1a 	bl	8004c56 <memcpy>
 8004e22:	0029      	movs	r1, r5
 8004e24:	0038      	movs	r0, r7
 8004e26:	f7ff ff33 	bl	8004c90 <_free_r>
 8004e2a:	e7e3      	b.n	8004df4 <_realloc_r+0x14>

08004e2c <_sbrk_r>:
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	b570      	push	{r4, r5, r6, lr}
 8004e30:	4c06      	ldr	r4, [pc, #24]	; (8004e4c <_sbrk_r+0x20>)
 8004e32:	0005      	movs	r5, r0
 8004e34:	0008      	movs	r0, r1
 8004e36:	6023      	str	r3, [r4, #0]
 8004e38:	f7fb ffde 	bl	8000df8 <_sbrk>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d103      	bne.n	8004e48 <_sbrk_r+0x1c>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d000      	beq.n	8004e48 <_sbrk_r+0x1c>
 8004e46:	602b      	str	r3, [r5, #0]
 8004e48:	bd70      	pop	{r4, r5, r6, pc}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	200002d8 	.word	0x200002d8

08004e50 <__malloc_lock>:
 8004e50:	4770      	bx	lr

08004e52 <__malloc_unlock>:
 8004e52:	4770      	bx	lr

08004e54 <_malloc_usable_size_r>:
 8004e54:	1f0b      	subs	r3, r1, #4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	1f18      	subs	r0, r3, #4
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	da01      	bge.n	8004e62 <_malloc_usable_size_r+0xe>
 8004e5e:	580b      	ldr	r3, [r1, r0]
 8004e60:	18c0      	adds	r0, r0, r3
 8004e62:	4770      	bx	lr

08004e64 <_init>:
 8004e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6a:	bc08      	pop	{r3}
 8004e6c:	469e      	mov	lr, r3
 8004e6e:	4770      	bx	lr

08004e70 <_fini>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e76:	bc08      	pop	{r3}
 8004e78:	469e      	mov	lr, r3
 8004e7a:	4770      	bx	lr
